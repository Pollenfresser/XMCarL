
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	a9 07 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 0a 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008c10 	.word	0x0c008c10
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e0 	.word	0x000009e0
 8000254:	0c0095f0 	.word	0x0c0095f0
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008c10 	.word	0x0c008c10
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008c10 	.word	0x0c008c10
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e0 	.word	0x200009e0
 800027c:	00000098 	.word	0x00000098
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08000d8d 	.word	0x08000d8d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08001a65 	.word	0x08001a65
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080007e5 	.word	0x080007e5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
 80002c0:	4613      	mov	r3, r2
 80002c2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80002c4:	78f8      	ldrb	r0, [r7, #3]
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	3306      	adds	r3, #6
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80002d6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80002d8:	431a      	orrs	r2, r3
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	1d83      	adds	r3, r0, #6
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	440b      	add	r3, r1
 80002e2:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80002fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031c:	f023 020f 	bic.w	r2, r3, #15
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	431a      	orrs	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 800033c:	2104      	movs	r1, #4
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ffe4 	bl	800030c <XMC_USIC_CH_SetMode>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
 8000358:	4613      	mov	r3, r2
 800035a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 800035c:	78f8      	ldrb	r0, [r7, #3]
 800035e:	78fb      	ldrb	r3, [r7, #3]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	3306      	adds	r3, #6
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	4413      	add	r3, r2
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800036e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	1d83      	adds	r3, r0, #6
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	440b      	add	r3, r1
 800037a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800037c:	78ba      	ldrb	r2, [r7, #2]
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	4619      	mov	r1, r3
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff ff96 	bl	80002b4 <XMC_USIC_CH_SetInputSource>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <remote_i2c_to_mems_init>:
/**
 * This function configures the I2C interface to communicate via pins P0_5
 * 	& P0_11
 * @return [description]
 */
uint8_t remote_i2c_to_mems_init(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	XMC_I2C_CH_Init(XMC_I2C1_CH0, &i2c_cfg);
 80003d0:	490e      	ldr	r1, [pc, #56]	; (800040c <remote_i2c_to_mems_init+0x40>)
 80003d2:	480f      	ldr	r0, [pc, #60]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003d4:	f000 ff60 	bl	8001298 <XMC_I2C_CH_Init>
	XMC_I2C_CH_SetInputSource(XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA,
 80003d8:	2201      	movs	r2, #1
 80003da:	2100      	movs	r1, #0
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003de:	f7ff ffb5 	bl	800034c <XMC_I2C_CH_SetInputSource>
	USIC1_C0_DX0_P0_5);
	XMC_I2C_CH_SetInputSource(XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL,
 80003e2:	2206      	movs	r2, #6
 80003e4:	2101      	movs	r1, #1
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003e8:	f7ff ffb0 	bl	800034c <XMC_I2C_CH_SetInputSource>
	USIC1_C0_DX1_SCLKOUT);
	XMC_I2C_CH_Start(XMC_I2C1_CH0);
 80003ec:	4808      	ldr	r0, [pc, #32]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003ee:	f7ff ffa1 	bl	8000334 <XMC_I2C_CH_Start>
	XMC_GPIO_Init (P0_11, &i2c_scl);
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <remote_i2c_to_mems_init+0x48>)
 80003f4:	210b      	movs	r1, #11
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <remote_i2c_to_mems_init+0x4c>)
 80003f8:	f000 fe8a 	bl	8001110 <XMC_GPIO_Init>
	XMC_GPIO_Init (P0_5, &i2c_sda);
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <remote_i2c_to_mems_init+0x50>)
 80003fe:	2105      	movs	r1, #5
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <remote_i2c_to_mems_init+0x4c>)
 8000402:	f000 fe85 	bl	8001110 <XMC_GPIO_Init>

	return 0;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000030 	.word	0x20000030
 8000410:	48020000 	.word	0x48020000
 8000414:	20000024 	.word	0x20000024
 8000418:	48028000 	.word	0x48028000
 800041c:	20000018 	.word	0x20000018

08000420 <remote_i2c_write>:
 * This function sends a byte via the I2C interface and waits for the ack
 * @param  channel [description]
 * @param  data [description]
 * @return either the sent data or 0xFFFF on error
 */
uint16_t remote_i2c_write(XMC_USIC_CH_t * const channel, uint8_t data) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]

	XMC_I2C_CH_MasterTransmit(channel, data);
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	4619      	mov	r1, r3
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f001 f843 	bl	80014bc <XMC_I2C_CH_MasterTransmit>
	if(remote_i2c_wait_for_ack(channel)) {
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 f842 	bl	80004c0 <remote_i2c_wait_for_ack>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <remote_i2c_write+0x28>
		return 0xFFFF;
 8000442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000446:	e001      	b.n	800044c <remote_i2c_write+0x2c>
	}

	return data;
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	b29b      	uxth	r3, r3

}
 800044c:	4618      	mov	r0, r3
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <remote_i2c_read>:
 * 	read and a NACK of the master is sent
 * @param  channel I2C channel to be read of
 * @param  id address of the slave
 * @return either the received value or 0xFFFF on error
 */
uint16_t remote_i2c_read(XMC_USIC_CH_t * const channel, uint8_t id) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]

	uint8_t recv = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	73fb      	strb	r3, [r7, #15]

	XMC_I2C_CH_MasterRepeatedStart(channel, id, XMC_I2C_CH_CMD_READ);
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	b29b      	uxth	r3, r3
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 ffcb 	bl	8001408 <XMC_I2C_CH_MasterRepeatedStart>
	if(remote_i2c_wait_for_ack(channel)) {
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f824 	bl	80004c0 <remote_i2c_wait_for_ack>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d002      	beq.n	8000484 <remote_i2c_read+0x30>
		return 0xFFFF;
 800047e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000482:	e018      	b.n	80004b6 <remote_i2c_read+0x62>
	}



	XMC_I2C_CH_MasterReceiveNack(channel);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f001 f865 	bl	8001554 <XMC_I2C_CH_MasterReceiveNack>

	while ((XMC_USIC_CH_GetReceiveBufferStatus(channel)
 800048a:	bf00      	nop
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ff2f 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000492:	4603      	mov	r3, r0
 8000494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000498:	d006      	beq.n	80004a8 <remote_i2c_read+0x54>
			!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)
			&& ((uint32_t) XMC_USIC_CH_GetReceiveBufferStatus(channel)
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ff28 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 80004a0:	4603      	mov	r3, r0
 80004a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004a6:	d1f1      	bne.n	800048c <remote_i2c_read+0x38>
					!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
		;

	recv = XMC_I2C_CH_GetReceivedData(channel);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f001 f879 	bl	80015a0 <XMC_I2C_CH_GetReceivedData>
 80004ae:	4603      	mov	r3, r0
 80004b0:	73fb      	strb	r3, [r7, #15]

	return recv;
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	b29b      	uxth	r3, r3

}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop

080004c0 <remote_i2c_wait_for_ack>:
 * Waits for a ack of the slave, if no ack is received after 5000 cycles an
 * 	error is returned
 * @param  channel the channel on which the ack shall be received
 * @return 0 on success, 1 on failure
 */
uint8_t remote_i2c_wait_for_ack(XMC_USIC_CH_t * const channel) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	uint16_t timeout_counter = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	81fb      	strh	r3, [r7, #14]

	while ((XMC_I2C_CH_GetStatusFlag(channel)
 80004cc:	e009      	b.n	80004e2 <remote_i2c_wait_for_ack+0x22>
			& XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
		/* wait for ACK */
		timeout_counter++;
 80004ce:	89fb      	ldrh	r3, [r7, #14]
 80004d0:	3301      	adds	r3, #1
 80004d2:	81fb      	strh	r3, [r7, #14]
		if(timeout_counter > 5000) {
 80004d4:	89fb      	ldrh	r3, [r7, #14]
 80004d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80004da:	4293      	cmp	r3, r2
 80004dc:	d901      	bls.n	80004e2 <remote_i2c_wait_for_ack+0x22>
			return 1;
 80004de:	2301      	movs	r3, #1
 80004e0:	e00d      	b.n	80004fe <remote_i2c_wait_for_ack+0x3e>
 */
uint8_t remote_i2c_wait_for_ack(XMC_USIC_CH_t * const channel) {

	uint16_t timeout_counter = 0;

	while ((XMC_I2C_CH_GetStatusFlag(channel)
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ff54 	bl	8000390 <XMC_I2C_CH_GetStatusFlag>
 80004e8:	4603      	mov	r3, r0
			& XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80004ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 */
uint8_t remote_i2c_wait_for_ack(XMC_USIC_CH_t * const channel) {

	uint16_t timeout_counter = 0;

	while ((XMC_I2C_CH_GetStatusFlag(channel)
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0ed      	beq.n	80004ce <remote_i2c_wait_for_ack+0xe>
		timeout_counter++;
		if(timeout_counter > 5000) {
			return 1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80004f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ff56 	bl	80003a8 <XMC_I2C_CH_ClearStatusFlag>
	return 0;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop

08000508 <remote_i2c_write_read>:
 * @param  i2c_data data to be sent in a write access
 * @param  write_read distinction between write or read access 0 = write / 1 = read
 * @return sent or received data or 0xFFFF in case of an error
 */
uint16_t remote_i2c_write_read(uint8_t id, uint8_t reg_addr, uint8_t i2c_data,
		_Bool write_read) {
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4604      	mov	r4, r0
 8000510:	4608      	mov	r0, r1
 8000512:	4611      	mov	r1, r2
 8000514:	461a      	mov	r2, r3
 8000516:	4623      	mov	r3, r4
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	4603      	mov	r3, r0
 800051c:	71bb      	strb	r3, [r7, #6]
 800051e:	460b      	mov	r3, r1
 8000520:	717b      	strb	r3, [r7, #5]
 8000522:	4613      	mov	r3, r2
 8000524:	713b      	strb	r3, [r7, #4]

	XMC_USIC_CH_t *channel;
	channel = XMC_I2C1_CH0;
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <remote_i2c_write_read+0x98>)
 8000528:	60bb      	str	r3, [r7, #8]

	uint16_t ret = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	81fb      	strh	r3, [r7, #14]
	 * 	the desired slave
	 * @param channel I2C Channel on which the data should be sent
	 * @param id Address of the desired slave
	 * @param XMC_I2C_CH_CMD_WRITE distinction between read and write
	 */
	XMC_I2C_CH_MasterStart(channel, id, XMC_I2C_CH_CMD_WRITE);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	b29b      	uxth	r3, r3
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f000 ff32 	bl	80013a0 <XMC_I2C_CH_MasterStart>
	if(remote_i2c_wait_for_ack(channel)) {
 800053c:	68b8      	ldr	r0, [r7, #8]
 800053e:	f7ff ffbf 	bl	80004c0 <remote_i2c_wait_for_ack>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <remote_i2c_write_read+0x46>
		return 0xFFFF;
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	e023      	b.n	8000596 <remote_i2c_write_read+0x8e>
	}

	XMC_I2C_CH_MasterTransmit(channel, reg_addr);
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	4619      	mov	r1, r3
 8000552:	68b8      	ldr	r0, [r7, #8]
 8000554:	f000 ffb2 	bl	80014bc <XMC_I2C_CH_MasterTransmit>
	if(remote_i2c_wait_for_ack(channel)) {
 8000558:	68b8      	ldr	r0, [r7, #8]
 800055a:	f7ff ffb1 	bl	80004c0 <remote_i2c_wait_for_ack>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <remote_i2c_write_read+0x62>
		return 0xFFFF;
 8000564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000568:	e015      	b.n	8000596 <remote_i2c_write_read+0x8e>
	}

	if (write_read) { // read = 1
 800056a:	793b      	ldrb	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d007      	beq.n	8000580 <remote_i2c_write_read+0x78>
		ret = remote_i2c_read(channel, id);
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4619      	mov	r1, r3
 8000574:	68b8      	ldr	r0, [r7, #8]
 8000576:	f7ff ff6d 	bl	8000454 <remote_i2c_read>
 800057a:	4603      	mov	r3, r0
 800057c:	81fb      	strh	r3, [r7, #14]
 800057e:	e006      	b.n	800058e <remote_i2c_write_read+0x86>
	} else { // write = 0
		ret = remote_i2c_write(channel, i2c_data);
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	4619      	mov	r1, r3
 8000584:	68b8      	ldr	r0, [r7, #8]
 8000586:	f7ff ff4b 	bl	8000420 <remote_i2c_write>
 800058a:	4603      	mov	r3, r0
 800058c:	81fb      	strh	r3, [r7, #14]
	}

	XMC_I2C_CH_MasterStop(channel);
 800058e:	68b8      	ldr	r0, [r7, #8]
 8000590:	f000 ff6e 	bl	8001470 <XMC_I2C_CH_MasterStop>
	return ret;
 8000594:	89fb      	ldrh	r3, [r7, #14]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	bf00      	nop
 80005a0:	48020000 	.word	0x48020000

080005a4 <remote_i2c_read_xy>:


uint8_t remote_i2c_read_xy(uint8_t id, uint8_t reg_addr, uint8_t *received) {
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	603a      	str	r2, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	460b      	mov	r3, r1
 80005b2:	71bb      	strb	r3, [r7, #6]
	XMC_USIC_CH_t *channel;
	channel = XMC_I2C1_CH0;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <remote_i2c_read_xy+0xbc>)
 80005b6:	60bb      	str	r3, [r7, #8]
	 * 	the desired slave
	 * @param channel I2C Channel on which the data should be sent
	 * @param id Address of the desired slave
	 * @param XMC_I2C_CH_CMD_WRITE distinction between read and write
	 */
	XMC_I2C_CH_MasterStart(channel, id, XMC_I2C_CH_CMD_WRITE);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	68b8      	ldr	r0, [r7, #8]
 80005c2:	f000 feed 	bl	80013a0 <XMC_I2C_CH_MasterStart>
	if(remote_i2c_wait_for_ack(channel)) {
 80005c6:	68b8      	ldr	r0, [r7, #8]
 80005c8:	f7ff ff7a 	bl	80004c0 <remote_i2c_wait_for_ack>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <remote_i2c_read_xy+0x32>
		return 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e03f      	b.n	8000656 <remote_i2c_read_xy+0xb2>
	}

	XMC_I2C_CH_MasterTransmit(channel, reg_addr);
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	4619      	mov	r1, r3
 80005da:	68b8      	ldr	r0, [r7, #8]
 80005dc:	f000 ff6e 	bl	80014bc <XMC_I2C_CH_MasterTransmit>
	if(remote_i2c_wait_for_ack(channel)) {
 80005e0:	68b8      	ldr	r0, [r7, #8]
 80005e2:	f7ff ff6d 	bl	80004c0 <remote_i2c_wait_for_ack>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <remote_i2c_read_xy+0x4c>
		return 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e032      	b.n	8000656 <remote_i2c_read_xy+0xb2>
	}

	XMC_I2C_CH_MasterRepeatedStart(channel, id, XMC_I2C_CH_CMD_READ);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	68b8      	ldr	r0, [r7, #8]
 80005fa:	f000 ff05 	bl	8001408 <XMC_I2C_CH_MasterRepeatedStart>
	if(remote_i2c_wait_for_ack(channel)) {
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f7ff ff5e 	bl	80004c0 <remote_i2c_wait_for_ack>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <remote_i2c_read_xy+0x6a>
		return 1;
 800060a:	2301      	movs	r3, #1
 800060c:	e023      	b.n	8000656 <remote_i2c_read_xy+0xb2>


	/*
	 * Waits until valid data is available on reception register
	 */
	for(uint8_t receive_counter = 0; receive_counter < 4; receive_counter++)
 800060e:	2300      	movs	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	e01c      	b.n	800064e <remote_i2c_read_xy+0xaa>
	{
		if(receive_counter < 3) {
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d803      	bhi.n	8000622 <remote_i2c_read_xy+0x7e>
			XMC_I2C_CH_MasterReceiveAck(channel);	// is sent as soon as channel is not busy
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f000 ff74 	bl	8001508 <XMC_I2C_CH_MasterReceiveAck>
 8000620:	e002      	b.n	8000628 <remote_i2c_read_xy+0x84>
		} else {
			XMC_I2C_CH_MasterReceiveNack(channel);
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f000 ff96 	bl	8001554 <XMC_I2C_CH_MasterReceiveNack>
		}
		while ((XMC_USIC_CH_GetReceiveBufferStatus(channel)
 8000628:	bf00      	nop
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f7ff fe60 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000630:	4603      	mov	r3, r0
 8000632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000636:	d1f8      	bne.n	800062a <remote_i2c_read_xy+0x86>
				!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1));

		received[receive_counter] = XMC_I2C_CH_GetReceivedData(channel);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	18d4      	adds	r4, r2, r3
 800063e:	68b8      	ldr	r0, [r7, #8]
 8000640:	f000 ffae 	bl	80015a0 <XMC_I2C_CH_GetReceivedData>
 8000644:	4603      	mov	r3, r0
 8000646:	7023      	strb	r3, [r4, #0]


	/*
	 * Waits until valid data is available on reception register
	 */
	for(uint8_t receive_counter = 0; receive_counter < 4; receive_counter++)
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	3301      	adds	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d9df      	bls.n	8000614 <remote_i2c_read_xy+0x70>
				!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1));

		received[receive_counter] = XMC_I2C_CH_GetReceivedData(channel);
	}

	return 0;
 8000654:	2300      	movs	r3, #0

}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	48020000 	.word	0x48020000

08000664 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800066c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000670:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	2b00      	cmp	r3, #0
 800067a:	d013      	beq.n	80006a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800067c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000680:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000684:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00b      	beq.n	80006a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800068c:	e000      	b.n	8000690 <ITM_SendChar+0x2c>
    {
      __NOP();
 800068e:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f9      	beq.n	800068e <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800069a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e009      	b.n	80006da <_write+0x26>
		ITM_SendChar ( (*buf++));
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	60ba      	str	r2, [r7, #8]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffc8 	bl	8000664 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbf1      	blt.n	80006c6 <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	490d      	ldr	r1, [pc, #52]	; (8000738 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	4909      	ldr	r1, [pc, #36]	; (800073c <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
  }
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	213f      	movs	r1, #63	; 0x3f
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ffc2 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000796:	409a      	lsls	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	605a      	str	r2, [r3, #4]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:
 * Start of user functions
 *****************************************************************************/


void SysTick_Handler (void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	static uint32_t ticks = 0;

	ticks++;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <SysTick_Handler+0x34>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SysTick_Handler+0x34>)
 80007b4:	6013      	str	r3, [r2, #0]
	if (ticks >= TICKS_WAIT) {
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <SysTick_Handler+0x34>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007be:	d30a      	bcc.n	80007d6 <SysTick_Handler+0x2e>
		XMC_GPIO_ToggleOutput(LED1);
 80007c0:	2101      	movs	r1, #1
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <SysTick_Handler+0x38>)
 80007c4:	f7ff ffde 	bl	8000784 <XMC_GPIO_ToggleOutput>
		XMC_GPIO_ToggleOutput(LED2);
 80007c8:	2100      	movs	r1, #0
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <SysTick_Handler+0x38>)
 80007cc:	f7ff ffda 	bl	8000784 <XMC_GPIO_ToggleOutput>

		ticks = 0;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <SysTick_Handler+0x34>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
	}
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000a30 	.word	0x20000a30
 80007e0:	48028100 	.word	0x48028100

080007e4 <main>:


int main (void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0

	uint8_t data[4];
	uint8_t mems_status;

	XMC_GPIO_CONFIG_t led_config;
	led_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	713b      	strb	r3, [r7, #4]
	led_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 80007ee:	2301      	movs	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
	led_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80007f2:	2304      	movs	r3, #4
 80007f4:	733b      	strb	r3, [r7, #12]
	XMC_GPIO_Init(LED1, &led_config);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	461a      	mov	r2, r3
 80007fa:	2101      	movs	r1, #1
 80007fc:	481d      	ldr	r0, [pc, #116]	; (8000874 <main+0x90>)
 80007fe:	f000 fc87 	bl	8001110 <XMC_GPIO_Init>

	led_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000806:	60bb      	str	r3, [r7, #8]
	XMC_GPIO_Init(LED2, &led_config);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	461a      	mov	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	4819      	ldr	r0, [pc, #100]	; (8000874 <main+0x90>)
 8000810:	f000 fc7e 	bl	8001110 <XMC_GPIO_Init>

	SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <main+0x94>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a18      	ldr	r2, [pc, #96]	; (800087c <main+0x98>)
 800081a:	fba2 2303 	umull	r2, r3, r2, r3
 800081e:	099b      	lsrs	r3, r3, #6
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff8d 	bl	8000740 <SysTick_Config>

	remote_i2c_to_mems_init();
 8000826:	f7ff fdd1 	bl	80003cc <remote_i2c_to_mems_init>
	remote_uart_to_pc_init();
 800082a:	f000 f8fb 	bl	8000a24 <remote_uart_to_pc_init>
	remote_mems_init();
 800082e:	f000 f9cd 	bl	8000bcc <remote_mems_init>

	while (1) {
		//if(DATA_READY)
		//{
			mems_status = remote_i2c_write_read(MEMS_ADDRESS, MEMS_STATUS_REG2, 0, 1);
 8000832:	2301      	movs	r3, #1
 8000834:	2200      	movs	r2, #0
 8000836:	2127      	movs	r1, #39	; 0x27
 8000838:	2030      	movs	r0, #48	; 0x30
 800083a:	f7ff fe65 	bl	8000508 <remote_i2c_write_read>
 800083e:	4603      	mov	r3, r0
 8000840:	75fb      	strb	r3, [r7, #23]
			if(mems_status & (1 << 3))
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <main+0x80>
			{
				remote_i2c_read_xy(MEMS_ADDRESS, MEMS_OUT_X_L, data);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	461a      	mov	r2, r3
 8000852:	2128      	movs	r1, #40	; 0x28
 8000854:	2030      	movs	r0, #48	; 0x30
 8000856:	f7ff fea5 	bl	80005a4 <remote_i2c_read_xy>
				remote_transmit_data(data);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f9c6 	bl	8000bf0 <remote_transmit_data>
			}
		//}
		#if DEBUG
			printf("data: %s", data);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <main+0x9c>)
 800086c:	f001 fa0a 	bl	8001c84 <printf>
		#endif

	}
 8000870:	e7df      	b.n	8000832 <main+0x4e>
 8000872:	bf00      	nop
 8000874:	48028100 	.word	0x48028100
 8000878:	2000ffc0 	.word	0x2000ffc0
 800087c:	10624dd3 	.word	0x10624dd3
 8000880:	08008948 	.word	0x08008948

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <__NVIC_EnableIRQ+0x38>)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	095b      	lsrs	r3, r3, #5
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	f002 021f 	and.w	r2, r2, #31
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	490d      	ldr	r1, [pc, #52]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	4909      	ldr	r1, [pc, #36]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
  }
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
 8000920:	4613      	mov	r3, r2
 8000922:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000924:	78f8      	ldrb	r0, [r7, #3]
 8000926:	78fb      	ldrb	r3, [r7, #3]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	3306      	adds	r3, #6
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000936:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000938:	431a      	orrs	r2, r3
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	1d83      	adds	r3, r0, #6
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000962:	b2db      	uxtb	r3, r3
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	f023 030f 	bic.w	r3, r3, #15
 80009d0:	f043 0202 	orr.w	r2, r3, #2
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
 80009f0:	4613      	mov	r3, r2
 80009f2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 80009f4:	78f8      	ldrb	r0, [r7, #3]
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	3306      	adds	r3, #6
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	1d83      	adds	r3, r0, #6
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000a10:	78ba      	ldrb	r2, [r7, #2]
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff7c 	bl	8000914 <XMC_USIC_CH_SetInputSource>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <remote_uart_to_pc_init>:

/**
 * Configures the UART module with 115200 baud, 1 stopbit, 8 databits and no parity
 */
void remote_uart_to_pc_init()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USIC channels initialization */
	XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000a28:	491c      	ldr	r1, [pc, #112]	; (8000a9c <remote_uart_to_pc_init+0x78>)
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a2c:	f000 fdf0 	bl	8001610 <XMC_UART_CH_Init>

	XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000a30:	2201      	movs	r2, #1
 8000a32:	2100      	movs	r1, #0
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a36:	f7ff ffd5 	bl	80009e4 <XMC_UART_CH_SetInputSource>
	/* FIFOs initialization for both channels:
	 *  8 entries for TxFIFO from point 0, LIMIT=1
	 *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
	 *                                              been received)
	 *  */
	XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4817      	ldr	r0, [pc, #92]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a42:	f000 ff75 	bl	8001930 <XMC_USIC_CH_TXFIFO_Configure>
	XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000a46:	2300      	movs	r3, #0
 8000a48:	2203      	movs	r2, #3
 8000a4a:	2108      	movs	r1, #8
 8000a4c:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a4e:	f000 ff97 	bl	8001980 <XMC_USIC_CH_RXFIFO_Configure>

	/* Enabling events for TX FIFO and RX FIFO */
	XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000a52:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a58:	f7ff ff8a 	bl	8000970 <XMC_USIC_CH_RXFIFO_EnableEvent>
					XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
					XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

	/* Connecting the previously enabled events to a Service Request line number */
	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a62:	f000 ffb7 	bl	80019d4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2113      	movs	r1, #19
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a6c:	f000 ffb2 	bl	80019d4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

	/* Start USIC operation as UART */
	XMC_UART_CH_Start (XMC_UART0_CH0);
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <remote_uart_to_pc_init+0x7c>)
 8000a72:	f7ff ffa5 	bl	80009c0 <XMC_UART_CH_Start>

	/*Initialization of the necessary ports*/
	XMC_GPIO_Init (UART_TX, &uart_tx);
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <remote_uart_to_pc_init+0x80>)
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <remote_uart_to_pc_init+0x84>)
 8000a7c:	f000 fb48 	bl	8001110 <XMC_GPIO_Init>
	XMC_GPIO_Init (UART_RX, &uart_rx);
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <remote_uart_to_pc_init+0x88>)
 8000a82:	2104      	movs	r1, #4
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <remote_uart_to_pc_init+0x84>)
 8000a86:	f000 fb43 	bl	8001110 <XMC_GPIO_Init>

	/* Configuring priority and enabling NVIC IRQ for the defined service request
	line number */
	NVIC_SetPriority (USIC0_0_IRQn, 63U);
 8000a8a:	213f      	movs	r1, #63	; 0x3f
 8000a8c:	2054      	movs	r0, #84	; 0x54
 8000a8e:	f7ff ff17 	bl	80008c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ (USIC0_0_IRQn);
 8000a92:	2054      	movs	r0, #84	; 0x54
 8000a94:	f7ff fef6 	bl	8000884 <__NVIC_EnableIRQ>

	return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	40030000 	.word	0x40030000
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	48028100 	.word	0x48028100
 8000aac:	20000a24 	.word	0x20000a24

08000ab0 <USIC0_0_IRQHandler>:

/**
 * Handles the reception of data via the UART module via interupts
 */
void USIC0_0_IRQHandler (void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	static uint8_t rx_ctr = 0;
	uint8_t rx_tmp = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71fb      	strb	r3, [r7, #7]

	/* Read the RX FIFO till it is empty */
	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000aba:	e01f      	b.n	8000afc <USIC0_0_IRQHandler+0x4c>
		rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 8000abc:	4816      	ldr	r0, [pc, #88]	; (8000b18 <USIC0_0_IRQHandler+0x68>)
 8000abe:	f000 fe25 	bl	800170c <XMC_UART_CH_GetReceivedData>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]

		if ( (rx_tmp != STRING_CR) && (!str_available)) {
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b0d      	cmp	r3, #13
 8000aca:	d011      	beq.n	8000af0 <USIC0_0_IRQHandler+0x40>
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <USIC0_0_IRQHandler+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	f083 0301 	eor.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00a      	beq.n	8000af0 <USIC0_0_IRQHandler+0x40>
			rx_buffer[rx_ctr++] = rx_tmp;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <USIC0_0_IRQHandler+0x70>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	b2d1      	uxtb	r1, r2
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <USIC0_0_IRQHandler+0x70>)
 8000ae4:	7011      	strb	r1, [r2, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <USIC0_0_IRQHandler+0x74>)
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	5453      	strb	r3, [r2, r1]
 8000aee:	e005      	b.n	8000afc <USIC0_0_IRQHandler+0x4c>
		} else {
			rx_ctr = 0;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <USIC0_0_IRQHandler+0x70>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
			str_available = true;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <USIC0_0_IRQHandler+0x6c>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
{
	static uint8_t rx_ctr = 0;
	uint8_t rx_tmp = 0;

	/* Read the RX FIFO till it is empty */
	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <USIC0_0_IRQHandler+0x68>)
 8000afe:	f7ff ff4b 	bl	8000998 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1d6      	bne.n	8000abc <USIC0_0_IRQHandler+0xc>
		} else {
			rx_ctr = 0;
			str_available = true;
		}
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40030000 	.word	0x40030000
 8000b1c:	200009e0 	.word	0x200009e0
 8000b20:	20000a34 	.word	0x20000a34
 8000b24:	200009e4 	.word	0x200009e4

08000b28 <remote_uart_printf>:
 * @param  fmt
 * @param  VARARGS
 * @return 0 on success
 */
uint8_t remote_uart_printf (char *fmt, ...)
{
 8000b28:	b40f      	push	{r0, r1, r2, r3}
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b0c2      	sub	sp, #264	; 0x108
 8000b2e:	af00      	add	r7, sp, #0
	va_list arg_ptr;
	char buffer[BUFFER_SIZE_PRINTF];

	if (fmt == NULL)  {
 8000b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <remote_uart_printf+0x14>
		return ERR_OUT_OF_MEMORY;
 8000b38:	2364      	movs	r3, #100	; 0x64
 8000b3a:	e010      	b.n	8000b5e <remote_uart_printf+0x36>
	}

	va_start (arg_ptr, fmt);
 8000b3c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	vsprintf (buffer, fmt, arg_ptr);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b4a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fd12 	bl	8003578 <vsprintf>
	va_end (arg_ptr);

	remote_uart_send_string (buffer);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f80a 	bl	8000b70 <remote_uart_send_string>
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000b64:	46bd      	mov	sp, r7
 8000b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <remote_uart_send_string>:
 * sends a string via the UART module
 * @param  str string to be sent via
 * @return 0 on success
 */
uint8_t remote_uart_send_string (char *str)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if (str == NULL) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <remote_uart_send_string+0x12>
		return ERR_OUT_OF_MEMORY;
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	e01d      	b.n	8000bbe <remote_uart_send_string+0x4e>
	}

	for (int i = 0; i < strlen (str); i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e012      	b.n	8000bae <remote_uart_send_string+0x3e>
		while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8000b88:	bf00      	nop
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <remote_uart_send_string+0x58>)
 8000b8c:	f7ff fee0 	bl	8000950 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	d0f9      	beq.n	8000b8a <remote_uart_send_string+0x1a>
		XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <remote_uart_send_string+0x58>)
 8000ba4:	f000 fd8c 	bl	80016c0 <XMC_UART_CH_Transmit>
{
	if (str == NULL) {
		return ERR_OUT_OF_MEMORY;
	}

	for (int i = 0; i < strlen (str); i++) {
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f001 f886 	bl	8001cc0 <strlen>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d8e5      	bhi.n	8000b88 <remote_uart_send_string+0x18>
		while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
		XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
	}
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40030000 	.word	0x40030000

08000bcc <remote_mems_init>:
/**
 * Initialises the sensor to the necessary specifications
 * @return [description]
 */
uint8_t remote_mems_init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
   * @param MEMS_ADDRESS addressing acceleration sensor
   * @param MEMS_CTRL_REG1 addressing register for data rate and axis enabling
   * @param b00110011 25 Hz data rate, X & Y axis enabled, normal power mode
   * @param 0 write access
   */
  remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG1, 0b00110011, 0);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2233      	movs	r2, #51	; 0x33
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	2030      	movs	r0, #48	; 0x30
 8000bd8:	f7ff fc96 	bl	8000508 <remote_i2c_write_read>
   * @param MEMS_ADDRESS addressing acceleration sensor
   * @param MEMS_CTRL_REG3 addressing register for interrupt on pin INT1
   * @param b00010000 enabling interrupt to indicate a new set of data
   * @param 0 write access
   */
  remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG3, 0b00010000, 0);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2210      	movs	r2, #16
 8000be0:	2122      	movs	r1, #34	; 0x22
 8000be2:	2030      	movs	r0, #48	; 0x30
 8000be4:	f7ff fc90 	bl	8000508 <remote_i2c_write_read>
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop

08000bf0 <remote_transmit_data>:
   \pre "Pre-conditions"
   \post "Post-conditions"
   \return "Return of the function"
*/
uint8_t remote_transmit_data(uint8_t *data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint16_t data_x = data[1];
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	81fb      	strh	r3, [r7, #14]
  data_x <<= 8;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	81fb      	strh	r3, [r7, #14]
  data_x |= data[0];
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	81fb      	strh	r3, [r7, #14]
  uint16_t data_y = data[3];
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3303      	adds	r3, #3
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	81bb      	strh	r3, [r7, #12]
  data_y <<= 8;
 8000c1a:	89bb      	ldrh	r3, [r7, #12]
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	81bb      	strh	r3, [r7, #12]
  data_y |= data[2];
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3302      	adds	r3, #2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	89bb      	ldrh	r3, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	81bb      	strh	r3, [r7, #12]
  remote_uart_printf("X: %d\n", data_x);
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <remote_transmit_data+0x5c>)
 8000c34:	f7ff ff78 	bl	8000b28 <remote_uart_printf>
  remote_uart_printf("Y: %d\n", data_y);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <remote_transmit_data+0x60>)
 8000c3e:	f7ff ff73 	bl	8000b28 <remote_uart_printf>
  return 0;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	08008954 	.word	0x08008954
 8000c50:	0800895c 	.word	0x0800895c

08000c54 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
 return -1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <_fstat+0x16>
  return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	e001      	b.n	8000cba <_fstat+0x1a>
 else
  return -2;
 8000cb6:	f06f 0301 	mvn.w	r3, #1
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd2:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d108      	bne.n	8000cee <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x6c>)
 8000cec:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <_sbrk+0x64>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8000d00:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8000d04:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <_sbrk+0x6c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d301      	bcc.n	8000d14 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8000d10:	2300      	movs	r3, #0
 8000d12:	e003      	b.n	8000d1c <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8000d1a:	693b      	ldr	r3, [r7, #16]
 }
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	371c      	adds	r7, #28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	0000f548 	.word	0x0000f548
 8000d2c:	20000a38 	.word	0x20000a38
 8000d30:	20000a78 	.word	0x20000a78
 8000d34:	20000a3c 	.word	0x20000a3c

08000d38 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e003      	b.n	8000d76 <delay+0x16>
  {
    __NOP();
 8000d6e:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d3f7      	bcc.n	8000d6e <delay+0xe>
  {
    __NOP();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000d8c:	b598      	push	{r3, r4, r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d96:	4614      	mov	r4, r2
 8000d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000d9e:	f000 f807 	bl	8000db0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000da2:	f000 f83d 	bl	8000e20 <SystemCoreClockSetup>
}
 8000da6:	bf00      	nop
 8000da8:	bd98      	pop	{r3, r4, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000ffc4 	.word	0x2000ffc4

08000db0 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db6:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <SystemCoreSetup+0x64>)
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <SystemCoreSetup+0x68>)
 8000dbc:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbe:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000dc2:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <SystemCoreSetup+0x64>)
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <SystemCoreSetup+0x64>)
 8000dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <SystemCoreSetup+0x64>)
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <SystemCoreSetup+0x64>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f023 0308 	bic.w	r3, r3, #8
 8000dde:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <SystemCoreSetup+0x6c>)
 8000de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000de6:	3314      	adds	r3, #20
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f023 030f 	bic.w	r3, r3, #15
 8000df2:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f043 0303 	orr.w	r3, r3, #3
 8000dfa:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <SystemCoreSetup+0x6c>)
 8000dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e02:	3314      	adds	r3, #20
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	08000000 	.word	0x08000000
 8000e1c:	58001000 	.word	0x58001000

08000e20 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000e24:	4b75      	ldr	r3, [pc, #468]	; (8000ffc <SystemCoreClockSetup+0x1dc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10c      	bne.n	8000e4a <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000e30:	4a72      	ldr	r2, [pc, #456]	; (8000ffc <SystemCoreClockSetup+0x1dc>)
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <SystemCoreClockSetup+0x1dc>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000e3c:	bf00      	nop
 8000e3e:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <SystemCoreClockSetup+0x1dc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f9      	beq.n	8000e3e <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <SystemCoreClockSetup+0x1e0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d009      	beq.n	8000e6a <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000e56:	4a6a      	ldr	r2, [pc, #424]	; (8001000 <SystemCoreClockSetup+0x1e0>)
 8000e58:	4b69      	ldr	r3, [pc, #420]	; (8001000 <SystemCoreClockSetup+0x1e0>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e60:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000e62:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000e66:	f7ff ff7b 	bl	8000d60 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000e6a:	4a66      	ldr	r2, [pc, #408]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000e6c:	4b65      	ldr	r3, [pc, #404]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e74:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000e76:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000e7a:	f7ff ff71 	bl	8000d60 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000e7e:	4a61      	ldr	r2, [pc, #388]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000e80:	4b60      	ldr	r3, [pc, #384]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	f023 0302 	bic.w	r3, r3, #2
 8000e8c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <SystemCoreClockSetup+0x1e8>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d029      	beq.n	8000eee <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000e9a:	4a5b      	ldr	r2, [pc, #364]	; (8001008 <SystemCoreClockSetup+0x1e8>)
 8000e9c:	4b5a      	ldr	r3, [pc, #360]	; (8001008 <SystemCoreClockSetup+0x1e8>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000ea4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ea8:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000eaa:	f000 f927 	bl	80010fc <OSCHP_GetFrequency>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	4b56      	ldr	r3, [pc, #344]	; (800100c <SystemCoreClockSetup+0x1ec>)
 8000eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8000eb6:	0d1b      	lsrs	r3, r3, #20
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	4952      	ldr	r1, [pc, #328]	; (8001008 <SystemCoreClockSetup+0x1e8>)
 8000ebe:	4a52      	ldr	r2, [pc, #328]	; (8001008 <SystemCoreClockSetup+0x1e8>)
 8000ec0:	6852      	ldr	r2, [r2, #4]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000ec6:	4a4f      	ldr	r2, [pc, #316]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000ec8:	4b4e      	ldr	r3, [pc, #312]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ed2:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000edc:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000ede:	bf00      	nop
 8000ee0:	4b48      	ldr	r3, [pc, #288]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000ee8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000eec:	d1f8      	bne.n	8000ee0 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000eee:	4a45      	ldr	r2, [pc, #276]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000efa:	4a42      	ldr	r2, [pc, #264]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000efc:	4b41      	ldr	r3, [pc, #260]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f08:	4a41      	ldr	r2, [pc, #260]	; (8001010 <SystemCoreClockSetup+0x1f0>)
 8000f0a:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000f0c:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f16:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000f18:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f023 0310 	bic.w	r3, r3, #16
 8000f22:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000f24:	4a37      	ldr	r2, [pc, #220]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000f30:	bf00      	nop
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000f3e:	4a31      	ldr	r2, [pc, #196]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000f4a:	bf00      	nop
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f9      	bne.n	8000f4c <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000f58:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f62:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f92:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000f96:	4a20      	ldr	r2, [pc, #128]	; (8001018 <SystemCoreClockSetup+0x1f8>)
 8000f98:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000f9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f9e:	f7ff fedf 	bl	8000d60 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000fa2:	bf00      	nop
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f9      	beq.n	8000fa4 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <SystemCoreClockSetup+0x1fc>)
 8000fb4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000fb6:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fba:	f7ff fed1 	bl	8000d60 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000fbe:	bf00      	nop
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f9      	beq.n	8000fc0 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <SystemCoreClockSetup+0x200>)
 8000fd0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000fd2:	f241 7070 	movw	r0, #6000	; 0x1770
 8000fd6:	f7ff fec3 	bl	8000d60 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000fda:	bf00      	nop
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <SystemCoreClockSetup+0x1e4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f9      	beq.n	8000fdc <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <SystemCoreClockSetup+0x204>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <SystemCoreClockSetup+0x1f4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000ff4:	f000 f818 	bl	8001028 <SystemCoreClockUpdate>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	50004200 	.word	0x50004200
 8001000:	50004400 	.word	0x50004400
 8001004:	50004710 	.word	0x50004710
 8001008:	50004700 	.word	0x50004700
 800100c:	6b5fca6b 	.word	0x6b5fca6b
 8001010:	01134f00 	.word	0x01134f00
 8001014:	50004600 	.word	0x50004600
 8001018:	01074f00 	.word	0x01074f00
 800101c:	01044f00 	.word	0x01044f00
 8001020:	01034f00 	.word	0x01034f00
 8001024:	50004160 	.word	0x50004160

08001028 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <SystemCoreClockUpdate+0xc4>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03e      	beq.n	80010b8 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <SystemCoreClockUpdate+0xc8>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <SystemCoreClockUpdate+0xcc>)
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e002      	b.n	8001052 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800104c:	f000 f856 	bl	80010fc <OSCHP_GetFrequency>
 8001050:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <SystemCoreClockUpdate+0xc8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	2b00      	cmp	r3, #0
 800105c:	d020      	beq.n	80010a0 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <SystemCoreClockUpdate+0xc8>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001066:	0e1b      	lsrs	r3, r3, #24
 8001068:	3301      	adds	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <SystemCoreClockUpdate+0xc8>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	3301      	adds	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <SystemCoreClockUpdate+0xc8>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001082:	0c1b      	lsrs	r3, r3, #16
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e00d      	b.n	80010bc <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <SystemCoreClockUpdate+0xc8>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010a8:	3301      	adds	r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e001      	b.n	80010bc <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <SystemCoreClockUpdate+0xcc>)
 80010ba:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <SystemCoreClockUpdate+0xc4>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <SystemCoreClockUpdate+0xc4>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	3301      	adds	r3, #1
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <SystemCoreClockUpdate+0xd0>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	50004600 	.word	0x50004600
 80010f0:	50004710 	.word	0x50004710
 80010f4:	016e3600 	.word	0x016e3600
 80010f8:	2000ffc0 	.word	0x2000ffc0

080010fc <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <OSCHP_GetFrequency+0x10>)
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	00b71b00 	.word	0x00b71b00

08001110 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	460b      	mov	r3, r1
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3204      	adds	r2, #4
 8001132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	21f8      	movs	r1, #248	; 0xf8
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	ea02 0103 	and.w	r1, r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1d02      	adds	r2, r0, #4
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2103      	movs	r1, #3
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <XMC_GPIO_Init+0x13c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d003      	beq.n	8001178 <XMC_GPIO_Init+0x68>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a37      	ldr	r2, [pc, #220]	; (8001250 <XMC_GPIO_Init+0x140>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d10a      	bne.n	800118e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	401a      	ands	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	661a      	str	r2, [r3, #96]	; 0x60
 800118c:	e03c      	b.n	8001208 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	7afb      	ldrb	r3, [r7, #11]
 8001194:	409a      	lsls	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3210      	adds	r2, #16
 80011ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	2107      	movs	r1, #7
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	ea02 0103 	and.w	r1, r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f100 0210 	add.w	r2, r0, #16
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3210      	adds	r2, #16
 80011e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7a1b      	ldrb	r3, [r3, #8]
 80011ec:	4619      	mov	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	ea42 0103 	orr.w	r1, r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f100 0210 	add.w	r2, r0, #16
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3204      	adds	r2, #4
 800121c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	ea42 0103 	orr.w	r1, r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1d02      	adds	r2, r0, #4
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	48028e00 	.word	0x48028e00
 8001250:	48028f00 	.word	0x48028f00

08001254 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa86 	bl	80017b4 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <XMC_I2C_CH_Init+0x4c>)
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	889b      	ldrh	r3, [r3, #4]
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f817 	bl	80012e8 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f831 	bl	8001328 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	073f0303 	.word	0x073f0303

080012e8 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80012fa:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80012fe:	d109      	bne.n	8001314 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8001312:	e003      	b.n	800131c <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	021a      	lsls	r2, r3, #8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <XMC_I2C_CH_SetBaudrate+0x70>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d810      	bhi.n	8001360 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 800134a:	220a      	movs	r2, #10
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa7e 	bl	8001850 <XMC_USIC_CH_SetBaudrate>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e016      	b.n	800138e <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <XMC_I2C_CH_SetBaudrate+0x74>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d810      	bhi.n	800138a <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8001374:	2219      	movs	r2, #25
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fa69 	bl	8001850 <XMC_USIC_CH_SetBaudrate>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d104      	bne.n	800138e <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e001      	b.n	800138e <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	000186a0 	.word	0x000186a0
 800139c:	00061a80 	.word	0x00061a80

080013a0 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80013ba:	787b      	ldrb	r3, [r7, #1]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d103      	bne.n	80013c8 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d110      	bne.n	80013f8 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80013d6:	bf00      	nop
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff3b 	bl	8001254 <XMC_USIC_CH_GetTransmitBufferStatus>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b80      	cmp	r3, #128	; 0x80
 80013e2:	d0f9      	beq.n	80013d8 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff43 	bl	8001274 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 80013f6:	e003      	b.n	8001400 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800141e:	b29b      	uxth	r3, r3
 8001420:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d103      	bne.n	8001430 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001436:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d110      	bne.n	8001460 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800143e:	bf00      	nop
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff07 	bl	8001254 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001446:	4603      	mov	r3, r0
 8001448:	2b80      	cmp	r3, #128	; 0x80
 800144a:	d0f9      	beq.n	8001440 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff0f 	bl	8001274 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 800145e:	e003      	b.n	8001468 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800147e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d111      	bne.n	80014aa <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001486:	bf00      	nop
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fee3 	bl	8001254 <XMC_USIC_CH_GetTransmitBufferStatus>
 800148e:	4603      	mov	r3, r0
 8001490:	2b80      	cmp	r3, #128	; 0x80
 8001492:	d0f9      	beq.n	8001488 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff feeb 	bl	8001274 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80014a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 80014a8:	e004      	b.n	80014b4 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80014b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d110      	bne.n	80014f8 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80014d6:	bf00      	nop
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff febb 	bl	8001254 <XMC_USIC_CH_GetTransmitBufferStatus>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b80      	cmp	r3, #128	; 0x80
 80014e2:	d0f9      	beq.n	80014d8 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80014e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fec3 	bl	8001274 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 80014ee:	78fa      	ldrb	r2, [r7, #3]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 80014f6:	e003      	b.n	8001500 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001516:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d111      	bne.n	8001542 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800151e:	bf00      	nop
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fe97 	bl	8001254 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001526:	4603      	mov	r3, r0
 8001528:	2b80      	cmp	r3, #128	; 0x80
 800152a:	d0f9      	beq.n	8001520 <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800152c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fe9f 	bl	8001274 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
}
 8001540:	e004      	b.n	800154c <XMC_I2C_CH_MasterReceiveAck+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001548:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001562:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d111      	bne.n	800158e <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800156a:	bf00      	nop
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fe71 	bl	8001254 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001572:	4603      	mov	r3, r0
 8001574:	2b80      	cmp	r3, #128	; 0x80
 8001576:	d0f9      	beq.n	800156c <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fe79 	bl	8001274 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 800158c:	e004      	b.n	8001598 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001594:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e003      	b.n	80015c6 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80015c4:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800161a:	2310      	movs	r3, #16
 800161c:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8c8 	bl	80017b4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	79db      	ldrb	r3, [r3, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	79db      	ldrb	r3, [r3, #7]
 8001630:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f908 	bl	8001850 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	799b      	ldrb	r3, [r3, #6]
 8001644:	3b01      	subs	r3, #1
 8001646:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	3301      	adds	r3, #1
 800164e:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001650:	4313      	orrs	r3, r2
 8001652:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	791b      	ldrb	r3, [r3, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	795b      	ldrb	r3, [r3, #5]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	795b      	ldrb	r3, [r3, #5]
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
 8001688:	e008      	b.n	800169c <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f04f 32ff 	mov.w	r2, #4294967295
 80016aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	891b      	ldrh	r3, [r3, #8]
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop

080016c0 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d110      	bne.n	80016fc <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80016da:	bf00      	nop
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff79 	bl	80015d4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b80      	cmp	r3, #128	; 0x80
 80016e6:	d0f9      	beq.n	80016dc <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff81 	bl	80015f4 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 80016fa:	e003      	b.n	8001704 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800171a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	81fb      	strh	r3, [r7, #14]
 8001728:	e003      	b.n	8001732 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001730:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001732:	89fb      	ldrh	r3, [r7, #14]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000ffc0 	.word	0x2000ffc0

08001758 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0f1b      	lsrs	r3, r3, #28
 8001764:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800176c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	461a      	mov	r2, r3
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 800177c:	4413      	add	r3, r2
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	50004414 	.word	0x50004414

08001794 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001798:	f7ff ffd2 	bl	8001740 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800179c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	50004600 	.word	0x50004600

080017b4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a1b      	ldr	r2, [pc, #108]	; (800182c <XMC_USIC_CH_Enable+0x78>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d003      	beq.n	80017cc <XMC_USIC_CH_Enable+0x18>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <XMC_USIC_CH_Enable+0x7c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d103      	bne.n	80017d4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80017cc:	4819      	ldr	r0, [pc, #100]	; (8001834 <XMC_USIC_CH_Enable+0x80>)
 80017ce:	f000 f91f 	bl	8001a10 <XMC_USIC_Enable>
 80017d2:	e016      	b.n	8001802 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <XMC_USIC_CH_Enable+0x84>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d003      	beq.n	80017e4 <XMC_USIC_CH_Enable+0x30>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <XMC_USIC_CH_Enable+0x88>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d103      	bne.n	80017ec <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80017e4:	4816      	ldr	r0, [pc, #88]	; (8001840 <XMC_USIC_CH_Enable+0x8c>)
 80017e6:	f000 f913 	bl	8001a10 <XMC_USIC_Enable>
 80017ea:	e00a      	b.n	8001802 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a15      	ldr	r2, [pc, #84]	; (8001844 <XMC_USIC_CH_Enable+0x90>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d003      	beq.n	80017fc <XMC_USIC_CH_Enable+0x48>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <XMC_USIC_CH_Enable+0x94>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d102      	bne.n	8001802 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80017fc:	4813      	ldr	r0, [pc, #76]	; (800184c <XMC_USIC_CH_Enable+0x98>)
 80017fe:	f000 f907 	bl	8001a10 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001808:	bf00      	nop
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f9      	beq.n	800180a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f023 020f 	bic.w	r2, r3, #15
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40030000 	.word	0x40030000
 8001830:	40030200 	.word	0x40030200
 8001834:	40030008 	.word	0x40030008
 8001838:	48020000 	.word	0x48020000
 800183c:	48020200 	.word	0x48020200
 8001840:	48020008 	.word	0x48020008
 8001844:	48024000 	.word	0x48024000
 8001848:	48024200 	.word	0x48024200
 800184c:	48024008 	.word	0x48024008

08001850 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	; 0x38
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b63      	cmp	r3, #99	; 0x63
 8001860:	d958      	bls.n	8001914 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d055      	beq.n	8001914 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001868:	f7ff ff94 	bl	8001794 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800186c:	4602      	mov	r2, r0
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001870:	fba3 2302 	umull	r2, r3, r3, r2
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001888:	2301      	movs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800188c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001890:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001892:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
 8001898:	e022      	b.n	80018e0 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800189e:	fb02 f203 	mul.w	r2, r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018bc:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	d209      	bcs.n	80018da <XMC_USIC_CH_SetBaudrate+0x8a>
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d205      	bcs.n	80018da <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80018da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018dc:	3b01      	subs	r3, #1
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
 80018e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1d9      	bne.n	800189a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <XMC_USIC_CH_SetBaudrate+0xdc>)
 80018f6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	3a01      	subs	r2, #1
 80018fc:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80018fe:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001906:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001912:	e002      	b.n	800191a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800191a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800191e:	4618      	mov	r0, r3
 8001920:	3738      	adds	r7, #56	; 0x38
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	51eb851f 	.word	0x51eb851f
 800192c:	fc0080ef 	.word	0xfc0080ef

08001930 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001946:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001958:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	0211      	lsls	r1, r2, #8
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001966:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001968:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	f8ffc0c0 	.word	0xf8ffc0c0

08001980 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001996:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80019a8:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	0211      	lsls	r1, r2, #8
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80019b2:	79fa      	ldrb	r2, [r7, #7]
 80019b4:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80019b6:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80019b8:	4313      	orrs	r3, r2
 80019ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	efffc0c0 	.word	0xefffc0c0

080019d4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	460b      	mov	r3, r1
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	2107      	movs	r1, #7
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <XMC_USIC_Enable+0x40>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d104      	bne.n	8001a2a <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001a20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a24:	f7ff fe98 	bl	8001758 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001a28:	e00e      	b.n	8001a48 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <XMC_USIC_Enable+0x44>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d103      	bne.n	8001a3a <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <XMC_USIC_Enable+0x48>)
 8001a34:	f7ff fe90 	bl	8001758 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001a38:	e006      	b.n	8001a48 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <XMC_USIC_Enable+0x4c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d102      	bne.n	8001a48 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <XMC_USIC_Enable+0x50>)
 8001a44:	f7ff fe88 	bl	8001758 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40030008 	.word	0x40030008
 8001a54:	48020008 	.word	0x48020008
 8001a58:	10000080 	.word	0x10000080
 8001a5c:	48024008 	.word	0x48024008
 8001a60:	10000100 	.word	0x10000100

08001a64 <__libc_init_array>:
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	4e0f      	ldr	r6, [pc, #60]	; (8001aa4 <__libc_init_array+0x40>)
 8001a68:	4d0f      	ldr	r5, [pc, #60]	; (8001aa8 <__libc_init_array+0x44>)
 8001a6a:	1b76      	subs	r6, r6, r5
 8001a6c:	10b6      	asrs	r6, r6, #2
 8001a6e:	bf18      	it	ne
 8001a70:	2400      	movne	r4, #0
 8001a72:	d005      	beq.n	8001a80 <__libc_init_array+0x1c>
 8001a74:	3401      	adds	r4, #1
 8001a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7a:	4798      	blx	r3
 8001a7c:	42a6      	cmp	r6, r4
 8001a7e:	d1f9      	bne.n	8001a74 <__libc_init_array+0x10>
 8001a80:	4e0a      	ldr	r6, [pc, #40]	; (8001aac <__libc_init_array+0x48>)
 8001a82:	4d0b      	ldr	r5, [pc, #44]	; (8001ab0 <__libc_init_array+0x4c>)
 8001a84:	1b76      	subs	r6, r6, r5
 8001a86:	f7ff f957 	bl	8000d38 <_init>
 8001a8a:	10b6      	asrs	r6, r6, #2
 8001a8c:	bf18      	it	ne
 8001a8e:	2400      	movne	r4, #0
 8001a90:	d006      	beq.n	8001aa0 <__libc_init_array+0x3c>
 8001a92:	3401      	adds	r4, #1
 8001a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a98:	4798      	blx	r3
 8001a9a:	42a6      	cmp	r6, r4
 8001a9c:	d1f9      	bne.n	8001a92 <__libc_init_array+0x2e>
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200009e0 	.word	0x200009e0
 8001aa8:	200009e0 	.word	0x200009e0
 8001aac:	200009e0 	.word	0x200009e0
 8001ab0:	200009e0 	.word	0x200009e0

08001ab4 <memcpy>:
 8001ab4:	4684      	mov	ip, r0
 8001ab6:	ea41 0300 	orr.w	r3, r1, r0
 8001aba:	f013 0303 	ands.w	r3, r3, #3
 8001abe:	d16d      	bne.n	8001b9c <memcpy+0xe8>
 8001ac0:	3a40      	subs	r2, #64	; 0x40
 8001ac2:	d341      	bcc.n	8001b48 <memcpy+0x94>
 8001ac4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ac8:	f840 3b04 	str.w	r3, [r0], #4
 8001acc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ad0:	f840 3b04 	str.w	r3, [r0], #4
 8001ad4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ad8:	f840 3b04 	str.w	r3, [r0], #4
 8001adc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ae0:	f840 3b04 	str.w	r3, [r0], #4
 8001ae4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ae8:	f840 3b04 	str.w	r3, [r0], #4
 8001aec:	f851 3b04 	ldr.w	r3, [r1], #4
 8001af0:	f840 3b04 	str.w	r3, [r0], #4
 8001af4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001af8:	f840 3b04 	str.w	r3, [r0], #4
 8001afc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b00:	f840 3b04 	str.w	r3, [r0], #4
 8001b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b08:	f840 3b04 	str.w	r3, [r0], #4
 8001b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b10:	f840 3b04 	str.w	r3, [r0], #4
 8001b14:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b18:	f840 3b04 	str.w	r3, [r0], #4
 8001b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b20:	f840 3b04 	str.w	r3, [r0], #4
 8001b24:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b28:	f840 3b04 	str.w	r3, [r0], #4
 8001b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b30:	f840 3b04 	str.w	r3, [r0], #4
 8001b34:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b38:	f840 3b04 	str.w	r3, [r0], #4
 8001b3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b40:	f840 3b04 	str.w	r3, [r0], #4
 8001b44:	3a40      	subs	r2, #64	; 0x40
 8001b46:	d2bd      	bcs.n	8001ac4 <memcpy+0x10>
 8001b48:	3230      	adds	r2, #48	; 0x30
 8001b4a:	d311      	bcc.n	8001b70 <memcpy+0xbc>
 8001b4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b50:	f840 3b04 	str.w	r3, [r0], #4
 8001b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b58:	f840 3b04 	str.w	r3, [r0], #4
 8001b5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b60:	f840 3b04 	str.w	r3, [r0], #4
 8001b64:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b68:	f840 3b04 	str.w	r3, [r0], #4
 8001b6c:	3a10      	subs	r2, #16
 8001b6e:	d2ed      	bcs.n	8001b4c <memcpy+0x98>
 8001b70:	320c      	adds	r2, #12
 8001b72:	d305      	bcc.n	8001b80 <memcpy+0xcc>
 8001b74:	f851 3b04 	ldr.w	r3, [r1], #4
 8001b78:	f840 3b04 	str.w	r3, [r0], #4
 8001b7c:	3a04      	subs	r2, #4
 8001b7e:	d2f9      	bcs.n	8001b74 <memcpy+0xc0>
 8001b80:	3204      	adds	r2, #4
 8001b82:	d008      	beq.n	8001b96 <memcpy+0xe2>
 8001b84:	07d2      	lsls	r2, r2, #31
 8001b86:	bf1c      	itt	ne
 8001b88:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001b8c:	f800 3b01 	strbne.w	r3, [r0], #1
 8001b90:	d301      	bcc.n	8001b96 <memcpy+0xe2>
 8001b92:	880b      	ldrh	r3, [r1, #0]
 8001b94:	8003      	strh	r3, [r0, #0]
 8001b96:	4660      	mov	r0, ip
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2a08      	cmp	r2, #8
 8001b9e:	d313      	bcc.n	8001bc8 <memcpy+0x114>
 8001ba0:	078b      	lsls	r3, r1, #30
 8001ba2:	d08d      	beq.n	8001ac0 <memcpy+0xc>
 8001ba4:	f010 0303 	ands.w	r3, r0, #3
 8001ba8:	d08a      	beq.n	8001ac0 <memcpy+0xc>
 8001baa:	f1c3 0304 	rsb	r3, r3, #4
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	07db      	lsls	r3, r3, #31
 8001bb2:	bf1c      	itt	ne
 8001bb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001bb8:	f800 3b01 	strbne.w	r3, [r0], #1
 8001bbc:	d380      	bcc.n	8001ac0 <memcpy+0xc>
 8001bbe:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001bc2:	f820 3b02 	strh.w	r3, [r0], #2
 8001bc6:	e77b      	b.n	8001ac0 <memcpy+0xc>
 8001bc8:	3a04      	subs	r2, #4
 8001bca:	d3d9      	bcc.n	8001b80 <memcpy+0xcc>
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bd2:	f800 3b01 	strb.w	r3, [r0], #1
 8001bd6:	d2f9      	bcs.n	8001bcc <memcpy+0x118>
 8001bd8:	780b      	ldrb	r3, [r1, #0]
 8001bda:	7003      	strb	r3, [r0, #0]
 8001bdc:	784b      	ldrb	r3, [r1, #1]
 8001bde:	7043      	strb	r3, [r0, #1]
 8001be0:	788b      	ldrb	r3, [r1, #2]
 8001be2:	7083      	strb	r3, [r0, #2]
 8001be4:	4660      	mov	r0, ip
 8001be6:	4770      	bx	lr

08001be8 <memset>:
 8001be8:	b470      	push	{r4, r5, r6}
 8001bea:	0784      	lsls	r4, r0, #30
 8001bec:	d046      	beq.n	8001c7c <memset+0x94>
 8001bee:	1e54      	subs	r4, r2, #1
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d041      	beq.n	8001c78 <memset+0x90>
 8001bf4:	b2cd      	uxtb	r5, r1
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	e002      	b.n	8001c00 <memset+0x18>
 8001bfa:	1e62      	subs	r2, r4, #1
 8001bfc:	b3e4      	cbz	r4, 8001c78 <memset+0x90>
 8001bfe:	4614      	mov	r4, r2
 8001c00:	f803 5b01 	strb.w	r5, [r3], #1
 8001c04:	079a      	lsls	r2, r3, #30
 8001c06:	d1f8      	bne.n	8001bfa <memset+0x12>
 8001c08:	2c03      	cmp	r4, #3
 8001c0a:	d92e      	bls.n	8001c6a <memset+0x82>
 8001c0c:	b2cd      	uxtb	r5, r1
 8001c0e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001c12:	2c0f      	cmp	r4, #15
 8001c14:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001c18:	d919      	bls.n	8001c4e <memset+0x66>
 8001c1a:	f103 0210 	add.w	r2, r3, #16
 8001c1e:	4626      	mov	r6, r4
 8001c20:	3e10      	subs	r6, #16
 8001c22:	2e0f      	cmp	r6, #15
 8001c24:	f842 5c10 	str.w	r5, [r2, #-16]
 8001c28:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001c2c:	f842 5c08 	str.w	r5, [r2, #-8]
 8001c30:	f842 5c04 	str.w	r5, [r2, #-4]
 8001c34:	f102 0210 	add.w	r2, r2, #16
 8001c38:	d8f2      	bhi.n	8001c20 <memset+0x38>
 8001c3a:	f1a4 0210 	sub.w	r2, r4, #16
 8001c3e:	f022 020f 	bic.w	r2, r2, #15
 8001c42:	f004 040f 	and.w	r4, r4, #15
 8001c46:	3210      	adds	r2, #16
 8001c48:	2c03      	cmp	r4, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	d90d      	bls.n	8001c6a <memset+0x82>
 8001c4e:	461e      	mov	r6, r3
 8001c50:	4622      	mov	r2, r4
 8001c52:	3a04      	subs	r2, #4
 8001c54:	2a03      	cmp	r2, #3
 8001c56:	f846 5b04 	str.w	r5, [r6], #4
 8001c5a:	d8fa      	bhi.n	8001c52 <memset+0x6a>
 8001c5c:	1f22      	subs	r2, r4, #4
 8001c5e:	f022 0203 	bic.w	r2, r2, #3
 8001c62:	3204      	adds	r2, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	f004 0403 	and.w	r4, r4, #3
 8001c6a:	b12c      	cbz	r4, 8001c78 <memset+0x90>
 8001c6c:	b2c9      	uxtb	r1, r1
 8001c6e:	441c      	add	r4, r3
 8001c70:	f803 1b01 	strb.w	r1, [r3], #1
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	d1fb      	bne.n	8001c70 <memset+0x88>
 8001c78:	bc70      	pop	{r4, r5, r6}
 8001c7a:	4770      	bx	lr
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e7c2      	b.n	8001c08 <memset+0x20>
 8001c82:	bf00      	nop

08001c84 <printf>:
 8001c84:	b40f      	push	{r0, r1, r2, r3}
 8001c86:	b500      	push	{lr}
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <printf+0x24>)
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	ab04      	add	r3, sp, #16
 8001c8e:	6808      	ldr	r0, [r1, #0]
 8001c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c94:	6881      	ldr	r1, [r0, #8]
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	f000 f882 	bl	8001da0 <_vfprintf_r>
 8001c9c:	b003      	add	sp, #12
 8001c9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ca2:	b004      	add	sp, #16
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000460 	.word	0x20000460
	...

08001cc0 <strlen>:
 8001cc0:	f890 f000 	pld	[r0]
 8001cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001cc8:	f020 0107 	bic.w	r1, r0, #7
 8001ccc:	f06f 0c00 	mvn.w	ip, #0
 8001cd0:	f010 0407 	ands.w	r4, r0, #7
 8001cd4:	f891 f020 	pld	[r1, #32]
 8001cd8:	f040 8049 	bne.w	8001d6e <strlen+0xae>
 8001cdc:	f04f 0400 	mov.w	r4, #0
 8001ce0:	f06f 0007 	mvn.w	r0, #7
 8001ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001ce8:	f891 f040 	pld	[r1, #64]	; 0x40
 8001cec:	f100 0008 	add.w	r0, r0, #8
 8001cf0:	fa82 f24c 	uadd8	r2, r2, ip
 8001cf4:	faa4 f28c 	sel	r2, r4, ip
 8001cf8:	fa83 f34c 	uadd8	r3, r3, ip
 8001cfc:	faa2 f38c 	sel	r3, r2, ip
 8001d00:	bb4b      	cbnz	r3, 8001d56 <strlen+0x96>
 8001d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001d06:	fa82 f24c 	uadd8	r2, r2, ip
 8001d0a:	f100 0008 	add.w	r0, r0, #8
 8001d0e:	faa4 f28c 	sel	r2, r4, ip
 8001d12:	fa83 f34c 	uadd8	r3, r3, ip
 8001d16:	faa2 f38c 	sel	r3, r2, ip
 8001d1a:	b9e3      	cbnz	r3, 8001d56 <strlen+0x96>
 8001d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8001d20:	fa82 f24c 	uadd8	r2, r2, ip
 8001d24:	f100 0008 	add.w	r0, r0, #8
 8001d28:	faa4 f28c 	sel	r2, r4, ip
 8001d2c:	fa83 f34c 	uadd8	r3, r3, ip
 8001d30:	faa2 f38c 	sel	r3, r2, ip
 8001d34:	b97b      	cbnz	r3, 8001d56 <strlen+0x96>
 8001d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8001d3a:	f101 0120 	add.w	r1, r1, #32
 8001d3e:	fa82 f24c 	uadd8	r2, r2, ip
 8001d42:	f100 0008 	add.w	r0, r0, #8
 8001d46:	faa4 f28c 	sel	r2, r4, ip
 8001d4a:	fa83 f34c 	uadd8	r3, r3, ip
 8001d4e:	faa2 f38c 	sel	r3, r2, ip
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0c6      	beq.n	8001ce4 <strlen+0x24>
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	bf04      	itt	eq
 8001d5a:	3004      	addeq	r0, #4
 8001d5c:	461a      	moveq	r2, r3
 8001d5e:	ba12      	rev	r2, r2
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8001d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8001d6c:	4770      	bx	lr
 8001d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001d72:	f004 0503 	and.w	r5, r4, #3
 8001d76:	f1c4 0000 	rsb	r0, r4, #0
 8001d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8001d7e:	f014 0f04 	tst.w	r4, #4
 8001d82:	f891 f040 	pld	[r1, #64]	; 0x40
 8001d86:	fa0c f505 	lsl.w	r5, ip, r5
 8001d8a:	ea62 0205 	orn	r2, r2, r5
 8001d8e:	bf1c      	itt	ne
 8001d90:	ea63 0305 	ornne	r3, r3, r5
 8001d94:	4662      	movne	r2, ip
 8001d96:	f04f 0400 	mov.w	r4, #0
 8001d9a:	e7a9      	b.n	8001cf0 <strlen+0x30>
 8001d9c:	0000      	movs	r0, r0
	...

08001da0 <_vfprintf_r>:
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da4:	b0c5      	sub	sp, #276	; 0x114
 8001da6:	461c      	mov	r4, r3
 8001da8:	9108      	str	r1, [sp, #32]
 8001daa:	4616      	mov	r6, r2
 8001dac:	4605      	mov	r5, r0
 8001dae:	900a      	str	r0, [sp, #40]	; 0x28
 8001db0:	f002 fe9e 	bl	8004af0 <_localeconv_r>
 8001db4:	6803      	ldr	r3, [r0, #0]
 8001db6:	9317      	str	r3, [sp, #92]	; 0x5c
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff81 	bl	8001cc0 <strlen>
 8001dbe:	940e      	str	r4, [sp, #56]	; 0x38
 8001dc0:	9016      	str	r0, [sp, #88]	; 0x58
 8001dc2:	b11d      	cbz	r5, 8001dcc <_vfprintf_r+0x2c>
 8001dc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8123 	beq.w	8002012 <_vfprintf_r+0x272>
 8001dcc:	9808      	ldr	r0, [sp, #32]
 8001dce:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8001dd2:	b293      	uxth	r3, r2
 8001dd4:	0499      	lsls	r1, r3, #18
 8001dd6:	d407      	bmi.n	8001de8 <_vfprintf_r+0x48>
 8001dd8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001dda:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8001dde:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001de2:	8183      	strh	r3, [r0, #12]
 8001de4:	6641      	str	r1, [r0, #100]	; 0x64
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	071a      	lsls	r2, r3, #28
 8001dea:	f140 80dd 	bpl.w	8001fa8 <_vfprintf_r+0x208>
 8001dee:	9a08      	ldr	r2, [sp, #32]
 8001df0:	6912      	ldr	r2, [r2, #16]
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	f000 80d8 	beq.w	8001fa8 <_vfprintf_r+0x208>
 8001df8:	f003 031a 	and.w	r3, r3, #26
 8001dfc:	2b0a      	cmp	r3, #10
 8001dfe:	f000 80e1 	beq.w	8001fc4 <_vfprintf_r+0x224>
 8001e02:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8002020 <_vfprintf_r+0x280>
 8001e06:	2300      	movs	r3, #0
 8001e08:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001e0c:	9312      	str	r3, [sp, #72]	; 0x48
 8001e0e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e10:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e12:	9319      	str	r3, [sp, #100]	; 0x64
 8001e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e16:	f8df a214 	ldr.w	sl, [pc, #532]	; 800202c <_vfprintf_r+0x28c>
 8001e1a:	ab34      	add	r3, sp, #208	; 0xd0
 8001e1c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e1e:	4699      	mov	r9, r3
 8001e20:	46b0      	mov	r8, r6
 8001e22:	f898 3000 	ldrb.w	r3, [r8]
 8001e26:	4644      	mov	r4, r8
 8001e28:	b1eb      	cbz	r3, 8001e66 <_vfprintf_r+0xc6>
 8001e2a:	2b25      	cmp	r3, #37	; 0x25
 8001e2c:	d102      	bne.n	8001e34 <_vfprintf_r+0x94>
 8001e2e:	e01a      	b.n	8001e66 <_vfprintf_r+0xc6>
 8001e30:	2b25      	cmp	r3, #37	; 0x25
 8001e32:	d003      	beq.n	8001e3c <_vfprintf_r+0x9c>
 8001e34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <_vfprintf_r+0x90>
 8001e3c:	ebc8 0504 	rsb	r5, r8, r4
 8001e40:	b18d      	cbz	r5, 8001e66 <_vfprintf_r+0xc6>
 8001e42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001e44:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001e46:	f8c9 8000 	str.w	r8, [r9]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	442a      	add	r2, r5
 8001e4e:	2b07      	cmp	r3, #7
 8001e50:	f8c9 5004 	str.w	r5, [r9, #4]
 8001e54:	9229      	str	r2, [sp, #164]	; 0xa4
 8001e56:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e58:	f300 80c2 	bgt.w	8001fe0 <_vfprintf_r+0x240>
 8001e5c:	f109 0908 	add.w	r9, r9, #8
 8001e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e62:	442b      	add	r3, r5
 8001e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e66:	7823      	ldrb	r3, [r4, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80c2 	beq.w	8001ff2 <_vfprintf_r+0x252>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	461a      	mov	r2, r3
 8001e72:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8001e76:	4619      	mov	r1, r3
 8001e78:	930c      	str	r3, [sp, #48]	; 0x30
 8001e7a:	9307      	str	r3, [sp, #28]
 8001e7c:	f04f 3bff 	mov.w	fp, #4294967295
 8001e80:	7863      	ldrb	r3, [r4, #1]
 8001e82:	f104 0801 	add.w	r8, r4, #1
 8001e86:	465d      	mov	r5, fp
 8001e88:	f108 0801 	add.w	r8, r8, #1
 8001e8c:	f1a3 0020 	sub.w	r0, r3, #32
 8001e90:	2858      	cmp	r0, #88	; 0x58
 8001e92:	f200 8459 	bhi.w	8002748 <_vfprintf_r+0x9a8>
 8001e96:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001e9a:	040f      	.short	0x040f
 8001e9c:	04570457 	.word	0x04570457
 8001ea0:	04570418 	.word	0x04570418
 8001ea4:	04570457 	.word	0x04570457
 8001ea8:	04570457 	.word	0x04570457
 8001eac:	03620457 	.word	0x03620457
 8001eb0:	04570449 	.word	0x04570449
 8001eb4:	0109005d 	.word	0x0109005d
 8001eb8:	01250457 	.word	0x01250457
 8001ebc:	03700370 	.word	0x03700370
 8001ec0:	03700370 	.word	0x03700370
 8001ec4:	03700370 	.word	0x03700370
 8001ec8:	03700370 	.word	0x03700370
 8001ecc:	04570370 	.word	0x04570370
 8001ed0:	04570457 	.word	0x04570457
 8001ed4:	04570457 	.word	0x04570457
 8001ed8:	04570457 	.word	0x04570457
 8001edc:	04570457 	.word	0x04570457
 8001ee0:	03800457 	.word	0x03800457
 8001ee4:	0457039d 	.word	0x0457039d
 8001ee8:	0457039d 	.word	0x0457039d
 8001eec:	04570457 	.word	0x04570457
 8001ef0:	03eb0457 	.word	0x03eb0457
 8001ef4:	04570457 	.word	0x04570457
 8001ef8:	0457012c 	.word	0x0457012c
 8001efc:	04570457 	.word	0x04570457
 8001f00:	04570457 	.word	0x04570457
 8001f04:	04570155 	.word	0x04570155
 8001f08:	02b40457 	.word	0x02b40457
 8001f0c:	04570457 	.word	0x04570457
 8001f10:	04570457 	.word	0x04570457
 8001f14:	04570457 	.word	0x04570457
 8001f18:	04570457 	.word	0x04570457
 8001f1c:	04570457 	.word	0x04570457
 8001f20:	030f02f5 	.word	0x030f02f5
 8001f24:	039d039d 	.word	0x039d039d
 8001f28:	033f039d 	.word	0x033f039d
 8001f2c:	0457030f 	.word	0x0457030f
 8001f30:	03460457 	.word	0x03460457
 8001f34:	03500457 	.word	0x03500457
 8001f38:	006400cb 	.word	0x006400cb
 8001f3c:	04570420 	.word	0x04570420
 8001f40:	04570428 	.word	0x04570428
 8001f44:	045703f2 	.word	0x045703f2
 8001f48:	03fa0457 	.word	0x03fa0457
 8001f4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001f4e:	930e      	str	r3, [sp, #56]	; 0x38
 8001f50:	4240      	negs	r0, r0
 8001f52:	900c      	str	r0, [sp, #48]	; 0x30
 8001f54:	9b07      	ldr	r3, [sp, #28]
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	9307      	str	r3, [sp, #28]
 8001f5c:	f898 3000 	ldrb.w	r3, [r8]
 8001f60:	e792      	b.n	8001e88 <_vfprintf_r+0xe8>
 8001f62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001f64:	46ab      	mov	fp, r5
 8001f66:	2100      	movs	r1, #0
 8001f68:	6804      	ldr	r4, [r0, #0]
 8001f6a:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8001f6e:	1d07      	adds	r7, r0, #4
 8001f70:	9807      	ldr	r0, [sp, #28]
 8001f72:	2330      	movs	r3, #48	; 0x30
 8001f74:	2278      	movs	r2, #120	; 0x78
 8001f76:	458b      	cmp	fp, r1
 8001f78:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8001f7c:	f04f 0500 	mov.w	r5, #0
 8001f80:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8001f84:	f040 0302 	orr.w	r3, r0, #2
 8001f88:	f2c0 83fb 	blt.w	8002782 <_vfprintf_r+0x9e2>
 8001f8c:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	9307      	str	r3, [sp, #28]
 8001f96:	ea54 0305 	orrs.w	r3, r4, r5
 8001f9a:	970e      	str	r7, [sp, #56]	; 0x38
 8001f9c:	f000 83cc 	beq.w	8002738 <_vfprintf_r+0x998>
 8001fa0:	460f      	mov	r7, r1
 8001fa2:	9211      	str	r2, [sp, #68]	; 0x44
 8001fa4:	4820      	ldr	r0, [pc, #128]	; (8002028 <_vfprintf_r+0x288>)
 8001fa6:	e25d      	b.n	8002464 <_vfprintf_r+0x6c4>
 8001fa8:	9908      	ldr	r1, [sp, #32]
 8001faa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fac:	f001 faf0 	bl	8003590 <__swsetup_r>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	f041 803f 	bne.w	8003034 <_vfprintf_r+0x1294>
 8001fb6:	9b08      	ldr	r3, [sp, #32]
 8001fb8:	899b      	ldrh	r3, [r3, #12]
 8001fba:	f003 031a 	and.w	r3, r3, #26
 8001fbe:	2b0a      	cmp	r3, #10
 8001fc0:	f47f af1f 	bne.w	8001e02 <_vfprintf_r+0x62>
 8001fc4:	9908      	ldr	r1, [sp, #32]
 8001fc6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f6ff af19 	blt.w	8001e02 <_vfprintf_r+0x62>
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	4632      	mov	r2, r6
 8001fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fd6:	f001 fa7f 	bl	80034d8 <__sbprintf>
 8001fda:	b045      	add	sp, #276	; 0x114
 8001fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe0:	aa27      	add	r2, sp, #156	; 0x9c
 8001fe2:	9908      	ldr	r1, [sp, #32]
 8001fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fe6:	f005 f835 	bl	8007054 <__sprint_r>
 8001fea:	b948      	cbnz	r0, 8002000 <_vfprintf_r+0x260>
 8001fec:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8001ff0:	e736      	b.n	8001e60 <_vfprintf_r+0xc0>
 8001ff2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001ff4:	b123      	cbz	r3, 8002000 <_vfprintf_r+0x260>
 8001ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001ff8:	9908      	ldr	r1, [sp, #32]
 8001ffa:	aa27      	add	r2, sp, #156	; 0x9c
 8001ffc:	f005 f82a 	bl	8007054 <__sprint_r>
 8002000:	9b08      	ldr	r3, [sp, #32]
 8002002:	899b      	ldrh	r3, [r3, #12]
 8002004:	0659      	lsls	r1, r3, #25
 8002006:	f101 8015 	bmi.w	8003034 <_vfprintf_r+0x1294>
 800200a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800200c:	b045      	add	sp, #276	; 0x114
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002012:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002014:	f002 fc02 	bl	800481c <__sinit>
 8002018:	e6d8      	b.n	8001dcc <_vfprintf_r+0x2c>
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
	...
 8002028:	08008998 	.word	0x08008998
 800202c:	08008964 	.word	0x08008964
 8002030:	9311      	str	r3, [sp, #68]	; 0x44
 8002032:	46ab      	mov	fp, r5
 8002034:	2a00      	cmp	r2, #0
 8002036:	f041 8232 	bne.w	800349e <_vfprintf_r+0x16fe>
 800203a:	9a07      	ldr	r2, [sp, #28]
 800203c:	f012 0320 	ands.w	r3, r2, #32
 8002040:	d064      	beq.n	800210c <_vfprintf_r+0x36c>
 8002042:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002044:	3707      	adds	r7, #7
 8002046:	f027 0307 	bic.w	r3, r7, #7
 800204a:	2700      	movs	r7, #0
 800204c:	f103 0108 	add.w	r1, r3, #8
 8002050:	45bb      	cmp	fp, r7
 8002052:	910e      	str	r1, [sp, #56]	; 0x38
 8002054:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002058:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800205c:	f2c0 86ba 	blt.w	8002dd4 <_vfprintf_r+0x1034>
 8002060:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002064:	9307      	str	r3, [sp, #28]
 8002066:	ea54 0305 	orrs.w	r3, r4, r5
 800206a:	f000 8382 	beq.w	8002772 <_vfprintf_r+0x9d2>
 800206e:	ae34      	add	r6, sp, #208	; 0xd0
 8002070:	08e2      	lsrs	r2, r4, #3
 8002072:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8002076:	08e9      	lsrs	r1, r5, #3
 8002078:	f004 0307 	and.w	r3, r4, #7
 800207c:	460d      	mov	r5, r1
 800207e:	4614      	mov	r4, r2
 8002080:	3330      	adds	r3, #48	; 0x30
 8002082:	ea54 0205 	orrs.w	r2, r4, r5
 8002086:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800208a:	d1f1      	bne.n	8002070 <_vfprintf_r+0x2d0>
 800208c:	9a07      	ldr	r2, [sp, #28]
 800208e:	07d2      	lsls	r2, r2, #31
 8002090:	f140 8096 	bpl.w	80021c0 <_vfprintf_r+0x420>
 8002094:	2b30      	cmp	r3, #48	; 0x30
 8002096:	f000 8093 	beq.w	80021c0 <_vfprintf_r+0x420>
 800209a:	2230      	movs	r2, #48	; 0x30
 800209c:	1e73      	subs	r3, r6, #1
 800209e:	f806 2c01 	strb.w	r2, [r6, #-1]
 80020a2:	aa34      	add	r2, sp, #208	; 0xd0
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	920d      	str	r2, [sp, #52]	; 0x34
 80020a8:	461e      	mov	r6, r3
 80020aa:	e08c      	b.n	80021c6 <_vfprintf_r+0x426>
 80020ac:	f898 3000 	ldrb.w	r3, [r8]
 80020b0:	2b2a      	cmp	r3, #42	; 0x2a
 80020b2:	f108 0401 	add.w	r4, r8, #1
 80020b6:	f001 81d0 	beq.w	800345a <_vfprintf_r+0x16ba>
 80020ba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80020be:	2809      	cmp	r0, #9
 80020c0:	bf98      	it	ls
 80020c2:	2500      	movls	r5, #0
 80020c4:	f201 816c 	bhi.w	80033a0 <_vfprintf_r+0x1600>
 80020c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80020cc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80020d0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80020d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80020d8:	2809      	cmp	r0, #9
 80020da:	d9f5      	bls.n	80020c8 <_vfprintf_r+0x328>
 80020dc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80020e0:	46a0      	mov	r8, r4
 80020e2:	e6d3      	b.n	8001e8c <_vfprintf_r+0xec>
 80020e4:	9b07      	ldr	r3, [sp, #28]
 80020e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ea:	9307      	str	r3, [sp, #28]
 80020ec:	f898 3000 	ldrb.w	r3, [r8]
 80020f0:	e6ca      	b.n	8001e88 <_vfprintf_r+0xe8>
 80020f2:	9311      	str	r3, [sp, #68]	; 0x44
 80020f4:	46ab      	mov	fp, r5
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	f041 81d9 	bne.w	80034ae <_vfprintf_r+0x170e>
 80020fc:	9b07      	ldr	r3, [sp, #28]
 80020fe:	f043 0310 	orr.w	r3, r3, #16
 8002102:	9307      	str	r3, [sp, #28]
 8002104:	9a07      	ldr	r2, [sp, #28]
 8002106:	f012 0320 	ands.w	r3, r2, #32
 800210a:	d19a      	bne.n	8002042 <_vfprintf_r+0x2a2>
 800210c:	9907      	ldr	r1, [sp, #28]
 800210e:	f011 0210 	ands.w	r2, r1, #16
 8002112:	f000 8634 	beq.w	8002d7e <_vfprintf_r+0xfde>
 8002116:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002118:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800211c:	f1bb 0f00 	cmp.w	fp, #0
 8002120:	6804      	ldr	r4, [r0, #0]
 8002122:	f100 0704 	add.w	r7, r0, #4
 8002126:	f04f 0500 	mov.w	r5, #0
 800212a:	f2c0 8652 	blt.w	8002dd2 <_vfprintf_r+0x1032>
 800212e:	460a      	mov	r2, r1
 8002130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002134:	9207      	str	r2, [sp, #28]
 8002136:	ea54 0205 	orrs.w	r2, r4, r5
 800213a:	970e      	str	r7, [sp, #56]	; 0x38
 800213c:	f000 8319 	beq.w	8002772 <_vfprintf_r+0x9d2>
 8002140:	461f      	mov	r7, r3
 8002142:	e794      	b.n	800206e <_vfprintf_r+0x2ce>
 8002144:	9311      	str	r3, [sp, #68]	; 0x44
 8002146:	46ab      	mov	fp, r5
 8002148:	2a00      	cmp	r2, #0
 800214a:	f041 81a0 	bne.w	800348e <_vfprintf_r+0x16ee>
 800214e:	9b07      	ldr	r3, [sp, #28]
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	9307      	str	r3, [sp, #28]
 8002156:	9a07      	ldr	r2, [sp, #28]
 8002158:	f012 0320 	ands.w	r3, r2, #32
 800215c:	f000 84fa 	beq.w	8002b54 <_vfprintf_r+0xdb4>
 8002160:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002162:	3707      	adds	r7, #7
 8002164:	f027 0307 	bic.w	r3, r7, #7
 8002168:	2700      	movs	r7, #0
 800216a:	f103 0108 	add.w	r1, r3, #8
 800216e:	45bb      	cmp	fp, r7
 8002170:	910e      	str	r1, [sp, #56]	; 0x38
 8002172:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002176:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800217a:	f2c0 8523 	blt.w	8002bc4 <_vfprintf_r+0xe24>
 800217e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002182:	9307      	str	r3, [sp, #28]
 8002184:	ea54 0305 	orrs.w	r3, r4, r5
 8002188:	f000 81bc 	beq.w	8002504 <_vfprintf_r+0x764>
 800218c:	2d00      	cmp	r5, #0
 800218e:	bf08      	it	eq
 8002190:	2c0a      	cmpeq	r4, #10
 8002192:	f0c0 851b 	bcc.w	8002bcc <_vfprintf_r+0xe2c>
 8002196:	ae34      	add	r6, sp, #208	; 0xd0
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	220a      	movs	r2, #10
 800219e:	2300      	movs	r3, #0
 80021a0:	f006 fa46 	bl	8008630 <__aeabi_uldivmod>
 80021a4:	3230      	adds	r2, #48	; 0x30
 80021a6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80021aa:	4620      	mov	r0, r4
 80021ac:	4629      	mov	r1, r5
 80021ae:	2300      	movs	r3, #0
 80021b0:	220a      	movs	r2, #10
 80021b2:	f006 fa3d 	bl	8008630 <__aeabi_uldivmod>
 80021b6:	4604      	mov	r4, r0
 80021b8:	460d      	mov	r5, r1
 80021ba:	ea54 0305 	orrs.w	r3, r4, r5
 80021be:	d1eb      	bne.n	8002198 <_vfprintf_r+0x3f8>
 80021c0:	ab34      	add	r3, sp, #208	; 0xd0
 80021c2:	1b9b      	subs	r3, r3, r6
 80021c4:	930d      	str	r3, [sp, #52]	; 0x34
 80021c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021c8:	455b      	cmp	r3, fp
 80021ca:	bfb8      	it	lt
 80021cc:	465b      	movlt	r3, fp
 80021ce:	9309      	str	r3, [sp, #36]	; 0x24
 80021d0:	2300      	movs	r3, #0
 80021d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80021d4:	b117      	cbz	r7, 80021dc <_vfprintf_r+0x43c>
 80021d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	9309      	str	r3, [sp, #36]	; 0x24
 80021dc:	9b07      	ldr	r3, [sp, #28]
 80021de:	f013 0302 	ands.w	r3, r3, #2
 80021e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80021e4:	d002      	beq.n	80021ec <_vfprintf_r+0x44c>
 80021e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021e8:	3302      	adds	r3, #2
 80021ea:	9309      	str	r3, [sp, #36]	; 0x24
 80021ec:	9b07      	ldr	r3, [sp, #28]
 80021ee:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80021f2:	9310      	str	r3, [sp, #64]	; 0x40
 80021f4:	f040 82d2 	bne.w	800279c <_vfprintf_r+0x9fc>
 80021f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021fc:	1a9d      	subs	r5, r3, r2
 80021fe:	2d00      	cmp	r5, #0
 8002200:	f340 82cc 	ble.w	800279c <_vfprintf_r+0x9fc>
 8002204:	2d10      	cmp	r5, #16
 8002206:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002208:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800220a:	4fa8      	ldr	r7, [pc, #672]	; (80024ac <_vfprintf_r+0x70c>)
 800220c:	dd27      	ble.n	800225e <_vfprintf_r+0x4be>
 800220e:	9618      	str	r6, [sp, #96]	; 0x60
 8002210:	4648      	mov	r0, r9
 8002212:	2410      	movs	r4, #16
 8002214:	46b9      	mov	r9, r7
 8002216:	9e08      	ldr	r6, [sp, #32]
 8002218:	462f      	mov	r7, r5
 800221a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800221c:	e004      	b.n	8002228 <_vfprintf_r+0x488>
 800221e:	3f10      	subs	r7, #16
 8002220:	2f10      	cmp	r7, #16
 8002222:	f100 0008 	add.w	r0, r0, #8
 8002226:	dd16      	ble.n	8002256 <_vfprintf_r+0x4b6>
 8002228:	3201      	adds	r2, #1
 800222a:	4ba0      	ldr	r3, [pc, #640]	; (80024ac <_vfprintf_r+0x70c>)
 800222c:	9228      	str	r2, [sp, #160]	; 0xa0
 800222e:	3110      	adds	r1, #16
 8002230:	2a07      	cmp	r2, #7
 8002232:	9129      	str	r1, [sp, #164]	; 0xa4
 8002234:	e880 0018 	stmia.w	r0, {r3, r4}
 8002238:	ddf1      	ble.n	800221e <_vfprintf_r+0x47e>
 800223a:	aa27      	add	r2, sp, #156	; 0x9c
 800223c:	4631      	mov	r1, r6
 800223e:	4628      	mov	r0, r5
 8002240:	f004 ff08 	bl	8007054 <__sprint_r>
 8002244:	2800      	cmp	r0, #0
 8002246:	f47f aedb 	bne.w	8002000 <_vfprintf_r+0x260>
 800224a:	3f10      	subs	r7, #16
 800224c:	2f10      	cmp	r7, #16
 800224e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002250:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002252:	a834      	add	r0, sp, #208	; 0xd0
 8002254:	dce8      	bgt.n	8002228 <_vfprintf_r+0x488>
 8002256:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8002258:	463d      	mov	r5, r7
 800225a:	464f      	mov	r7, r9
 800225c:	4681      	mov	r9, r0
 800225e:	3201      	adds	r2, #1
 8002260:	186c      	adds	r4, r5, r1
 8002262:	2a07      	cmp	r2, #7
 8002264:	9429      	str	r4, [sp, #164]	; 0xa4
 8002266:	9228      	str	r2, [sp, #160]	; 0xa0
 8002268:	f8c9 7000 	str.w	r7, [r9]
 800226c:	f8c9 5004 	str.w	r5, [r9, #4]
 8002270:	f300 8428 	bgt.w	8002ac4 <_vfprintf_r+0xd24>
 8002274:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002278:	f109 0908 	add.w	r9, r9, #8
 800227c:	b177      	cbz	r7, 800229c <_vfprintf_r+0x4fc>
 800227e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002280:	3301      	adds	r3, #1
 8002282:	3401      	adds	r4, #1
 8002284:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8002288:	2201      	movs	r2, #1
 800228a:	2b07      	cmp	r3, #7
 800228c:	9429      	str	r4, [sp, #164]	; 0xa4
 800228e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002290:	e889 0006 	stmia.w	r9, {r1, r2}
 8002294:	f300 83a0 	bgt.w	80029d8 <_vfprintf_r+0xc38>
 8002298:	f109 0908 	add.w	r9, r9, #8
 800229c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800229e:	b16b      	cbz	r3, 80022bc <_vfprintf_r+0x51c>
 80022a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80022a2:	3301      	adds	r3, #1
 80022a4:	3402      	adds	r4, #2
 80022a6:	a920      	add	r1, sp, #128	; 0x80
 80022a8:	2202      	movs	r2, #2
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80022ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80022b0:	e889 0006 	stmia.w	r9, {r1, r2}
 80022b4:	f300 839c 	bgt.w	80029f0 <_vfprintf_r+0xc50>
 80022b8:	f109 0908 	add.w	r9, r9, #8
 80022bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	f000 82d0 	beq.w	8002864 <_vfprintf_r+0xac4>
 80022c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022c6:	ebc3 070b 	rsb	r7, r3, fp
 80022ca:	2f00      	cmp	r7, #0
 80022cc:	dd33      	ble.n	8002336 <_vfprintf_r+0x596>
 80022ce:	4a78      	ldr	r2, [pc, #480]	; (80024b0 <_vfprintf_r+0x710>)
 80022d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80022d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80022d4:	2f10      	cmp	r7, #16
 80022d6:	dd22      	ble.n	800231e <_vfprintf_r+0x57e>
 80022d8:	4622      	mov	r2, r4
 80022da:	f04f 0b10 	mov.w	fp, #16
 80022de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80022e0:	9c08      	ldr	r4, [sp, #32]
 80022e2:	e004      	b.n	80022ee <_vfprintf_r+0x54e>
 80022e4:	3f10      	subs	r7, #16
 80022e6:	2f10      	cmp	r7, #16
 80022e8:	f109 0908 	add.w	r9, r9, #8
 80022ec:	dd16      	ble.n	800231c <_vfprintf_r+0x57c>
 80022ee:	3301      	adds	r3, #1
 80022f0:	3210      	adds	r2, #16
 80022f2:	2b07      	cmp	r3, #7
 80022f4:	9229      	str	r2, [sp, #164]	; 0xa4
 80022f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80022f8:	e889 0c00 	stmia.w	r9, {sl, fp}
 80022fc:	ddf2      	ble.n	80022e4 <_vfprintf_r+0x544>
 80022fe:	aa27      	add	r2, sp, #156	; 0x9c
 8002300:	4621      	mov	r1, r4
 8002302:	4628      	mov	r0, r5
 8002304:	f004 fea6 	bl	8007054 <__sprint_r>
 8002308:	2800      	cmp	r0, #0
 800230a:	f47f ae79 	bne.w	8002000 <_vfprintf_r+0x260>
 800230e:	3f10      	subs	r7, #16
 8002310:	2f10      	cmp	r7, #16
 8002312:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002314:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002316:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800231a:	dce8      	bgt.n	80022ee <_vfprintf_r+0x54e>
 800231c:	4614      	mov	r4, r2
 800231e:	3301      	adds	r3, #1
 8002320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002322:	9328      	str	r3, [sp, #160]	; 0xa0
 8002324:	443c      	add	r4, r7
 8002326:	2b07      	cmp	r3, #7
 8002328:	9429      	str	r4, [sp, #164]	; 0xa4
 800232a:	e889 0084 	stmia.w	r9, {r2, r7}
 800232e:	f300 8347 	bgt.w	80029c0 <_vfprintf_r+0xc20>
 8002332:	f109 0908 	add.w	r9, r9, #8
 8002336:	9b07      	ldr	r3, [sp, #28]
 8002338:	05dd      	lsls	r5, r3, #23
 800233a:	f100 8231 	bmi.w	80027a0 <_vfprintf_r+0xa00>
 800233e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002340:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002342:	f8c9 6000 	str.w	r6, [r9]
 8002346:	3301      	adds	r3, #1
 8002348:	440c      	add	r4, r1
 800234a:	2b07      	cmp	r3, #7
 800234c:	9429      	str	r4, [sp, #164]	; 0xa4
 800234e:	f8c9 1004 	str.w	r1, [r9, #4]
 8002352:	9328      	str	r3, [sp, #160]	; 0xa0
 8002354:	f300 831e 	bgt.w	8002994 <_vfprintf_r+0xbf4>
 8002358:	f109 0908 	add.w	r9, r9, #8
 800235c:	9b07      	ldr	r3, [sp, #28]
 800235e:	0758      	lsls	r0, r3, #29
 8002360:	d53f      	bpl.n	80023e2 <_vfprintf_r+0x642>
 8002362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002366:	1a9d      	subs	r5, r3, r2
 8002368:	2d00      	cmp	r5, #0
 800236a:	dd3a      	ble.n	80023e2 <_vfprintf_r+0x642>
 800236c:	2d10      	cmp	r5, #16
 800236e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002370:	4f4e      	ldr	r7, [pc, #312]	; (80024ac <_vfprintf_r+0x70c>)
 8002372:	dd23      	ble.n	80023bc <_vfprintf_r+0x61c>
 8002374:	4622      	mov	r2, r4
 8002376:	2610      	movs	r6, #16
 8002378:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800237c:	9c08      	ldr	r4, [sp, #32]
 800237e:	e004      	b.n	800238a <_vfprintf_r+0x5ea>
 8002380:	3d10      	subs	r5, #16
 8002382:	2d10      	cmp	r5, #16
 8002384:	f109 0908 	add.w	r9, r9, #8
 8002388:	dd17      	ble.n	80023ba <_vfprintf_r+0x61a>
 800238a:	3301      	adds	r3, #1
 800238c:	4947      	ldr	r1, [pc, #284]	; (80024ac <_vfprintf_r+0x70c>)
 800238e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002390:	3210      	adds	r2, #16
 8002392:	2b07      	cmp	r3, #7
 8002394:	9229      	str	r2, [sp, #164]	; 0xa4
 8002396:	e889 0042 	stmia.w	r9, {r1, r6}
 800239a:	ddf1      	ble.n	8002380 <_vfprintf_r+0x5e0>
 800239c:	aa27      	add	r2, sp, #156	; 0x9c
 800239e:	4621      	mov	r1, r4
 80023a0:	4658      	mov	r0, fp
 80023a2:	f004 fe57 	bl	8007054 <__sprint_r>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	f47f ae2a 	bne.w	8002000 <_vfprintf_r+0x260>
 80023ac:	3d10      	subs	r5, #16
 80023ae:	2d10      	cmp	r5, #16
 80023b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80023b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80023b4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80023b8:	dce7      	bgt.n	800238a <_vfprintf_r+0x5ea>
 80023ba:	4614      	mov	r4, r2
 80023bc:	3301      	adds	r3, #1
 80023be:	442c      	add	r4, r5
 80023c0:	2b07      	cmp	r3, #7
 80023c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80023c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80023c6:	f8c9 7000 	str.w	r7, [r9]
 80023ca:	f8c9 5004 	str.w	r5, [r9, #4]
 80023ce:	dd08      	ble.n	80023e2 <_vfprintf_r+0x642>
 80023d0:	aa27      	add	r2, sp, #156	; 0x9c
 80023d2:	9908      	ldr	r1, [sp, #32]
 80023d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80023d6:	f004 fe3d 	bl	8007054 <__sprint_r>
 80023da:	2800      	cmp	r0, #0
 80023dc:	f47f ae10 	bne.w	8002000 <_vfprintf_r+0x260>
 80023e0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80023e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80023e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80023e8:	428a      	cmp	r2, r1
 80023ea:	bfac      	ite	ge
 80023ec:	189b      	addge	r3, r3, r2
 80023ee:	185b      	addlt	r3, r3, r1
 80023f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80023f2:	2c00      	cmp	r4, #0
 80023f4:	f040 82da 	bne.w	80029ac <_vfprintf_r+0xc0c>
 80023f8:	2300      	movs	r3, #0
 80023fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80023fc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002400:	e50f      	b.n	8001e22 <_vfprintf_r+0x82>
 8002402:	9311      	str	r3, [sp, #68]	; 0x44
 8002404:	46ab      	mov	fp, r5
 8002406:	2a00      	cmp	r2, #0
 8002408:	f041 803d 	bne.w	8003486 <_vfprintf_r+0x16e6>
 800240c:	9b07      	ldr	r3, [sp, #28]
 800240e:	4829      	ldr	r0, [pc, #164]	; (80024b4 <_vfprintf_r+0x714>)
 8002410:	069c      	lsls	r4, r3, #26
 8002412:	f140 8146 	bpl.w	80026a2 <_vfprintf_r+0x902>
 8002416:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002418:	3707      	adds	r7, #7
 800241a:	f027 0307 	bic.w	r3, r7, #7
 800241e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002422:	f103 0208 	add.w	r2, r3, #8
 8002426:	920e      	str	r2, [sp, #56]	; 0x38
 8002428:	9a07      	ldr	r2, [sp, #28]
 800242a:	f012 0701 	ands.w	r7, r2, #1
 800242e:	f000 82eb 	beq.w	8002a08 <_vfprintf_r+0xc68>
 8002432:	ea54 0305 	orrs.w	r3, r4, r5
 8002436:	f000 8582 	beq.w	8002f3e <_vfprintf_r+0x119e>
 800243a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800243e:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002442:	2700      	movs	r7, #0
 8002444:	9a07      	ldr	r2, [sp, #28]
 8002446:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800244a:	2330      	movs	r3, #48	; 0x30
 800244c:	45bb      	cmp	fp, r7
 800244e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002452:	f042 0302 	orr.w	r3, r2, #2
 8002456:	f2c0 873b 	blt.w	80032d0 <_vfprintf_r+0x1530>
 800245a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	9307      	str	r3, [sp, #28]
 8002464:	ae34      	add	r6, sp, #208	; 0xd0
 8002466:	0923      	lsrs	r3, r4, #4
 8002468:	f004 010f 	and.w	r1, r4, #15
 800246c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8002470:	092a      	lsrs	r2, r5, #4
 8002472:	461c      	mov	r4, r3
 8002474:	4615      	mov	r5, r2
 8002476:	5c43      	ldrb	r3, [r0, r1]
 8002478:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800247c:	ea54 0305 	orrs.w	r3, r4, r5
 8002480:	d1f1      	bne.n	8002466 <_vfprintf_r+0x6c6>
 8002482:	e69d      	b.n	80021c0 <_vfprintf_r+0x420>
 8002484:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002486:	9311      	str	r3, [sp, #68]	; 0x44
 8002488:	680a      	ldr	r2, [r1, #0]
 800248a:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800248e:	2300      	movs	r3, #0
 8002490:	460a      	mov	r2, r1
 8002492:	461f      	mov	r7, r3
 8002494:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002498:	3204      	adds	r2, #4
 800249a:	2301      	movs	r3, #1
 800249c:	9309      	str	r3, [sp, #36]	; 0x24
 800249e:	46bb      	mov	fp, r7
 80024a0:	9713      	str	r7, [sp, #76]	; 0x4c
 80024a2:	920e      	str	r2, [sp, #56]	; 0x38
 80024a4:	930d      	str	r3, [sp, #52]	; 0x34
 80024a6:	ae2a      	add	r6, sp, #168	; 0xa8
 80024a8:	e698      	b.n	80021dc <_vfprintf_r+0x43c>
 80024aa:	bf00      	nop
 80024ac:	080089b8 	.word	0x080089b8
 80024b0:	08008964 	.word	0x08008964
 80024b4:	08008984 	.word	0x08008984
 80024b8:	9311      	str	r3, [sp, #68]	; 0x44
 80024ba:	46ab      	mov	fp, r5
 80024bc:	2a00      	cmp	r2, #0
 80024be:	f040 87ea 	bne.w	8003496 <_vfprintf_r+0x16f6>
 80024c2:	9b07      	ldr	r3, [sp, #28]
 80024c4:	069b      	lsls	r3, r3, #26
 80024c6:	d574      	bpl.n	80025b2 <_vfprintf_r+0x812>
 80024c8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80024ca:	3707      	adds	r7, #7
 80024cc:	f027 0707 	bic.w	r7, r7, #7
 80024d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024d4:	f107 0108 	add.w	r1, r7, #8
 80024d8:	910e      	str	r1, [sp, #56]	; 0x38
 80024da:	4614      	mov	r4, r2
 80024dc:	461d      	mov	r5, r3
 80024de:	2a00      	cmp	r2, #0
 80024e0:	f173 0300 	sbcs.w	r3, r3, #0
 80024e4:	f2c0 843a 	blt.w	8002d5c <_vfprintf_r+0xfbc>
 80024e8:	f1bb 0f00 	cmp.w	fp, #0
 80024ec:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80024f0:	f2c0 8368 	blt.w	8002bc4 <_vfprintf_r+0xe24>
 80024f4:	9b07      	ldr	r3, [sp, #28]
 80024f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024fa:	9307      	str	r3, [sp, #28]
 80024fc:	ea54 0305 	orrs.w	r3, r4, r5
 8002500:	f47f ae44 	bne.w	800218c <_vfprintf_r+0x3ec>
 8002504:	f1bb 0f00 	cmp.w	fp, #0
 8002508:	f040 8408 	bne.w	8002d1c <_vfprintf_r+0xf7c>
 800250c:	f04f 0b00 	mov.w	fp, #0
 8002510:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8002514:	ae34      	add	r6, sp, #208	; 0xd0
 8002516:	e656      	b.n	80021c6 <_vfprintf_r+0x426>
 8002518:	9b07      	ldr	r3, [sp, #28]
 800251a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251e:	9307      	str	r3, [sp, #28]
 8002520:	f898 3000 	ldrb.w	r3, [r8]
 8002524:	e4b0      	b.n	8001e88 <_vfprintf_r+0xe8>
 8002526:	f898 3000 	ldrb.w	r3, [r8]
 800252a:	2b6c      	cmp	r3, #108	; 0x6c
 800252c:	f000 85d5 	beq.w	80030da <_vfprintf_r+0x133a>
 8002530:	9807      	ldr	r0, [sp, #28]
 8002532:	f040 0010 	orr.w	r0, r0, #16
 8002536:	9007      	str	r0, [sp, #28]
 8002538:	e4a6      	b.n	8001e88 <_vfprintf_r+0xe8>
 800253a:	2a00      	cmp	r2, #0
 800253c:	f040 879f 	bne.w	800347e <_vfprintf_r+0x16de>
 8002540:	9b07      	ldr	r3, [sp, #28]
 8002542:	069f      	lsls	r7, r3, #26
 8002544:	f140 84e4 	bpl.w	8002f10 <_vfprintf_r+0x1170>
 8002548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800254a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	17cd      	asrs	r5, r1, #31
 8002550:	4608      	mov	r0, r1
 8002552:	3204      	adds	r2, #4
 8002554:	4629      	mov	r1, r5
 8002556:	920e      	str	r2, [sp, #56]	; 0x38
 8002558:	e9c3 0100 	strd	r0, r1, [r3]
 800255c:	e461      	b.n	8001e22 <_vfprintf_r+0x82>
 800255e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	930c      	str	r3, [sp, #48]	; 0x30
 8002564:	4618      	mov	r0, r3
 8002566:	2800      	cmp	r0, #0
 8002568:	4623      	mov	r3, r4
 800256a:	f103 0304 	add.w	r3, r3, #4
 800256e:	f6ff aced 	blt.w	8001f4c <_vfprintf_r+0x1ac>
 8002572:	930e      	str	r3, [sp, #56]	; 0x38
 8002574:	f898 3000 	ldrb.w	r3, [r8]
 8002578:	e486      	b.n	8001e88 <_vfprintf_r+0xe8>
 800257a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800257e:	2300      	movs	r3, #0
 8002580:	461c      	mov	r4, r3
 8002582:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002586:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800258a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800258e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002592:	2809      	cmp	r0, #9
 8002594:	d9f5      	bls.n	8002582 <_vfprintf_r+0x7e2>
 8002596:	940c      	str	r4, [sp, #48]	; 0x30
 8002598:	e478      	b.n	8001e8c <_vfprintf_r+0xec>
 800259a:	9311      	str	r3, [sp, #68]	; 0x44
 800259c:	46ab      	mov	fp, r5
 800259e:	2a00      	cmp	r2, #0
 80025a0:	f040 8769 	bne.w	8003476 <_vfprintf_r+0x16d6>
 80025a4:	9b07      	ldr	r3, [sp, #28]
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	9307      	str	r3, [sp, #28]
 80025ac:	9b07      	ldr	r3, [sp, #28]
 80025ae:	069b      	lsls	r3, r3, #26
 80025b0:	d48a      	bmi.n	80024c8 <_vfprintf_r+0x728>
 80025b2:	9b07      	ldr	r3, [sp, #28]
 80025b4:	06df      	lsls	r7, r3, #27
 80025b6:	f100 8294 	bmi.w	8002ae2 <_vfprintf_r+0xd42>
 80025ba:	9b07      	ldr	r3, [sp, #28]
 80025bc:	065e      	lsls	r6, r3, #25
 80025be:	f140 8290 	bpl.w	8002ae2 <_vfprintf_r+0xd42>
 80025c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80025c4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80025c8:	3104      	adds	r1, #4
 80025ca:	17e5      	asrs	r5, r4, #31
 80025cc:	4622      	mov	r2, r4
 80025ce:	462b      	mov	r3, r5
 80025d0:	910e      	str	r1, [sp, #56]	; 0x38
 80025d2:	e784      	b.n	80024de <_vfprintf_r+0x73e>
 80025d4:	9311      	str	r3, [sp, #68]	; 0x44
 80025d6:	46ab      	mov	fp, r5
 80025d8:	2a00      	cmp	r2, #0
 80025da:	f040 8770 	bne.w	80034be <_vfprintf_r+0x171e>
 80025de:	9b07      	ldr	r3, [sp, #28]
 80025e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80025e2:	071d      	lsls	r5, r3, #28
 80025e4:	f107 0707 	add.w	r7, r7, #7
 80025e8:	f140 8487 	bpl.w	8002efa <_vfprintf_r+0x115a>
 80025ec:	f027 0307 	bic.w	r3, r7, #7
 80025f0:	ed93 7b00 	vldr	d7, [r3]
 80025f4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80025f8:	f103 0208 	add.w	r2, r3, #8
 80025fc:	920e      	str	r2, [sp, #56]	; 0x38
 80025fe:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8002602:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8002606:	911a      	str	r1, [sp, #104]	; 0x68
 8002608:	931b      	str	r3, [sp, #108]	; 0x6c
 800260a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	4bb5      	ldr	r3, [pc, #724]	; (80028ec <_vfprintf_r+0xb4c>)
 8002618:	f005 ffcc 	bl	80085b4 <__aeabi_dcmpun>
 800261c:	2800      	cmp	r0, #0
 800261e:	f040 83eb 	bne.w	8002df8 <_vfprintf_r+0x1058>
 8002622:	f04f 32ff 	mov.w	r2, #4294967295
 8002626:	4bb1      	ldr	r3, [pc, #708]	; (80028ec <_vfprintf_r+0xb4c>)
 8002628:	4620      	mov	r0, r4
 800262a:	4629      	mov	r1, r5
 800262c:	f005 ffa4 	bl	8008578 <__aeabi_dcmple>
 8002630:	2800      	cmp	r0, #0
 8002632:	f040 83e1 	bne.w	8002df8 <_vfprintf_r+0x1058>
 8002636:	2200      	movs	r2, #0
 8002638:	2300      	movs	r3, #0
 800263a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800263e:	f005 ff91 	bl	8008564 <__aeabi_dcmplt>
 8002642:	2800      	cmp	r0, #0
 8002644:	f040 864a 	bne.w	80032dc <_vfprintf_r+0x153c>
 8002648:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800264c:	4ea8      	ldr	r6, [pc, #672]	; (80028f0 <_vfprintf_r+0xb50>)
 800264e:	4ba9      	ldr	r3, [pc, #676]	; (80028f4 <_vfprintf_r+0xb54>)
 8002650:	9907      	ldr	r1, [sp, #28]
 8002652:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002656:	9107      	str	r1, [sp, #28]
 8002658:	9911      	ldr	r1, [sp, #68]	; 0x44
 800265a:	2203      	movs	r2, #3
 800265c:	f04f 0b00 	mov.w	fp, #0
 8002660:	9209      	str	r2, [sp, #36]	; 0x24
 8002662:	2947      	cmp	r1, #71	; 0x47
 8002664:	bfd8      	it	le
 8002666:	461e      	movle	r6, r3
 8002668:	920d      	str	r2, [sp, #52]	; 0x34
 800266a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800266e:	e5b1      	b.n	80021d4 <_vfprintf_r+0x434>
 8002670:	9b07      	ldr	r3, [sp, #28]
 8002672:	f043 0308 	orr.w	r3, r3, #8
 8002676:	9307      	str	r3, [sp, #28]
 8002678:	f898 3000 	ldrb.w	r3, [r8]
 800267c:	e404      	b.n	8001e88 <_vfprintf_r+0xe8>
 800267e:	9311      	str	r3, [sp, #68]	; 0x44
 8002680:	46ab      	mov	fp, r5
 8002682:	2a00      	cmp	r2, #0
 8002684:	f43f ad67 	beq.w	8002156 <_vfprintf_r+0x3b6>
 8002688:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800268c:	e563      	b.n	8002156 <_vfprintf_r+0x3b6>
 800268e:	9311      	str	r3, [sp, #68]	; 0x44
 8002690:	46ab      	mov	fp, r5
 8002692:	2a00      	cmp	r2, #0
 8002694:	f040 870f 	bne.w	80034b6 <_vfprintf_r+0x1716>
 8002698:	9b07      	ldr	r3, [sp, #28]
 800269a:	4897      	ldr	r0, [pc, #604]	; (80028f8 <_vfprintf_r+0xb58>)
 800269c:	069c      	lsls	r4, r3, #26
 800269e:	f53f aeba 	bmi.w	8002416 <_vfprintf_r+0x676>
 80026a2:	9b07      	ldr	r3, [sp, #28]
 80026a4:	06d9      	lsls	r1, r3, #27
 80026a6:	f140 8398 	bpl.w	8002dda <_vfprintf_r+0x103a>
 80026aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026ac:	4613      	mov	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	6814      	ldr	r4, [r2, #0]
 80026b2:	930e      	str	r3, [sp, #56]	; 0x38
 80026b4:	2500      	movs	r5, #0
 80026b6:	e6b7      	b.n	8002428 <_vfprintf_r+0x688>
 80026b8:	f898 3000 	ldrb.w	r3, [r8]
 80026bc:	2900      	cmp	r1, #0
 80026be:	f47f abe3 	bne.w	8001e88 <_vfprintf_r+0xe8>
 80026c2:	2201      	movs	r2, #1
 80026c4:	2120      	movs	r1, #32
 80026c6:	f7ff bbdf 	b.w	8001e88 <_vfprintf_r+0xe8>
 80026ca:	9b07      	ldr	r3, [sp, #28]
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	9307      	str	r3, [sp, #28]
 80026d2:	f898 3000 	ldrb.w	r3, [r8]
 80026d6:	f7ff bbd7 	b.w	8001e88 <_vfprintf_r+0xe8>
 80026da:	9b07      	ldr	r3, [sp, #28]
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	9307      	str	r3, [sp, #28]
 80026e2:	f898 3000 	ldrb.w	r3, [r8]
 80026e6:	f7ff bbcf 	b.w	8001e88 <_vfprintf_r+0xe8>
 80026ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026ec:	9311      	str	r3, [sp, #68]	; 0x44
 80026ee:	6816      	ldr	r6, [r2, #0]
 80026f0:	2400      	movs	r4, #0
 80026f2:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 80026f6:	1d17      	adds	r7, r2, #4
 80026f8:	2e00      	cmp	r6, #0
 80026fa:	f000 85b7 	beq.w	800326c <_vfprintf_r+0x14cc>
 80026fe:	2d00      	cmp	r5, #0
 8002700:	f2c0 8502 	blt.w	8003108 <_vfprintf_r+0x1368>
 8002704:	462a      	mov	r2, r5
 8002706:	4621      	mov	r1, r4
 8002708:	4630      	mov	r0, r6
 800270a:	f002 fd31 	bl	8005170 <memchr>
 800270e:	2800      	cmp	r0, #0
 8002710:	f000 861c 	beq.w	800334c <_vfprintf_r+0x15ac>
 8002714:	1b83      	subs	r3, r0, r6
 8002716:	930d      	str	r3, [sp, #52]	; 0x34
 8002718:	46a3      	mov	fp, r4
 800271a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800271e:	970e      	str	r7, [sp, #56]	; 0x38
 8002720:	9309      	str	r3, [sp, #36]	; 0x24
 8002722:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8002726:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800272a:	e553      	b.n	80021d4 <_vfprintf_r+0x434>
 800272c:	f898 3000 	ldrb.w	r3, [r8]
 8002730:	2201      	movs	r2, #1
 8002732:	212b      	movs	r1, #43	; 0x2b
 8002734:	f7ff bba8 	b.w	8001e88 <_vfprintf_r+0xe8>
 8002738:	486f      	ldr	r0, [pc, #444]	; (80028f8 <_vfprintf_r+0xb58>)
 800273a:	9211      	str	r2, [sp, #68]	; 0x44
 800273c:	f1bb 0f00 	cmp.w	fp, #0
 8002740:	f040 8173 	bne.w	8002a2a <_vfprintf_r+0xc8a>
 8002744:	465f      	mov	r7, fp
 8002746:	e6e1      	b.n	800250c <_vfprintf_r+0x76c>
 8002748:	9311      	str	r3, [sp, #68]	; 0x44
 800274a:	2a00      	cmp	r2, #0
 800274c:	f040 86ab 	bne.w	80034a6 <_vfprintf_r+0x1706>
 8002750:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002752:	2a00      	cmp	r2, #0
 8002754:	f43f ac4d 	beq.w	8001ff2 <_vfprintf_r+0x252>
 8002758:	2300      	movs	r3, #0
 800275a:	2101      	movs	r1, #1
 800275c:	461f      	mov	r7, r3
 800275e:	9109      	str	r1, [sp, #36]	; 0x24
 8002760:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8002764:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002768:	469b      	mov	fp, r3
 800276a:	9313      	str	r3, [sp, #76]	; 0x4c
 800276c:	910d      	str	r1, [sp, #52]	; 0x34
 800276e:	ae2a      	add	r6, sp, #168	; 0xa8
 8002770:	e534      	b.n	80021dc <_vfprintf_r+0x43c>
 8002772:	f1bb 0f00 	cmp.w	fp, #0
 8002776:	f000 85da 	beq.w	800332e <_vfprintf_r+0x158e>
 800277a:	2700      	movs	r7, #0
 800277c:	2400      	movs	r4, #0
 800277e:	2500      	movs	r5, #0
 8002780:	e475      	b.n	800206e <_vfprintf_r+0x2ce>
 8002782:	485d      	ldr	r0, [pc, #372]	; (80028f8 <_vfprintf_r+0xb58>)
 8002784:	9307      	str	r3, [sp, #28]
 8002786:	9211      	str	r2, [sp, #68]	; 0x44
 8002788:	ea54 0305 	orrs.w	r3, r4, r5
 800278c:	970e      	str	r7, [sp, #56]	; 0x38
 800278e:	f04f 0700 	mov.w	r7, #0
 8002792:	f47f ae67 	bne.w	8002464 <_vfprintf_r+0x6c4>
 8002796:	2400      	movs	r4, #0
 8002798:	2500      	movs	r5, #0
 800279a:	e663      	b.n	8002464 <_vfprintf_r+0x6c4>
 800279c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800279e:	e56d      	b.n	800227c <_vfprintf_r+0x4dc>
 80027a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027a2:	2b65      	cmp	r3, #101	; 0x65
 80027a4:	f340 80ae 	ble.w	8002904 <_vfprintf_r+0xb64>
 80027a8:	2200      	movs	r2, #0
 80027aa:	2300      	movs	r3, #0
 80027ac:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80027b0:	f005 fece 	bl	8008550 <__aeabi_dcmpeq>
 80027b4:	2800      	cmp	r0, #0
 80027b6:	f000 813a 	beq.w	8002a2e <_vfprintf_r+0xc8e>
 80027ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80027bc:	4a4f      	ldr	r2, [pc, #316]	; (80028fc <_vfprintf_r+0xb5c>)
 80027be:	f8c9 2000 	str.w	r2, [r9]
 80027c2:	3301      	adds	r3, #1
 80027c4:	3401      	adds	r4, #1
 80027c6:	2201      	movs	r2, #1
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	9429      	str	r4, [sp, #164]	; 0xa4
 80027cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80027ce:	f8c9 2004 	str.w	r2, [r9, #4]
 80027d2:	f300 83ce 	bgt.w	8002f72 <_vfprintf_r+0x11d2>
 80027d6:	f109 0908 	add.w	r9, r9, #8
 80027da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80027dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80027de:	4293      	cmp	r3, r2
 80027e0:	db03      	blt.n	80027ea <_vfprintf_r+0xa4a>
 80027e2:	9b07      	ldr	r3, [sp, #28]
 80027e4:	07d8      	lsls	r0, r3, #31
 80027e6:	f57f adb9 	bpl.w	800235c <_vfprintf_r+0x5bc>
 80027ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80027ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80027ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80027f0:	f8c9 2000 	str.w	r2, [r9]
 80027f4:	3301      	adds	r3, #1
 80027f6:	440c      	add	r4, r1
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	9429      	str	r4, [sp, #164]	; 0xa4
 80027fc:	f8c9 1004 	str.w	r1, [r9, #4]
 8002800:	9328      	str	r3, [sp, #160]	; 0xa0
 8002802:	f300 8474 	bgt.w	80030ee <_vfprintf_r+0x134e>
 8002806:	f109 0908 	add.w	r9, r9, #8
 800280a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800280c:	1e5d      	subs	r5, r3, #1
 800280e:	2d00      	cmp	r5, #0
 8002810:	f77f ada4 	ble.w	800235c <_vfprintf_r+0x5bc>
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <_vfprintf_r+0xb60>)
 8002816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002818:	920f      	str	r2, [sp, #60]	; 0x3c
 800281a:	2d10      	cmp	r5, #16
 800281c:	f340 81b4 	ble.w	8002b88 <_vfprintf_r+0xde8>
 8002820:	2610      	movs	r6, #16
 8002822:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002824:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002828:	e005      	b.n	8002836 <_vfprintf_r+0xa96>
 800282a:	f109 0908 	add.w	r9, r9, #8
 800282e:	3d10      	subs	r5, #16
 8002830:	2d10      	cmp	r5, #16
 8002832:	f340 81a9 	ble.w	8002b88 <_vfprintf_r+0xde8>
 8002836:	3301      	adds	r3, #1
 8002838:	3410      	adds	r4, #16
 800283a:	2b07      	cmp	r3, #7
 800283c:	9429      	str	r4, [sp, #164]	; 0xa4
 800283e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002840:	f8c9 a000 	str.w	sl, [r9]
 8002844:	f8c9 6004 	str.w	r6, [r9, #4]
 8002848:	ddef      	ble.n	800282a <_vfprintf_r+0xa8a>
 800284a:	aa27      	add	r2, sp, #156	; 0x9c
 800284c:	4659      	mov	r1, fp
 800284e:	4638      	mov	r0, r7
 8002850:	f004 fc00 	bl	8007054 <__sprint_r>
 8002854:	2800      	cmp	r0, #0
 8002856:	f47f abd3 	bne.w	8002000 <_vfprintf_r+0x260>
 800285a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800285c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800285e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002862:	e7e4      	b.n	800282e <_vfprintf_r+0xa8e>
 8002864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002868:	1a9f      	subs	r7, r3, r2
 800286a:	2f00      	cmp	r7, #0
 800286c:	f77f ad2a 	ble.w	80022c4 <_vfprintf_r+0x524>
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <_vfprintf_r+0xb60>)
 8002872:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002874:	920f      	str	r2, [sp, #60]	; 0x3c
 8002876:	2f10      	cmp	r7, #16
 8002878:	dd2b      	ble.n	80028d2 <_vfprintf_r+0xb32>
 800287a:	464a      	mov	r2, r9
 800287c:	4621      	mov	r1, r4
 800287e:	46b9      	mov	r9, r7
 8002880:	2510      	movs	r5, #16
 8002882:	4637      	mov	r7, r6
 8002884:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002886:	9e08      	ldr	r6, [sp, #32]
 8002888:	e006      	b.n	8002898 <_vfprintf_r+0xaf8>
 800288a:	f1a9 0910 	sub.w	r9, r9, #16
 800288e:	f1b9 0f10 	cmp.w	r9, #16
 8002892:	f102 0208 	add.w	r2, r2, #8
 8002896:	dd18      	ble.n	80028ca <_vfprintf_r+0xb2a>
 8002898:	3301      	adds	r3, #1
 800289a:	3110      	adds	r1, #16
 800289c:	2b07      	cmp	r3, #7
 800289e:	9129      	str	r1, [sp, #164]	; 0xa4
 80028a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80028a2:	f8c2 a000 	str.w	sl, [r2]
 80028a6:	6055      	str	r5, [r2, #4]
 80028a8:	ddef      	ble.n	800288a <_vfprintf_r+0xaea>
 80028aa:	aa27      	add	r2, sp, #156	; 0x9c
 80028ac:	4631      	mov	r1, r6
 80028ae:	4620      	mov	r0, r4
 80028b0:	f004 fbd0 	bl	8007054 <__sprint_r>
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f47f aba3 	bne.w	8002000 <_vfprintf_r+0x260>
 80028ba:	f1a9 0910 	sub.w	r9, r9, #16
 80028be:	f1b9 0f10 	cmp.w	r9, #16
 80028c2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80028c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80028c6:	aa34      	add	r2, sp, #208	; 0xd0
 80028c8:	dce6      	bgt.n	8002898 <_vfprintf_r+0xaf8>
 80028ca:	463e      	mov	r6, r7
 80028cc:	460c      	mov	r4, r1
 80028ce:	464f      	mov	r7, r9
 80028d0:	4691      	mov	r9, r2
 80028d2:	3301      	adds	r3, #1
 80028d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80028d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80028d8:	443c      	add	r4, r7
 80028da:	2b07      	cmp	r3, #7
 80028dc:	9429      	str	r4, [sp, #164]	; 0xa4
 80028de:	e889 0084 	stmia.w	r9, {r2, r7}
 80028e2:	f300 822b 	bgt.w	8002d3c <_vfprintf_r+0xf9c>
 80028e6:	f109 0908 	add.w	r9, r9, #8
 80028ea:	e4eb      	b.n	80022c4 <_vfprintf_r+0x524>
 80028ec:	7fefffff 	.word	0x7fefffff
 80028f0:	08008978 	.word	0x08008978
 80028f4:	08008974 	.word	0x08008974
 80028f8:	08008998 	.word	0x08008998
 80028fc:	080089b4 	.word	0x080089b4
 8002900:	08008964 	.word	0x08008964
 8002904:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002906:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002908:	2b01      	cmp	r3, #1
 800290a:	f340 81d0 	ble.w	8002cae <_vfprintf_r+0xf0e>
 800290e:	3501      	adds	r5, #1
 8002910:	3401      	adds	r4, #1
 8002912:	2301      	movs	r3, #1
 8002914:	2d07      	cmp	r5, #7
 8002916:	9429      	str	r4, [sp, #164]	; 0xa4
 8002918:	9528      	str	r5, [sp, #160]	; 0xa0
 800291a:	f8c9 6000 	str.w	r6, [r9]
 800291e:	f8c9 3004 	str.w	r3, [r9, #4]
 8002922:	f300 81e1 	bgt.w	8002ce8 <_vfprintf_r+0xf48>
 8002926:	f109 0908 	add.w	r9, r9, #8
 800292a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800292c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800292e:	f8c9 3000 	str.w	r3, [r9]
 8002932:	3501      	adds	r5, #1
 8002934:	4414      	add	r4, r2
 8002936:	2d07      	cmp	r5, #7
 8002938:	9429      	str	r4, [sp, #164]	; 0xa4
 800293a:	9528      	str	r5, [sp, #160]	; 0xa0
 800293c:	f8c9 2004 	str.w	r2, [r9, #4]
 8002940:	f300 81df 	bgt.w	8002d02 <_vfprintf_r+0xf62>
 8002944:	f109 0908 	add.w	r9, r9, #8
 8002948:	2300      	movs	r3, #0
 800294a:	2200      	movs	r2, #0
 800294c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002950:	f005 fdfe 	bl	8008550 <__aeabi_dcmpeq>
 8002954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002956:	2800      	cmp	r0, #0
 8002958:	f040 80cc 	bne.w	8002af4 <_vfprintf_r+0xd54>
 800295c:	3b01      	subs	r3, #1
 800295e:	3501      	adds	r5, #1
 8002960:	3601      	adds	r6, #1
 8002962:	441c      	add	r4, r3
 8002964:	2d07      	cmp	r5, #7
 8002966:	9528      	str	r5, [sp, #160]	; 0xa0
 8002968:	9429      	str	r4, [sp, #164]	; 0xa4
 800296a:	f8c9 6000 	str.w	r6, [r9]
 800296e:	f8c9 3004 	str.w	r3, [r9, #4]
 8002972:	f300 81ac 	bgt.w	8002cce <_vfprintf_r+0xf2e>
 8002976:	f109 0908 	add.w	r9, r9, #8
 800297a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800297c:	f8c9 2004 	str.w	r2, [r9, #4]
 8002980:	3501      	adds	r5, #1
 8002982:	4414      	add	r4, r2
 8002984:	ab23      	add	r3, sp, #140	; 0x8c
 8002986:	2d07      	cmp	r5, #7
 8002988:	9429      	str	r4, [sp, #164]	; 0xa4
 800298a:	9528      	str	r5, [sp, #160]	; 0xa0
 800298c:	f8c9 3000 	str.w	r3, [r9]
 8002990:	f77f ace2 	ble.w	8002358 <_vfprintf_r+0x5b8>
 8002994:	aa27      	add	r2, sp, #156	; 0x9c
 8002996:	9908      	ldr	r1, [sp, #32]
 8002998:	980a      	ldr	r0, [sp, #40]	; 0x28
 800299a:	f004 fb5b 	bl	8007054 <__sprint_r>
 800299e:	2800      	cmp	r0, #0
 80029a0:	f47f ab2e 	bne.w	8002000 <_vfprintf_r+0x260>
 80029a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80029a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80029aa:	e4d7      	b.n	800235c <_vfprintf_r+0x5bc>
 80029ac:	aa27      	add	r2, sp, #156	; 0x9c
 80029ae:	9908      	ldr	r1, [sp, #32]
 80029b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029b2:	f004 fb4f 	bl	8007054 <__sprint_r>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	f43f ad1e 	beq.w	80023f8 <_vfprintf_r+0x658>
 80029bc:	f7ff bb20 	b.w	8002000 <_vfprintf_r+0x260>
 80029c0:	aa27      	add	r2, sp, #156	; 0x9c
 80029c2:	9908      	ldr	r1, [sp, #32]
 80029c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029c6:	f004 fb45 	bl	8007054 <__sprint_r>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	f47f ab18 	bne.w	8002000 <_vfprintf_r+0x260>
 80029d0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80029d2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80029d6:	e4ae      	b.n	8002336 <_vfprintf_r+0x596>
 80029d8:	aa27      	add	r2, sp, #156	; 0x9c
 80029da:	9908      	ldr	r1, [sp, #32]
 80029dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029de:	f004 fb39 	bl	8007054 <__sprint_r>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	f47f ab0c 	bne.w	8002000 <_vfprintf_r+0x260>
 80029e8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80029ea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80029ee:	e455      	b.n	800229c <_vfprintf_r+0x4fc>
 80029f0:	aa27      	add	r2, sp, #156	; 0x9c
 80029f2:	9908      	ldr	r1, [sp, #32]
 80029f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029f6:	f004 fb2d 	bl	8007054 <__sprint_r>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	f47f ab00 	bne.w	8002000 <_vfprintf_r+0x260>
 8002a00:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a02:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a06:	e459      	b.n	80022bc <_vfprintf_r+0x51c>
 8002a08:	f1bb 0f00 	cmp.w	fp, #0
 8002a0c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002a10:	f2c0 830d 	blt.w	800302e <_vfprintf_r+0x128e>
 8002a14:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002a18:	9307      	str	r3, [sp, #28]
 8002a1a:	ea54 0305 	orrs.w	r3, r4, r5
 8002a1e:	f47f ad21 	bne.w	8002464 <_vfprintf_r+0x6c4>
 8002a22:	f1bb 0f00 	cmp.w	fp, #0
 8002a26:	f43f ae8d 	beq.w	8002744 <_vfprintf_r+0x9a4>
 8002a2a:	2700      	movs	r7, #0
 8002a2c:	e6b3      	b.n	8002796 <_vfprintf_r+0x9f6>
 8002a2e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002a30:	2d00      	cmp	r5, #0
 8002a32:	f340 82aa 	ble.w	8002f8a <_vfprintf_r+0x11ea>
 8002a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002a38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	bfa8      	it	ge
 8002a3e:	4613      	movge	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	461d      	mov	r5, r3
 8002a44:	dd0d      	ble.n	8002a62 <_vfprintf_r+0xcc2>
 8002a46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002a48:	f8c9 6000 	str.w	r6, [r9]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	442c      	add	r4, r5
 8002a50:	2b07      	cmp	r3, #7
 8002a52:	9429      	str	r4, [sp, #164]	; 0xa4
 8002a54:	f8c9 5004 	str.w	r5, [r9, #4]
 8002a58:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a5a:	f300 8387 	bgt.w	800316c <_vfprintf_r+0x13cc>
 8002a5e:	f109 0908 	add.w	r9, r9, #8
 8002a62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002a64:	2d00      	cmp	r5, #0
 8002a66:	bfa8      	it	ge
 8002a68:	1b5b      	subge	r3, r3, r5
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	f340 80be 	ble.w	8002bee <_vfprintf_r+0xe4e>
 8002a72:	4ab9      	ldr	r2, [pc, #740]	; (8002d58 <_vfprintf_r+0xfb8>)
 8002a74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002a76:	920f      	str	r2, [sp, #60]	; 0x3c
 8002a78:	2d10      	cmp	r5, #16
 8002a7a:	f340 826d 	ble.w	8002f58 <_vfprintf_r+0x11b8>
 8002a7e:	4622      	mov	r2, r4
 8002a80:	2710      	movs	r7, #16
 8002a82:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002a86:	9c08      	ldr	r4, [sp, #32]
 8002a88:	e005      	b.n	8002a96 <_vfprintf_r+0xcf6>
 8002a8a:	f109 0908 	add.w	r9, r9, #8
 8002a8e:	3d10      	subs	r5, #16
 8002a90:	2d10      	cmp	r5, #16
 8002a92:	f340 8260 	ble.w	8002f56 <_vfprintf_r+0x11b6>
 8002a96:	3301      	adds	r3, #1
 8002a98:	3210      	adds	r2, #16
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	9229      	str	r2, [sp, #164]	; 0xa4
 8002a9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002aa0:	f8c9 a000 	str.w	sl, [r9]
 8002aa4:	f8c9 7004 	str.w	r7, [r9, #4]
 8002aa8:	ddef      	ble.n	8002a8a <_vfprintf_r+0xcea>
 8002aaa:	aa27      	add	r2, sp, #156	; 0x9c
 8002aac:	4621      	mov	r1, r4
 8002aae:	4658      	mov	r0, fp
 8002ab0:	f004 fad0 	bl	8007054 <__sprint_r>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	f47f aaa3 	bne.w	8002000 <_vfprintf_r+0x260>
 8002aba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002abc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002abe:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002ac2:	e7e4      	b.n	8002a8e <_vfprintf_r+0xcee>
 8002ac4:	aa27      	add	r2, sp, #156	; 0x9c
 8002ac6:	9908      	ldr	r1, [sp, #32]
 8002ac8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002aca:	f004 fac3 	bl	8007054 <__sprint_r>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	f47f aa96 	bne.w	8002000 <_vfprintf_r+0x260>
 8002ad4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002ad8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002ada:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002ade:	f7ff bbcd 	b.w	800227c <_vfprintf_r+0x4dc>
 8002ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ae4:	6814      	ldr	r4, [r2, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	3304      	adds	r3, #4
 8002aea:	17e5      	asrs	r5, r4, #31
 8002aec:	930e      	str	r3, [sp, #56]	; 0x38
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	e4f4      	b.n	80024de <_vfprintf_r+0x73e>
 8002af4:	1e5e      	subs	r6, r3, #1
 8002af6:	2e00      	cmp	r6, #0
 8002af8:	f77f af3f 	ble.w	800297a <_vfprintf_r+0xbda>
 8002afc:	4b96      	ldr	r3, [pc, #600]	; (8002d58 <_vfprintf_r+0xfb8>)
 8002afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b00:	2e10      	cmp	r6, #16
 8002b02:	f340 8110 	ble.w	8002d26 <_vfprintf_r+0xf86>
 8002b06:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8002b0a:	2710      	movs	r7, #16
 8002b0c:	46b0      	mov	r8, r6
 8002b0e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002b12:	9e08      	ldr	r6, [sp, #32]
 8002b14:	e007      	b.n	8002b26 <_vfprintf_r+0xd86>
 8002b16:	f109 0908 	add.w	r9, r9, #8
 8002b1a:	f1a8 0810 	sub.w	r8, r8, #16
 8002b1e:	f1b8 0f10 	cmp.w	r8, #16
 8002b22:	f340 80fd 	ble.w	8002d20 <_vfprintf_r+0xf80>
 8002b26:	3501      	adds	r5, #1
 8002b28:	3410      	adds	r4, #16
 8002b2a:	2d07      	cmp	r5, #7
 8002b2c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002b2e:	9528      	str	r5, [sp, #160]	; 0xa0
 8002b30:	f8c9 a000 	str.w	sl, [r9]
 8002b34:	f8c9 7004 	str.w	r7, [r9, #4]
 8002b38:	dded      	ble.n	8002b16 <_vfprintf_r+0xd76>
 8002b3a:	aa27      	add	r2, sp, #156	; 0x9c
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4658      	mov	r0, fp
 8002b40:	f004 fa88 	bl	8007054 <__sprint_r>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	f47f aa5b 	bne.w	8002000 <_vfprintf_r+0x260>
 8002b4a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002b4c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002b4e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002b52:	e7e2      	b.n	8002b1a <_vfprintf_r+0xd7a>
 8002b54:	9907      	ldr	r1, [sp, #28]
 8002b56:	f011 0210 	ands.w	r2, r1, #16
 8002b5a:	d020      	beq.n	8002b9e <_vfprintf_r+0xdfe>
 8002b5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002b5e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002b62:	f1bb 0f00 	cmp.w	fp, #0
 8002b66:	6804      	ldr	r4, [r0, #0]
 8002b68:	f100 0704 	add.w	r7, r0, #4
 8002b6c:	f04f 0500 	mov.w	r5, #0
 8002b70:	db26      	blt.n	8002bc0 <_vfprintf_r+0xe20>
 8002b72:	460a      	mov	r2, r1
 8002b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b78:	9207      	str	r2, [sp, #28]
 8002b7a:	ea54 0205 	orrs.w	r2, r4, r5
 8002b7e:	970e      	str	r7, [sp, #56]	; 0x38
 8002b80:	461f      	mov	r7, r3
 8002b82:	f47f ab03 	bne.w	800218c <_vfprintf_r+0x3ec>
 8002b86:	e4bd      	b.n	8002504 <_vfprintf_r+0x764>
 8002b88:	3301      	adds	r3, #1
 8002b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b8e:	442c      	add	r4, r5
 8002b90:	2b07      	cmp	r3, #7
 8002b92:	9429      	str	r4, [sp, #164]	; 0xa4
 8002b94:	e889 0024 	stmia.w	r9, {r2, r5}
 8002b98:	f77f abde 	ble.w	8002358 <_vfprintf_r+0x5b8>
 8002b9c:	e6fa      	b.n	8002994 <_vfprintf_r+0xbf4>
 8002b9e:	9907      	ldr	r1, [sp, #28]
 8002ba0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8002ba4:	f040 824a 	bne.w	800303c <_vfprintf_r+0x129c>
 8002ba8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002baa:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002bae:	f1bb 0f00 	cmp.w	fp, #0
 8002bb2:	680c      	ldr	r4, [r1, #0]
 8002bb4:	f101 0704 	add.w	r7, r1, #4
 8002bb8:	f04f 0500 	mov.w	r5, #0
 8002bbc:	f280 811a 	bge.w	8002df4 <_vfprintf_r+0x1054>
 8002bc0:	970e      	str	r7, [sp, #56]	; 0x38
 8002bc2:	461f      	mov	r7, r3
 8002bc4:	ea54 0305 	orrs.w	r3, r4, r5
 8002bc8:	f47f aae0 	bne.w	800218c <_vfprintf_r+0x3ec>
 8002bcc:	ae44      	add	r6, sp, #272	; 0x110
 8002bce:	3430      	adds	r4, #48	; 0x30
 8002bd0:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8002bd4:	f7ff baf4 	b.w	80021c0 <_vfprintf_r+0x420>
 8002bd8:	aa27      	add	r2, sp, #156	; 0x9c
 8002bda:	9908      	ldr	r1, [sp, #32]
 8002bdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002bde:	f004 fa39 	bl	8007054 <__sprint_r>
 8002be2:	2800      	cmp	r0, #0
 8002be4:	f47f aa0c 	bne.w	8002000 <_vfprintf_r+0x260>
 8002be8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002bea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002bee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bf2:	4432      	add	r2, r6
 8002bf4:	4617      	mov	r7, r2
 8002bf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	db47      	blt.n	8002c8c <_vfprintf_r+0xeec>
 8002bfc:	9a07      	ldr	r2, [sp, #28]
 8002bfe:	07d2      	lsls	r2, r2, #31
 8002c00:	d444      	bmi.n	8002c8c <_vfprintf_r+0xeec>
 8002c02:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002c04:	440e      	add	r6, r1
 8002c06:	1bf5      	subs	r5, r6, r7
 8002c08:	1acb      	subs	r3, r1, r3
 8002c0a:	429d      	cmp	r5, r3
 8002c0c:	bfa8      	it	ge
 8002c0e:	461d      	movge	r5, r3
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	462e      	mov	r6, r5
 8002c14:	dd0d      	ble.n	8002c32 <_vfprintf_r+0xe92>
 8002c16:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002c18:	f8c9 7000 	str.w	r7, [r9]
 8002c1c:	3201      	adds	r2, #1
 8002c1e:	442c      	add	r4, r5
 8002c20:	2a07      	cmp	r2, #7
 8002c22:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c24:	f8c9 5004 	str.w	r5, [r9, #4]
 8002c28:	9228      	str	r2, [sp, #160]	; 0xa0
 8002c2a:	f300 832e 	bgt.w	800328a <_vfprintf_r+0x14ea>
 8002c2e:	f109 0908 	add.w	r9, r9, #8
 8002c32:	2e00      	cmp	r6, #0
 8002c34:	bfac      	ite	ge
 8002c36:	1b9d      	subge	r5, r3, r6
 8002c38:	461d      	movlt	r5, r3
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	f77f ab8e 	ble.w	800235c <_vfprintf_r+0x5bc>
 8002c40:	4a45      	ldr	r2, [pc, #276]	; (8002d58 <_vfprintf_r+0xfb8>)
 8002c42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002c44:	920f      	str	r2, [sp, #60]	; 0x3c
 8002c46:	2d10      	cmp	r5, #16
 8002c48:	dd9e      	ble.n	8002b88 <_vfprintf_r+0xde8>
 8002c4a:	2610      	movs	r6, #16
 8002c4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002c4e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002c52:	e004      	b.n	8002c5e <_vfprintf_r+0xebe>
 8002c54:	f109 0908 	add.w	r9, r9, #8
 8002c58:	3d10      	subs	r5, #16
 8002c5a:	2d10      	cmp	r5, #16
 8002c5c:	dd94      	ble.n	8002b88 <_vfprintf_r+0xde8>
 8002c5e:	3301      	adds	r3, #1
 8002c60:	3410      	adds	r4, #16
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c66:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c68:	f8c9 a000 	str.w	sl, [r9]
 8002c6c:	f8c9 6004 	str.w	r6, [r9, #4]
 8002c70:	ddf0      	ble.n	8002c54 <_vfprintf_r+0xeb4>
 8002c72:	aa27      	add	r2, sp, #156	; 0x9c
 8002c74:	4659      	mov	r1, fp
 8002c76:	4638      	mov	r0, r7
 8002c78:	f004 f9ec 	bl	8007054 <__sprint_r>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	f47f a9bf 	bne.w	8002000 <_vfprintf_r+0x260>
 8002c82:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002c84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002c86:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002c8a:	e7e5      	b.n	8002c58 <_vfprintf_r+0xeb8>
 8002c8c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002c8e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002c90:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002c92:	f8c9 1000 	str.w	r1, [r9]
 8002c96:	3201      	adds	r2, #1
 8002c98:	4404      	add	r4, r0
 8002c9a:	2a07      	cmp	r2, #7
 8002c9c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c9e:	f8c9 0004 	str.w	r0, [r9, #4]
 8002ca2:	9228      	str	r2, [sp, #160]	; 0xa0
 8002ca4:	f300 82cf 	bgt.w	8003246 <_vfprintf_r+0x14a6>
 8002ca8:	f109 0908 	add.w	r9, r9, #8
 8002cac:	e7a9      	b.n	8002c02 <_vfprintf_r+0xe62>
 8002cae:	9b07      	ldr	r3, [sp, #28]
 8002cb0:	07df      	lsls	r7, r3, #31
 8002cb2:	f53f ae2c 	bmi.w	800290e <_vfprintf_r+0xb6e>
 8002cb6:	3501      	adds	r5, #1
 8002cb8:	3401      	adds	r4, #1
 8002cba:	2301      	movs	r3, #1
 8002cbc:	2d07      	cmp	r5, #7
 8002cbe:	9429      	str	r4, [sp, #164]	; 0xa4
 8002cc0:	9528      	str	r5, [sp, #160]	; 0xa0
 8002cc2:	f8c9 6000 	str.w	r6, [r9]
 8002cc6:	f8c9 3004 	str.w	r3, [r9, #4]
 8002cca:	f77f ae54 	ble.w	8002976 <_vfprintf_r+0xbd6>
 8002cce:	aa27      	add	r2, sp, #156	; 0x9c
 8002cd0:	9908      	ldr	r1, [sp, #32]
 8002cd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cd4:	f004 f9be 	bl	8007054 <__sprint_r>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	f47f a991 	bne.w	8002000 <_vfprintf_r+0x260>
 8002cde:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002ce0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002ce2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002ce6:	e648      	b.n	800297a <_vfprintf_r+0xbda>
 8002ce8:	aa27      	add	r2, sp, #156	; 0x9c
 8002cea:	9908      	ldr	r1, [sp, #32]
 8002cec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cee:	f004 f9b1 	bl	8007054 <__sprint_r>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	f47f a984 	bne.w	8002000 <_vfprintf_r+0x260>
 8002cf8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002cfa:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002cfc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d00:	e613      	b.n	800292a <_vfprintf_r+0xb8a>
 8002d02:	aa27      	add	r2, sp, #156	; 0x9c
 8002d04:	9908      	ldr	r1, [sp, #32]
 8002d06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d08:	f004 f9a4 	bl	8007054 <__sprint_r>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	f47f a977 	bne.w	8002000 <_vfprintf_r+0x260>
 8002d12:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002d14:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002d16:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d1a:	e615      	b.n	8002948 <_vfprintf_r+0xba8>
 8002d1c:	2400      	movs	r4, #0
 8002d1e:	e755      	b.n	8002bcc <_vfprintf_r+0xe2c>
 8002d20:	4646      	mov	r6, r8
 8002d22:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8002d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d28:	3501      	adds	r5, #1
 8002d2a:	4434      	add	r4, r6
 8002d2c:	2d07      	cmp	r5, #7
 8002d2e:	9429      	str	r4, [sp, #164]	; 0xa4
 8002d30:	9528      	str	r5, [sp, #160]	; 0xa0
 8002d32:	e889 0048 	stmia.w	r9, {r3, r6}
 8002d36:	f77f ae1e 	ble.w	8002976 <_vfprintf_r+0xbd6>
 8002d3a:	e7c8      	b.n	8002cce <_vfprintf_r+0xf2e>
 8002d3c:	aa27      	add	r2, sp, #156	; 0x9c
 8002d3e:	9908      	ldr	r1, [sp, #32]
 8002d40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d42:	f004 f987 	bl	8007054 <__sprint_r>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	f47f a95a 	bne.w	8002000 <_vfprintf_r+0x260>
 8002d4c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002d4e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d52:	f7ff bab7 	b.w	80022c4 <_vfprintf_r+0x524>
 8002d56:	bf00      	nop
 8002d58:	08008964 	.word	0x08008964
 8002d5c:	4264      	negs	r4, r4
 8002d5e:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8002d62:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8002d66:	f1bb 0f00 	cmp.w	fp, #0
 8002d6a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002d6e:	f6ff aa0d 	blt.w	800218c <_vfprintf_r+0x3ec>
 8002d72:	9b07      	ldr	r3, [sp, #28]
 8002d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d78:	9307      	str	r3, [sp, #28]
 8002d7a:	f7ff ba07 	b.w	800218c <_vfprintf_r+0x3ec>
 8002d7e:	9907      	ldr	r1, [sp, #28]
 8002d80:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8002d84:	d017      	beq.n	8002db6 <_vfprintf_r+0x1016>
 8002d86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002d88:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f1bb 0f00 	cmp.w	fp, #0
 8002d92:	f103 0304 	add.w	r3, r3, #4
 8002d96:	8804      	ldrh	r4, [r0, #0]
 8002d98:	f04f 0500 	mov.w	r5, #0
 8002d9c:	f2c0 831b 	blt.w	80033d6 <_vfprintf_r+0x1636>
 8002da0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002da4:	9107      	str	r1, [sp, #28]
 8002da6:	ea54 0105 	orrs.w	r1, r4, r5
 8002daa:	930e      	str	r3, [sp, #56]	; 0x38
 8002dac:	f43f ace1 	beq.w	8002772 <_vfprintf_r+0x9d2>
 8002db0:	4617      	mov	r7, r2
 8002db2:	f7ff b95c 	b.w	800206e <_vfprintf_r+0x2ce>
 8002db6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002db8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002dbc:	f1bb 0f00 	cmp.w	fp, #0
 8002dc0:	680c      	ldr	r4, [r1, #0]
 8002dc2:	f101 0704 	add.w	r7, r1, #4
 8002dc6:	f04f 0500 	mov.w	r5, #0
 8002dca:	db02      	blt.n	8002dd2 <_vfprintf_r+0x1032>
 8002dcc:	9a07      	ldr	r2, [sp, #28]
 8002dce:	f7ff b9af 	b.w	8002130 <_vfprintf_r+0x390>
 8002dd2:	970e      	str	r7, [sp, #56]	; 0x38
 8002dd4:	2700      	movs	r7, #0
 8002dd6:	f7ff b94a 	b.w	800206e <_vfprintf_r+0x2ce>
 8002dda:	9b07      	ldr	r3, [sp, #28]
 8002ddc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002de2:	4613      	mov	r3, r2
 8002de4:	f000 8142 	beq.w	800306c <_vfprintf_r+0x12cc>
 8002de8:	3304      	adds	r3, #4
 8002dea:	8814      	ldrh	r4, [r2, #0]
 8002dec:	930e      	str	r3, [sp, #56]	; 0x38
 8002dee:	2500      	movs	r5, #0
 8002df0:	f7ff bb1a 	b.w	8002428 <_vfprintf_r+0x688>
 8002df4:	9a07      	ldr	r2, [sp, #28]
 8002df6:	e6bd      	b.n	8002b74 <_vfprintf_r+0xdd4>
 8002df8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f005 fbd8 	bl	80085b4 <__aeabi_dcmpun>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f040 82e8 	bne.w	80033da <_vfprintf_r+0x163a>
 8002e0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e0c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002e10:	f023 0720 	bic.w	r7, r3, #32
 8002e14:	f000 825f 	beq.w	80032d6 <_vfprintf_r+0x1536>
 8002e18:	2f47      	cmp	r7, #71	; 0x47
 8002e1a:	f000 8158 	beq.w	80030ce <_vfprintf_r+0x132e>
 8002e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002e20:	9a07      	ldr	r2, [sp, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	920f      	str	r2, [sp, #60]	; 0x3c
 8002e2a:	f2c0 825c 	blt.w	80032e6 <_vfprintf_r+0x1546>
 8002e2e:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8002e32:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002e36:	2300      	movs	r3, #0
 8002e38:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e3c:	2b66      	cmp	r3, #102	; 0x66
 8002e3e:	f000 8233 	beq.w	80032a8 <_vfprintf_r+0x1508>
 8002e42:	2b46      	cmp	r3, #70	; 0x46
 8002e44:	f000 8125 	beq.w	8003092 <_vfprintf_r+0x12f2>
 8002e48:	2f45      	cmp	r7, #69	; 0x45
 8002e4a:	bf0c      	ite	eq
 8002e4c:	f10b 0501 	addeq.w	r5, fp, #1
 8002e50:	465d      	movne	r5, fp
 8002e52:	a825      	add	r0, sp, #148	; 0x94
 8002e54:	a922      	add	r1, sp, #136	; 0x88
 8002e56:	aa21      	add	r2, sp, #132	; 0x84
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9004      	str	r0, [sp, #16]
 8002e5c:	9202      	str	r2, [sp, #8]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	9501      	str	r5, [sp, #4]
 8002e62:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8002e66:	9103      	str	r1, [sp, #12]
 8002e68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e6a:	f000 fc89 	bl	8003780 <_dtoa_r>
 8002e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e70:	2b67      	cmp	r3, #103	; 0x67
 8002e72:	4606      	mov	r6, r0
 8002e74:	f040 8275 	bne.w	8003362 <_vfprintf_r+0x15c2>
 8002e78:	9b07      	ldr	r3, [sp, #28]
 8002e7a:	07da      	lsls	r2, r3, #31
 8002e7c:	f140 8294 	bpl.w	80033a8 <_vfprintf_r+0x1608>
 8002e80:	1974      	adds	r4, r6, r5
 8002e82:	2200      	movs	r2, #0
 8002e84:	2300      	movs	r3, #0
 8002e86:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8002e8a:	f005 fb61 	bl	8008550 <__aeabi_dcmpeq>
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	f040 8178 	bne.w	8003184 <_vfprintf_r+0x13e4>
 8002e94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002e96:	429c      	cmp	r4, r3
 8002e98:	d906      	bls.n	8002ea8 <_vfprintf_r+0x1108>
 8002e9a:	2130      	movs	r1, #48	; 0x30
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	9225      	str	r2, [sp, #148]	; 0x94
 8002ea0:	7019      	strb	r1, [r3, #0]
 8002ea2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d8f9      	bhi.n	8002e9c <_vfprintf_r+0x10fc>
 8002ea8:	1b9b      	subs	r3, r3, r6
 8002eaa:	2f47      	cmp	r7, #71	; 0x47
 8002eac:	9312      	str	r3, [sp, #72]	; 0x48
 8002eae:	f000 8156 	beq.w	800315e <_vfprintf_r+0x13be>
 8002eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002eb4:	2b65      	cmp	r3, #101	; 0x65
 8002eb6:	f340 8263 	ble.w	8003380 <_vfprintf_r+0x15e0>
 8002eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ebc:	2b66      	cmp	r3, #102	; 0x66
 8002ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ec0:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ec2:	f000 8226 	beq.w	8003312 <_vfprintf_r+0x1572>
 8002ec6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002ec8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002eca:	428a      	cmp	r2, r1
 8002ecc:	f2c0 8214 	blt.w	80032f8 <_vfprintf_r+0x1558>
 8002ed0:	9b07      	ldr	r3, [sp, #28]
 8002ed2:	07db      	lsls	r3, r3, #31
 8002ed4:	f100 826a 	bmi.w	80033ac <_vfprintf_r+0x160c>
 8002ed8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002edc:	920d      	str	r2, [sp, #52]	; 0x34
 8002ede:	2267      	movs	r2, #103	; 0x67
 8002ee0:	9211      	str	r2, [sp, #68]	; 0x44
 8002ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ee4:	2a00      	cmp	r2, #0
 8002ee6:	f040 8117 	bne.w	8003118 <_vfprintf_r+0x1378>
 8002eea:	9309      	str	r3, [sp, #36]	; 0x24
 8002eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002eee:	9307      	str	r3, [sp, #28]
 8002ef0:	4693      	mov	fp, r2
 8002ef2:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002ef6:	f7ff b96d 	b.w	80021d4 <_vfprintf_r+0x434>
 8002efa:	f027 0707 	bic.w	r7, r7, #7
 8002efe:	ed97 7b00 	vldr	d7, [r7]
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8002f0c:	f7ff bb77 	b.w	80025fe <_vfprintf_r+0x85e>
 8002f10:	9b07      	ldr	r3, [sp, #28]
 8002f12:	06de      	lsls	r6, r3, #27
 8002f14:	d40b      	bmi.n	8002f2e <_vfprintf_r+0x118e>
 8002f16:	9b07      	ldr	r3, [sp, #28]
 8002f18:	065d      	lsls	r5, r3, #25
 8002f1a:	d508      	bpl.n	8002f2e <_vfprintf_r+0x118e>
 8002f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	3204      	adds	r2, #4
 8002f22:	920e      	str	r2, [sp, #56]	; 0x38
 8002f24:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	f7fe bf7a 	b.w	8001e22 <_vfprintf_r+0x82>
 8002f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	3204      	adds	r2, #4
 8002f34:	920e      	str	r2, [sp, #56]	; 0x38
 8002f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f7fe bf72 	b.w	8001e22 <_vfprintf_r+0x82>
 8002f3e:	2700      	movs	r7, #0
 8002f40:	45bb      	cmp	fp, r7
 8002f42:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002f46:	f6ff ac26 	blt.w	8002796 <_vfprintf_r+0x9f6>
 8002f4a:	9b07      	ldr	r3, [sp, #28]
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f50:	9307      	str	r3, [sp, #28]
 8002f52:	f7ff bbf3 	b.w	800273c <_vfprintf_r+0x99c>
 8002f56:	4614      	mov	r4, r2
 8002f58:	3301      	adds	r3, #1
 8002f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f5c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f5e:	442c      	add	r4, r5
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f64:	e889 0024 	stmia.w	r9, {r2, r5}
 8002f68:	f73f ae36 	bgt.w	8002bd8 <_vfprintf_r+0xe38>
 8002f6c:	f109 0908 	add.w	r9, r9, #8
 8002f70:	e63d      	b.n	8002bee <_vfprintf_r+0xe4e>
 8002f72:	aa27      	add	r2, sp, #156	; 0x9c
 8002f74:	9908      	ldr	r1, [sp, #32]
 8002f76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002f78:	f004 f86c 	bl	8007054 <__sprint_r>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	f47f a83f 	bne.w	8002000 <_vfprintf_r+0x260>
 8002f82:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002f84:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002f88:	e427      	b.n	80027da <_vfprintf_r+0xa3a>
 8002f8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f8c:	4ab4      	ldr	r2, [pc, #720]	; (8003260 <_vfprintf_r+0x14c0>)
 8002f8e:	f8c9 2000 	str.w	r2, [r9]
 8002f92:	3301      	adds	r3, #1
 8002f94:	3401      	adds	r4, #1
 8002f96:	2201      	movs	r2, #1
 8002f98:	2b07      	cmp	r3, #7
 8002f9a:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f9e:	f8c9 2004 	str.w	r2, [r9, #4]
 8002fa2:	dc69      	bgt.n	8003078 <_vfprintf_r+0x12d8>
 8002fa4:	f109 0908 	add.w	r9, r9, #8
 8002fa8:	b92d      	cbnz	r5, 8002fb6 <_vfprintf_r+0x1216>
 8002faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002fac:	b91b      	cbnz	r3, 8002fb6 <_vfprintf_r+0x1216>
 8002fae:	9b07      	ldr	r3, [sp, #28]
 8002fb0:	07d9      	lsls	r1, r3, #31
 8002fb2:	f57f a9d3 	bpl.w	800235c <_vfprintf_r+0x5bc>
 8002fb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002fb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002fba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002fbc:	f8c9 2000 	str.w	r2, [r9]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	440c      	add	r4, r1
 8002fc4:	2b07      	cmp	r3, #7
 8002fc6:	9429      	str	r4, [sp, #164]	; 0xa4
 8002fc8:	f8c9 1004 	str.w	r1, [r9, #4]
 8002fcc:	9328      	str	r3, [sp, #160]	; 0xa0
 8002fce:	f300 81d9 	bgt.w	8003384 <_vfprintf_r+0x15e4>
 8002fd2:	f109 0908 	add.w	r9, r9, #8
 8002fd6:	426d      	negs	r5, r5
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	f340 80b3 	ble.w	8003144 <_vfprintf_r+0x13a4>
 8002fde:	4aa1      	ldr	r2, [pc, #644]	; (8003264 <_vfprintf_r+0x14c4>)
 8002fe0:	920f      	str	r2, [sp, #60]	; 0x3c
 8002fe2:	2d10      	cmp	r5, #16
 8002fe4:	f340 8122 	ble.w	800322c <_vfprintf_r+0x148c>
 8002fe8:	4622      	mov	r2, r4
 8002fea:	2710      	movs	r7, #16
 8002fec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002ff0:	9c08      	ldr	r4, [sp, #32]
 8002ff2:	e005      	b.n	8003000 <_vfprintf_r+0x1260>
 8002ff4:	f109 0908 	add.w	r9, r9, #8
 8002ff8:	3d10      	subs	r5, #16
 8002ffa:	2d10      	cmp	r5, #16
 8002ffc:	f340 8115 	ble.w	800322a <_vfprintf_r+0x148a>
 8003000:	3301      	adds	r3, #1
 8003002:	3210      	adds	r2, #16
 8003004:	2b07      	cmp	r3, #7
 8003006:	9229      	str	r2, [sp, #164]	; 0xa4
 8003008:	9328      	str	r3, [sp, #160]	; 0xa0
 800300a:	f8c9 a000 	str.w	sl, [r9]
 800300e:	f8c9 7004 	str.w	r7, [r9, #4]
 8003012:	ddef      	ble.n	8002ff4 <_vfprintf_r+0x1254>
 8003014:	aa27      	add	r2, sp, #156	; 0x9c
 8003016:	4621      	mov	r1, r4
 8003018:	4658      	mov	r0, fp
 800301a:	f004 f81b 	bl	8007054 <__sprint_r>
 800301e:	2800      	cmp	r0, #0
 8003020:	f47e afee 	bne.w	8002000 <_vfprintf_r+0x260>
 8003024:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003026:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003028:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800302c:	e7e4      	b.n	8002ff8 <_vfprintf_r+0x1258>
 800302e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003030:	f7ff bbaa 	b.w	8002788 <_vfprintf_r+0x9e8>
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f7fe bfe8 	b.w	800200c <_vfprintf_r+0x26c>
 800303c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800303e:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003042:	4603      	mov	r3, r0
 8003044:	f1bb 0f00 	cmp.w	fp, #0
 8003048:	f103 0304 	add.w	r3, r3, #4
 800304c:	8804      	ldrh	r4, [r0, #0]
 800304e:	f04f 0500 	mov.w	r5, #0
 8003052:	f2c0 81b4 	blt.w	80033be <_vfprintf_r+0x161e>
 8003056:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800305a:	9107      	str	r1, [sp, #28]
 800305c:	ea54 0105 	orrs.w	r1, r4, r5
 8003060:	930e      	str	r3, [sp, #56]	; 0x38
 8003062:	4617      	mov	r7, r2
 8003064:	f47f a892 	bne.w	800218c <_vfprintf_r+0x3ec>
 8003068:	f7ff ba4c 	b.w	8002504 <_vfprintf_r+0x764>
 800306c:	3304      	adds	r3, #4
 800306e:	6814      	ldr	r4, [r2, #0]
 8003070:	930e      	str	r3, [sp, #56]	; 0x38
 8003072:	2500      	movs	r5, #0
 8003074:	f7ff b9d8 	b.w	8002428 <_vfprintf_r+0x688>
 8003078:	aa27      	add	r2, sp, #156	; 0x9c
 800307a:	9908      	ldr	r1, [sp, #32]
 800307c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800307e:	f003 ffe9 	bl	8007054 <__sprint_r>
 8003082:	2800      	cmp	r0, #0
 8003084:	f47e afbc 	bne.w	8002000 <_vfprintf_r+0x260>
 8003088:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800308a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800308c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003090:	e78a      	b.n	8002fa8 <_vfprintf_r+0x1208>
 8003092:	a825      	add	r0, sp, #148	; 0x94
 8003094:	a922      	add	r1, sp, #136	; 0x88
 8003096:	aa21      	add	r2, sp, #132	; 0x84
 8003098:	2303      	movs	r3, #3
 800309a:	9004      	str	r0, [sp, #16]
 800309c:	9202      	str	r2, [sp, #8]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	f8cd b004 	str.w	fp, [sp, #4]
 80030a4:	9103      	str	r1, [sp, #12]
 80030a6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80030aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80030ac:	f000 fb68 	bl	8003780 <_dtoa_r>
 80030b0:	465d      	mov	r5, fp
 80030b2:	4606      	mov	r6, r0
 80030b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030b6:	2b46      	cmp	r3, #70	; 0x46
 80030b8:	eb06 0405 	add.w	r4, r6, r5
 80030bc:	f47f aee1 	bne.w	8002e82 <_vfprintf_r+0x10e2>
 80030c0:	7833      	ldrb	r3, [r6, #0]
 80030c2:	2b30      	cmp	r3, #48	; 0x30
 80030c4:	f000 8198 	beq.w	80033f8 <_vfprintf_r+0x1658>
 80030c8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80030ca:	442c      	add	r4, r5
 80030cc:	e6d9      	b.n	8002e82 <_vfprintf_r+0x10e2>
 80030ce:	f1bb 0f00 	cmp.w	fp, #0
 80030d2:	bf08      	it	eq
 80030d4:	f04f 0b01 	moveq.w	fp, #1
 80030d8:	e6a1      	b.n	8002e1e <_vfprintf_r+0x107e>
 80030da:	9b07      	ldr	r3, [sp, #28]
 80030dc:	f043 0320 	orr.w	r3, r3, #32
 80030e0:	9307      	str	r3, [sp, #28]
 80030e2:	f108 0801 	add.w	r8, r8, #1
 80030e6:	f898 3000 	ldrb.w	r3, [r8]
 80030ea:	f7fe becd 	b.w	8001e88 <_vfprintf_r+0xe8>
 80030ee:	aa27      	add	r2, sp, #156	; 0x9c
 80030f0:	9908      	ldr	r1, [sp, #32]
 80030f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80030f4:	f003 ffae 	bl	8007054 <__sprint_r>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	f47e af81 	bne.w	8002000 <_vfprintf_r+0x260>
 80030fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003100:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003104:	f7ff bb81 	b.w	800280a <_vfprintf_r+0xa6a>
 8003108:	4630      	mov	r0, r6
 800310a:	f7fe fdd9 	bl	8001cc0 <strlen>
 800310e:	46a3      	mov	fp, r4
 8003110:	4603      	mov	r3, r0
 8003112:	900d      	str	r0, [sp, #52]	; 0x34
 8003114:	f7ff bb01 	b.w	800271a <_vfprintf_r+0x97a>
 8003118:	272d      	movs	r7, #45	; 0x2d
 800311a:	9309      	str	r3, [sp, #36]	; 0x24
 800311c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800311e:	9307      	str	r3, [sp, #28]
 8003120:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003124:	f04f 0b00 	mov.w	fp, #0
 8003128:	f7ff b855 	b.w	80021d6 <_vfprintf_r+0x436>
 800312c:	aa27      	add	r2, sp, #156	; 0x9c
 800312e:	9908      	ldr	r1, [sp, #32]
 8003130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003132:	f003 ff8f 	bl	8007054 <__sprint_r>
 8003136:	2800      	cmp	r0, #0
 8003138:	f47e af62 	bne.w	8002000 <_vfprintf_r+0x260>
 800313c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800313e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003140:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003144:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003146:	f8c9 6000 	str.w	r6, [r9]
 800314a:	3301      	adds	r3, #1
 800314c:	440c      	add	r4, r1
 800314e:	2b07      	cmp	r3, #7
 8003150:	9429      	str	r4, [sp, #164]	; 0xa4
 8003152:	9328      	str	r3, [sp, #160]	; 0xa0
 8003154:	f8c9 1004 	str.w	r1, [r9, #4]
 8003158:	f77f a8fe 	ble.w	8002358 <_vfprintf_r+0x5b8>
 800315c:	e41a      	b.n	8002994 <_vfprintf_r+0xbf4>
 800315e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003160:	1cd8      	adds	r0, r3, #3
 8003162:	db11      	blt.n	8003188 <_vfprintf_r+0x13e8>
 8003164:	459b      	cmp	fp, r3
 8003166:	db0f      	blt.n	8003188 <_vfprintf_r+0x13e8>
 8003168:	9313      	str	r3, [sp, #76]	; 0x4c
 800316a:	e6ac      	b.n	8002ec6 <_vfprintf_r+0x1126>
 800316c:	aa27      	add	r2, sp, #156	; 0x9c
 800316e:	9908      	ldr	r1, [sp, #32]
 8003170:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003172:	f003 ff6f 	bl	8007054 <__sprint_r>
 8003176:	2800      	cmp	r0, #0
 8003178:	f47e af42 	bne.w	8002000 <_vfprintf_r+0x260>
 800317c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800317e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003182:	e46e      	b.n	8002a62 <_vfprintf_r+0xcc2>
 8003184:	4623      	mov	r3, r4
 8003186:	e68f      	b.n	8002ea8 <_vfprintf_r+0x1108>
 8003188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800318a:	3a02      	subs	r2, #2
 800318c:	9211      	str	r2, [sp, #68]	; 0x44
 800318e:	3b01      	subs	r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8003196:	9321      	str	r3, [sp, #132]	; 0x84
 8003198:	bfb8      	it	lt
 800319a:	425b      	neglt	r3, r3
 800319c:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80031a0:	bfb4      	ite	lt
 80031a2:	222d      	movlt	r2, #45	; 0x2d
 80031a4:	222b      	movge	r2, #43	; 0x2b
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80031ac:	f340 810b 	ble.w	80033c6 <_vfprintf_r+0x1626>
 80031b0:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 80031b4:	4604      	mov	r4, r0
 80031b6:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <_vfprintf_r+0x14c8>)
 80031b8:	fb82 2103 	smull	r2, r1, r2, r3
 80031bc:	17da      	asrs	r2, r3, #31
 80031be:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80031c2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80031c6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80031ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80031ce:	2a09      	cmp	r2, #9
 80031d0:	4613      	mov	r3, r2
 80031d2:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80031d6:	dcee      	bgt.n	80031b6 <_vfprintf_r+0x1416>
 80031d8:	4621      	mov	r1, r4
 80031da:	3330      	adds	r3, #48	; 0x30
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80031e2:	4288      	cmp	r0, r1
 80031e4:	f240 816f 	bls.w	80034c6 <_vfprintf_r+0x1726>
 80031e8:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 80031ec:	4623      	mov	r3, r4
 80031ee:	e001      	b.n	80031f4 <_vfprintf_r+0x1454>
 80031f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031f4:	f801 2b01 	strb.w	r2, [r1], #1
 80031f8:	4298      	cmp	r0, r3
 80031fa:	d1f9      	bne.n	80031f0 <_vfprintf_r+0x1450>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	1b1b      	subs	r3, r3, r4
 8003200:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8003204:	4413      	add	r3, r2
 8003206:	aa23      	add	r2, sp, #140	; 0x8c
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800320c:	9319      	str	r3, [sp, #100]	; 0x64
 800320e:	2a01      	cmp	r2, #1
 8003210:	4413      	add	r3, r2
 8003212:	930d      	str	r3, [sp, #52]	; 0x34
 8003214:	f340 80fe 	ble.w	8003414 <_vfprintf_r+0x1674>
 8003218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800321a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800321c:	4413      	add	r3, r2
 800321e:	2200      	movs	r2, #0
 8003220:	930d      	str	r3, [sp, #52]	; 0x34
 8003222:	9213      	str	r2, [sp, #76]	; 0x4c
 8003224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003228:	e65b      	b.n	8002ee2 <_vfprintf_r+0x1142>
 800322a:	4614      	mov	r4, r2
 800322c:	3301      	adds	r3, #1
 800322e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003230:	9328      	str	r3, [sp, #160]	; 0xa0
 8003232:	442c      	add	r4, r5
 8003234:	2b07      	cmp	r3, #7
 8003236:	9429      	str	r4, [sp, #164]	; 0xa4
 8003238:	e889 0024 	stmia.w	r9, {r2, r5}
 800323c:	f73f af76 	bgt.w	800312c <_vfprintf_r+0x138c>
 8003240:	f109 0908 	add.w	r9, r9, #8
 8003244:	e77e      	b.n	8003144 <_vfprintf_r+0x13a4>
 8003246:	aa27      	add	r2, sp, #156	; 0x9c
 8003248:	9908      	ldr	r1, [sp, #32]
 800324a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800324c:	f003 ff02 	bl	8007054 <__sprint_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	f47e aed5 	bne.w	8002000 <_vfprintf_r+0x260>
 8003256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003258:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800325a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800325e:	e4d0      	b.n	8002c02 <_vfprintf_r+0xe62>
 8003260:	080089b4 	.word	0x080089b4
 8003264:	08008964 	.word	0x08008964
 8003268:	66666667 	.word	0x66666667
 800326c:	2d06      	cmp	r5, #6
 800326e:	462b      	mov	r3, r5
 8003270:	bf28      	it	cs
 8003272:	2306      	movcs	r3, #6
 8003274:	930d      	str	r3, [sp, #52]	; 0x34
 8003276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800327a:	46b3      	mov	fp, r6
 800327c:	970e      	str	r7, [sp, #56]	; 0x38
 800327e:	9613      	str	r6, [sp, #76]	; 0x4c
 8003280:	4637      	mov	r7, r6
 8003282:	9309      	str	r3, [sp, #36]	; 0x24
 8003284:	4e91      	ldr	r6, [pc, #580]	; (80034cc <_vfprintf_r+0x172c>)
 8003286:	f7fe bfa5 	b.w	80021d4 <_vfprintf_r+0x434>
 800328a:	aa27      	add	r2, sp, #156	; 0x9c
 800328c:	9908      	ldr	r1, [sp, #32]
 800328e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003290:	f003 fee0 	bl	8007054 <__sprint_r>
 8003294:	2800      	cmp	r0, #0
 8003296:	f47e aeb3 	bne.w	8002000 <_vfprintf_r+0x260>
 800329a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800329c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800329e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80032a6:	e4c4      	b.n	8002c32 <_vfprintf_r+0xe92>
 80032a8:	a825      	add	r0, sp, #148	; 0x94
 80032aa:	a922      	add	r1, sp, #136	; 0x88
 80032ac:	aa21      	add	r2, sp, #132	; 0x84
 80032ae:	2303      	movs	r3, #3
 80032b0:	9004      	str	r0, [sp, #16]
 80032b2:	9202      	str	r2, [sp, #8]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	f8cd b004 	str.w	fp, [sp, #4]
 80032ba:	9103      	str	r1, [sp, #12]
 80032bc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80032c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80032c2:	f000 fa5d 	bl	8003780 <_dtoa_r>
 80032c6:	465d      	mov	r5, fp
 80032c8:	4606      	mov	r6, r0
 80032ca:	eb00 040b 	add.w	r4, r0, fp
 80032ce:	e6f7      	b.n	80030c0 <_vfprintf_r+0x1320>
 80032d0:	9307      	str	r3, [sp, #28]
 80032d2:	f7ff b8c7 	b.w	8002464 <_vfprintf_r+0x6c4>
 80032d6:	f04f 0b06 	mov.w	fp, #6
 80032da:	e5a0      	b.n	8002e1e <_vfprintf_r+0x107e>
 80032dc:	272d      	movs	r7, #45	; 0x2d
 80032de:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80032e2:	f7ff b9b3 	b.w	800264c <_vfprintf_r+0x8ac>
 80032e6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80032ea:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80032ee:	931d      	str	r3, [sp, #116]	; 0x74
 80032f0:	232d      	movs	r3, #45	; 0x2d
 80032f2:	911c      	str	r1, [sp, #112]	; 0x70
 80032f4:	9309      	str	r3, [sp, #36]	; 0x24
 80032f6:	e5a0      	b.n	8002e3a <_vfprintf_r+0x109a>
 80032f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80032fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032fc:	4413      	add	r3, r2
 80032fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003300:	930d      	str	r3, [sp, #52]	; 0x34
 8003302:	2a00      	cmp	r2, #0
 8003304:	f340 8090 	ble.w	8003428 <_vfprintf_r+0x1688>
 8003308:	2267      	movs	r2, #103	; 0x67
 800330a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800330e:	9211      	str	r2, [sp, #68]	; 0x44
 8003310:	e5e7      	b.n	8002ee2 <_vfprintf_r+0x1142>
 8003312:	2b00      	cmp	r3, #0
 8003314:	f340 8090 	ble.w	8003438 <_vfprintf_r+0x1698>
 8003318:	f1bb 0f00 	cmp.w	fp, #0
 800331c:	d163      	bne.n	80033e6 <_vfprintf_r+0x1646>
 800331e:	9a07      	ldr	r2, [sp, #28]
 8003320:	07d1      	lsls	r1, r2, #31
 8003322:	d460      	bmi.n	80033e6 <_vfprintf_r+0x1646>
 8003324:	461a      	mov	r2, r3
 8003326:	920d      	str	r2, [sp, #52]	; 0x34
 8003328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800332c:	e5d9      	b.n	8002ee2 <_vfprintf_r+0x1142>
 800332e:	9b07      	ldr	r3, [sp, #28]
 8003330:	07db      	lsls	r3, r3, #31
 8003332:	465f      	mov	r7, fp
 8003334:	d505      	bpl.n	8003342 <_vfprintf_r+0x15a2>
 8003336:	ae44      	add	r6, sp, #272	; 0x110
 8003338:	2330      	movs	r3, #48	; 0x30
 800333a:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800333e:	f7fe bf3f 	b.w	80021c0 <_vfprintf_r+0x420>
 8003342:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003346:	ae34      	add	r6, sp, #208	; 0xd0
 8003348:	f7fe bf3d 	b.w	80021c6 <_vfprintf_r+0x426>
 800334c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003350:	970e      	str	r7, [sp, #56]	; 0x38
 8003352:	9309      	str	r3, [sp, #36]	; 0x24
 8003354:	950d      	str	r5, [sp, #52]	; 0x34
 8003356:	4683      	mov	fp, r0
 8003358:	9013      	str	r0, [sp, #76]	; 0x4c
 800335a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800335e:	f7fe bf39 	b.w	80021d4 <_vfprintf_r+0x434>
 8003362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003364:	2b47      	cmp	r3, #71	; 0x47
 8003366:	f47f ad8b 	bne.w	8002e80 <_vfprintf_r+0x10e0>
 800336a:	9b07      	ldr	r3, [sp, #28]
 800336c:	07dc      	lsls	r4, r3, #31
 800336e:	f53f aea1 	bmi.w	80030b4 <_vfprintf_r+0x1314>
 8003372:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003374:	2f47      	cmp	r7, #71	; 0x47
 8003376:	eba3 0306 	sub.w	r3, r3, r6
 800337a:	9312      	str	r3, [sp, #72]	; 0x48
 800337c:	f43f aeef 	beq.w	800315e <_vfprintf_r+0x13be>
 8003380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003382:	e704      	b.n	800318e <_vfprintf_r+0x13ee>
 8003384:	aa27      	add	r2, sp, #156	; 0x9c
 8003386:	9908      	ldr	r1, [sp, #32]
 8003388:	980a      	ldr	r0, [sp, #40]	; 0x28
 800338a:	f003 fe63 	bl	8007054 <__sprint_r>
 800338e:	2800      	cmp	r0, #0
 8003390:	f47e ae36 	bne.w	8002000 <_vfprintf_r+0x260>
 8003394:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003396:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003398:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800339a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800339e:	e61a      	b.n	8002fd6 <_vfprintf_r+0x1236>
 80033a0:	46a0      	mov	r8, r4
 80033a2:	2500      	movs	r5, #0
 80033a4:	f7fe bd72 	b.w	8001e8c <_vfprintf_r+0xec>
 80033a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80033aa:	e57d      	b.n	8002ea8 <_vfprintf_r+0x1108>
 80033ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80033ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033b0:	4413      	add	r3, r2
 80033b2:	2267      	movs	r2, #103	; 0x67
 80033b4:	930d      	str	r3, [sp, #52]	; 0x34
 80033b6:	9211      	str	r2, [sp, #68]	; 0x44
 80033b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80033bc:	e591      	b.n	8002ee2 <_vfprintf_r+0x1142>
 80033be:	930e      	str	r3, [sp, #56]	; 0x38
 80033c0:	4617      	mov	r7, r2
 80033c2:	f7ff bbff 	b.w	8002bc4 <_vfprintf_r+0xe24>
 80033c6:	3330      	adds	r3, #48	; 0x30
 80033c8:	2230      	movs	r2, #48	; 0x30
 80033ca:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80033ce:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80033d2:	ab24      	add	r3, sp, #144	; 0x90
 80033d4:	e717      	b.n	8003206 <_vfprintf_r+0x1466>
 80033d6:	930e      	str	r3, [sp, #56]	; 0x38
 80033d8:	e4fc      	b.n	8002dd4 <_vfprintf_r+0x1034>
 80033da:	4e3d      	ldr	r6, [pc, #244]	; (80034d0 <_vfprintf_r+0x1730>)
 80033dc:	4b3d      	ldr	r3, [pc, #244]	; (80034d4 <_vfprintf_r+0x1734>)
 80033de:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80033e2:	f7ff b935 	b.w	8002650 <_vfprintf_r+0x8b0>
 80033e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80033ea:	189d      	adds	r5, r3, r2
 80033ec:	eb05 030b 	add.w	r3, r5, fp
 80033f0:	930d      	str	r3, [sp, #52]	; 0x34
 80033f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80033f6:	e574      	b.n	8002ee2 <_vfprintf_r+0x1142>
 80033f8:	2200      	movs	r2, #0
 80033fa:	2300      	movs	r3, #0
 80033fc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003400:	f005 f8a6 	bl	8008550 <__aeabi_dcmpeq>
 8003404:	2800      	cmp	r0, #0
 8003406:	f47f ae5f 	bne.w	80030c8 <_vfprintf_r+0x1328>
 800340a:	f1c5 0501 	rsb	r5, r5, #1
 800340e:	9521      	str	r5, [sp, #132]	; 0x84
 8003410:	442c      	add	r4, r5
 8003412:	e536      	b.n	8002e82 <_vfprintf_r+0x10e2>
 8003414:	9b07      	ldr	r3, [sp, #28]
 8003416:	f013 0301 	ands.w	r3, r3, #1
 800341a:	f47f aefd 	bne.w	8003218 <_vfprintf_r+0x1478>
 800341e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003426:	e55c      	b.n	8002ee2 <_vfprintf_r+0x1142>
 8003428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800342a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800342c:	f1c3 0301 	rsb	r3, r3, #1
 8003430:	441a      	add	r2, r3
 8003432:	4613      	mov	r3, r2
 8003434:	920d      	str	r2, [sp, #52]	; 0x34
 8003436:	e767      	b.n	8003308 <_vfprintf_r+0x1568>
 8003438:	f1bb 0f00 	cmp.w	fp, #0
 800343c:	d102      	bne.n	8003444 <_vfprintf_r+0x16a4>
 800343e:	9b07      	ldr	r3, [sp, #28]
 8003440:	07da      	lsls	r2, r3, #31
 8003442:	d507      	bpl.n	8003454 <_vfprintf_r+0x16b4>
 8003444:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003446:	1c5d      	adds	r5, r3, #1
 8003448:	eb05 030b 	add.w	r3, r5, fp
 800344c:	930d      	str	r3, [sp, #52]	; 0x34
 800344e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003452:	e546      	b.n	8002ee2 <_vfprintf_r+0x1142>
 8003454:	2301      	movs	r3, #1
 8003456:	930d      	str	r3, [sp, #52]	; 0x34
 8003458:	e543      	b.n	8002ee2 <_vfprintf_r+0x1142>
 800345a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800345c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003460:	6805      	ldr	r5, [r0, #0]
 8003462:	3004      	adds	r0, #4
 8003464:	2d00      	cmp	r5, #0
 8003466:	900e      	str	r0, [sp, #56]	; 0x38
 8003468:	46a0      	mov	r8, r4
 800346a:	f6be ad0d 	bge.w	8001e88 <_vfprintf_r+0xe8>
 800346e:	f04f 35ff 	mov.w	r5, #4294967295
 8003472:	f7fe bd09 	b.w	8001e88 <_vfprintf_r+0xe8>
 8003476:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800347a:	f7ff b893 	b.w	80025a4 <_vfprintf_r+0x804>
 800347e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003482:	f7ff b85d 	b.w	8002540 <_vfprintf_r+0x7a0>
 8003486:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800348a:	f7fe bfbf 	b.w	800240c <_vfprintf_r+0x66c>
 800348e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003492:	f7fe be5c 	b.w	800214e <_vfprintf_r+0x3ae>
 8003496:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800349a:	f7ff b812 	b.w	80024c2 <_vfprintf_r+0x722>
 800349e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80034a2:	f7fe bdca 	b.w	800203a <_vfprintf_r+0x29a>
 80034a6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80034aa:	f7ff b951 	b.w	8002750 <_vfprintf_r+0x9b0>
 80034ae:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80034b2:	f7fe be23 	b.w	80020fc <_vfprintf_r+0x35c>
 80034b6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80034ba:	f7ff b8ed 	b.w	8002698 <_vfprintf_r+0x8f8>
 80034be:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80034c2:	f7ff b88c 	b.w	80025de <_vfprintf_r+0x83e>
 80034c6:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80034ca:	e69c      	b.n	8003206 <_vfprintf_r+0x1466>
 80034cc:	080089ac 	.word	0x080089ac
 80034d0:	08008980 	.word	0x08008980
 80034d4:	0800897c 	.word	0x0800897c

080034d8 <__sbprintf>:
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	460c      	mov	r4, r1
 80034dc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80034e0:	8989      	ldrh	r1, [r1, #12]
 80034e2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80034e4:	89e5      	ldrh	r5, [r4, #14]
 80034e6:	9619      	str	r6, [sp, #100]	; 0x64
 80034e8:	f021 0102 	bic.w	r1, r1, #2
 80034ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80034ee:	f8ad 500e 	strh.w	r5, [sp, #14]
 80034f2:	2500      	movs	r5, #0
 80034f4:	69e7      	ldr	r7, [r4, #28]
 80034f6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80034fa:	9609      	str	r6, [sp, #36]	; 0x24
 80034fc:	9506      	str	r5, [sp, #24]
 80034fe:	ae1a      	add	r6, sp, #104	; 0x68
 8003500:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003504:	4669      	mov	r1, sp
 8003506:	9600      	str	r6, [sp, #0]
 8003508:	9604      	str	r6, [sp, #16]
 800350a:	9502      	str	r5, [sp, #8]
 800350c:	9505      	str	r5, [sp, #20]
 800350e:	9707      	str	r7, [sp, #28]
 8003510:	4606      	mov	r6, r0
 8003512:	f7fe fc45 	bl	8001da0 <_vfprintf_r>
 8003516:	1e05      	subs	r5, r0, #0
 8003518:	db07      	blt.n	800352a <__sbprintf+0x52>
 800351a:	4630      	mov	r0, r6
 800351c:	4669      	mov	r1, sp
 800351e:	f001 f8e9 	bl	80046f4 <_fflush_r>
 8003522:	2800      	cmp	r0, #0
 8003524:	bf18      	it	ne
 8003526:	f04f 35ff 	movne.w	r5, #4294967295
 800352a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800352e:	065b      	lsls	r3, r3, #25
 8003530:	d503      	bpl.n	800353a <__sbprintf+0x62>
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	4628      	mov	r0, r5
 800353c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8003540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003542:	bf00      	nop

08003544 <_vsprintf_r>:
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003546:	b09b      	sub	sp, #108	; 0x6c
 8003548:	460d      	mov	r5, r1
 800354a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800354e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003552:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003556:	4669      	mov	r1, sp
 8003558:	9500      	str	r5, [sp, #0]
 800355a:	9504      	str	r5, [sp, #16]
 800355c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8003560:	9402      	str	r4, [sp, #8]
 8003562:	9405      	str	r4, [sp, #20]
 8003564:	f8ad 600e 	strh.w	r6, [sp, #14]
 8003568:	f002 f9be 	bl	80058e8 <_svfprintf_r>
 800356c:	9b00      	ldr	r3, [sp, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	b01b      	add	sp, #108	; 0x6c
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003576:	bf00      	nop

08003578 <vsprintf>:
 8003578:	b410      	push	{r4}
 800357a:	4c04      	ldr	r4, [pc, #16]	; (800358c <vsprintf+0x14>)
 800357c:	4613      	mov	r3, r2
 800357e:	460a      	mov	r2, r1
 8003580:	4601      	mov	r1, r0
 8003582:	6820      	ldr	r0, [r4, #0]
 8003584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003588:	f7ff bfdc 	b.w	8003544 <_vsprintf_r>
 800358c:	20000460 	.word	0x20000460

08003590 <__swsetup_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <__swsetup_r+0xc4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4605      	mov	r5, r0
 8003598:	460c      	mov	r4, r1
 800359a:	b113      	cbz	r3, 80035a2 <__swsetup_r+0x12>
 800359c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359e:	2a00      	cmp	r2, #0
 80035a0:	d038      	beq.n	8003614 <__swsetup_r+0x84>
 80035a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035a6:	b293      	uxth	r3, r2
 80035a8:	0718      	lsls	r0, r3, #28
 80035aa:	d50c      	bpl.n	80035c6 <__swsetup_r+0x36>
 80035ac:	6920      	ldr	r0, [r4, #16]
 80035ae:	b1a8      	cbz	r0, 80035dc <__swsetup_r+0x4c>
 80035b0:	f013 0201 	ands.w	r2, r3, #1
 80035b4:	d01e      	beq.n	80035f4 <__swsetup_r+0x64>
 80035b6:	6963      	ldr	r3, [r4, #20]
 80035b8:	2200      	movs	r2, #0
 80035ba:	425b      	negs	r3, r3
 80035bc:	61a3      	str	r3, [r4, #24]
 80035be:	60a2      	str	r2, [r4, #8]
 80035c0:	b1f0      	cbz	r0, 8003600 <__swsetup_r+0x70>
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd38      	pop	{r3, r4, r5, pc}
 80035c6:	06d9      	lsls	r1, r3, #27
 80035c8:	d53c      	bpl.n	8003644 <__swsetup_r+0xb4>
 80035ca:	0758      	lsls	r0, r3, #29
 80035cc:	d426      	bmi.n	800361c <__swsetup_r+0x8c>
 80035ce:	6920      	ldr	r0, [r4, #16]
 80035d0:	f042 0308 	orr.w	r3, r2, #8
 80035d4:	81a3      	strh	r3, [r4, #12]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2800      	cmp	r0, #0
 80035da:	d1e9      	bne.n	80035b0 <__swsetup_r+0x20>
 80035dc:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80035e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80035e4:	d0e4      	beq.n	80035b0 <__swsetup_r+0x20>
 80035e6:	4628      	mov	r0, r5
 80035e8:	4621      	mov	r1, r4
 80035ea:	f001 fabf 	bl	8004b6c <__smakebuf_r>
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	6920      	ldr	r0, [r4, #16]
 80035f2:	e7dd      	b.n	80035b0 <__swsetup_r+0x20>
 80035f4:	0799      	lsls	r1, r3, #30
 80035f6:	bf58      	it	pl
 80035f8:	6962      	ldrpl	r2, [r4, #20]
 80035fa:	60a2      	str	r2, [r4, #8]
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d1e0      	bne.n	80035c2 <__swsetup_r+0x32>
 8003600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003604:	061a      	lsls	r2, r3, #24
 8003606:	d5dd      	bpl.n	80035c4 <__swsetup_r+0x34>
 8003608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800360c:	81a3      	strh	r3, [r4, #12]
 800360e:	f04f 30ff 	mov.w	r0, #4294967295
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	4618      	mov	r0, r3
 8003616:	f001 f901 	bl	800481c <__sinit>
 800361a:	e7c2      	b.n	80035a2 <__swsetup_r+0x12>
 800361c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800361e:	b151      	cbz	r1, 8003636 <__swsetup_r+0xa6>
 8003620:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003624:	4299      	cmp	r1, r3
 8003626:	d004      	beq.n	8003632 <__swsetup_r+0xa2>
 8003628:	4628      	mov	r0, r5
 800362a:	f001 f94f 	bl	80048cc <_free_r>
 800362e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	6323      	str	r3, [r4, #48]	; 0x30
 8003636:	2300      	movs	r3, #0
 8003638:	6920      	ldr	r0, [r4, #16]
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8003640:	6020      	str	r0, [r4, #0]
 8003642:	e7c5      	b.n	80035d0 <__swsetup_r+0x40>
 8003644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003648:	2309      	movs	r3, #9
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	81a2      	strh	r2, [r4, #12]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	20000460 	.word	0x20000460

08003658 <quorem>:
 8003658:	6902      	ldr	r2, [r0, #16]
 800365a:	690b      	ldr	r3, [r1, #16]
 800365c:	4293      	cmp	r3, r2
 800365e:	f300 808d 	bgt.w	800377c <quorem+0x124>
 8003662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003666:	f103 38ff 	add.w	r8, r3, #4294967295
 800366a:	f101 0714 	add.w	r7, r1, #20
 800366e:	f100 0b14 	add.w	fp, r0, #20
 8003672:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8003676:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800367a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800367e:	b083      	sub	sp, #12
 8003680:	3201      	adds	r2, #1
 8003682:	fbb3 f9f2 	udiv	r9, r3, r2
 8003686:	eb0b 0304 	add.w	r3, fp, r4
 800368a:	9400      	str	r4, [sp, #0]
 800368c:	eb07 0a04 	add.w	sl, r7, r4
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	f1b9 0f00 	cmp.w	r9, #0
 8003696:	d039      	beq.n	800370c <quorem+0xb4>
 8003698:	2500      	movs	r5, #0
 800369a:	46bc      	mov	ip, r7
 800369c:	46de      	mov	lr, fp
 800369e:	462b      	mov	r3, r5
 80036a0:	f85c 6b04 	ldr.w	r6, [ip], #4
 80036a4:	f8de 2000 	ldr.w	r2, [lr]
 80036a8:	b2b4      	uxth	r4, r6
 80036aa:	fb09 5504 	mla	r5, r9, r4, r5
 80036ae:	0c36      	lsrs	r6, r6, #16
 80036b0:	0c2c      	lsrs	r4, r5, #16
 80036b2:	fb09 4406 	mla	r4, r9, r6, r4
 80036b6:	b2ad      	uxth	r5, r5
 80036b8:	1b5b      	subs	r3, r3, r5
 80036ba:	b2a6      	uxth	r6, r4
 80036bc:	fa13 f382 	uxtah	r3, r3, r2
 80036c0:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 80036c4:	eb06 4623 	add.w	r6, r6, r3, asr #16
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80036ce:	45e2      	cmp	sl, ip
 80036d0:	f84e 3b04 	str.w	r3, [lr], #4
 80036d4:	ea4f 4514 	mov.w	r5, r4, lsr #16
 80036d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80036dc:	d2e0      	bcs.n	80036a0 <quorem+0x48>
 80036de:	9b00      	ldr	r3, [sp, #0]
 80036e0:	f85b 3003 	ldr.w	r3, [fp, r3]
 80036e4:	b993      	cbnz	r3, 800370c <quorem+0xb4>
 80036e6:	9c01      	ldr	r4, [sp, #4]
 80036e8:	1f23      	subs	r3, r4, #4
 80036ea:	459b      	cmp	fp, r3
 80036ec:	d20c      	bcs.n	8003708 <quorem+0xb0>
 80036ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80036f2:	b94b      	cbnz	r3, 8003708 <quorem+0xb0>
 80036f4:	f1a4 0308 	sub.w	r3, r4, #8
 80036f8:	e002      	b.n	8003700 <quorem+0xa8>
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	3b04      	subs	r3, #4
 80036fe:	b91a      	cbnz	r2, 8003708 <quorem+0xb0>
 8003700:	459b      	cmp	fp, r3
 8003702:	f108 38ff 	add.w	r8, r8, #4294967295
 8003706:	d3f8      	bcc.n	80036fa <quorem+0xa2>
 8003708:	f8c0 8010 	str.w	r8, [r0, #16]
 800370c:	4604      	mov	r4, r0
 800370e:	f001 ff8b 	bl	8005628 <__mcmp>
 8003712:	2800      	cmp	r0, #0
 8003714:	db2e      	blt.n	8003774 <quorem+0x11c>
 8003716:	f109 0901 	add.w	r9, r9, #1
 800371a:	465d      	mov	r5, fp
 800371c:	2300      	movs	r3, #0
 800371e:	f857 1b04 	ldr.w	r1, [r7], #4
 8003722:	6828      	ldr	r0, [r5, #0]
 8003724:	b28a      	uxth	r2, r1
 8003726:	1a9a      	subs	r2, r3, r2
 8003728:	0c09      	lsrs	r1, r1, #16
 800372a:	fa12 f280 	uxtah	r2, r2, r0
 800372e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8003732:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8003736:	b291      	uxth	r1, r2
 8003738:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800373c:	45ba      	cmp	sl, r7
 800373e:	f845 1b04 	str.w	r1, [r5], #4
 8003742:	ea4f 4323 	mov.w	r3, r3, asr #16
 8003746:	d2ea      	bcs.n	800371e <quorem+0xc6>
 8003748:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800374c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8003750:	b982      	cbnz	r2, 8003774 <quorem+0x11c>
 8003752:	1f1a      	subs	r2, r3, #4
 8003754:	4593      	cmp	fp, r2
 8003756:	d20b      	bcs.n	8003770 <quorem+0x118>
 8003758:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800375c:	b942      	cbnz	r2, 8003770 <quorem+0x118>
 800375e:	3b08      	subs	r3, #8
 8003760:	e002      	b.n	8003768 <quorem+0x110>
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	3b04      	subs	r3, #4
 8003766:	b91a      	cbnz	r2, 8003770 <quorem+0x118>
 8003768:	459b      	cmp	fp, r3
 800376a:	f108 38ff 	add.w	r8, r8, #4294967295
 800376e:	d3f8      	bcc.n	8003762 <quorem+0x10a>
 8003770:	f8c4 8010 	str.w	r8, [r4, #16]
 8003774:	4648      	mov	r0, r9
 8003776:	b003      	add	sp, #12
 8003778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377c:	2000      	movs	r0, #0
 800377e:	4770      	bx	lr

08003780 <_dtoa_r>:
 8003780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003784:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003786:	b099      	sub	sp, #100	; 0x64
 8003788:	4681      	mov	r9, r0
 800378a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800378c:	4692      	mov	sl, r2
 800378e:	469b      	mov	fp, r3
 8003790:	b149      	cbz	r1, 80037a6 <_dtoa_r+0x26>
 8003792:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003794:	604a      	str	r2, [r1, #4]
 8003796:	2301      	movs	r3, #1
 8003798:	4093      	lsls	r3, r2
 800379a:	608b      	str	r3, [r1, #8]
 800379c:	f001 fd62 	bl	8005264 <_Bfree>
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80037a6:	f1bb 0f00 	cmp.w	fp, #0
 80037aa:	46d8      	mov	r8, fp
 80037ac:	db33      	blt.n	8003816 <_dtoa_r+0x96>
 80037ae:	2300      	movs	r3, #0
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	4ba3      	ldr	r3, [pc, #652]	; (8003a40 <_dtoa_r+0x2c0>)
 80037b4:	461a      	mov	r2, r3
 80037b6:	ea08 0303 	and.w	r3, r8, r3
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d014      	beq.n	80037e8 <_dtoa_r+0x68>
 80037be:	2200      	movs	r2, #0
 80037c0:	2300      	movs	r3, #0
 80037c2:	4650      	mov	r0, sl
 80037c4:	4659      	mov	r1, fp
 80037c6:	f004 fec3 	bl	8008550 <__aeabi_dcmpeq>
 80037ca:	4605      	mov	r5, r0
 80037cc:	b348      	cbz	r0, 8003822 <_dtoa_r+0xa2>
 80037ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80037d0:	2301      	movs	r3, #1
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80c2 	beq.w	8003960 <_dtoa_r+0x1e0>
 80037dc:	4899      	ldr	r0, [pc, #612]	; (8003a44 <_dtoa_r+0x2c4>)
 80037de:	6018      	str	r0, [r3, #0]
 80037e0:	3801      	subs	r0, #1
 80037e2:	b019      	add	sp, #100	; 0x64
 80037e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80037ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	f1ba 0f00 	cmp.w	sl, #0
 80037f4:	f000 809f 	beq.w	8003936 <_dtoa_r+0x1b6>
 80037f8:	4893      	ldr	r0, [pc, #588]	; (8003a48 <_dtoa_r+0x2c8>)
 80037fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <_dtoa_r+0x62>
 8003800:	78c3      	ldrb	r3, [r0, #3]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80ae 	beq.w	8003964 <_dtoa_r+0x1e4>
 8003808:	f100 0308 	add.w	r3, r0, #8
 800380c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	b019      	add	sp, #100	; 0x64
 8003812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003816:	2301      	movs	r3, #1
 8003818:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	46c3      	mov	fp, r8
 8003820:	e7c7      	b.n	80037b2 <_dtoa_r+0x32>
 8003822:	aa16      	add	r2, sp, #88	; 0x58
 8003824:	ab17      	add	r3, sp, #92	; 0x5c
 8003826:	9201      	str	r2, [sp, #4]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4652      	mov	r2, sl
 800382c:	465b      	mov	r3, fp
 800382e:	4648      	mov	r0, r9
 8003830:	f001 ffa6 	bl	8005780 <__d2b>
 8003834:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8003838:	9008      	str	r0, [sp, #32]
 800383a:	f040 8085 	bne.w	8003948 <_dtoa_r+0x1c8>
 800383e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003840:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003842:	442c      	add	r4, r5
 8003844:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003848:	2b20      	cmp	r3, #32
 800384a:	f340 8289 	ble.w	8003d60 <_dtoa_r+0x5e0>
 800384e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003852:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8003856:	fa08 f803 	lsl.w	r8, r8, r3
 800385a:	fa2a f000 	lsr.w	r0, sl, r0
 800385e:	ea40 0008 	orr.w	r0, r0, r8
 8003862:	f004 fb97 	bl	8007f94 <__aeabi_ui2d>
 8003866:	2301      	movs	r3, #1
 8003868:	3c01      	subs	r4, #1
 800386a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800386e:	930d      	str	r3, [sp, #52]	; 0x34
 8003870:	2200      	movs	r2, #0
 8003872:	4b76      	ldr	r3, [pc, #472]	; (8003a4c <_dtoa_r+0x2cc>)
 8003874:	f004 fa50 	bl	8007d18 <__aeabi_dsub>
 8003878:	a36b      	add	r3, pc, #428	; (adr r3, 8003a28 <_dtoa_r+0x2a8>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f004 fbff 	bl	8008080 <__aeabi_dmul>
 8003882:	a36b      	add	r3, pc, #428	; (adr r3, 8003a30 <_dtoa_r+0x2b0>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f004 fa48 	bl	8007d1c <__adddf3>
 800388c:	4606      	mov	r6, r0
 800388e:	4620      	mov	r0, r4
 8003890:	460f      	mov	r7, r1
 8003892:	f004 fb8f 	bl	8007fb4 <__aeabi_i2d>
 8003896:	a368      	add	r3, pc, #416	; (adr r3, 8003a38 <_dtoa_r+0x2b8>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f004 fbf0 	bl	8008080 <__aeabi_dmul>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4630      	mov	r0, r6
 80038a6:	4639      	mov	r1, r7
 80038a8:	f004 fa38 	bl	8007d1c <__adddf3>
 80038ac:	4606      	mov	r6, r0
 80038ae:	460f      	mov	r7, r1
 80038b0:	f004 fe96 	bl	80085e0 <__aeabi_d2iz>
 80038b4:	2200      	movs	r2, #0
 80038b6:	9004      	str	r0, [sp, #16]
 80038b8:	2300      	movs	r3, #0
 80038ba:	4630      	mov	r0, r6
 80038bc:	4639      	mov	r1, r7
 80038be:	f004 fe51 	bl	8008564 <__aeabi_dcmplt>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	f040 8227 	bne.w	8003d16 <_dtoa_r+0x596>
 80038c8:	9e04      	ldr	r6, [sp, #16]
 80038ca:	2e16      	cmp	r6, #22
 80038cc:	f200 8220 	bhi.w	8003d10 <_dtoa_r+0x590>
 80038d0:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <_dtoa_r+0x2d0>)
 80038d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80038d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038da:	4652      	mov	r2, sl
 80038dc:	465b      	mov	r3, fp
 80038de:	f004 fe5f 	bl	80085a0 <__aeabi_dcmpgt>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	f000 8241 	beq.w	8003d6a <_dtoa_r+0x5ea>
 80038e8:	1e73      	subs	r3, r6, #1
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	2300      	movs	r3, #0
 80038ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80038f0:	1b2c      	subs	r4, r5, r4
 80038f2:	f1b4 0801 	subs.w	r8, r4, #1
 80038f6:	f100 8229 	bmi.w	8003d4c <_dtoa_r+0x5cc>
 80038fa:	2300      	movs	r3, #0
 80038fc:	9305      	str	r3, [sp, #20]
 80038fe:	9b04      	ldr	r3, [sp, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f2c0 821a 	blt.w	8003d3a <_dtoa_r+0x5ba>
 8003906:	4498      	add	r8, r3
 8003908:	930a      	str	r3, [sp, #40]	; 0x28
 800390a:	2300      	movs	r3, #0
 800390c:	9302      	str	r3, [sp, #8]
 800390e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003910:	2b09      	cmp	r3, #9
 8003912:	d829      	bhi.n	8003968 <_dtoa_r+0x1e8>
 8003914:	2b05      	cmp	r3, #5
 8003916:	f340 8643 	ble.w	80045a0 <_dtoa_r+0xe20>
 800391a:	3b04      	subs	r3, #4
 800391c:	9322      	str	r3, [sp, #136]	; 0x88
 800391e:	2500      	movs	r5, #0
 8003920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003922:	3b02      	subs	r3, #2
 8003924:	2b03      	cmp	r3, #3
 8003926:	f200 8622 	bhi.w	800456e <_dtoa_r+0xdee>
 800392a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800392e:	032a      	.short	0x032a
 8003930:	03350223 	.word	0x03350223
 8003934:	044f      	.short	0x044f
 8003936:	4b44      	ldr	r3, [pc, #272]	; (8003a48 <_dtoa_r+0x2c8>)
 8003938:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <_dtoa_r+0x2d4>)
 800393a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800393e:	2800      	cmp	r0, #0
 8003940:	bf14      	ite	ne
 8003942:	4618      	movne	r0, r3
 8003944:	4610      	moveq	r0, r2
 8003946:	e758      	b.n	80037fa <_dtoa_r+0x7a>
 8003948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800394c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003950:	950d      	str	r5, [sp, #52]	; 0x34
 8003952:	4650      	mov	r0, sl
 8003954:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003958:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800395c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800395e:	e787      	b.n	8003870 <_dtoa_r+0xf0>
 8003960:	483d      	ldr	r0, [pc, #244]	; (8003a58 <_dtoa_r+0x2d8>)
 8003962:	e73e      	b.n	80037e2 <_dtoa_r+0x62>
 8003964:	1cc3      	adds	r3, r0, #3
 8003966:	e751      	b.n	800380c <_dtoa_r+0x8c>
 8003968:	2100      	movs	r1, #0
 800396a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800396e:	4648      	mov	r0, r9
 8003970:	9122      	str	r1, [sp, #136]	; 0x88
 8003972:	f001 fc51 	bl	8005218 <_Balloc>
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
 800397a:	9306      	str	r3, [sp, #24]
 800397c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800397e:	930c      	str	r3, [sp, #48]	; 0x30
 8003980:	2301      	movs	r3, #1
 8003982:	9007      	str	r0, [sp, #28]
 8003984:	9223      	str	r2, [sp, #140]	; 0x8c
 8003986:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800398a:	9309      	str	r3, [sp, #36]	; 0x24
 800398c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800398e:	2b00      	cmp	r3, #0
 8003990:	f2c0 80d0 	blt.w	8003b34 <_dtoa_r+0x3b4>
 8003994:	9a04      	ldr	r2, [sp, #16]
 8003996:	2a0e      	cmp	r2, #14
 8003998:	f300 80cc 	bgt.w	8003b34 <_dtoa_r+0x3b4>
 800399c:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <_dtoa_r+0x2d0>)
 800399e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039a2:	ed93 7b00 	vldr	d7, [r3]
 80039a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039ae:	f2c0 82fe 	blt.w	8003fae <_dtoa_r+0x82e>
 80039b2:	4656      	mov	r6, sl
 80039b4:	465f      	mov	r7, fp
 80039b6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80039ba:	4630      	mov	r0, r6
 80039bc:	4652      	mov	r2, sl
 80039be:	465b      	mov	r3, fp
 80039c0:	4639      	mov	r1, r7
 80039c2:	f004 fc87 	bl	80082d4 <__aeabi_ddiv>
 80039c6:	f004 fe0b 	bl	80085e0 <__aeabi_d2iz>
 80039ca:	4604      	mov	r4, r0
 80039cc:	f004 faf2 	bl	8007fb4 <__aeabi_i2d>
 80039d0:	4652      	mov	r2, sl
 80039d2:	465b      	mov	r3, fp
 80039d4:	f004 fb54 	bl	8008080 <__aeabi_dmul>
 80039d8:	460b      	mov	r3, r1
 80039da:	4602      	mov	r2, r0
 80039dc:	4639      	mov	r1, r7
 80039de:	4630      	mov	r0, r6
 80039e0:	f004 f99a 	bl	8007d18 <__aeabi_dsub>
 80039e4:	9d07      	ldr	r5, [sp, #28]
 80039e6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80039ea:	702b      	strb	r3, [r5, #0]
 80039ec:	9b06      	ldr	r3, [sp, #24]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	4606      	mov	r6, r0
 80039f2:	460f      	mov	r7, r1
 80039f4:	f105 0501 	add.w	r5, r5, #1
 80039f8:	d061      	beq.n	8003abe <_dtoa_r+0x33e>
 80039fa:	2200      	movs	r2, #0
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <_dtoa_r+0x2dc>)
 80039fe:	f004 fb3f 	bl	8008080 <__aeabi_dmul>
 8003a02:	2200      	movs	r2, #0
 8003a04:	2300      	movs	r3, #0
 8003a06:	4606      	mov	r6, r0
 8003a08:	460f      	mov	r7, r1
 8003a0a:	f004 fda1 	bl	8008550 <__aeabi_dcmpeq>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d17d      	bne.n	8003b0e <_dtoa_r+0x38e>
 8003a12:	f8cd 9014 	str.w	r9, [sp, #20]
 8003a16:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003a1a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003a1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003a22:	e028      	b.n	8003a76 <_dtoa_r+0x2f6>
 8003a24:	f3af 8000 	nop.w
 8003a28:	636f4361 	.word	0x636f4361
 8003a2c:	3fd287a7 	.word	0x3fd287a7
 8003a30:	8b60c8b3 	.word	0x8b60c8b3
 8003a34:	3fc68a28 	.word	0x3fc68a28
 8003a38:	509f79fb 	.word	0x509f79fb
 8003a3c:	3fd34413 	.word	0x3fd34413
 8003a40:	7ff00000 	.word	0x7ff00000
 8003a44:	080089b5 	.word	0x080089b5
 8003a48:	080089d4 	.word	0x080089d4
 8003a4c:	3ff80000 	.word	0x3ff80000
 8003a50:	080089d8 	.word	0x080089d8
 8003a54:	080089c8 	.word	0x080089c8
 8003a58:	080089b4 	.word	0x080089b4
 8003a5c:	40240000 	.word	0x40240000
 8003a60:	f004 fb0e 	bl	8008080 <__aeabi_dmul>
 8003a64:	2200      	movs	r2, #0
 8003a66:	2300      	movs	r3, #0
 8003a68:	4606      	mov	r6, r0
 8003a6a:	460f      	mov	r7, r1
 8003a6c:	f004 fd70 	bl	8008550 <__aeabi_dcmpeq>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	f040 83ae 	bne.w	80041d2 <_dtoa_r+0xa52>
 8003a76:	4642      	mov	r2, r8
 8003a78:	464b      	mov	r3, r9
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	f004 fc29 	bl	80082d4 <__aeabi_ddiv>
 8003a82:	f004 fdad 	bl	80085e0 <__aeabi_d2iz>
 8003a86:	4604      	mov	r4, r0
 8003a88:	f004 fa94 	bl	8007fb4 <__aeabi_i2d>
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	f004 faf6 	bl	8008080 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4630      	mov	r0, r6
 8003a9a:	4639      	mov	r1, r7
 8003a9c:	f004 f93c 	bl	8007d18 <__aeabi_dsub>
 8003aa0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003aa4:	f805 eb01 	strb.w	lr, [r5], #1
 8003aa8:	ebcb 0e05 	rsb	lr, fp, r5
 8003aac:	45d6      	cmp	lr, sl
 8003aae:	4606      	mov	r6, r0
 8003ab0:	460f      	mov	r7, r1
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	4bae      	ldr	r3, [pc, #696]	; (8003d70 <_dtoa_r+0x5f0>)
 8003ab8:	d1d2      	bne.n	8003a60 <_dtoa_r+0x2e0>
 8003aba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003abe:	4632      	mov	r2, r6
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f004 f929 	bl	8007d1c <__adddf3>
 8003aca:	4606      	mov	r6, r0
 8003acc:	460f      	mov	r7, r1
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ad6:	f004 fd45 	bl	8008564 <__aeabi_dcmplt>
 8003ada:	b940      	cbnz	r0, 8003aee <_dtoa_r+0x36e>
 8003adc:	4632      	mov	r2, r6
 8003ade:	463b      	mov	r3, r7
 8003ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ae4:	f004 fd34 	bl	8008550 <__aeabi_dcmpeq>
 8003ae8:	b188      	cbz	r0, 8003b0e <_dtoa_r+0x38e>
 8003aea:	07e3      	lsls	r3, r4, #31
 8003aec:	d50f      	bpl.n	8003b0e <_dtoa_r+0x38e>
 8003aee:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003af2:	9a07      	ldr	r2, [sp, #28]
 8003af4:	1e6b      	subs	r3, r5, #1
 8003af6:	e004      	b.n	8003b02 <_dtoa_r+0x382>
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f000 83fc 	beq.w	80042f6 <_dtoa_r+0xb76>
 8003afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b02:	2c39      	cmp	r4, #57	; 0x39
 8003b04:	f103 0501 	add.w	r5, r3, #1
 8003b08:	d0f6      	beq.n	8003af8 <_dtoa_r+0x378>
 8003b0a:	3401      	adds	r4, #1
 8003b0c:	701c      	strb	r4, [r3, #0]
 8003b0e:	9908      	ldr	r1, [sp, #32]
 8003b10:	4648      	mov	r0, r9
 8003b12:	f001 fba7 	bl	8005264 <_Bfree>
 8003b16:	2200      	movs	r2, #0
 8003b18:	9b04      	ldr	r3, [sp, #16]
 8003b1a:	702a      	strb	r2, [r5, #0]
 8003b1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003b1e:	3301      	adds	r3, #1
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 839b 	beq.w	8004260 <_dtoa_r+0xae0>
 8003b2a:	9807      	ldr	r0, [sp, #28]
 8003b2c:	601d      	str	r5, [r3, #0]
 8003b2e:	b019      	add	sp, #100	; 0x64
 8003b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	f000 810e 	beq.w	8003d58 <_dtoa_r+0x5d8>
 8003b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b3e:	2a01      	cmp	r2, #1
 8003b40:	f340 8257 	ble.w	8003ff2 <_dtoa_r+0x872>
 8003b44:	9b06      	ldr	r3, [sp, #24]
 8003b46:	9a02      	ldr	r2, [sp, #8]
 8003b48:	1e5f      	subs	r7, r3, #1
 8003b4a:	42ba      	cmp	r2, r7
 8003b4c:	f2c0 838b 	blt.w	8004266 <_dtoa_r+0xae6>
 8003b50:	1bd7      	subs	r7, r2, r7
 8003b52:	9b06      	ldr	r3, [sp, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f2c0 8480 	blt.w	800445a <_dtoa_r+0xcda>
 8003b5a:	9d05      	ldr	r5, [sp, #20]
 8003b5c:	9b06      	ldr	r3, [sp, #24]
 8003b5e:	9a05      	ldr	r2, [sp, #20]
 8003b60:	2101      	movs	r1, #1
 8003b62:	441a      	add	r2, r3
 8003b64:	4648      	mov	r0, r9
 8003b66:	9205      	str	r2, [sp, #20]
 8003b68:	4498      	add	r8, r3
 8003b6a:	f001 fc13 	bl	8005394 <__i2b>
 8003b6e:	4606      	mov	r6, r0
 8003b70:	b165      	cbz	r5, 8003b8c <_dtoa_r+0x40c>
 8003b72:	f1b8 0f00 	cmp.w	r8, #0
 8003b76:	dd09      	ble.n	8003b8c <_dtoa_r+0x40c>
 8003b78:	4545      	cmp	r5, r8
 8003b7a:	9a05      	ldr	r2, [sp, #20]
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	bfa8      	it	ge
 8003b80:	4643      	movge	r3, r8
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	9205      	str	r2, [sp, #20]
 8003b86:	1aed      	subs	r5, r5, r3
 8003b88:	ebc3 0808 	rsb	r8, r3, r8
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f340 82f5 	ble.w	800417e <_dtoa_r+0x9fe>
 8003b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	f000 8202 	beq.w	8003fa0 <_dtoa_r+0x820>
 8003b9c:	2f00      	cmp	r7, #0
 8003b9e:	f000 81ff 	beq.w	8003fa0 <_dtoa_r+0x820>
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	463a      	mov	r2, r7
 8003ba6:	4648      	mov	r0, r9
 8003ba8:	f001 fc96 	bl	80054d8 <__pow5mult>
 8003bac:	9a08      	ldr	r2, [sp, #32]
 8003bae:	4601      	mov	r1, r0
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	4648      	mov	r0, r9
 8003bb4:	f001 fbf8 	bl	80053a8 <__multiply>
 8003bb8:	9908      	ldr	r1, [sp, #32]
 8003bba:	4604      	mov	r4, r0
 8003bbc:	4648      	mov	r0, r9
 8003bbe:	f001 fb51 	bl	8005264 <_Bfree>
 8003bc2:	9b02      	ldr	r3, [sp, #8]
 8003bc4:	1bdb      	subs	r3, r3, r7
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	f040 81e9 	bne.w	8003f9e <_dtoa_r+0x81e>
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4648      	mov	r0, r9
 8003bd0:	f001 fbe0 	bl	8005394 <__i2b>
 8003bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bd6:	9002      	str	r0, [sp, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8215 	beq.w	8004008 <_dtoa_r+0x888>
 8003bde:	4601      	mov	r1, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	4648      	mov	r0, r9
 8003be4:	f001 fc78 	bl	80054d8 <__pow5mult>
 8003be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bea:	9002      	str	r0, [sp, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f340 82f3 	ble.w	80041d8 <_dtoa_r+0xa58>
 8003bf2:	2700      	movs	r7, #0
 8003bf4:	9a02      	ldr	r2, [sp, #8]
 8003bf6:	6913      	ldr	r3, [r2, #16]
 8003bf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003bfc:	6918      	ldr	r0, [r3, #16]
 8003bfe:	f001 fb7b 	bl	80052f8 <__hi0bits>
 8003c02:	f1c0 0020 	rsb	r0, r0, #32
 8003c06:	4440      	add	r0, r8
 8003c08:	f010 001f 	ands.w	r0, r0, #31
 8003c0c:	f000 81fa 	beq.w	8004004 <_dtoa_r+0x884>
 8003c10:	f1c0 0320 	rsb	r3, r0, #32
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	f340 84bd 	ble.w	8004594 <_dtoa_r+0xe14>
 8003c1a:	f1c0 001c 	rsb	r0, r0, #28
 8003c1e:	9b05      	ldr	r3, [sp, #20]
 8003c20:	4403      	add	r3, r0
 8003c22:	9305      	str	r3, [sp, #20]
 8003c24:	4405      	add	r5, r0
 8003c26:	4480      	add	r8, r0
 8003c28:	9b05      	ldr	r3, [sp, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	dd05      	ble.n	8003c3a <_dtoa_r+0x4ba>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	461a      	mov	r2, r3
 8003c32:	4648      	mov	r0, r9
 8003c34:	f001 fca0 	bl	8005578 <__lshift>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	f1b8 0f00 	cmp.w	r8, #0
 8003c3e:	dd05      	ble.n	8003c4c <_dtoa_r+0x4cc>
 8003c40:	4642      	mov	r2, r8
 8003c42:	9902      	ldr	r1, [sp, #8]
 8003c44:	4648      	mov	r0, r9
 8003c46:	f001 fc97 	bl	8005578 <__lshift>
 8003c4a:	9002      	str	r0, [sp, #8]
 8003c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 827a 	bne.w	8004148 <_dtoa_r+0x9c8>
 8003c54:	9b06      	ldr	r3, [sp, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f340 8293 	ble.w	8004182 <_dtoa_r+0xa02>
 8003c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 81f4 	bne.w	800404c <_dtoa_r+0x8cc>
 8003c64:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003c68:	9f06      	ldr	r7, [sp, #24]
 8003c6a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003c6e:	465d      	mov	r5, fp
 8003c70:	e002      	b.n	8003c78 <_dtoa_r+0x4f8>
 8003c72:	f001 fb01 	bl	8005278 <__multadd>
 8003c76:	4604      	mov	r4, r0
 8003c78:	4641      	mov	r1, r8
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f7ff fcec 	bl	8003658 <quorem>
 8003c80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003c84:	f805 ab01 	strb.w	sl, [r5], #1
 8003c88:	ebcb 0305 	rsb	r3, fp, r5
 8003c8c:	42bb      	cmp	r3, r7
 8003c8e:	f04f 020a 	mov.w	r2, #10
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	4621      	mov	r1, r4
 8003c98:	4648      	mov	r0, r9
 8003c9a:	dbea      	blt.n	8003c72 <_dtoa_r+0x4f2>
 8003c9c:	9b07      	ldr	r3, [sp, #28]
 8003c9e:	9a06      	ldr	r2, [sp, #24]
 8003ca0:	2a01      	cmp	r2, #1
 8003ca2:	bfac      	ite	ge
 8003ca4:	189b      	addge	r3, r3, r2
 8003ca6:	3301      	addlt	r3, #1
 8003ca8:	461d      	mov	r5, r3
 8003caa:	f04f 0b00 	mov.w	fp, #0
 8003cae:	4621      	mov	r1, r4
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4648      	mov	r0, r9
 8003cb4:	f001 fc60 	bl	8005578 <__lshift>
 8003cb8:	9902      	ldr	r1, [sp, #8]
 8003cba:	9008      	str	r0, [sp, #32]
 8003cbc:	f001 fcb4 	bl	8005628 <__mcmp>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	f340 8305 	ble.w	80042d0 <_dtoa_r+0xb50>
 8003cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003cca:	9907      	ldr	r1, [sp, #28]
 8003ccc:	1e6b      	subs	r3, r5, #1
 8003cce:	e004      	b.n	8003cda <_dtoa_r+0x55a>
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	f000 8274 	beq.w	80041be <_dtoa_r+0xa3e>
 8003cd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003cda:	2a39      	cmp	r2, #57	; 0x39
 8003cdc:	f103 0501 	add.w	r5, r3, #1
 8003ce0:	d0f6      	beq.n	8003cd0 <_dtoa_r+0x550>
 8003ce2:	3201      	adds	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	9902      	ldr	r1, [sp, #8]
 8003ce8:	4648      	mov	r0, r9
 8003cea:	f001 fabb 	bl	8005264 <_Bfree>
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	f43f af0d 	beq.w	8003b0e <_dtoa_r+0x38e>
 8003cf4:	f1bb 0f00 	cmp.w	fp, #0
 8003cf8:	d005      	beq.n	8003d06 <_dtoa_r+0x586>
 8003cfa:	45b3      	cmp	fp, r6
 8003cfc:	d003      	beq.n	8003d06 <_dtoa_r+0x586>
 8003cfe:	4659      	mov	r1, fp
 8003d00:	4648      	mov	r0, r9
 8003d02:	f001 faaf 	bl	8005264 <_Bfree>
 8003d06:	4631      	mov	r1, r6
 8003d08:	4648      	mov	r0, r9
 8003d0a:	f001 faab 	bl	8005264 <_Bfree>
 8003d0e:	e6fe      	b.n	8003b0e <_dtoa_r+0x38e>
 8003d10:	2301      	movs	r3, #1
 8003d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d14:	e5ec      	b.n	80038f0 <_dtoa_r+0x170>
 8003d16:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	f004 f94a 	bl	8007fb4 <__aeabi_i2d>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4630      	mov	r0, r6
 8003d26:	4639      	mov	r1, r7
 8003d28:	f004 fc12 	bl	8008550 <__aeabi_dcmpeq>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	f47f adcb 	bne.w	80038c8 <_dtoa_r+0x148>
 8003d32:	f108 33ff 	add.w	r3, r8, #4294967295
 8003d36:	9304      	str	r3, [sp, #16]
 8003d38:	e5c6      	b.n	80038c8 <_dtoa_r+0x148>
 8003d3a:	9a05      	ldr	r2, [sp, #20]
 8003d3c:	9b04      	ldr	r3, [sp, #16]
 8003d3e:	1ad2      	subs	r2, r2, r3
 8003d40:	425b      	negs	r3, r3
 8003d42:	9302      	str	r3, [sp, #8]
 8003d44:	2300      	movs	r3, #0
 8003d46:	9205      	str	r2, [sp, #20]
 8003d48:	930a      	str	r3, [sp, #40]	; 0x28
 8003d4a:	e5e0      	b.n	800390e <_dtoa_r+0x18e>
 8003d4c:	f1c8 0300 	rsb	r3, r8, #0
 8003d50:	9305      	str	r3, [sp, #20]
 8003d52:	f04f 0800 	mov.w	r8, #0
 8003d56:	e5d2      	b.n	80038fe <_dtoa_r+0x17e>
 8003d58:	9f02      	ldr	r7, [sp, #8]
 8003d5a:	9d05      	ldr	r5, [sp, #20]
 8003d5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003d5e:	e707      	b.n	8003b70 <_dtoa_r+0x3f0>
 8003d60:	f1c3 0820 	rsb	r8, r3, #32
 8003d64:	fa0a f008 	lsl.w	r0, sl, r8
 8003d68:	e57b      	b.n	8003862 <_dtoa_r+0xe2>
 8003d6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8003d6c:	e5c0      	b.n	80038f0 <_dtoa_r+0x170>
 8003d6e:	bf00      	nop
 8003d70:	40240000 	.word	0x40240000
 8003d74:	2300      	movs	r3, #0
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	9b04      	ldr	r3, [sp, #16]
 8003d7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003d7c:	4413      	add	r3, r2
 8003d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d80:	3301      	adds	r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	9306      	str	r3, [sp, #24]
 8003d86:	f340 827d 	ble.w	8004284 <_dtoa_r+0xb04>
 8003d8a:	9c06      	ldr	r4, [sp, #24]
 8003d8c:	4626      	mov	r6, r4
 8003d8e:	2100      	movs	r1, #0
 8003d90:	2e17      	cmp	r6, #23
 8003d92:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003d96:	d90b      	bls.n	8003db0 <_dtoa_r+0x630>
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	f103 0014 	add.w	r0, r3, #20
 8003da2:	42b0      	cmp	r0, r6
 8003da4:	4611      	mov	r1, r2
 8003da6:	f102 0201 	add.w	r2, r2, #1
 8003daa:	d9f7      	bls.n	8003d9c <_dtoa_r+0x61c>
 8003dac:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003db0:	4648      	mov	r0, r9
 8003db2:	f001 fa31 	bl	8005218 <_Balloc>
 8003db6:	2c0e      	cmp	r4, #14
 8003db8:	9007      	str	r0, [sp, #28]
 8003dba:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003dbe:	f63f ade5 	bhi.w	800398c <_dtoa_r+0x20c>
 8003dc2:	2d00      	cmp	r5, #0
 8003dc4:	f43f ade2 	beq.w	800398c <_dtoa_r+0x20c>
 8003dc8:	9904      	ldr	r1, [sp, #16]
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8003dd0:	f340 829a 	ble.w	8004308 <_dtoa_r+0xb88>
 8003dd4:	4b90      	ldr	r3, [pc, #576]	; (8004018 <_dtoa_r+0x898>)
 8003dd6:	f001 020f 	and.w	r2, r1, #15
 8003dda:	110e      	asrs	r6, r1, #4
 8003ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003de0:	06f0      	lsls	r0, r6, #27
 8003de2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003de6:	f140 8246 	bpl.w	8004276 <_dtoa_r+0xaf6>
 8003dea:	4b8c      	ldr	r3, [pc, #560]	; (800401c <_dtoa_r+0x89c>)
 8003dec:	4650      	mov	r0, sl
 8003dee:	4659      	mov	r1, fp
 8003df0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003df4:	f004 fa6e 	bl	80082d4 <__aeabi_ddiv>
 8003df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003dfc:	f006 060f 	and.w	r6, r6, #15
 8003e00:	f04f 0a03 	mov.w	sl, #3
 8003e04:	b186      	cbz	r6, 8003e28 <_dtoa_r+0x6a8>
 8003e06:	4f85      	ldr	r7, [pc, #532]	; (800401c <_dtoa_r+0x89c>)
 8003e08:	07f1      	lsls	r1, r6, #31
 8003e0a:	d509      	bpl.n	8003e20 <_dtoa_r+0x6a0>
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e14:	f004 f934 	bl	8008080 <__aeabi_dmul>
 8003e18:	f10a 0a01 	add.w	sl, sl, #1
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	460d      	mov	r5, r1
 8003e20:	1076      	asrs	r6, r6, #1
 8003e22:	f107 0708 	add.w	r7, r7, #8
 8003e26:	d1ef      	bne.n	8003e08 <_dtoa_r+0x688>
 8003e28:	4622      	mov	r2, r4
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e30:	f004 fa50 	bl	80082d4 <__aeabi_ddiv>
 8003e34:	4606      	mov	r6, r0
 8003e36:	460f      	mov	r7, r1
 8003e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e3a:	b143      	cbz	r3, 8003e4e <_dtoa_r+0x6ce>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4b78      	ldr	r3, [pc, #480]	; (8004020 <_dtoa_r+0x8a0>)
 8003e40:	4630      	mov	r0, r6
 8003e42:	4639      	mov	r1, r7
 8003e44:	f004 fb8e 	bl	8008564 <__aeabi_dcmplt>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f040 831a 	bne.w	8004482 <_dtoa_r+0xd02>
 8003e4e:	4650      	mov	r0, sl
 8003e50:	f004 f8b0 	bl	8007fb4 <__aeabi_i2d>
 8003e54:	4632      	mov	r2, r6
 8003e56:	463b      	mov	r3, r7
 8003e58:	f004 f912 	bl	8008080 <__aeabi_dmul>
 8003e5c:	4b71      	ldr	r3, [pc, #452]	; (8004024 <_dtoa_r+0x8a4>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f003 ff5c 	bl	8007d1c <__adddf3>
 8003e64:	9b06      	ldr	r3, [sp, #24]
 8003e66:	4604      	mov	r4, r0
 8003e68:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 81db 	beq.w	8004228 <_dtoa_r+0xaa8>
 8003e72:	9b04      	ldr	r3, [sp, #16]
 8003e74:	9314      	str	r3, [sp, #80]	; 0x50
 8003e76:	9b06      	ldr	r3, [sp, #24]
 8003e78:	9310      	str	r3, [sp, #64]	; 0x40
 8003e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8294 	beq.w	80043aa <_dtoa_r+0xc2a>
 8003e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e84:	4b64      	ldr	r3, [pc, #400]	; (8004018 <_dtoa_r+0x898>)
 8003e86:	4968      	ldr	r1, [pc, #416]	; (8004028 <_dtoa_r+0x8a8>)
 8003e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e90:	2000      	movs	r0, #0
 8003e92:	f004 fa1f 	bl	80082d4 <__aeabi_ddiv>
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	f003 ff3d 	bl	8007d18 <__aeabi_dsub>
 8003e9e:	4682      	mov	sl, r0
 8003ea0:	468b      	mov	fp, r1
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	f004 fb9b 	bl	80085e0 <__aeabi_d2iz>
 8003eaa:	4604      	mov	r4, r0
 8003eac:	f004 f882 	bl	8007fb4 <__aeabi_i2d>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f003 ff2e 	bl	8007d18 <__aeabi_dsub>
 8003ebc:	3430      	adds	r4, #48	; 0x30
 8003ebe:	9d07      	ldr	r5, [sp, #28]
 8003ec0:	b2e4      	uxtb	r4, r4
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460f      	mov	r7, r1
 8003ec6:	702c      	strb	r4, [r5, #0]
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4650      	mov	r0, sl
 8003ece:	4659      	mov	r1, fp
 8003ed0:	3501      	adds	r5, #1
 8003ed2:	f004 fb65 	bl	80085a0 <__aeabi_dcmpgt>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d150      	bne.n	8003f7c <_dtoa_r+0x7fc>
 8003eda:	4632      	mov	r2, r6
 8003edc:	463b      	mov	r3, r7
 8003ede:	2000      	movs	r0, #0
 8003ee0:	494f      	ldr	r1, [pc, #316]	; (8004020 <_dtoa_r+0x8a0>)
 8003ee2:	f003 ff19 	bl	8007d18 <__aeabi_dsub>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4650      	mov	r0, sl
 8003eec:	4659      	mov	r1, fp
 8003eee:	f004 fb57 	bl	80085a0 <__aeabi_dcmpgt>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	f040 8308 	bne.w	8004508 <_dtoa_r+0xd88>
 8003ef8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003efa:	2a01      	cmp	r2, #1
 8003efc:	f340 81f7 	ble.w	80042ee <_dtoa_r+0xb6e>
 8003f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f02:	9a07      	ldr	r2, [sp, #28]
 8003f04:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003f08:	4413      	add	r3, r2
 8003f0a:	4698      	mov	r8, r3
 8003f0c:	e00d      	b.n	8003f2a <_dtoa_r+0x7aa>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	4943      	ldr	r1, [pc, #268]	; (8004020 <_dtoa_r+0x8a0>)
 8003f12:	f003 ff01 	bl	8007d18 <__aeabi_dsub>
 8003f16:	4652      	mov	r2, sl
 8003f18:	465b      	mov	r3, fp
 8003f1a:	f004 fb23 	bl	8008564 <__aeabi_dcmplt>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f040 82f2 	bne.w	8004508 <_dtoa_r+0xd88>
 8003f24:	4545      	cmp	r5, r8
 8003f26:	f000 81e0 	beq.w	80042ea <_dtoa_r+0xb6a>
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	2200      	movs	r2, #0
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <_dtoa_r+0x8ac>)
 8003f32:	f004 f8a5 	bl	8008080 <__aeabi_dmul>
 8003f36:	2200      	movs	r2, #0
 8003f38:	4b3c      	ldr	r3, [pc, #240]	; (800402c <_dtoa_r+0x8ac>)
 8003f3a:	4682      	mov	sl, r0
 8003f3c:	468b      	mov	fp, r1
 8003f3e:	4630      	mov	r0, r6
 8003f40:	4639      	mov	r1, r7
 8003f42:	f004 f89d 	bl	8008080 <__aeabi_dmul>
 8003f46:	460f      	mov	r7, r1
 8003f48:	4606      	mov	r6, r0
 8003f4a:	f004 fb49 	bl	80085e0 <__aeabi_d2iz>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	f004 f830 	bl	8007fb4 <__aeabi_i2d>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4630      	mov	r0, r6
 8003f5a:	4639      	mov	r1, r7
 8003f5c:	f003 fedc 	bl	8007d18 <__aeabi_dsub>
 8003f60:	3430      	adds	r4, #48	; 0x30
 8003f62:	b2e4      	uxtb	r4, r4
 8003f64:	4652      	mov	r2, sl
 8003f66:	465b      	mov	r3, fp
 8003f68:	f805 4b01 	strb.w	r4, [r5], #1
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460f      	mov	r7, r1
 8003f70:	f004 faf8 	bl	8008564 <__aeabi_dcmplt>
 8003f74:	4632      	mov	r2, r6
 8003f76:	463b      	mov	r3, r7
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d0c8      	beq.n	8003f0e <_dtoa_r+0x78e>
 8003f7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	e5c5      	b.n	8003b0e <_dtoa_r+0x38e>
 8003f82:	2300      	movs	r3, #0
 8003f84:	9309      	str	r3, [sp, #36]	; 0x24
 8003f86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f340 8180 	ble.w	800428e <_dtoa_r+0xb0e>
 8003f8e:	461e      	mov	r6, r3
 8003f90:	461c      	mov	r4, r3
 8003f92:	930c      	str	r3, [sp, #48]	; 0x30
 8003f94:	9306      	str	r3, [sp, #24]
 8003f96:	e6fa      	b.n	8003d8e <_dtoa_r+0x60e>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9c:	e7f3      	b.n	8003f86 <_dtoa_r+0x806>
 8003f9e:	9408      	str	r4, [sp, #32]
 8003fa0:	9a02      	ldr	r2, [sp, #8]
 8003fa2:	9908      	ldr	r1, [sp, #32]
 8003fa4:	4648      	mov	r0, r9
 8003fa6:	f001 fa97 	bl	80054d8 <__pow5mult>
 8003faa:	4604      	mov	r4, r0
 8003fac:	e60e      	b.n	8003bcc <_dtoa_r+0x44c>
 8003fae:	9b06      	ldr	r3, [sp, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f73f acfe 	bgt.w	80039b2 <_dtoa_r+0x232>
 8003fb6:	f040 814f 	bne.w	8004258 <_dtoa_r+0xad8>
 8003fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <_dtoa_r+0x8b0>)
 8003fc2:	f004 f85d 	bl	8008080 <__aeabi_dmul>
 8003fc6:	465b      	mov	r3, fp
 8003fc8:	4652      	mov	r2, sl
 8003fca:	f004 fadf 	bl	800858c <__aeabi_dcmpge>
 8003fce:	9b06      	ldr	r3, [sp, #24]
 8003fd0:	9302      	str	r3, [sp, #8]
 8003fd2:	461e      	mov	r6, r3
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f000 80ea 	beq.w	80041ae <_dtoa_r+0xa2e>
 8003fda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fdc:	9d07      	ldr	r5, [sp, #28]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	9902      	ldr	r1, [sp, #8]
 8003fe4:	4648      	mov	r0, r9
 8003fe6:	f001 f93d 	bl	8005264 <_Bfree>
 8003fea:	2e00      	cmp	r6, #0
 8003fec:	f43f ad8f 	beq.w	8003b0e <_dtoa_r+0x38e>
 8003ff0:	e689      	b.n	8003d06 <_dtoa_r+0x586>
 8003ff2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	f000 8238 	beq.w	800446a <_dtoa_r+0xcea>
 8003ffa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003ffe:	9f02      	ldr	r7, [sp, #8]
 8004000:	9d05      	ldr	r5, [sp, #20]
 8004002:	e5ac      	b.n	8003b5e <_dtoa_r+0x3de>
 8004004:	201c      	movs	r0, #28
 8004006:	e60a      	b.n	8003c1e <_dtoa_r+0x49e>
 8004008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800400a:	2b01      	cmp	r3, #1
 800400c:	f340 8280 	ble.w	8004510 <_dtoa_r+0xd90>
 8004010:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004012:	2001      	movs	r0, #1
 8004014:	e5f7      	b.n	8003c06 <_dtoa_r+0x486>
 8004016:	bf00      	nop
 8004018:	080089d8 	.word	0x080089d8
 800401c:	08008aa0 	.word	0x08008aa0
 8004020:	3ff00000 	.word	0x3ff00000
 8004024:	401c0000 	.word	0x401c0000
 8004028:	3fe00000 	.word	0x3fe00000
 800402c:	40240000 	.word	0x40240000
 8004030:	40140000 	.word	0x40140000
 8004034:	4631      	mov	r1, r6
 8004036:	2300      	movs	r3, #0
 8004038:	220a      	movs	r2, #10
 800403a:	4648      	mov	r0, r9
 800403c:	f001 f91c 	bl	8005278 <__multadd>
 8004040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004042:	2b00      	cmp	r3, #0
 8004044:	4606      	mov	r6, r0
 8004046:	f340 828d 	ble.w	8004564 <_dtoa_r+0xde4>
 800404a:	9306      	str	r3, [sp, #24]
 800404c:	2d00      	cmp	r5, #0
 800404e:	dd05      	ble.n	800405c <_dtoa_r+0x8dc>
 8004050:	4631      	mov	r1, r6
 8004052:	462a      	mov	r2, r5
 8004054:	4648      	mov	r0, r9
 8004056:	f001 fa8f 	bl	8005578 <__lshift>
 800405a:	4606      	mov	r6, r0
 800405c:	2f00      	cmp	r7, #0
 800405e:	f040 817c 	bne.w	800435a <_dtoa_r+0xbda>
 8004062:	46b0      	mov	r8, r6
 8004064:	9b06      	ldr	r3, [sp, #24]
 8004066:	9a07      	ldr	r2, [sp, #28]
 8004068:	3b01      	subs	r3, #1
 800406a:	18d3      	adds	r3, r2, r3
 800406c:	9308      	str	r3, [sp, #32]
 800406e:	f00a 0301 	and.w	r3, sl, #1
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	4617      	mov	r7, r2
 8004076:	f8dd b008 	ldr.w	fp, [sp, #8]
 800407a:	4620      	mov	r0, r4
 800407c:	4659      	mov	r1, fp
 800407e:	f7ff faeb 	bl	8003658 <quorem>
 8004082:	4631      	mov	r1, r6
 8004084:	4605      	mov	r5, r0
 8004086:	4620      	mov	r0, r4
 8004088:	f001 face 	bl	8005628 <__mcmp>
 800408c:	4642      	mov	r2, r8
 800408e:	4659      	mov	r1, fp
 8004090:	4682      	mov	sl, r0
 8004092:	4648      	mov	r0, r9
 8004094:	f001 faea 	bl	800566c <__mdiff>
 8004098:	68c2      	ldr	r2, [r0, #12]
 800409a:	4683      	mov	fp, r0
 800409c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	d149      	bne.n	8004138 <_dtoa_r+0x9b8>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4620      	mov	r0, r4
 80040a8:	9306      	str	r3, [sp, #24]
 80040aa:	f001 fabd 	bl	8005628 <__mcmp>
 80040ae:	4659      	mov	r1, fp
 80040b0:	9005      	str	r0, [sp, #20]
 80040b2:	4648      	mov	r0, r9
 80040b4:	f001 f8d6 	bl	8005264 <_Bfree>
 80040b8:	9a05      	ldr	r2, [sp, #20]
 80040ba:	9b06      	ldr	r3, [sp, #24]
 80040bc:	b92a      	cbnz	r2, 80040ca <_dtoa_r+0x94a>
 80040be:	9922      	ldr	r1, [sp, #136]	; 0x88
 80040c0:	b919      	cbnz	r1, 80040ca <_dtoa_r+0x94a>
 80040c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040c4:	2900      	cmp	r1, #0
 80040c6:	f000 8235 	beq.w	8004534 <_dtoa_r+0xdb4>
 80040ca:	f1ba 0f00 	cmp.w	sl, #0
 80040ce:	f2c0 80e3 	blt.w	8004298 <_dtoa_r+0xb18>
 80040d2:	d105      	bne.n	80040e0 <_dtoa_r+0x960>
 80040d4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80040d6:	b919      	cbnz	r1, 80040e0 <_dtoa_r+0x960>
 80040d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040da:	2900      	cmp	r1, #0
 80040dc:	f000 80dc 	beq.w	8004298 <_dtoa_r+0xb18>
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	f300 814e 	bgt.w	8004382 <_dtoa_r+0xc02>
 80040e6:	9a08      	ldr	r2, [sp, #32]
 80040e8:	703b      	strb	r3, [r7, #0]
 80040ea:	f107 0a01 	add.w	sl, r7, #1
 80040ee:	4297      	cmp	r7, r2
 80040f0:	4655      	mov	r5, sl
 80040f2:	f000 8152 	beq.w	800439a <_dtoa_r+0xc1a>
 80040f6:	4621      	mov	r1, r4
 80040f8:	2300      	movs	r3, #0
 80040fa:	220a      	movs	r2, #10
 80040fc:	4648      	mov	r0, r9
 80040fe:	f001 f8bb 	bl	8005278 <__multadd>
 8004102:	4546      	cmp	r6, r8
 8004104:	4604      	mov	r4, r0
 8004106:	4631      	mov	r1, r6
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	f04f 020a 	mov.w	r2, #10
 8004110:	4648      	mov	r0, r9
 8004112:	d00b      	beq.n	800412c <_dtoa_r+0x9ac>
 8004114:	f001 f8b0 	bl	8005278 <__multadd>
 8004118:	4641      	mov	r1, r8
 800411a:	4606      	mov	r6, r0
 800411c:	2300      	movs	r3, #0
 800411e:	220a      	movs	r2, #10
 8004120:	4648      	mov	r0, r9
 8004122:	f001 f8a9 	bl	8005278 <__multadd>
 8004126:	4657      	mov	r7, sl
 8004128:	4680      	mov	r8, r0
 800412a:	e7a4      	b.n	8004076 <_dtoa_r+0x8f6>
 800412c:	f001 f8a4 	bl	8005278 <__multadd>
 8004130:	4657      	mov	r7, sl
 8004132:	4606      	mov	r6, r0
 8004134:	4680      	mov	r8, r0
 8004136:	e79e      	b.n	8004076 <_dtoa_r+0x8f6>
 8004138:	4601      	mov	r1, r0
 800413a:	4648      	mov	r0, r9
 800413c:	9305      	str	r3, [sp, #20]
 800413e:	f001 f891 	bl	8005264 <_Bfree>
 8004142:	2201      	movs	r2, #1
 8004144:	9b05      	ldr	r3, [sp, #20]
 8004146:	e7c0      	b.n	80040ca <_dtoa_r+0x94a>
 8004148:	9902      	ldr	r1, [sp, #8]
 800414a:	4620      	mov	r0, r4
 800414c:	f001 fa6c 	bl	8005628 <__mcmp>
 8004150:	2800      	cmp	r0, #0
 8004152:	f6bf ad7f 	bge.w	8003c54 <_dtoa_r+0x4d4>
 8004156:	4621      	mov	r1, r4
 8004158:	9c04      	ldr	r4, [sp, #16]
 800415a:	2300      	movs	r3, #0
 800415c:	3c01      	subs	r4, #1
 800415e:	220a      	movs	r2, #10
 8004160:	4648      	mov	r0, r9
 8004162:	9404      	str	r4, [sp, #16]
 8004164:	f001 f888 	bl	8005278 <__multadd>
 8004168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416a:	4604      	mov	r4, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f af61 	bne.w	8004034 <_dtoa_r+0x8b4>
 8004172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004174:	2b00      	cmp	r3, #0
 8004176:	f340 81ed 	ble.w	8004554 <_dtoa_r+0xdd4>
 800417a:	9306      	str	r3, [sp, #24]
 800417c:	e572      	b.n	8003c64 <_dtoa_r+0x4e4>
 800417e:	9c08      	ldr	r4, [sp, #32]
 8004180:	e524      	b.n	8003bcc <_dtoa_r+0x44c>
 8004182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004184:	2b02      	cmp	r3, #2
 8004186:	f77f ad69 	ble.w	8003c5c <_dtoa_r+0x4dc>
 800418a:	9b06      	ldr	r3, [sp, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 819d 	bne.w	80044cc <_dtoa_r+0xd4c>
 8004192:	9902      	ldr	r1, [sp, #8]
 8004194:	2205      	movs	r2, #5
 8004196:	4648      	mov	r0, r9
 8004198:	f001 f86e 	bl	8005278 <__multadd>
 800419c:	4601      	mov	r1, r0
 800419e:	9002      	str	r0, [sp, #8]
 80041a0:	4620      	mov	r0, r4
 80041a2:	f001 fa41 	bl	8005628 <__mcmp>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	9408      	str	r4, [sp, #32]
 80041aa:	f77f af16 	ble.w	8003fda <_dtoa_r+0x85a>
 80041ae:	9a04      	ldr	r2, [sp, #16]
 80041b0:	9907      	ldr	r1, [sp, #28]
 80041b2:	2331      	movs	r3, #49	; 0x31
 80041b4:	3201      	adds	r2, #1
 80041b6:	9204      	str	r2, [sp, #16]
 80041b8:	700b      	strb	r3, [r1, #0]
 80041ba:	1c4d      	adds	r5, r1, #1
 80041bc:	e711      	b.n	8003fe2 <_dtoa_r+0x862>
 80041be:	9a04      	ldr	r2, [sp, #16]
 80041c0:	3201      	adds	r2, #1
 80041c2:	9204      	str	r2, [sp, #16]
 80041c4:	9a07      	ldr	r2, [sp, #28]
 80041c6:	2331      	movs	r3, #49	; 0x31
 80041c8:	7013      	strb	r3, [r2, #0]
 80041ca:	e58c      	b.n	8003ce6 <_dtoa_r+0x566>
 80041cc:	2301      	movs	r3, #1
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
 80041d0:	e5d2      	b.n	8003d78 <_dtoa_r+0x5f8>
 80041d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80041d6:	e49a      	b.n	8003b0e <_dtoa_r+0x38e>
 80041d8:	f1ba 0f00 	cmp.w	sl, #0
 80041dc:	f47f ad09 	bne.w	8003bf2 <_dtoa_r+0x472>
 80041e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 813e 	bne.w	8004466 <_dtoa_r+0xce6>
 80041ea:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80041ee:	0d3f      	lsrs	r7, r7, #20
 80041f0:	053f      	lsls	r7, r7, #20
 80041f2:	b12f      	cbz	r7, 8004200 <_dtoa_r+0xa80>
 80041f4:	9b05      	ldr	r3, [sp, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	9305      	str	r3, [sp, #20]
 80041fa:	f108 0801 	add.w	r8, r8, #1
 80041fe:	2701      	movs	r7, #1
 8004200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004202:	2001      	movs	r0, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	f43f acfe 	beq.w	8003c06 <_dtoa_r+0x486>
 800420a:	e4f3      	b.n	8003bf4 <_dtoa_r+0x474>
 800420c:	4650      	mov	r0, sl
 800420e:	f003 fed1 	bl	8007fb4 <__aeabi_i2d>
 8004212:	4632      	mov	r2, r6
 8004214:	463b      	mov	r3, r7
 8004216:	f003 ff33 	bl	8008080 <__aeabi_dmul>
 800421a:	2200      	movs	r2, #0
 800421c:	4bbf      	ldr	r3, [pc, #764]	; (800451c <_dtoa_r+0xd9c>)
 800421e:	f003 fd7d 	bl	8007d1c <__adddf3>
 8004222:	4604      	mov	r4, r0
 8004224:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004228:	4630      	mov	r0, r6
 800422a:	4639      	mov	r1, r7
 800422c:	2200      	movs	r2, #0
 800422e:	4bbc      	ldr	r3, [pc, #752]	; (8004520 <_dtoa_r+0xda0>)
 8004230:	f003 fd72 	bl	8007d18 <__aeabi_dsub>
 8004234:	4622      	mov	r2, r4
 8004236:	462b      	mov	r3, r5
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	f004 f9b0 	bl	80085a0 <__aeabi_dcmpgt>
 8004240:	2800      	cmp	r0, #0
 8004242:	f040 80ae 	bne.w	80043a2 <_dtoa_r+0xc22>
 8004246:	4622      	mov	r2, r4
 8004248:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800424c:	4630      	mov	r0, r6
 800424e:	4639      	mov	r1, r7
 8004250:	f004 f988 	bl	8008564 <__aeabi_dcmplt>
 8004254:	2800      	cmp	r0, #0
 8004256:	d04a      	beq.n	80042ee <_dtoa_r+0xb6e>
 8004258:	2300      	movs	r3, #0
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	461e      	mov	r6, r3
 800425e:	e6bc      	b.n	8003fda <_dtoa_r+0x85a>
 8004260:	9807      	ldr	r0, [sp, #28]
 8004262:	f7ff babe 	b.w	80037e2 <_dtoa_r+0x62>
 8004266:	9b02      	ldr	r3, [sp, #8]
 8004268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800426a:	9702      	str	r7, [sp, #8]
 800426c:	1afb      	subs	r3, r7, r3
 800426e:	441a      	add	r2, r3
 8004270:	920a      	str	r2, [sp, #40]	; 0x28
 8004272:	2700      	movs	r7, #0
 8004274:	e46d      	b.n	8003b52 <_dtoa_r+0x3d2>
 8004276:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800427a:	f04f 0a02 	mov.w	sl, #2
 800427e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004282:	e5bf      	b.n	8003e04 <_dtoa_r+0x684>
 8004284:	461c      	mov	r4, r3
 8004286:	2100      	movs	r1, #0
 8004288:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800428c:	e590      	b.n	8003db0 <_dtoa_r+0x630>
 800428e:	2401      	movs	r4, #1
 8004290:	9423      	str	r4, [sp, #140]	; 0x8c
 8004292:	940c      	str	r4, [sp, #48]	; 0x30
 8004294:	9406      	str	r4, [sp, #24]
 8004296:	e7f6      	b.n	8004286 <_dtoa_r+0xb06>
 8004298:	2a00      	cmp	r2, #0
 800429a:	469a      	mov	sl, r3
 800429c:	dd11      	ble.n	80042c2 <_dtoa_r+0xb42>
 800429e:	4621      	mov	r1, r4
 80042a0:	2201      	movs	r2, #1
 80042a2:	4648      	mov	r0, r9
 80042a4:	f001 f968 	bl	8005578 <__lshift>
 80042a8:	9902      	ldr	r1, [sp, #8]
 80042aa:	4604      	mov	r4, r0
 80042ac:	f001 f9bc 	bl	8005628 <__mcmp>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	f340 8148 	ble.w	8004546 <_dtoa_r+0xdc6>
 80042b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80042ba:	f000 8109 	beq.w	80044d0 <_dtoa_r+0xd50>
 80042be:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 80042c2:	46b3      	mov	fp, r6
 80042c4:	f887 a000 	strb.w	sl, [r7]
 80042c8:	1c7d      	adds	r5, r7, #1
 80042ca:	4646      	mov	r6, r8
 80042cc:	9408      	str	r4, [sp, #32]
 80042ce:	e50a      	b.n	8003ce6 <_dtoa_r+0x566>
 80042d0:	d104      	bne.n	80042dc <_dtoa_r+0xb5c>
 80042d2:	f01a 0f01 	tst.w	sl, #1
 80042d6:	d001      	beq.n	80042dc <_dtoa_r+0xb5c>
 80042d8:	e4f5      	b.n	8003cc6 <_dtoa_r+0x546>
 80042da:	4615      	mov	r5, r2
 80042dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80042e6:	d0f8      	beq.n	80042da <_dtoa_r+0xb5a>
 80042e8:	e4fd      	b.n	8003ce6 <_dtoa_r+0x566>
 80042ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80042ee:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 80042f2:	f7ff bb4b 	b.w	800398c <_dtoa_r+0x20c>
 80042f6:	9907      	ldr	r1, [sp, #28]
 80042f8:	2230      	movs	r2, #48	; 0x30
 80042fa:	700a      	strb	r2, [r1, #0]
 80042fc:	9a04      	ldr	r2, [sp, #16]
 80042fe:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004302:	3201      	adds	r2, #1
 8004304:	9204      	str	r2, [sp, #16]
 8004306:	e400      	b.n	8003b0a <_dtoa_r+0x38a>
 8004308:	9b04      	ldr	r3, [sp, #16]
 800430a:	425c      	negs	r4, r3
 800430c:	2c00      	cmp	r4, #0
 800430e:	f000 80b3 	beq.w	8004478 <_dtoa_r+0xcf8>
 8004312:	4b84      	ldr	r3, [pc, #528]	; (8004524 <_dtoa_r+0xda4>)
 8004314:	f004 020f 	and.w	r2, r4, #15
 8004318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004324:	f003 feac 	bl	8008080 <__aeabi_dmul>
 8004328:	1124      	asrs	r4, r4, #4
 800432a:	4606      	mov	r6, r0
 800432c:	460f      	mov	r7, r1
 800432e:	f000 8116 	beq.w	800455e <_dtoa_r+0xdde>
 8004332:	4d7d      	ldr	r5, [pc, #500]	; (8004528 <_dtoa_r+0xda8>)
 8004334:	f04f 0a02 	mov.w	sl, #2
 8004338:	07e2      	lsls	r2, r4, #31
 800433a:	d509      	bpl.n	8004350 <_dtoa_r+0xbd0>
 800433c:	4630      	mov	r0, r6
 800433e:	4639      	mov	r1, r7
 8004340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004344:	f003 fe9c 	bl	8008080 <__aeabi_dmul>
 8004348:	f10a 0a01 	add.w	sl, sl, #1
 800434c:	4606      	mov	r6, r0
 800434e:	460f      	mov	r7, r1
 8004350:	1064      	asrs	r4, r4, #1
 8004352:	f105 0508 	add.w	r5, r5, #8
 8004356:	d1ef      	bne.n	8004338 <_dtoa_r+0xbb8>
 8004358:	e56e      	b.n	8003e38 <_dtoa_r+0x6b8>
 800435a:	6871      	ldr	r1, [r6, #4]
 800435c:	4648      	mov	r0, r9
 800435e:	f000 ff5b 	bl	8005218 <_Balloc>
 8004362:	6933      	ldr	r3, [r6, #16]
 8004364:	1c9a      	adds	r2, r3, #2
 8004366:	4605      	mov	r5, r0
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	f106 010c 	add.w	r1, r6, #12
 800436e:	300c      	adds	r0, #12
 8004370:	f7fd fba0 	bl	8001ab4 <memcpy>
 8004374:	4629      	mov	r1, r5
 8004376:	2201      	movs	r2, #1
 8004378:	4648      	mov	r0, r9
 800437a:	f001 f8fd 	bl	8005578 <__lshift>
 800437e:	4680      	mov	r8, r0
 8004380:	e670      	b.n	8004064 <_dtoa_r+0x8e4>
 8004382:	2b39      	cmp	r3, #57	; 0x39
 8004384:	f000 80a4 	beq.w	80044d0 <_dtoa_r+0xd50>
 8004388:	f103 0a01 	add.w	sl, r3, #1
 800438c:	46b3      	mov	fp, r6
 800438e:	f887 a000 	strb.w	sl, [r7]
 8004392:	1c7d      	adds	r5, r7, #1
 8004394:	4646      	mov	r6, r8
 8004396:	9408      	str	r4, [sp, #32]
 8004398:	e4a5      	b.n	8003ce6 <_dtoa_r+0x566>
 800439a:	46b3      	mov	fp, r6
 800439c:	469a      	mov	sl, r3
 800439e:	4646      	mov	r6, r8
 80043a0:	e485      	b.n	8003cae <_dtoa_r+0x52e>
 80043a2:	2300      	movs	r3, #0
 80043a4:	9302      	str	r3, [sp, #8]
 80043a6:	461e      	mov	r6, r3
 80043a8:	e701      	b.n	80041ae <_dtoa_r+0xa2e>
 80043aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043ac:	495d      	ldr	r1, [pc, #372]	; (8004524 <_dtoa_r+0xda4>)
 80043ae:	1e5a      	subs	r2, r3, #1
 80043b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80043b4:	462b      	mov	r3, r5
 80043b6:	9215      	str	r2, [sp, #84]	; 0x54
 80043b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043bc:	4622      	mov	r2, r4
 80043be:	f003 fe5f 	bl	8008080 <__aeabi_dmul>
 80043c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80043c6:	4639      	mov	r1, r7
 80043c8:	4630      	mov	r0, r6
 80043ca:	f004 f909 	bl	80085e0 <__aeabi_d2iz>
 80043ce:	4604      	mov	r4, r0
 80043d0:	f003 fdf0 	bl	8007fb4 <__aeabi_i2d>
 80043d4:	460b      	mov	r3, r1
 80043d6:	4602      	mov	r2, r0
 80043d8:	4639      	mov	r1, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	f003 fc9c 	bl	8007d18 <__aeabi_dsub>
 80043e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043e2:	460f      	mov	r7, r1
 80043e4:	9907      	ldr	r1, [sp, #28]
 80043e6:	3430      	adds	r4, #48	; 0x30
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	4606      	mov	r6, r0
 80043ec:	700c      	strb	r4, [r1, #0]
 80043ee:	f101 0501 	add.w	r5, r1, #1
 80043f2:	d020      	beq.n	8004436 <_dtoa_r+0xcb6>
 80043f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043f6:	9a07      	ldr	r2, [sp, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	469a      	mov	sl, r3
 80043fc:	46ab      	mov	fp, r5
 80043fe:	2200      	movs	r2, #0
 8004400:	4b4a      	ldr	r3, [pc, #296]	; (800452c <_dtoa_r+0xdac>)
 8004402:	4630      	mov	r0, r6
 8004404:	4639      	mov	r1, r7
 8004406:	f003 fe3b 	bl	8008080 <__aeabi_dmul>
 800440a:	460f      	mov	r7, r1
 800440c:	4606      	mov	r6, r0
 800440e:	f004 f8e7 	bl	80085e0 <__aeabi_d2iz>
 8004412:	4604      	mov	r4, r0
 8004414:	f003 fdce 	bl	8007fb4 <__aeabi_i2d>
 8004418:	3430      	adds	r4, #48	; 0x30
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4630      	mov	r0, r6
 8004420:	4639      	mov	r1, r7
 8004422:	f003 fc79 	bl	8007d18 <__aeabi_dsub>
 8004426:	f80b 4b01 	strb.w	r4, [fp], #1
 800442a:	45da      	cmp	sl, fp
 800442c:	4606      	mov	r6, r0
 800442e:	460f      	mov	r7, r1
 8004430:	d1e5      	bne.n	80043fe <_dtoa_r+0xc7e>
 8004432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004434:	441d      	add	r5, r3
 8004436:	2200      	movs	r2, #0
 8004438:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <_dtoa_r+0xdb0>)
 800443a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800443e:	f003 fc6d 	bl	8007d1c <__adddf3>
 8004442:	4632      	mov	r2, r6
 8004444:	463b      	mov	r3, r7
 8004446:	f004 f88d 	bl	8008564 <__aeabi_dcmplt>
 800444a:	2800      	cmp	r0, #0
 800444c:	d048      	beq.n	80044e0 <_dtoa_r+0xd60>
 800444e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004456:	f7ff bb4c 	b.w	8003af2 <_dtoa_r+0x372>
 800445a:	9b05      	ldr	r3, [sp, #20]
 800445c:	9a06      	ldr	r2, [sp, #24]
 800445e:	1a9d      	subs	r5, r3, r2
 8004460:	2300      	movs	r3, #0
 8004462:	f7ff bb7c 	b.w	8003b5e <_dtoa_r+0x3de>
 8004466:	2700      	movs	r7, #0
 8004468:	e6ca      	b.n	8004200 <_dtoa_r+0xa80>
 800446a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800446c:	9f02      	ldr	r7, [sp, #8]
 800446e:	9d05      	ldr	r5, [sp, #20]
 8004470:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004474:	f7ff bb73 	b.w	8003b5e <_dtoa_r+0x3de>
 8004478:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800447c:	f04f 0a02 	mov.w	sl, #2
 8004480:	e4da      	b.n	8003e38 <_dtoa_r+0x6b8>
 8004482:	9b06      	ldr	r3, [sp, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f43f aec1 	beq.w	800420c <_dtoa_r+0xa8c>
 800448a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	f77f af2e 	ble.w	80042ee <_dtoa_r+0xb6e>
 8004492:	2200      	movs	r2, #0
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <_dtoa_r+0xdac>)
 8004496:	4630      	mov	r0, r6
 8004498:	4639      	mov	r1, r7
 800449a:	f003 fdf1 	bl	8008080 <__aeabi_dmul>
 800449e:	4606      	mov	r6, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	f10a 0001 	add.w	r0, sl, #1
 80044a6:	f003 fd85 	bl	8007fb4 <__aeabi_i2d>
 80044aa:	4632      	mov	r2, r6
 80044ac:	463b      	mov	r3, r7
 80044ae:	f003 fde7 	bl	8008080 <__aeabi_dmul>
 80044b2:	2200      	movs	r2, #0
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <_dtoa_r+0xd9c>)
 80044b6:	f003 fc31 	bl	8007d1c <__adddf3>
 80044ba:	9a04      	ldr	r2, [sp, #16]
 80044bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044be:	9310      	str	r3, [sp, #64]	; 0x40
 80044c0:	3a01      	subs	r2, #1
 80044c2:	4604      	mov	r4, r0
 80044c4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80044c8:	9214      	str	r2, [sp, #80]	; 0x50
 80044ca:	e4d6      	b.n	8003e7a <_dtoa_r+0x6fa>
 80044cc:	9408      	str	r4, [sp, #32]
 80044ce:	e584      	b.n	8003fda <_dtoa_r+0x85a>
 80044d0:	2239      	movs	r2, #57	; 0x39
 80044d2:	46b3      	mov	fp, r6
 80044d4:	9408      	str	r4, [sp, #32]
 80044d6:	4646      	mov	r6, r8
 80044d8:	703a      	strb	r2, [r7, #0]
 80044da:	1c7d      	adds	r5, r7, #1
 80044dc:	f7ff bbf5 	b.w	8003cca <_dtoa_r+0x54a>
 80044e0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80044e4:	2000      	movs	r0, #0
 80044e6:	4912      	ldr	r1, [pc, #72]	; (8004530 <_dtoa_r+0xdb0>)
 80044e8:	f003 fc16 	bl	8007d18 <__aeabi_dsub>
 80044ec:	4632      	mov	r2, r6
 80044ee:	463b      	mov	r3, r7
 80044f0:	f004 f856 	bl	80085a0 <__aeabi_dcmpgt>
 80044f4:	b908      	cbnz	r0, 80044fa <_dtoa_r+0xd7a>
 80044f6:	e6fa      	b.n	80042ee <_dtoa_r+0xb6e>
 80044f8:	4615      	mov	r5, r2
 80044fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044fe:	2b30      	cmp	r3, #48	; 0x30
 8004500:	f105 32ff 	add.w	r2, r5, #4294967295
 8004504:	d0f8      	beq.n	80044f8 <_dtoa_r+0xd78>
 8004506:	e539      	b.n	8003f7c <_dtoa_r+0x7fc>
 8004508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	f7ff baf1 	b.w	8003af2 <_dtoa_r+0x372>
 8004510:	f1ba 0f00 	cmp.w	sl, #0
 8004514:	f47f ad7c 	bne.w	8004010 <_dtoa_r+0x890>
 8004518:	e662      	b.n	80041e0 <_dtoa_r+0xa60>
 800451a:	bf00      	nop
 800451c:	401c0000 	.word	0x401c0000
 8004520:	40140000 	.word	0x40140000
 8004524:	080089d8 	.word	0x080089d8
 8004528:	08008aa0 	.word	0x08008aa0
 800452c:	40240000 	.word	0x40240000
 8004530:	3fe00000 	.word	0x3fe00000
 8004534:	2b39      	cmp	r3, #57	; 0x39
 8004536:	46d3      	mov	fp, sl
 8004538:	469a      	mov	sl, r3
 800453a:	d0c9      	beq.n	80044d0 <_dtoa_r+0xd50>
 800453c:	f1bb 0f00 	cmp.w	fp, #0
 8004540:	f73f aebd 	bgt.w	80042be <_dtoa_r+0xb3e>
 8004544:	e6bd      	b.n	80042c2 <_dtoa_r+0xb42>
 8004546:	f47f aebc 	bne.w	80042c2 <_dtoa_r+0xb42>
 800454a:	f01a 0f01 	tst.w	sl, #1
 800454e:	f43f aeb8 	beq.w	80042c2 <_dtoa_r+0xb42>
 8004552:	e6b0      	b.n	80042b6 <_dtoa_r+0xb36>
 8004554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004556:	2b02      	cmp	r3, #2
 8004558:	dc25      	bgt.n	80045a6 <_dtoa_r+0xe26>
 800455a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800455c:	e60d      	b.n	800417a <_dtoa_r+0x9fa>
 800455e:	f04f 0a02 	mov.w	sl, #2
 8004562:	e469      	b.n	8003e38 <_dtoa_r+0x6b8>
 8004564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004566:	2b02      	cmp	r3, #2
 8004568:	dc1d      	bgt.n	80045a6 <_dtoa_r+0xe26>
 800456a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800456c:	e56d      	b.n	800404a <_dtoa_r+0x8ca>
 800456e:	2400      	movs	r4, #0
 8004570:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004574:	4621      	mov	r1, r4
 8004576:	4648      	mov	r0, r9
 8004578:	f000 fe4e 	bl	8005218 <_Balloc>
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	9306      	str	r3, [sp, #24]
 8004582:	930c      	str	r3, [sp, #48]	; 0x30
 8004584:	2301      	movs	r3, #1
 8004586:	9007      	str	r0, [sp, #28]
 8004588:	9423      	str	r4, [sp, #140]	; 0x8c
 800458a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	f7ff b9fc 	b.w	800398c <_dtoa_r+0x20c>
 8004594:	f43f ab48 	beq.w	8003c28 <_dtoa_r+0x4a8>
 8004598:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800459c:	f7ff bb3f 	b.w	8003c1e <_dtoa_r+0x49e>
 80045a0:	2501      	movs	r5, #1
 80045a2:	f7ff b9bd 	b.w	8003920 <_dtoa_r+0x1a0>
 80045a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045a8:	9306      	str	r3, [sp, #24]
 80045aa:	e5ee      	b.n	800418a <_dtoa_r+0xa0a>

080045ac <__sflush_r>:
 80045ac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b6:	460d      	mov	r5, r1
 80045b8:	0711      	lsls	r1, r2, #28
 80045ba:	4680      	mov	r8, r0
 80045bc:	d43c      	bmi.n	8004638 <__sflush_r+0x8c>
 80045be:	686a      	ldr	r2, [r5, #4]
 80045c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	81ab      	strh	r3, [r5, #12]
 80045c8:	dd73      	ble.n	80046b2 <__sflush_r+0x106>
 80045ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	d04b      	beq.n	8004668 <__sflush_r+0xbc>
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045d6:	2100      	movs	r1, #0
 80045d8:	b292      	uxth	r2, r2
 80045da:	f8d8 6000 	ldr.w	r6, [r8]
 80045de:	f8c8 1000 	str.w	r1, [r8]
 80045e2:	2a00      	cmp	r2, #0
 80045e4:	d069      	beq.n	80046ba <__sflush_r+0x10e>
 80045e6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80045e8:	075f      	lsls	r7, r3, #29
 80045ea:	d505      	bpl.n	80045f8 <__sflush_r+0x4c>
 80045ec:	6869      	ldr	r1, [r5, #4]
 80045ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80045f0:	1a52      	subs	r2, r2, r1
 80045f2:	b10b      	cbz	r3, 80045f8 <__sflush_r+0x4c>
 80045f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	2300      	movs	r3, #0
 80045fa:	69e9      	ldr	r1, [r5, #28]
 80045fc:	4640      	mov	r0, r8
 80045fe:	47a0      	blx	r4
 8004600:	1c44      	adds	r4, r0, #1
 8004602:	d03c      	beq.n	800467e <__sflush_r+0xd2>
 8004604:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004608:	692a      	ldr	r2, [r5, #16]
 800460a:	602a      	str	r2, [r5, #0]
 800460c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004610:	2200      	movs	r2, #0
 8004612:	81ab      	strh	r3, [r5, #12]
 8004614:	04db      	lsls	r3, r3, #19
 8004616:	606a      	str	r2, [r5, #4]
 8004618:	d449      	bmi.n	80046ae <__sflush_r+0x102>
 800461a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800461c:	f8c8 6000 	str.w	r6, [r8]
 8004620:	b311      	cbz	r1, 8004668 <__sflush_r+0xbc>
 8004622:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004626:	4299      	cmp	r1, r3
 8004628:	d002      	beq.n	8004630 <__sflush_r+0x84>
 800462a:	4640      	mov	r0, r8
 800462c:	f000 f94e 	bl	80048cc <_free_r>
 8004630:	2000      	movs	r0, #0
 8004632:	6328      	str	r0, [r5, #48]	; 0x30
 8004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004638:	692e      	ldr	r6, [r5, #16]
 800463a:	b1ae      	cbz	r6, 8004668 <__sflush_r+0xbc>
 800463c:	682c      	ldr	r4, [r5, #0]
 800463e:	602e      	str	r6, [r5, #0]
 8004640:	0790      	lsls	r0, r2, #30
 8004642:	bf0c      	ite	eq
 8004644:	696b      	ldreq	r3, [r5, #20]
 8004646:	2300      	movne	r3, #0
 8004648:	1ba4      	subs	r4, r4, r6
 800464a:	60ab      	str	r3, [r5, #8]
 800464c:	e00a      	b.n	8004664 <__sflush_r+0xb8>
 800464e:	4623      	mov	r3, r4
 8004650:	4632      	mov	r2, r6
 8004652:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8004654:	69e9      	ldr	r1, [r5, #28]
 8004656:	4640      	mov	r0, r8
 8004658:	47b8      	blx	r7
 800465a:	2800      	cmp	r0, #0
 800465c:	eba4 0400 	sub.w	r4, r4, r0
 8004660:	4406      	add	r6, r0
 8004662:	dd04      	ble.n	800466e <__sflush_r+0xc2>
 8004664:	2c00      	cmp	r4, #0
 8004666:	dcf2      	bgt.n	800464e <__sflush_r+0xa2>
 8004668:	2000      	movs	r0, #0
 800466a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004674:	81ab      	strh	r3, [r5, #12]
 8004676:	f04f 30ff 	mov.w	r0, #4294967295
 800467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467e:	f8d8 2000 	ldr.w	r2, [r8]
 8004682:	2a1d      	cmp	r2, #29
 8004684:	d8f3      	bhi.n	800466e <__sflush_r+0xc2>
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <__sflush_r+0x144>)
 8004688:	40d3      	lsrs	r3, r2
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	f083 0401 	eor.w	r4, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0eb      	beq.n	800466e <__sflush_r+0xc2>
 8004696:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800469a:	6929      	ldr	r1, [r5, #16]
 800469c:	6029      	str	r1, [r5, #0]
 800469e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a2:	04d9      	lsls	r1, r3, #19
 80046a4:	606c      	str	r4, [r5, #4]
 80046a6:	81ab      	strh	r3, [r5, #12]
 80046a8:	d5b7      	bpl.n	800461a <__sflush_r+0x6e>
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	d1b5      	bne.n	800461a <__sflush_r+0x6e>
 80046ae:	6528      	str	r0, [r5, #80]	; 0x50
 80046b0:	e7b3      	b.n	800461a <__sflush_r+0x6e>
 80046b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	dc88      	bgt.n	80045ca <__sflush_r+0x1e>
 80046b8:	e7d6      	b.n	8004668 <__sflush_r+0xbc>
 80046ba:	2301      	movs	r3, #1
 80046bc:	69e9      	ldr	r1, [r5, #28]
 80046be:	4640      	mov	r0, r8
 80046c0:	47a0      	blx	r4
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	4602      	mov	r2, r0
 80046c6:	d002      	beq.n	80046ce <__sflush_r+0x122>
 80046c8:	89ab      	ldrh	r3, [r5, #12]
 80046ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80046cc:	e78c      	b.n	80045e8 <__sflush_r+0x3c>
 80046ce:	f8d8 3000 	ldr.w	r3, [r8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f8      	beq.n	80046c8 <__sflush_r+0x11c>
 80046d6:	2b1d      	cmp	r3, #29
 80046d8:	d001      	beq.n	80046de <__sflush_r+0x132>
 80046da:	2b16      	cmp	r3, #22
 80046dc:	d102      	bne.n	80046e4 <__sflush_r+0x138>
 80046de:	f8c8 6000 	str.w	r6, [r8]
 80046e2:	e7c1      	b.n	8004668 <__sflush_r+0xbc>
 80046e4:	89ab      	ldrh	r3, [r5, #12]
 80046e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ea:	81ab      	strh	r3, [r5, #12]
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f0:	20400001 	.word	0x20400001

080046f4 <_fflush_r>:
 80046f4:	b510      	push	{r4, lr}
 80046f6:	4604      	mov	r4, r0
 80046f8:	b082      	sub	sp, #8
 80046fa:	b108      	cbz	r0, 8004700 <_fflush_r+0xc>
 80046fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80046fe:	b153      	cbz	r3, 8004716 <_fflush_r+0x22>
 8004700:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8004704:	b908      	cbnz	r0, 800470a <_fflush_r+0x16>
 8004706:	b002      	add	sp, #8
 8004708:	bd10      	pop	{r4, pc}
 800470a:	4620      	mov	r0, r4
 800470c:	b002      	add	sp, #8
 800470e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004712:	f7ff bf4b 	b.w	80045ac <__sflush_r>
 8004716:	9101      	str	r1, [sp, #4]
 8004718:	f000 f880 	bl	800481c <__sinit>
 800471c:	9901      	ldr	r1, [sp, #4]
 800471e:	e7ef      	b.n	8004700 <_fflush_r+0xc>

08004720 <_cleanup_r>:
 8004720:	4901      	ldr	r1, [pc, #4]	; (8004728 <_cleanup_r+0x8>)
 8004722:	f000 b9bb 	b.w	8004a9c <_fwalk_reent>
 8004726:	bf00      	nop
 8004728:	08007119 	.word	0x08007119

0800472c <__sinit.part.1>:
 800472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004730:	4b35      	ldr	r3, [pc, #212]	; (8004808 <__sinit.part.1+0xdc>)
 8004732:	6845      	ldr	r5, [r0, #4]
 8004734:	63c3      	str	r3, [r0, #60]	; 0x3c
 8004736:	2400      	movs	r4, #0
 8004738:	4607      	mov	r7, r0
 800473a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800473e:	2304      	movs	r3, #4
 8004740:	2103      	movs	r1, #3
 8004742:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8004746:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800474a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800474e:	b083      	sub	sp, #12
 8004750:	602c      	str	r4, [r5, #0]
 8004752:	606c      	str	r4, [r5, #4]
 8004754:	60ac      	str	r4, [r5, #8]
 8004756:	666c      	str	r4, [r5, #100]	; 0x64
 8004758:	81ec      	strh	r4, [r5, #14]
 800475a:	612c      	str	r4, [r5, #16]
 800475c:	616c      	str	r4, [r5, #20]
 800475e:	61ac      	str	r4, [r5, #24]
 8004760:	81ab      	strh	r3, [r5, #12]
 8004762:	4621      	mov	r1, r4
 8004764:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004768:	2208      	movs	r2, #8
 800476a:	f7fd fa3d 	bl	8001be8 <memset>
 800476e:	68be      	ldr	r6, [r7, #8]
 8004770:	f8df b098 	ldr.w	fp, [pc, #152]	; 800480c <__sinit.part.1+0xe0>
 8004774:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004810 <__sinit.part.1+0xe4>
 8004778:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004814 <__sinit.part.1+0xe8>
 800477c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004818 <__sinit.part.1+0xec>
 8004780:	f8c5 b020 	str.w	fp, [r5, #32]
 8004784:	2301      	movs	r3, #1
 8004786:	2209      	movs	r2, #9
 8004788:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800478c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004790:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004794:	61ed      	str	r5, [r5, #28]
 8004796:	4621      	mov	r1, r4
 8004798:	81f3      	strh	r3, [r6, #14]
 800479a:	81b2      	strh	r2, [r6, #12]
 800479c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80047a0:	6034      	str	r4, [r6, #0]
 80047a2:	6074      	str	r4, [r6, #4]
 80047a4:	60b4      	str	r4, [r6, #8]
 80047a6:	6674      	str	r4, [r6, #100]	; 0x64
 80047a8:	6134      	str	r4, [r6, #16]
 80047aa:	6174      	str	r4, [r6, #20]
 80047ac:	61b4      	str	r4, [r6, #24]
 80047ae:	2208      	movs	r2, #8
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	f7fd fa19 	bl	8001be8 <memset>
 80047b6:	68fd      	ldr	r5, [r7, #12]
 80047b8:	61f6      	str	r6, [r6, #28]
 80047ba:	2012      	movs	r0, #18
 80047bc:	2202      	movs	r2, #2
 80047be:	f8c6 b020 	str.w	fp, [r6, #32]
 80047c2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80047c6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80047ca:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80047ce:	4621      	mov	r1, r4
 80047d0:	81a8      	strh	r0, [r5, #12]
 80047d2:	81ea      	strh	r2, [r5, #14]
 80047d4:	602c      	str	r4, [r5, #0]
 80047d6:	606c      	str	r4, [r5, #4]
 80047d8:	60ac      	str	r4, [r5, #8]
 80047da:	666c      	str	r4, [r5, #100]	; 0x64
 80047dc:	612c      	str	r4, [r5, #16]
 80047de:	616c      	str	r4, [r5, #20]
 80047e0:	61ac      	str	r4, [r5, #24]
 80047e2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80047e6:	2208      	movs	r2, #8
 80047e8:	f7fd f9fe 	bl	8001be8 <memset>
 80047ec:	9b01      	ldr	r3, [sp, #4]
 80047ee:	61ed      	str	r5, [r5, #28]
 80047f0:	f8c5 b020 	str.w	fp, [r5, #32]
 80047f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80047f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80047fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	08004721 	.word	0x08004721
 800480c:	0800585d 	.word	0x0800585d
 8004810:	08005881 	.word	0x08005881
 8004814:	080058bd 	.word	0x080058bd
 8004818:	080058dd 	.word	0x080058dd

0800481c <__sinit>:
 800481c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800481e:	b103      	cbz	r3, 8004822 <__sinit+0x6>
 8004820:	4770      	bx	lr
 8004822:	f7ff bf83 	b.w	800472c <__sinit.part.1>
 8004826:	bf00      	nop

08004828 <__sfp_lock_acquire>:
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop

0800482c <__sfp_lock_release>:
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop

08004830 <_malloc_trim_r>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	4f23      	ldr	r7, [pc, #140]	; (80048c0 <_malloc_trim_r+0x90>)
 8004834:	460c      	mov	r4, r1
 8004836:	4606      	mov	r6, r0
 8004838:	f000 fcea 	bl	8005210 <__malloc_lock>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	685d      	ldr	r5, [r3, #4]
 8004840:	f025 0503 	bic.w	r5, r5, #3
 8004844:	1b29      	subs	r1, r5, r4
 8004846:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800484a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800484e:	f021 010f 	bic.w	r1, r1, #15
 8004852:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8004856:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800485a:	db07      	blt.n	800486c <_malloc_trim_r+0x3c>
 800485c:	2100      	movs	r1, #0
 800485e:	4630      	mov	r0, r6
 8004860:	f000 ffea 	bl	8005838 <_sbrk_r>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	442b      	add	r3, r5
 8004868:	4298      	cmp	r0, r3
 800486a:	d004      	beq.n	8004876 <_malloc_trim_r+0x46>
 800486c:	4630      	mov	r0, r6
 800486e:	f000 fcd1 	bl	8005214 <__malloc_unlock>
 8004872:	2000      	movs	r0, #0
 8004874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004876:	4261      	negs	r1, r4
 8004878:	4630      	mov	r0, r6
 800487a:	f000 ffdd 	bl	8005838 <_sbrk_r>
 800487e:	3001      	adds	r0, #1
 8004880:	d00d      	beq.n	800489e <_malloc_trim_r+0x6e>
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <_malloc_trim_r+0x94>)
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	1b2d      	subs	r5, r5, r4
 800488a:	f045 0501 	orr.w	r5, r5, #1
 800488e:	4630      	mov	r0, r6
 8004890:	1b09      	subs	r1, r1, r4
 8004892:	6055      	str	r5, [r2, #4]
 8004894:	6019      	str	r1, [r3, #0]
 8004896:	f000 fcbd 	bl	8005214 <__malloc_unlock>
 800489a:	2001      	movs	r0, #1
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489e:	2100      	movs	r1, #0
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 ffc9 	bl	8005838 <_sbrk_r>
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	1a83      	subs	r3, r0, r2
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	ddde      	ble.n	800486c <_malloc_trim_r+0x3c>
 80048ae:	4c06      	ldr	r4, [pc, #24]	; (80048c8 <_malloc_trim_r+0x98>)
 80048b0:	4904      	ldr	r1, [pc, #16]	; (80048c4 <_malloc_trim_r+0x94>)
 80048b2:	6824      	ldr	r4, [r4, #0]
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	1b00      	subs	r0, r0, r4
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	6008      	str	r0, [r1, #0]
 80048be:	e7d5      	b.n	800486c <_malloc_trim_r+0x3c>
 80048c0:	20000464 	.word	0x20000464
 80048c4:	20000a4c 	.word	0x20000a4c
 80048c8:	20000870 	.word	0x20000870

080048cc <_free_r>:
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d045      	beq.n	800495c <_free_r+0x90>
 80048d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d4:	460d      	mov	r5, r1
 80048d6:	4680      	mov	r8, r0
 80048d8:	f000 fc9a 	bl	8005210 <__malloc_lock>
 80048dc:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80048e0:	496a      	ldr	r1, [pc, #424]	; (8004a8c <_free_r+0x1c0>)
 80048e2:	f027 0301 	bic.w	r3, r7, #1
 80048e6:	f1a5 0408 	sub.w	r4, r5, #8
 80048ea:	18e2      	adds	r2, r4, r3
 80048ec:	688e      	ldr	r6, [r1, #8]
 80048ee:	6850      	ldr	r0, [r2, #4]
 80048f0:	42b2      	cmp	r2, r6
 80048f2:	f020 0003 	bic.w	r0, r0, #3
 80048f6:	d062      	beq.n	80049be <_free_r+0xf2>
 80048f8:	07fe      	lsls	r6, r7, #31
 80048fa:	6050      	str	r0, [r2, #4]
 80048fc:	d40b      	bmi.n	8004916 <_free_r+0x4a>
 80048fe:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8004902:	1be4      	subs	r4, r4, r7
 8004904:	f101 0e08 	add.w	lr, r1, #8
 8004908:	68a5      	ldr	r5, [r4, #8]
 800490a:	4575      	cmp	r5, lr
 800490c:	443b      	add	r3, r7
 800490e:	d06f      	beq.n	80049f0 <_free_r+0x124>
 8004910:	68e7      	ldr	r7, [r4, #12]
 8004912:	60ef      	str	r7, [r5, #12]
 8004914:	60bd      	str	r5, [r7, #8]
 8004916:	1815      	adds	r5, r2, r0
 8004918:	686d      	ldr	r5, [r5, #4]
 800491a:	07ed      	lsls	r5, r5, #31
 800491c:	d542      	bpl.n	80049a4 <_free_r+0xd8>
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	6062      	str	r2, [r4, #4]
 8004924:	50e3      	str	r3, [r4, r3]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d218      	bcs.n	800495e <_free_r+0x92>
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	684d      	ldr	r5, [r1, #4]
 8004932:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8004936:	60a7      	str	r7, [r4, #8]
 8004938:	2001      	movs	r0, #1
 800493a:	109b      	asrs	r3, r3, #2
 800493c:	fa00 f303 	lsl.w	r3, r0, r3
 8004940:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8004944:	431d      	orrs	r5, r3
 8004946:	3808      	subs	r0, #8
 8004948:	60e0      	str	r0, [r4, #12]
 800494a:	604d      	str	r5, [r1, #4]
 800494c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8004950:	60fc      	str	r4, [r7, #12]
 8004952:	4640      	mov	r0, r8
 8004954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004958:	f000 bc5c 	b.w	8005214 <__malloc_unlock>
 800495c:	4770      	bx	lr
 800495e:	0a5a      	lsrs	r2, r3, #9
 8004960:	2a04      	cmp	r2, #4
 8004962:	d853      	bhi.n	8004a0c <_free_r+0x140>
 8004964:	099a      	lsrs	r2, r3, #6
 8004966:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800496a:	007f      	lsls	r7, r7, #1
 800496c:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8004970:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8004974:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8004978:	4944      	ldr	r1, [pc, #272]	; (8004a8c <_free_r+0x1c0>)
 800497a:	3808      	subs	r0, #8
 800497c:	4290      	cmp	r0, r2
 800497e:	d04d      	beq.n	8004a1c <_free_r+0x150>
 8004980:	6851      	ldr	r1, [r2, #4]
 8004982:	f021 0103 	bic.w	r1, r1, #3
 8004986:	428b      	cmp	r3, r1
 8004988:	d202      	bcs.n	8004990 <_free_r+0xc4>
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	4290      	cmp	r0, r2
 800498e:	d1f7      	bne.n	8004980 <_free_r+0xb4>
 8004990:	68d0      	ldr	r0, [r2, #12]
 8004992:	60e0      	str	r0, [r4, #12]
 8004994:	60a2      	str	r2, [r4, #8]
 8004996:	6084      	str	r4, [r0, #8]
 8004998:	60d4      	str	r4, [r2, #12]
 800499a:	4640      	mov	r0, r8
 800499c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a0:	f000 bc38 	b.w	8005214 <__malloc_unlock>
 80049a4:	6895      	ldr	r5, [r2, #8]
 80049a6:	4f3a      	ldr	r7, [pc, #232]	; (8004a90 <_free_r+0x1c4>)
 80049a8:	42bd      	cmp	r5, r7
 80049aa:	4403      	add	r3, r0
 80049ac:	d03f      	beq.n	8004a2e <_free_r+0x162>
 80049ae:	68d0      	ldr	r0, [r2, #12]
 80049b0:	60e8      	str	r0, [r5, #12]
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	6085      	str	r5, [r0, #8]
 80049b8:	6062      	str	r2, [r4, #4]
 80049ba:	50e3      	str	r3, [r4, r3]
 80049bc:	e7b3      	b.n	8004926 <_free_r+0x5a>
 80049be:	07ff      	lsls	r7, r7, #31
 80049c0:	4403      	add	r3, r0
 80049c2:	d407      	bmi.n	80049d4 <_free_r+0x108>
 80049c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80049c8:	1aa4      	subs	r4, r4, r2
 80049ca:	4413      	add	r3, r2
 80049cc:	68a0      	ldr	r0, [r4, #8]
 80049ce:	68e2      	ldr	r2, [r4, #12]
 80049d0:	60c2      	str	r2, [r0, #12]
 80049d2:	6090      	str	r0, [r2, #8]
 80049d4:	4a2f      	ldr	r2, [pc, #188]	; (8004a94 <_free_r+0x1c8>)
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	f043 0001 	orr.w	r0, r3, #1
 80049dc:	4293      	cmp	r3, r2
 80049de:	6060      	str	r0, [r4, #4]
 80049e0:	608c      	str	r4, [r1, #8]
 80049e2:	d3b6      	bcc.n	8004952 <_free_r+0x86>
 80049e4:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <_free_r+0x1cc>)
 80049e6:	4640      	mov	r0, r8
 80049e8:	6819      	ldr	r1, [r3, #0]
 80049ea:	f7ff ff21 	bl	8004830 <_malloc_trim_r>
 80049ee:	e7b0      	b.n	8004952 <_free_r+0x86>
 80049f0:	1811      	adds	r1, r2, r0
 80049f2:	6849      	ldr	r1, [r1, #4]
 80049f4:	07c9      	lsls	r1, r1, #31
 80049f6:	d444      	bmi.n	8004a82 <_free_r+0x1b6>
 80049f8:	6891      	ldr	r1, [r2, #8]
 80049fa:	68d2      	ldr	r2, [r2, #12]
 80049fc:	60ca      	str	r2, [r1, #12]
 80049fe:	4403      	add	r3, r0
 8004a00:	f043 0001 	orr.w	r0, r3, #1
 8004a04:	6091      	str	r1, [r2, #8]
 8004a06:	6060      	str	r0, [r4, #4]
 8004a08:	50e3      	str	r3, [r4, r3]
 8004a0a:	e7a2      	b.n	8004952 <_free_r+0x86>
 8004a0c:	2a14      	cmp	r2, #20
 8004a0e:	d817      	bhi.n	8004a40 <_free_r+0x174>
 8004a10:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8004a14:	007f      	lsls	r7, r7, #1
 8004a16:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8004a1a:	e7a9      	b.n	8004970 <_free_r+0xa4>
 8004a1c:	10aa      	asrs	r2, r5, #2
 8004a1e:	684b      	ldr	r3, [r1, #4]
 8004a20:	2501      	movs	r5, #1
 8004a22:	fa05 f202 	lsl.w	r2, r5, r2
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	e7b1      	b.n	8004992 <_free_r+0xc6>
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	614c      	str	r4, [r1, #20]
 8004a34:	610c      	str	r4, [r1, #16]
 8004a36:	60e5      	str	r5, [r4, #12]
 8004a38:	60a5      	str	r5, [r4, #8]
 8004a3a:	6062      	str	r2, [r4, #4]
 8004a3c:	50e3      	str	r3, [r4, r3]
 8004a3e:	e788      	b.n	8004952 <_free_r+0x86>
 8004a40:	2a54      	cmp	r2, #84	; 0x54
 8004a42:	d806      	bhi.n	8004a52 <_free_r+0x186>
 8004a44:	0b1a      	lsrs	r2, r3, #12
 8004a46:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8004a4a:	007f      	lsls	r7, r7, #1
 8004a4c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8004a50:	e78e      	b.n	8004970 <_free_r+0xa4>
 8004a52:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004a56:	d806      	bhi.n	8004a66 <_free_r+0x19a>
 8004a58:	0bda      	lsrs	r2, r3, #15
 8004a5a:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8004a5e:	007f      	lsls	r7, r7, #1
 8004a60:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8004a64:	e784      	b.n	8004970 <_free_r+0xa4>
 8004a66:	f240 5054 	movw	r0, #1364	; 0x554
 8004a6a:	4282      	cmp	r2, r0
 8004a6c:	d806      	bhi.n	8004a7c <_free_r+0x1b0>
 8004a6e:	0c9a      	lsrs	r2, r3, #18
 8004a70:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8004a74:	007f      	lsls	r7, r7, #1
 8004a76:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8004a7a:	e779      	b.n	8004970 <_free_r+0xa4>
 8004a7c:	27fe      	movs	r7, #254	; 0xfe
 8004a7e:	257e      	movs	r5, #126	; 0x7e
 8004a80:	e776      	b.n	8004970 <_free_r+0xa4>
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	6062      	str	r2, [r4, #4]
 8004a88:	50e3      	str	r3, [r4, r3]
 8004a8a:	e762      	b.n	8004952 <_free_r+0x86>
 8004a8c:	20000464 	.word	0x20000464
 8004a90:	2000046c 	.word	0x2000046c
 8004a94:	2000086c 	.word	0x2000086c
 8004a98:	20000a48 	.word	0x20000a48

08004a9c <_fwalk_reent>:
 8004a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8004aa4:	d01f      	beq.n	8004ae6 <_fwalk_reent+0x4a>
 8004aa6:	4688      	mov	r8, r1
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	f04f 0900 	mov.w	r9, #0
 8004aae:	687d      	ldr	r5, [r7, #4]
 8004ab0:	68bc      	ldr	r4, [r7, #8]
 8004ab2:	3d01      	subs	r5, #1
 8004ab4:	d411      	bmi.n	8004ada <_fwalk_reent+0x3e>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f105 35ff 	add.w	r5, r5, #4294967295
 8004abe:	d908      	bls.n	8004ad2 <_fwalk_reent+0x36>
 8004ac0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4630      	mov	r0, r6
 8004aca:	d002      	beq.n	8004ad2 <_fwalk_reent+0x36>
 8004acc:	47c0      	blx	r8
 8004ace:	ea49 0900 	orr.w	r9, r9, r0
 8004ad2:	1c6b      	adds	r3, r5, #1
 8004ad4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004ad8:	d1ed      	bne.n	8004ab6 <_fwalk_reent+0x1a>
 8004ada:	683f      	ldr	r7, [r7, #0]
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	d1e6      	bne.n	8004aae <_fwalk_reent+0x12>
 8004ae0:	4648      	mov	r0, r9
 8004ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae6:	46b9      	mov	r9, r7
 8004ae8:	4648      	mov	r0, r9
 8004aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aee:	bf00      	nop

08004af0 <_localeconv_r>:
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <_localeconv_r+0x14>)
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <_localeconv_r+0x18>)
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bf08      	it	eq
 8004afc:	4618      	moveq	r0, r3
 8004afe:	30f0      	adds	r0, #240	; 0xf0
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000460 	.word	0x20000460
 8004b08:	20000874 	.word	0x20000874

08004b0c <__swhatbuf_r>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	460d      	mov	r5, r1
 8004b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b14:	2900      	cmp	r1, #0
 8004b16:	b090      	sub	sp, #64	; 0x40
 8004b18:	4614      	mov	r4, r2
 8004b1a:	461e      	mov	r6, r3
 8004b1c:	db14      	blt.n	8004b48 <__swhatbuf_r+0x3c>
 8004b1e:	aa01      	add	r2, sp, #4
 8004b20:	f002 fb9c 	bl	800725c <_fstat_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	db0f      	blt.n	8004b48 <__swhatbuf_r+0x3c>
 8004b28:	9a02      	ldr	r2, [sp, #8]
 8004b2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b2e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8004b32:	fab2 f282 	clz	r2, r2
 8004b36:	0952      	lsrs	r2, r2, #5
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b40:	6032      	str	r2, [r6, #0]
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	b010      	add	sp, #64	; 0x40
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	89a8      	ldrh	r0, [r5, #12]
 8004b4a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004b4e:	b282      	uxth	r2, r0
 8004b50:	2000      	movs	r0, #0
 8004b52:	6030      	str	r0, [r6, #0]
 8004b54:	b11a      	cbz	r2, 8004b5e <__swhatbuf_r+0x52>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	b010      	add	sp, #64	; 0x40
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
 8004b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b62:	4610      	mov	r0, r2
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	b010      	add	sp, #64	; 0x40
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
 8004b6a:	bf00      	nop

08004b6c <__smakebuf_r>:
 8004b6c:	898a      	ldrh	r2, [r1, #12]
 8004b6e:	0792      	lsls	r2, r2, #30
 8004b70:	460b      	mov	r3, r1
 8004b72:	d506      	bpl.n	8004b82 <__smakebuf_r+0x16>
 8004b74:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b78:	2101      	movs	r1, #1
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
 8004b7e:	6159      	str	r1, [r3, #20]
 8004b80:	4770      	bx	lr
 8004b82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b84:	b083      	sub	sp, #12
 8004b86:	ab01      	add	r3, sp, #4
 8004b88:	466a      	mov	r2, sp
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	f7ff ffbd 	bl	8004b0c <__swhatbuf_r>
 8004b92:	9900      	ldr	r1, [sp, #0]
 8004b94:	4606      	mov	r6, r0
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f82c 	bl	8004bf4 <_malloc_r>
 8004b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ba0:	b1d0      	cbz	r0, 8004bd8 <__smakebuf_r+0x6c>
 8004ba2:	9a01      	ldr	r2, [sp, #4]
 8004ba4:	4f12      	ldr	r7, [pc, #72]	; (8004bf0 <__smakebuf_r+0x84>)
 8004ba6:	9900      	ldr	r1, [sp, #0]
 8004ba8:	63ef      	str	r7, [r5, #60]	; 0x3c
 8004baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	6020      	str	r0, [r4, #0]
 8004bb2:	6120      	str	r0, [r4, #16]
 8004bb4:	6161      	str	r1, [r4, #20]
 8004bb6:	b91a      	cbnz	r2, 8004bc0 <__smakebuf_r+0x54>
 8004bb8:	4333      	orrs	r3, r6
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc6:	f002 fcdf 	bl	8007588 <_isatty_r>
 8004bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d0f2      	beq.n	8004bb8 <__smakebuf_r+0x4c>
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	e7ef      	b.n	8004bb8 <__smakebuf_r+0x4c>
 8004bd8:	059a      	lsls	r2, r3, #22
 8004bda:	d4ef      	bmi.n	8004bbc <__smakebuf_r+0x50>
 8004bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	2101      	movs	r1, #1
 8004be6:	81a3      	strh	r3, [r4, #12]
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	6122      	str	r2, [r4, #16]
 8004bec:	6161      	str	r1, [r4, #20]
 8004bee:	e7e5      	b.n	8004bbc <__smakebuf_r+0x50>
 8004bf0:	08004721 	.word	0x08004721

08004bf4 <_malloc_r>:
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	f101 050b 	add.w	r5, r1, #11
 8004bfc:	2d16      	cmp	r5, #22
 8004bfe:	b083      	sub	sp, #12
 8004c00:	4606      	mov	r6, r0
 8004c02:	f240 809f 	bls.w	8004d44 <_malloc_r+0x150>
 8004c06:	f035 0507 	bics.w	r5, r5, #7
 8004c0a:	f100 80bf 	bmi.w	8004d8c <_malloc_r+0x198>
 8004c0e:	42a9      	cmp	r1, r5
 8004c10:	f200 80bc 	bhi.w	8004d8c <_malloc_r+0x198>
 8004c14:	f000 fafc 	bl	8005210 <__malloc_lock>
 8004c18:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004c1c:	f0c0 829c 	bcc.w	8005158 <_malloc_r+0x564>
 8004c20:	0a6b      	lsrs	r3, r5, #9
 8004c22:	f000 80ba 	beq.w	8004d9a <_malloc_r+0x1a6>
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	f200 8183 	bhi.w	8004f32 <_malloc_r+0x33e>
 8004c2c:	09a8      	lsrs	r0, r5, #6
 8004c2e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8004c32:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004c36:	3038      	adds	r0, #56	; 0x38
 8004c38:	4fc4      	ldr	r7, [pc, #784]	; (8004f4c <_malloc_r+0x358>)
 8004c3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004c3e:	f1a3 0108 	sub.w	r1, r3, #8
 8004c42:	685c      	ldr	r4, [r3, #4]
 8004c44:	42a1      	cmp	r1, r4
 8004c46:	d107      	bne.n	8004c58 <_malloc_r+0x64>
 8004c48:	e0ac      	b.n	8004da4 <_malloc_r+0x1b0>
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	f280 80ac 	bge.w	8004da8 <_malloc_r+0x1b4>
 8004c50:	68e4      	ldr	r4, [r4, #12]
 8004c52:	42a1      	cmp	r1, r4
 8004c54:	f000 80a6 	beq.w	8004da4 <_malloc_r+0x1b0>
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	1b5a      	subs	r2, r3, r5
 8004c60:	2a0f      	cmp	r2, #15
 8004c62:	ddf2      	ble.n	8004c4a <_malloc_r+0x56>
 8004c64:	49b9      	ldr	r1, [pc, #740]	; (8004f4c <_malloc_r+0x358>)
 8004c66:	693c      	ldr	r4, [r7, #16]
 8004c68:	f101 0e08 	add.w	lr, r1, #8
 8004c6c:	4574      	cmp	r4, lr
 8004c6e:	f000 81b3 	beq.w	8004fd8 <_malloc_r+0x3e4>
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	f023 0303 	bic.w	r3, r3, #3
 8004c78:	1b5a      	subs	r2, r3, r5
 8004c7a:	2a0f      	cmp	r2, #15
 8004c7c:	f300 8199 	bgt.w	8004fb2 <_malloc_r+0x3be>
 8004c80:	2a00      	cmp	r2, #0
 8004c82:	f8c1 e014 	str.w	lr, [r1, #20]
 8004c86:	f8c1 e010 	str.w	lr, [r1, #16]
 8004c8a:	f280 809e 	bge.w	8004dca <_malloc_r+0x1d6>
 8004c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c92:	f080 8167 	bcs.w	8004f64 <_malloc_r+0x370>
 8004c96:	08db      	lsrs	r3, r3, #3
 8004c98:	f103 0c01 	add.w	ip, r3, #1
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	109b      	asrs	r3, r3, #2
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	684a      	ldr	r2, [r1, #4]
 8004ca6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8004caa:	f8c4 8008 	str.w	r8, [r4, #8]
 8004cae:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	f1a9 0308 	sub.w	r3, r9, #8
 8004cb8:	60e3      	str	r3, [r4, #12]
 8004cba:	604a      	str	r2, [r1, #4]
 8004cbc:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8004cc0:	f8c8 400c 	str.w	r4, [r8, #12]
 8004cc4:	1083      	asrs	r3, r0, #2
 8004cc6:	2401      	movs	r4, #1
 8004cc8:	409c      	lsls	r4, r3
 8004cca:	4294      	cmp	r4, r2
 8004ccc:	f200 808a 	bhi.w	8004de4 <_malloc_r+0x1f0>
 8004cd0:	4214      	tst	r4, r2
 8004cd2:	d106      	bne.n	8004ce2 <_malloc_r+0xee>
 8004cd4:	f020 0003 	bic.w	r0, r0, #3
 8004cd8:	0064      	lsls	r4, r4, #1
 8004cda:	4214      	tst	r4, r2
 8004cdc:	f100 0004 	add.w	r0, r0, #4
 8004ce0:	d0fa      	beq.n	8004cd8 <_malloc_r+0xe4>
 8004ce2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8004ce6:	46cc      	mov	ip, r9
 8004ce8:	4680      	mov	r8, r0
 8004cea:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8004cee:	458c      	cmp	ip, r1
 8004cf0:	d107      	bne.n	8004d02 <_malloc_r+0x10e>
 8004cf2:	e173      	b.n	8004fdc <_malloc_r+0x3e8>
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	f280 8181 	bge.w	8004ffc <_malloc_r+0x408>
 8004cfa:	68c9      	ldr	r1, [r1, #12]
 8004cfc:	458c      	cmp	ip, r1
 8004cfe:	f000 816d 	beq.w	8004fdc <_malloc_r+0x3e8>
 8004d02:	684b      	ldr	r3, [r1, #4]
 8004d04:	f023 0303 	bic.w	r3, r3, #3
 8004d08:	1b5a      	subs	r2, r3, r5
 8004d0a:	2a0f      	cmp	r2, #15
 8004d0c:	ddf2      	ble.n	8004cf4 <_malloc_r+0x100>
 8004d0e:	460c      	mov	r4, r1
 8004d10:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004d14:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004d18:	194b      	adds	r3, r1, r5
 8004d1a:	f045 0501 	orr.w	r5, r5, #1
 8004d1e:	604d      	str	r5, [r1, #4]
 8004d20:	f042 0101 	orr.w	r1, r2, #1
 8004d24:	f8c8 c00c 	str.w	ip, [r8, #12]
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f8cc 8008 	str.w	r8, [ip, #8]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004d36:	f8c3 e008 	str.w	lr, [r3, #8]
 8004d3a:	6059      	str	r1, [r3, #4]
 8004d3c:	509a      	str	r2, [r3, r2]
 8004d3e:	f000 fa69 	bl	8005214 <__malloc_unlock>
 8004d42:	e01f      	b.n	8004d84 <_malloc_r+0x190>
 8004d44:	2910      	cmp	r1, #16
 8004d46:	d821      	bhi.n	8004d8c <_malloc_r+0x198>
 8004d48:	f000 fa62 	bl	8005210 <__malloc_lock>
 8004d4c:	2510      	movs	r5, #16
 8004d4e:	2306      	movs	r3, #6
 8004d50:	2002      	movs	r0, #2
 8004d52:	4f7e      	ldr	r7, [pc, #504]	; (8004f4c <_malloc_r+0x358>)
 8004d54:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004d58:	f1a3 0208 	sub.w	r2, r3, #8
 8004d5c:	685c      	ldr	r4, [r3, #4]
 8004d5e:	4294      	cmp	r4, r2
 8004d60:	f000 8145 	beq.w	8004fee <_malloc_r+0x3fa>
 8004d64:	6863      	ldr	r3, [r4, #4]
 8004d66:	68e1      	ldr	r1, [r4, #12]
 8004d68:	68a5      	ldr	r5, [r4, #8]
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	4423      	add	r3, r4
 8004d70:	4630      	mov	r0, r6
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	60e9      	str	r1, [r5, #12]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	608d      	str	r5, [r1, #8]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	f000 fa49 	bl	8005214 <__malloc_unlock>
 8004d82:	3408      	adds	r4, #8
 8004d84:	4620      	mov	r0, r4
 8004d86:	b003      	add	sp, #12
 8004d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8c:	2400      	movs	r4, #0
 8004d8e:	230c      	movs	r3, #12
 8004d90:	4620      	mov	r0, r4
 8004d92:	6033      	str	r3, [r6, #0]
 8004d94:	b003      	add	sp, #12
 8004d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8004da0:	203f      	movs	r0, #63	; 0x3f
 8004da2:	e749      	b.n	8004c38 <_malloc_r+0x44>
 8004da4:	4670      	mov	r0, lr
 8004da6:	e75d      	b.n	8004c64 <_malloc_r+0x70>
 8004da8:	4423      	add	r3, r4
 8004daa:	68e1      	ldr	r1, [r4, #12]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68a5      	ldr	r5, [r4, #8]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	60e9      	str	r1, [r5, #12]
 8004db6:	4630      	mov	r0, r6
 8004db8:	608d      	str	r5, [r1, #8]
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	f000 fa2a 	bl	8005214 <__malloc_unlock>
 8004dc0:	3408      	adds	r4, #8
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	b003      	add	sp, #12
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	4423      	add	r3, r4
 8004dcc:	4630      	mov	r0, r6
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	f000 fa1d 	bl	8005214 <__malloc_unlock>
 8004dda:	3408      	adds	r4, #8
 8004ddc:	4620      	mov	r0, r4
 8004dde:	b003      	add	sp, #12
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	68bc      	ldr	r4, [r7, #8]
 8004de6:	6863      	ldr	r3, [r4, #4]
 8004de8:	f023 0803 	bic.w	r8, r3, #3
 8004dec:	45a8      	cmp	r8, r5
 8004dee:	d304      	bcc.n	8004dfa <_malloc_r+0x206>
 8004df0:	ebc5 0308 	rsb	r3, r5, r8
 8004df4:	2b0f      	cmp	r3, #15
 8004df6:	f300 808c 	bgt.w	8004f12 <_malloc_r+0x31e>
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <_malloc_r+0x35c>)
 8004dfc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8004f60 <_malloc_r+0x36c>
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f8d9 3000 	ldr.w	r3, [r9]
 8004e06:	3301      	adds	r3, #1
 8004e08:	442a      	add	r2, r5
 8004e0a:	eb04 0a08 	add.w	sl, r4, r8
 8004e0e:	f000 8160 	beq.w	80050d2 <_malloc_r+0x4de>
 8004e12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e16:	320f      	adds	r2, #15
 8004e18:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004e1c:	f022 020f 	bic.w	r2, r2, #15
 8004e20:	4611      	mov	r1, r2
 8004e22:	4630      	mov	r0, r6
 8004e24:	9201      	str	r2, [sp, #4]
 8004e26:	f000 fd07 	bl	8005838 <_sbrk_r>
 8004e2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e2e:	4683      	mov	fp, r0
 8004e30:	9a01      	ldr	r2, [sp, #4]
 8004e32:	f000 8158 	beq.w	80050e6 <_malloc_r+0x4f2>
 8004e36:	4582      	cmp	sl, r0
 8004e38:	f200 80fc 	bhi.w	8005034 <_malloc_r+0x440>
 8004e3c:	4b45      	ldr	r3, [pc, #276]	; (8004f54 <_malloc_r+0x360>)
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	45da      	cmp	sl, fp
 8004e42:	4411      	add	r1, r2
 8004e44:	6019      	str	r1, [r3, #0]
 8004e46:	f000 8153 	beq.w	80050f0 <_malloc_r+0x4fc>
 8004e4a:	f8d9 0000 	ldr.w	r0, [r9]
 8004e4e:	f8df e110 	ldr.w	lr, [pc, #272]	; 8004f60 <_malloc_r+0x36c>
 8004e52:	3001      	adds	r0, #1
 8004e54:	bf1b      	ittet	ne
 8004e56:	ebca 0a0b 	rsbne	sl, sl, fp
 8004e5a:	4451      	addne	r1, sl
 8004e5c:	f8ce b000 	streq.w	fp, [lr]
 8004e60:	6019      	strne	r1, [r3, #0]
 8004e62:	f01b 0107 	ands.w	r1, fp, #7
 8004e66:	f000 8117 	beq.w	8005098 <_malloc_r+0x4a4>
 8004e6a:	f1c1 0008 	rsb	r0, r1, #8
 8004e6e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8004e72:	4483      	add	fp, r0
 8004e74:	3108      	adds	r1, #8
 8004e76:	445a      	add	r2, fp
 8004e78:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004e7c:	ebc2 0901 	rsb	r9, r2, r1
 8004e80:	4649      	mov	r1, r9
 8004e82:	4630      	mov	r0, r6
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	f000 fcd7 	bl	8005838 <_sbrk_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	f000 813f 	beq.w	8005110 <_malloc_r+0x51c>
 8004e92:	ebcb 0200 	rsb	r2, fp, r0
 8004e96:	444a      	add	r2, r9
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	f8c7 b008 	str.w	fp, [r7, #8]
 8004ea2:	4449      	add	r1, r9
 8004ea4:	42bc      	cmp	r4, r7
 8004ea6:	f8cb 2004 	str.w	r2, [fp, #4]
 8004eaa:	6019      	str	r1, [r3, #0]
 8004eac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004f54 <_malloc_r+0x360>
 8004eb0:	d016      	beq.n	8004ee0 <_malloc_r+0x2ec>
 8004eb2:	f1b8 0f0f 	cmp.w	r8, #15
 8004eb6:	f240 80fd 	bls.w	80050b4 <_malloc_r+0x4c0>
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	f1a8 030c 	sub.w	r3, r8, #12
 8004ec0:	f023 0307 	bic.w	r3, r3, #7
 8004ec4:	18e0      	adds	r0, r4, r3
 8004ec6:	f002 0201 	and.w	r2, r2, #1
 8004eca:	f04f 0e05 	mov.w	lr, #5
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	2b0f      	cmp	r3, #15
 8004ed2:	6062      	str	r2, [r4, #4]
 8004ed4:	f8c0 e004 	str.w	lr, [r0, #4]
 8004ed8:	f8c0 e008 	str.w	lr, [r0, #8]
 8004edc:	f200 811c 	bhi.w	8005118 <_malloc_r+0x524>
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <_malloc_r+0x364>)
 8004ee2:	68bc      	ldr	r4, [r7, #8]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	bf88      	it	hi
 8004eea:	6019      	strhi	r1, [r3, #0]
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <_malloc_r+0x368>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4291      	cmp	r1, r2
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	bf88      	it	hi
 8004ef6:	6019      	strhi	r1, [r3, #0]
 8004ef8:	f022 0203 	bic.w	r2, r2, #3
 8004efc:	4295      	cmp	r5, r2
 8004efe:	eba2 0305 	sub.w	r3, r2, r5
 8004f02:	d801      	bhi.n	8004f08 <_malloc_r+0x314>
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	dc04      	bgt.n	8004f12 <_malloc_r+0x31e>
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f000 f983 	bl	8005214 <__malloc_unlock>
 8004f0e:	2400      	movs	r4, #0
 8004f10:	e738      	b.n	8004d84 <_malloc_r+0x190>
 8004f12:	1962      	adds	r2, r4, r5
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	f045 0501 	orr.w	r5, r5, #1
 8004f1c:	6065      	str	r5, [r4, #4]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	60ba      	str	r2, [r7, #8]
 8004f22:	6053      	str	r3, [r2, #4]
 8004f24:	f000 f976 	bl	8005214 <__malloc_unlock>
 8004f28:	3408      	adds	r4, #8
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	b003      	add	sp, #12
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	2b14      	cmp	r3, #20
 8004f34:	d971      	bls.n	800501a <_malloc_r+0x426>
 8004f36:	2b54      	cmp	r3, #84	; 0x54
 8004f38:	f200 80a4 	bhi.w	8005084 <_malloc_r+0x490>
 8004f3c:	0b28      	lsrs	r0, r5, #12
 8004f3e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8004f42:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004f46:	306e      	adds	r0, #110	; 0x6e
 8004f48:	e676      	b.n	8004c38 <_malloc_r+0x44>
 8004f4a:	bf00      	nop
 8004f4c:	20000464 	.word	0x20000464
 8004f50:	20000a48 	.word	0x20000a48
 8004f54:	20000a4c 	.word	0x20000a4c
 8004f58:	20000a44 	.word	0x20000a44
 8004f5c:	20000a40 	.word	0x20000a40
 8004f60:	20000870 	.word	0x20000870
 8004f64:	0a5a      	lsrs	r2, r3, #9
 8004f66:	2a04      	cmp	r2, #4
 8004f68:	d95e      	bls.n	8005028 <_malloc_r+0x434>
 8004f6a:	2a14      	cmp	r2, #20
 8004f6c:	f200 80b3 	bhi.w	80050d6 <_malloc_r+0x4e2>
 8004f70:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8004f74:	0049      	lsls	r1, r1, #1
 8004f76:	325b      	adds	r2, #91	; 0x5b
 8004f78:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8004f7c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8004f80:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8005160 <_malloc_r+0x56c>
 8004f84:	f1ac 0c08 	sub.w	ip, ip, #8
 8004f88:	458c      	cmp	ip, r1
 8004f8a:	f000 8088 	beq.w	800509e <_malloc_r+0x4aa>
 8004f8e:	684a      	ldr	r2, [r1, #4]
 8004f90:	f022 0203 	bic.w	r2, r2, #3
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d202      	bcs.n	8004f9e <_malloc_r+0x3aa>
 8004f98:	6889      	ldr	r1, [r1, #8]
 8004f9a:	458c      	cmp	ip, r1
 8004f9c:	d1f7      	bne.n	8004f8e <_malloc_r+0x39a>
 8004f9e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004fa8:	60a1      	str	r1, [r4, #8]
 8004faa:	f8cc 4008 	str.w	r4, [ip, #8]
 8004fae:	60cc      	str	r4, [r1, #12]
 8004fb0:	e688      	b.n	8004cc4 <_malloc_r+0xd0>
 8004fb2:	1963      	adds	r3, r4, r5
 8004fb4:	f042 0701 	orr.w	r7, r2, #1
 8004fb8:	f045 0501 	orr.w	r5, r5, #1
 8004fbc:	6065      	str	r5, [r4, #4]
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	614b      	str	r3, [r1, #20]
 8004fc2:	610b      	str	r3, [r1, #16]
 8004fc4:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004fc8:	f8c3 e008 	str.w	lr, [r3, #8]
 8004fcc:	605f      	str	r7, [r3, #4]
 8004fce:	509a      	str	r2, [r3, r2]
 8004fd0:	3408      	adds	r4, #8
 8004fd2:	f000 f91f 	bl	8005214 <__malloc_unlock>
 8004fd6:	e6d5      	b.n	8004d84 <_malloc_r+0x190>
 8004fd8:	684a      	ldr	r2, [r1, #4]
 8004fda:	e673      	b.n	8004cc4 <_malloc_r+0xd0>
 8004fdc:	f108 0801 	add.w	r8, r8, #1
 8004fe0:	f018 0f03 	tst.w	r8, #3
 8004fe4:	f10c 0c08 	add.w	ip, ip, #8
 8004fe8:	f47f ae7f 	bne.w	8004cea <_malloc_r+0xf6>
 8004fec:	e030      	b.n	8005050 <_malloc_r+0x45c>
 8004fee:	68dc      	ldr	r4, [r3, #12]
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	bf08      	it	eq
 8004ff4:	3002      	addeq	r0, #2
 8004ff6:	f43f ae35 	beq.w	8004c64 <_malloc_r+0x70>
 8004ffa:	e6b3      	b.n	8004d64 <_malloc_r+0x170>
 8004ffc:	440b      	add	r3, r1
 8004ffe:	460c      	mov	r4, r1
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	68c9      	ldr	r1, [r1, #12]
 8005004:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	605a      	str	r2, [r3, #4]
 800500e:	4630      	mov	r0, r6
 8005010:	60e9      	str	r1, [r5, #12]
 8005012:	608d      	str	r5, [r1, #8]
 8005014:	f000 f8fe 	bl	8005214 <__malloc_unlock>
 8005018:	e6b4      	b.n	8004d84 <_malloc_r+0x190>
 800501a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800501e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8005022:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8005026:	e607      	b.n	8004c38 <_malloc_r+0x44>
 8005028:	099a      	lsrs	r2, r3, #6
 800502a:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800502e:	0049      	lsls	r1, r1, #1
 8005030:	3238      	adds	r2, #56	; 0x38
 8005032:	e7a1      	b.n	8004f78 <_malloc_r+0x384>
 8005034:	42bc      	cmp	r4, r7
 8005036:	4b4a      	ldr	r3, [pc, #296]	; (8005160 <_malloc_r+0x56c>)
 8005038:	f43f af00 	beq.w	8004e3c <_malloc_r+0x248>
 800503c:	689c      	ldr	r4, [r3, #8]
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	f022 0203 	bic.w	r2, r2, #3
 8005044:	e75a      	b.n	8004efc <_malloc_r+0x308>
 8005046:	f859 3908 	ldr.w	r3, [r9], #-8
 800504a:	4599      	cmp	r9, r3
 800504c:	f040 8082 	bne.w	8005154 <_malloc_r+0x560>
 8005050:	f010 0f03 	tst.w	r0, #3
 8005054:	f100 30ff 	add.w	r0, r0, #4294967295
 8005058:	d1f5      	bne.n	8005046 <_malloc_r+0x452>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	ea23 0304 	bic.w	r3, r3, r4
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	0064      	lsls	r4, r4, #1
 8005064:	429c      	cmp	r4, r3
 8005066:	f63f aebd 	bhi.w	8004de4 <_malloc_r+0x1f0>
 800506a:	2c00      	cmp	r4, #0
 800506c:	f43f aeba 	beq.w	8004de4 <_malloc_r+0x1f0>
 8005070:	421c      	tst	r4, r3
 8005072:	4640      	mov	r0, r8
 8005074:	f47f ae35 	bne.w	8004ce2 <_malloc_r+0xee>
 8005078:	0064      	lsls	r4, r4, #1
 800507a:	421c      	tst	r4, r3
 800507c:	f100 0004 	add.w	r0, r0, #4
 8005080:	d0fa      	beq.n	8005078 <_malloc_r+0x484>
 8005082:	e62e      	b.n	8004ce2 <_malloc_r+0xee>
 8005084:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005088:	d818      	bhi.n	80050bc <_malloc_r+0x4c8>
 800508a:	0be8      	lsrs	r0, r5, #15
 800508c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8005090:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8005094:	3077      	adds	r0, #119	; 0x77
 8005096:	e5cf      	b.n	8004c38 <_malloc_r+0x44>
 8005098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800509c:	e6eb      	b.n	8004e76 <_malloc_r+0x282>
 800509e:	2101      	movs	r1, #1
 80050a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80050a4:	1092      	asrs	r2, r2, #2
 80050a6:	fa01 f202 	lsl.w	r2, r1, r2
 80050aa:	431a      	orrs	r2, r3
 80050ac:	f8c8 2004 	str.w	r2, [r8, #4]
 80050b0:	4661      	mov	r1, ip
 80050b2:	e777      	b.n	8004fa4 <_malloc_r+0x3b0>
 80050b4:	2301      	movs	r3, #1
 80050b6:	f8cb 3004 	str.w	r3, [fp, #4]
 80050ba:	e725      	b.n	8004f08 <_malloc_r+0x314>
 80050bc:	f240 5254 	movw	r2, #1364	; 0x554
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d820      	bhi.n	8005106 <_malloc_r+0x512>
 80050c4:	0ca8      	lsrs	r0, r5, #18
 80050c6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 80050ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80050ce:	307c      	adds	r0, #124	; 0x7c
 80050d0:	e5b2      	b.n	8004c38 <_malloc_r+0x44>
 80050d2:	3210      	adds	r2, #16
 80050d4:	e6a4      	b.n	8004e20 <_malloc_r+0x22c>
 80050d6:	2a54      	cmp	r2, #84	; 0x54
 80050d8:	d826      	bhi.n	8005128 <_malloc_r+0x534>
 80050da:	0b1a      	lsrs	r2, r3, #12
 80050dc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80050e0:	0049      	lsls	r1, r1, #1
 80050e2:	326e      	adds	r2, #110	; 0x6e
 80050e4:	e748      	b.n	8004f78 <_malloc_r+0x384>
 80050e6:	68bc      	ldr	r4, [r7, #8]
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	f022 0203 	bic.w	r2, r2, #3
 80050ee:	e705      	b.n	8004efc <_malloc_r+0x308>
 80050f0:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f47f aea8 	bne.w	8004e4a <_malloc_r+0x256>
 80050fa:	4442      	add	r2, r8
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	e6ec      	b.n	8004ee0 <_malloc_r+0x2ec>
 8005106:	23fe      	movs	r3, #254	; 0xfe
 8005108:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800510c:	207e      	movs	r0, #126	; 0x7e
 800510e:	e593      	b.n	8004c38 <_malloc_r+0x44>
 8005110:	2201      	movs	r2, #1
 8005112:	f04f 0900 	mov.w	r9, #0
 8005116:	e6c1      	b.n	8004e9c <_malloc_r+0x2a8>
 8005118:	f104 0108 	add.w	r1, r4, #8
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff fbd5 	bl	80048cc <_free_r>
 8005122:	f8d9 1000 	ldr.w	r1, [r9]
 8005126:	e6db      	b.n	8004ee0 <_malloc_r+0x2ec>
 8005128:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800512c:	d805      	bhi.n	800513a <_malloc_r+0x546>
 800512e:	0bda      	lsrs	r2, r3, #15
 8005130:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8005134:	0049      	lsls	r1, r1, #1
 8005136:	3277      	adds	r2, #119	; 0x77
 8005138:	e71e      	b.n	8004f78 <_malloc_r+0x384>
 800513a:	f240 5154 	movw	r1, #1364	; 0x554
 800513e:	428a      	cmp	r2, r1
 8005140:	d805      	bhi.n	800514e <_malloc_r+0x55a>
 8005142:	0c9a      	lsrs	r2, r3, #18
 8005144:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8005148:	0049      	lsls	r1, r1, #1
 800514a:	327c      	adds	r2, #124	; 0x7c
 800514c:	e714      	b.n	8004f78 <_malloc_r+0x384>
 800514e:	21fe      	movs	r1, #254	; 0xfe
 8005150:	227e      	movs	r2, #126	; 0x7e
 8005152:	e711      	b.n	8004f78 <_malloc_r+0x384>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	e784      	b.n	8005062 <_malloc_r+0x46e>
 8005158:	08e8      	lsrs	r0, r5, #3
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	e5f8      	b.n	8004d52 <_malloc_r+0x15e>
 8005160:	20000464 	.word	0x20000464
	...

08005170 <memchr>:
 8005170:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005174:	2a10      	cmp	r2, #16
 8005176:	db2b      	blt.n	80051d0 <memchr+0x60>
 8005178:	f010 0f07 	tst.w	r0, #7
 800517c:	d008      	beq.n	8005190 <memchr+0x20>
 800517e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005182:	3a01      	subs	r2, #1
 8005184:	428b      	cmp	r3, r1
 8005186:	d02d      	beq.n	80051e4 <memchr+0x74>
 8005188:	f010 0f07 	tst.w	r0, #7
 800518c:	b342      	cbz	r2, 80051e0 <memchr+0x70>
 800518e:	d1f6      	bne.n	800517e <memchr+0xe>
 8005190:	b4f0      	push	{r4, r5, r6, r7}
 8005192:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005196:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800519a:	f022 0407 	bic.w	r4, r2, #7
 800519e:	f07f 0700 	mvns.w	r7, #0
 80051a2:	2300      	movs	r3, #0
 80051a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80051a8:	3c08      	subs	r4, #8
 80051aa:	ea85 0501 	eor.w	r5, r5, r1
 80051ae:	ea86 0601 	eor.w	r6, r6, r1
 80051b2:	fa85 f547 	uadd8	r5, r5, r7
 80051b6:	faa3 f587 	sel	r5, r3, r7
 80051ba:	fa86 f647 	uadd8	r6, r6, r7
 80051be:	faa5 f687 	sel	r6, r5, r7
 80051c2:	b98e      	cbnz	r6, 80051e8 <memchr+0x78>
 80051c4:	d1ee      	bne.n	80051a4 <memchr+0x34>
 80051c6:	bcf0      	pop	{r4, r5, r6, r7}
 80051c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80051cc:	f002 0207 	and.w	r2, r2, #7
 80051d0:	b132      	cbz	r2, 80051e0 <memchr+0x70>
 80051d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80051d6:	3a01      	subs	r2, #1
 80051d8:	ea83 0301 	eor.w	r3, r3, r1
 80051dc:	b113      	cbz	r3, 80051e4 <memchr+0x74>
 80051de:	d1f8      	bne.n	80051d2 <memchr+0x62>
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr
 80051e4:	3801      	subs	r0, #1
 80051e6:	4770      	bx	lr
 80051e8:	2d00      	cmp	r5, #0
 80051ea:	bf06      	itte	eq
 80051ec:	4635      	moveq	r5, r6
 80051ee:	3803      	subeq	r0, #3
 80051f0:	3807      	subne	r0, #7
 80051f2:	f015 0f01 	tst.w	r5, #1
 80051f6:	d107      	bne.n	8005208 <memchr+0x98>
 80051f8:	3001      	adds	r0, #1
 80051fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80051fe:	bf02      	ittt	eq
 8005200:	3001      	addeq	r0, #1
 8005202:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005206:	3001      	addeq	r0, #1
 8005208:	bcf0      	pop	{r4, r5, r6, r7}
 800520a:	3801      	subs	r0, #1
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop

08005210 <__malloc_lock>:
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop

08005214 <__malloc_unlock>:
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop

08005218 <_Balloc>:
 8005218:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800521a:	b570      	push	{r4, r5, r6, lr}
 800521c:	4605      	mov	r5, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b14b      	cbz	r3, 8005236 <_Balloc+0x1e>
 8005222:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005226:	b180      	cbz	r0, 800524a <_Balloc+0x32>
 8005228:	6802      	ldr	r2, [r0, #0]
 800522a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800522e:	2300      	movs	r3, #0
 8005230:	6103      	str	r3, [r0, #16]
 8005232:	60c3      	str	r3, [r0, #12]
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	2221      	movs	r2, #33	; 0x21
 8005238:	2104      	movs	r1, #4
 800523a:	f001 ff2b 	bl	8007094 <_calloc_r>
 800523e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005240:	4603      	mov	r3, r0
 8005242:	2800      	cmp	r0, #0
 8005244:	d1ed      	bne.n	8005222 <_Balloc+0xa>
 8005246:	2000      	movs	r0, #0
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	2101      	movs	r1, #1
 800524c:	fa01 f604 	lsl.w	r6, r1, r4
 8005250:	1d72      	adds	r2, r6, #5
 8005252:	4628      	mov	r0, r5
 8005254:	0092      	lsls	r2, r2, #2
 8005256:	f001 ff1d 	bl	8007094 <_calloc_r>
 800525a:	2800      	cmp	r0, #0
 800525c:	d0f3      	beq.n	8005246 <_Balloc+0x2e>
 800525e:	6044      	str	r4, [r0, #4]
 8005260:	6086      	str	r6, [r0, #8]
 8005262:	e7e4      	b.n	800522e <_Balloc+0x16>

08005264 <_Bfree>:
 8005264:	b131      	cbz	r1, 8005274 <_Bfree+0x10>
 8005266:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005268:	684a      	ldr	r2, [r1, #4]
 800526a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800526e:	6008      	str	r0, [r1, #0]
 8005270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop

08005278 <__multadd>:
 8005278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527a:	690c      	ldr	r4, [r1, #16]
 800527c:	b083      	sub	sp, #12
 800527e:	460d      	mov	r5, r1
 8005280:	4606      	mov	r6, r0
 8005282:	f101 0e14 	add.w	lr, r1, #20
 8005286:	2700      	movs	r7, #0
 8005288:	f8de 0000 	ldr.w	r0, [lr]
 800528c:	b281      	uxth	r1, r0
 800528e:	fb02 3101 	mla	r1, r2, r1, r3
 8005292:	0c0b      	lsrs	r3, r1, #16
 8005294:	0c00      	lsrs	r0, r0, #16
 8005296:	fb02 3300 	mla	r3, r2, r0, r3
 800529a:	b289      	uxth	r1, r1
 800529c:	3701      	adds	r7, #1
 800529e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052a2:	42bc      	cmp	r4, r7
 80052a4:	f84e 1b04 	str.w	r1, [lr], #4
 80052a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80052ac:	dcec      	bgt.n	8005288 <__multadd+0x10>
 80052ae:	b13b      	cbz	r3, 80052c0 <__multadd+0x48>
 80052b0:	68aa      	ldr	r2, [r5, #8]
 80052b2:	4294      	cmp	r4, r2
 80052b4:	da07      	bge.n	80052c6 <__multadd+0x4e>
 80052b6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80052ba:	3401      	adds	r4, #1
 80052bc:	6153      	str	r3, [r2, #20]
 80052be:	612c      	str	r4, [r5, #16]
 80052c0:	4628      	mov	r0, r5
 80052c2:	b003      	add	sp, #12
 80052c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c6:	6869      	ldr	r1, [r5, #4]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	3101      	adds	r1, #1
 80052cc:	4630      	mov	r0, r6
 80052ce:	f7ff ffa3 	bl	8005218 <_Balloc>
 80052d2:	692a      	ldr	r2, [r5, #16]
 80052d4:	3202      	adds	r2, #2
 80052d6:	f105 010c 	add.w	r1, r5, #12
 80052da:	4607      	mov	r7, r0
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	300c      	adds	r0, #12
 80052e0:	f7fc fbe8 	bl	8001ab4 <memcpy>
 80052e4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80052e6:	6869      	ldr	r1, [r5, #4]
 80052e8:	9b01      	ldr	r3, [sp, #4]
 80052ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80052ee:	6028      	str	r0, [r5, #0]
 80052f0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80052f4:	463d      	mov	r5, r7
 80052f6:	e7de      	b.n	80052b6 <__multadd+0x3e>

080052f8 <__hi0bits>:
 80052f8:	0c03      	lsrs	r3, r0, #16
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	b9b3      	cbnz	r3, 800532c <__hi0bits+0x34>
 80052fe:	0400      	lsls	r0, r0, #16
 8005300:	2310      	movs	r3, #16
 8005302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005306:	bf04      	itt	eq
 8005308:	0200      	lsleq	r0, r0, #8
 800530a:	3308      	addeq	r3, #8
 800530c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005310:	bf04      	itt	eq
 8005312:	0100      	lsleq	r0, r0, #4
 8005314:	3304      	addeq	r3, #4
 8005316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800531a:	bf04      	itt	eq
 800531c:	0080      	lsleq	r0, r0, #2
 800531e:	3302      	addeq	r3, #2
 8005320:	2800      	cmp	r0, #0
 8005322:	db07      	blt.n	8005334 <__hi0bits+0x3c>
 8005324:	0042      	lsls	r2, r0, #1
 8005326:	d403      	bmi.n	8005330 <__hi0bits+0x38>
 8005328:	2020      	movs	r0, #32
 800532a:	4770      	bx	lr
 800532c:	2300      	movs	r3, #0
 800532e:	e7e8      	b.n	8005302 <__hi0bits+0xa>
 8005330:	1c58      	adds	r0, r3, #1
 8005332:	4770      	bx	lr
 8005334:	4618      	mov	r0, r3
 8005336:	4770      	bx	lr

08005338 <__lo0bits>:
 8005338:	6803      	ldr	r3, [r0, #0]
 800533a:	f013 0207 	ands.w	r2, r3, #7
 800533e:	d007      	beq.n	8005350 <__lo0bits+0x18>
 8005340:	07d9      	lsls	r1, r3, #31
 8005342:	d420      	bmi.n	8005386 <__lo0bits+0x4e>
 8005344:	079a      	lsls	r2, r3, #30
 8005346:	d420      	bmi.n	800538a <__lo0bits+0x52>
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	6003      	str	r3, [r0, #0]
 800534c:	2002      	movs	r0, #2
 800534e:	4770      	bx	lr
 8005350:	b299      	uxth	r1, r3
 8005352:	b909      	cbnz	r1, 8005358 <__lo0bits+0x20>
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	2210      	movs	r2, #16
 8005358:	f013 0fff 	tst.w	r3, #255	; 0xff
 800535c:	bf04      	itt	eq
 800535e:	0a1b      	lsreq	r3, r3, #8
 8005360:	3208      	addeq	r2, #8
 8005362:	0719      	lsls	r1, r3, #28
 8005364:	bf04      	itt	eq
 8005366:	091b      	lsreq	r3, r3, #4
 8005368:	3204      	addeq	r2, #4
 800536a:	0799      	lsls	r1, r3, #30
 800536c:	bf04      	itt	eq
 800536e:	089b      	lsreq	r3, r3, #2
 8005370:	3202      	addeq	r2, #2
 8005372:	07d9      	lsls	r1, r3, #31
 8005374:	d404      	bmi.n	8005380 <__lo0bits+0x48>
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	d101      	bne.n	800537e <__lo0bits+0x46>
 800537a:	2020      	movs	r0, #32
 800537c:	4770      	bx	lr
 800537e:	3201      	adds	r2, #1
 8005380:	6003      	str	r3, [r0, #0]
 8005382:	4610      	mov	r0, r2
 8005384:	4770      	bx	lr
 8005386:	2000      	movs	r0, #0
 8005388:	4770      	bx	lr
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	6003      	str	r3, [r0, #0]
 800538e:	2001      	movs	r0, #1
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop

08005394 <__i2b>:
 8005394:	b510      	push	{r4, lr}
 8005396:	460c      	mov	r4, r1
 8005398:	2101      	movs	r1, #1
 800539a:	f7ff ff3d 	bl	8005218 <_Balloc>
 800539e:	2201      	movs	r2, #1
 80053a0:	6144      	str	r4, [r0, #20]
 80053a2:	6102      	str	r2, [r0, #16]
 80053a4:	bd10      	pop	{r4, pc}
 80053a6:	bf00      	nop

080053a8 <__multiply>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	690d      	ldr	r5, [r1, #16]
 80053ae:	6917      	ldr	r7, [r2, #16]
 80053b0:	42bd      	cmp	r5, r7
 80053b2:	b083      	sub	sp, #12
 80053b4:	460c      	mov	r4, r1
 80053b6:	4616      	mov	r6, r2
 80053b8:	da04      	bge.n	80053c4 <__multiply+0x1c>
 80053ba:	462a      	mov	r2, r5
 80053bc:	4634      	mov	r4, r6
 80053be:	463d      	mov	r5, r7
 80053c0:	460e      	mov	r6, r1
 80053c2:	4617      	mov	r7, r2
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	6861      	ldr	r1, [r4, #4]
 80053c8:	eb05 0807 	add.w	r8, r5, r7
 80053cc:	4598      	cmp	r8, r3
 80053ce:	bfc8      	it	gt
 80053d0:	3101      	addgt	r1, #1
 80053d2:	f7ff ff21 	bl	8005218 <_Balloc>
 80053d6:	f100 0c14 	add.w	ip, r0, #20
 80053da:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80053de:	45cc      	cmp	ip, r9
 80053e0:	9000      	str	r0, [sp, #0]
 80053e2:	d205      	bcs.n	80053f0 <__multiply+0x48>
 80053e4:	4663      	mov	r3, ip
 80053e6:	2100      	movs	r1, #0
 80053e8:	f843 1b04 	str.w	r1, [r3], #4
 80053ec:	4599      	cmp	r9, r3
 80053ee:	d8fb      	bhi.n	80053e8 <__multiply+0x40>
 80053f0:	f106 0214 	add.w	r2, r6, #20
 80053f4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80053f8:	f104 0314 	add.w	r3, r4, #20
 80053fc:	4552      	cmp	r2, sl
 80053fe:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8005402:	d254      	bcs.n	80054ae <__multiply+0x106>
 8005404:	f8cd 9004 	str.w	r9, [sp, #4]
 8005408:	4699      	mov	r9, r3
 800540a:	f852 3b04 	ldr.w	r3, [r2], #4
 800540e:	fa1f fb83 	uxth.w	fp, r3
 8005412:	f1bb 0f00 	cmp.w	fp, #0
 8005416:	d020      	beq.n	800545a <__multiply+0xb2>
 8005418:	2000      	movs	r0, #0
 800541a:	464f      	mov	r7, r9
 800541c:	4666      	mov	r6, ip
 800541e:	4605      	mov	r5, r0
 8005420:	e000      	b.n	8005424 <__multiply+0x7c>
 8005422:	461e      	mov	r6, r3
 8005424:	f857 4b04 	ldr.w	r4, [r7], #4
 8005428:	6830      	ldr	r0, [r6, #0]
 800542a:	b2a1      	uxth	r1, r4
 800542c:	b283      	uxth	r3, r0
 800542e:	fb0b 3101 	mla	r1, fp, r1, r3
 8005432:	0c24      	lsrs	r4, r4, #16
 8005434:	0c00      	lsrs	r0, r0, #16
 8005436:	194b      	adds	r3, r1, r5
 8005438:	fb0b 0004 	mla	r0, fp, r4, r0
 800543c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005440:	b299      	uxth	r1, r3
 8005442:	4633      	mov	r3, r6
 8005444:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005448:	45be      	cmp	lr, r7
 800544a:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800544e:	f843 1b04 	str.w	r1, [r3], #4
 8005452:	d8e6      	bhi.n	8005422 <__multiply+0x7a>
 8005454:	6075      	str	r5, [r6, #4]
 8005456:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800545a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800545e:	d020      	beq.n	80054a2 <__multiply+0xfa>
 8005460:	f8dc 3000 	ldr.w	r3, [ip]
 8005464:	4667      	mov	r7, ip
 8005466:	4618      	mov	r0, r3
 8005468:	464d      	mov	r5, r9
 800546a:	2100      	movs	r1, #0
 800546c:	e000      	b.n	8005470 <__multiply+0xc8>
 800546e:	4637      	mov	r7, r6
 8005470:	882c      	ldrh	r4, [r5, #0]
 8005472:	0c00      	lsrs	r0, r0, #16
 8005474:	fb0b 0004 	mla	r0, fp, r4, r0
 8005478:	4401      	add	r1, r0
 800547a:	b29c      	uxth	r4, r3
 800547c:	463e      	mov	r6, r7
 800547e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8005482:	f846 3b04 	str.w	r3, [r6], #4
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f855 4b04 	ldr.w	r4, [r5], #4
 800548c:	b283      	uxth	r3, r0
 800548e:	0c24      	lsrs	r4, r4, #16
 8005490:	fb0b 3404 	mla	r4, fp, r4, r3
 8005494:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8005498:	45ae      	cmp	lr, r5
 800549a:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800549e:	d8e6      	bhi.n	800546e <__multiply+0xc6>
 80054a0:	607b      	str	r3, [r7, #4]
 80054a2:	4592      	cmp	sl, r2
 80054a4:	f10c 0c04 	add.w	ip, ip, #4
 80054a8:	d8af      	bhi.n	800540a <__multiply+0x62>
 80054aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80054ae:	f1b8 0f00 	cmp.w	r8, #0
 80054b2:	dd0b      	ble.n	80054cc <__multiply+0x124>
 80054b4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80054b8:	f1a9 0904 	sub.w	r9, r9, #4
 80054bc:	b11b      	cbz	r3, 80054c6 <__multiply+0x11e>
 80054be:	e005      	b.n	80054cc <__multiply+0x124>
 80054c0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80054c4:	b913      	cbnz	r3, 80054cc <__multiply+0x124>
 80054c6:	f1b8 0801 	subs.w	r8, r8, #1
 80054ca:	d1f9      	bne.n	80054c0 <__multiply+0x118>
 80054cc:	9800      	ldr	r0, [sp, #0]
 80054ce:	f8c0 8010 	str.w	r8, [r0, #16]
 80054d2:	b003      	add	sp, #12
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080054d8 <__pow5mult>:
 80054d8:	f012 0303 	ands.w	r3, r2, #3
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	4614      	mov	r4, r2
 80054e2:	4607      	mov	r7, r0
 80054e4:	d12e      	bne.n	8005544 <__pow5mult+0x6c>
 80054e6:	460e      	mov	r6, r1
 80054e8:	10a4      	asrs	r4, r4, #2
 80054ea:	d01c      	beq.n	8005526 <__pow5mult+0x4e>
 80054ec:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80054ee:	b395      	cbz	r5, 8005556 <__pow5mult+0x7e>
 80054f0:	07e3      	lsls	r3, r4, #31
 80054f2:	f04f 0800 	mov.w	r8, #0
 80054f6:	d406      	bmi.n	8005506 <__pow5mult+0x2e>
 80054f8:	1064      	asrs	r4, r4, #1
 80054fa:	d014      	beq.n	8005526 <__pow5mult+0x4e>
 80054fc:	6828      	ldr	r0, [r5, #0]
 80054fe:	b1a8      	cbz	r0, 800552c <__pow5mult+0x54>
 8005500:	4605      	mov	r5, r0
 8005502:	07e3      	lsls	r3, r4, #31
 8005504:	d5f8      	bpl.n	80054f8 <__pow5mult+0x20>
 8005506:	462a      	mov	r2, r5
 8005508:	4631      	mov	r1, r6
 800550a:	4638      	mov	r0, r7
 800550c:	f7ff ff4c 	bl	80053a8 <__multiply>
 8005510:	b1b6      	cbz	r6, 8005540 <__pow5mult+0x68>
 8005512:	6872      	ldr	r2, [r6, #4]
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005516:	1064      	asrs	r4, r4, #1
 8005518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800551c:	6031      	str	r1, [r6, #0]
 800551e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005522:	4606      	mov	r6, r0
 8005524:	d1ea      	bne.n	80054fc <__pow5mult+0x24>
 8005526:	4630      	mov	r0, r6
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	462a      	mov	r2, r5
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff ff39 	bl	80053a8 <__multiply>
 8005536:	6028      	str	r0, [r5, #0]
 8005538:	f8c0 8000 	str.w	r8, [r0]
 800553c:	4605      	mov	r5, r0
 800553e:	e7e0      	b.n	8005502 <__pow5mult+0x2a>
 8005540:	4606      	mov	r6, r0
 8005542:	e7d9      	b.n	80054f8 <__pow5mult+0x20>
 8005544:	1e5a      	subs	r2, r3, #1
 8005546:	4d0b      	ldr	r5, [pc, #44]	; (8005574 <__pow5mult+0x9c>)
 8005548:	2300      	movs	r3, #0
 800554a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800554e:	f7ff fe93 	bl	8005278 <__multadd>
 8005552:	4606      	mov	r6, r0
 8005554:	e7c8      	b.n	80054e8 <__pow5mult+0x10>
 8005556:	2101      	movs	r1, #1
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff fe5d 	bl	8005218 <_Balloc>
 800555e:	f240 2171 	movw	r1, #625	; 0x271
 8005562:	2201      	movs	r2, #1
 8005564:	2300      	movs	r3, #0
 8005566:	6141      	str	r1, [r0, #20]
 8005568:	6102      	str	r2, [r0, #16]
 800556a:	4605      	mov	r5, r0
 800556c:	64b8      	str	r0, [r7, #72]	; 0x48
 800556e:	6003      	str	r3, [r0, #0]
 8005570:	e7be      	b.n	80054f0 <__pow5mult+0x18>
 8005572:	bf00      	nop
 8005574:	08008ac8 	.word	0x08008ac8

08005578 <__lshift>:
 8005578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	4691      	mov	r9, r2
 800557e:	690a      	ldr	r2, [r1, #16]
 8005580:	688b      	ldr	r3, [r1, #8]
 8005582:	ea4f 1469 	mov.w	r4, r9, asr #5
 8005586:	eb04 0802 	add.w	r8, r4, r2
 800558a:	f108 0501 	add.w	r5, r8, #1
 800558e:	429d      	cmp	r5, r3
 8005590:	460e      	mov	r6, r1
 8005592:	4682      	mov	sl, r0
 8005594:	6849      	ldr	r1, [r1, #4]
 8005596:	dd04      	ble.n	80055a2 <__lshift+0x2a>
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	429d      	cmp	r5, r3
 800559c:	f101 0101 	add.w	r1, r1, #1
 80055a0:	dcfa      	bgt.n	8005598 <__lshift+0x20>
 80055a2:	4650      	mov	r0, sl
 80055a4:	f7ff fe38 	bl	8005218 <_Balloc>
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	f100 0214 	add.w	r2, r0, #20
 80055ae:	dd38      	ble.n	8005622 <__lshift+0xaa>
 80055b0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 80055b4:	2100      	movs	r1, #0
 80055b6:	f842 1b04 	str.w	r1, [r2], #4
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d1fb      	bne.n	80055b6 <__lshift+0x3e>
 80055be:	6934      	ldr	r4, [r6, #16]
 80055c0:	f106 0114 	add.w	r1, r6, #20
 80055c4:	f019 091f 	ands.w	r9, r9, #31
 80055c8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 80055cc:	d021      	beq.n	8005612 <__lshift+0x9a>
 80055ce:	f1c9 0220 	rsb	r2, r9, #32
 80055d2:	2400      	movs	r4, #0
 80055d4:	680f      	ldr	r7, [r1, #0]
 80055d6:	fa07 fc09 	lsl.w	ip, r7, r9
 80055da:	ea4c 0404 	orr.w	r4, ip, r4
 80055de:	469c      	mov	ip, r3
 80055e0:	f843 4b04 	str.w	r4, [r3], #4
 80055e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80055e8:	458e      	cmp	lr, r1
 80055ea:	fa24 f402 	lsr.w	r4, r4, r2
 80055ee:	d8f1      	bhi.n	80055d4 <__lshift+0x5c>
 80055f0:	f8cc 4004 	str.w	r4, [ip, #4]
 80055f4:	b10c      	cbz	r4, 80055fa <__lshift+0x82>
 80055f6:	f108 0502 	add.w	r5, r8, #2
 80055fa:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80055fe:	6872      	ldr	r2, [r6, #4]
 8005600:	3d01      	subs	r5, #1
 8005602:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005606:	6105      	str	r5, [r0, #16]
 8005608:	6031      	str	r1, [r6, #0]
 800560a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005612:	3b04      	subs	r3, #4
 8005614:	f851 2b04 	ldr.w	r2, [r1], #4
 8005618:	f843 2f04 	str.w	r2, [r3, #4]!
 800561c:	458e      	cmp	lr, r1
 800561e:	d8f9      	bhi.n	8005614 <__lshift+0x9c>
 8005620:	e7eb      	b.n	80055fa <__lshift+0x82>
 8005622:	4613      	mov	r3, r2
 8005624:	e7cb      	b.n	80055be <__lshift+0x46>
 8005626:	bf00      	nop

08005628 <__mcmp>:
 8005628:	6902      	ldr	r2, [r0, #16]
 800562a:	690b      	ldr	r3, [r1, #16]
 800562c:	1ad2      	subs	r2, r2, r3
 800562e:	d113      	bne.n	8005658 <__mcmp+0x30>
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	3014      	adds	r0, #20
 8005634:	3114      	adds	r1, #20
 8005636:	4419      	add	r1, r3
 8005638:	b410      	push	{r4}
 800563a:	4403      	add	r3, r0
 800563c:	e001      	b.n	8005642 <__mcmp+0x1a>
 800563e:	4298      	cmp	r0, r3
 8005640:	d20c      	bcs.n	800565c <__mcmp+0x34>
 8005642:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005646:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800564a:	4294      	cmp	r4, r2
 800564c:	d0f7      	beq.n	800563e <__mcmp+0x16>
 800564e:	d309      	bcc.n	8005664 <__mcmp+0x3c>
 8005650:	2001      	movs	r0, #1
 8005652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	4610      	mov	r0, r2
 800565a:	4770      	bx	lr
 800565c:	2000      	movs	r0, #0
 800565e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	e7f3      	b.n	8005652 <__mcmp+0x2a>
 800566a:	bf00      	nop

0800566c <__mdiff>:
 800566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005670:	690b      	ldr	r3, [r1, #16]
 8005672:	460f      	mov	r7, r1
 8005674:	6911      	ldr	r1, [r2, #16]
 8005676:	1a5b      	subs	r3, r3, r1
 8005678:	2b00      	cmp	r3, #0
 800567a:	4690      	mov	r8, r2
 800567c:	d117      	bne.n	80056ae <__mdiff+0x42>
 800567e:	0089      	lsls	r1, r1, #2
 8005680:	f107 0214 	add.w	r2, r7, #20
 8005684:	f108 0514 	add.w	r5, r8, #20
 8005688:	1853      	adds	r3, r2, r1
 800568a:	4429      	add	r1, r5
 800568c:	e001      	b.n	8005692 <__mdiff+0x26>
 800568e:	429a      	cmp	r2, r3
 8005690:	d25e      	bcs.n	8005750 <__mdiff+0xe4>
 8005692:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8005696:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800569a:	42a6      	cmp	r6, r4
 800569c:	d0f7      	beq.n	800568e <__mdiff+0x22>
 800569e:	d260      	bcs.n	8005762 <__mdiff+0xf6>
 80056a0:	463b      	mov	r3, r7
 80056a2:	4614      	mov	r4, r2
 80056a4:	4647      	mov	r7, r8
 80056a6:	f04f 0901 	mov.w	r9, #1
 80056aa:	4698      	mov	r8, r3
 80056ac:	e006      	b.n	80056bc <__mdiff+0x50>
 80056ae:	db5d      	blt.n	800576c <__mdiff+0x100>
 80056b0:	f107 0514 	add.w	r5, r7, #20
 80056b4:	f102 0414 	add.w	r4, r2, #20
 80056b8:	f04f 0900 	mov.w	r9, #0
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	f7ff fdab 	bl	8005218 <_Balloc>
 80056c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80056c6:	693e      	ldr	r6, [r7, #16]
 80056c8:	f8c0 900c 	str.w	r9, [r0, #12]
 80056cc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80056d0:	46a6      	mov	lr, r4
 80056d2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80056d6:	f100 0414 	add.w	r4, r0, #20
 80056da:	2300      	movs	r3, #0
 80056dc:	f85e 1b04 	ldr.w	r1, [lr], #4
 80056e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80056e4:	b28a      	uxth	r2, r1
 80056e6:	fa13 f388 	uxtah	r3, r3, r8
 80056ea:	0c09      	lsrs	r1, r1, #16
 80056ec:	1a9a      	subs	r2, r3, r2
 80056ee:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80056f2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80056f6:	b292      	uxth	r2, r2
 80056f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056fc:	45f4      	cmp	ip, lr
 80056fe:	f844 2b04 	str.w	r2, [r4], #4
 8005702:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005706:	d8e9      	bhi.n	80056dc <__mdiff+0x70>
 8005708:	42af      	cmp	r7, r5
 800570a:	d917      	bls.n	800573c <__mdiff+0xd0>
 800570c:	46a4      	mov	ip, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f851 eb04 	ldr.w	lr, [r1], #4
 8005714:	fa13 f28e 	uxtah	r2, r3, lr
 8005718:	1413      	asrs	r3, r2, #16
 800571a:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800571e:	b292      	uxth	r2, r2
 8005720:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005724:	428f      	cmp	r7, r1
 8005726:	f84c 2b04 	str.w	r2, [ip], #4
 800572a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800572e:	d8ef      	bhi.n	8005710 <__mdiff+0xa4>
 8005730:	43ed      	mvns	r5, r5
 8005732:	443d      	add	r5, r7
 8005734:	f025 0503 	bic.w	r5, r5, #3
 8005738:	3504      	adds	r5, #4
 800573a:	442c      	add	r4, r5
 800573c:	3c04      	subs	r4, #4
 800573e:	b922      	cbnz	r2, 800574a <__mdiff+0xde>
 8005740:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005744:	3e01      	subs	r6, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0fa      	beq.n	8005740 <__mdiff+0xd4>
 800574a:	6106      	str	r6, [r0, #16]
 800574c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005750:	2100      	movs	r1, #0
 8005752:	f7ff fd61 	bl	8005218 <_Balloc>
 8005756:	2201      	movs	r2, #1
 8005758:	2300      	movs	r3, #0
 800575a:	6102      	str	r2, [r0, #16]
 800575c:	6143      	str	r3, [r0, #20]
 800575e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005762:	462c      	mov	r4, r5
 8005764:	f04f 0900 	mov.w	r9, #0
 8005768:	4615      	mov	r5, r2
 800576a:	e7a7      	b.n	80056bc <__mdiff+0x50>
 800576c:	463b      	mov	r3, r7
 800576e:	f107 0414 	add.w	r4, r7, #20
 8005772:	f108 0514 	add.w	r5, r8, #20
 8005776:	4647      	mov	r7, r8
 8005778:	f04f 0901 	mov.w	r9, #1
 800577c:	4698      	mov	r8, r3
 800577e:	e79d      	b.n	80056bc <__mdiff+0x50>

08005780 <__d2b>:
 8005780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005784:	b083      	sub	sp, #12
 8005786:	2101      	movs	r1, #1
 8005788:	461c      	mov	r4, r3
 800578a:	f3c3 550a 	ubfx	r5, r3, #20, #11
 800578e:	4617      	mov	r7, r2
 8005790:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005792:	f7ff fd41 	bl	8005218 <_Balloc>
 8005796:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800579a:	4681      	mov	r9, r0
 800579c:	b10d      	cbz	r5, 80057a2 <__d2b+0x22>
 800579e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80057a2:	9401      	str	r4, [sp, #4]
 80057a4:	b31f      	cbz	r7, 80057ee <__d2b+0x6e>
 80057a6:	a802      	add	r0, sp, #8
 80057a8:	f840 7d08 	str.w	r7, [r0, #-8]!
 80057ac:	f7ff fdc4 	bl	8005338 <__lo0bits>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d135      	bne.n	8005820 <__d2b+0xa0>
 80057b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80057b8:	f8c9 2014 	str.w	r2, [r9, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf0c      	ite	eq
 80057c0:	2101      	moveq	r1, #1
 80057c2:	2102      	movne	r1, #2
 80057c4:	f8c9 3018 	str.w	r3, [r9, #24]
 80057c8:	f8c9 1010 	str.w	r1, [r9, #16]
 80057cc:	b9dd      	cbnz	r5, 8005806 <__d2b+0x86>
 80057ce:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80057d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057d6:	6030      	str	r0, [r6, #0]
 80057d8:	6918      	ldr	r0, [r3, #16]
 80057da:	f7ff fd8d 	bl	80052f8 <__hi0bits>
 80057de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	4648      	mov	r0, r9
 80057e8:	b003      	add	sp, #12
 80057ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057ee:	a801      	add	r0, sp, #4
 80057f0:	f7ff fda2 	bl	8005338 <__lo0bits>
 80057f4:	9b01      	ldr	r3, [sp, #4]
 80057f6:	f8c9 3014 	str.w	r3, [r9, #20]
 80057fa:	2101      	movs	r1, #1
 80057fc:	3020      	adds	r0, #32
 80057fe:	f8c9 1010 	str.w	r1, [r9, #16]
 8005802:	2d00      	cmp	r5, #0
 8005804:	d0e3      	beq.n	80057ce <__d2b+0x4e>
 8005806:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 800580a:	eb08 0300 	add.w	r3, r8, r0
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005812:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005816:	6018      	str	r0, [r3, #0]
 8005818:	4648      	mov	r0, r9
 800581a:	b003      	add	sp, #12
 800581c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005820:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8005824:	f1c0 0120 	rsb	r1, r0, #32
 8005828:	fa03 f101 	lsl.w	r1, r3, r1
 800582c:	430a      	orrs	r2, r1
 800582e:	40c3      	lsrs	r3, r0
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	f8c9 2014 	str.w	r2, [r9, #20]
 8005836:	e7c1      	b.n	80057bc <__d2b+0x3c>

08005838 <_sbrk_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4c07      	ldr	r4, [pc, #28]	; (8005858 <_sbrk_r+0x20>)
 800583c:	2300      	movs	r3, #0
 800583e:	4605      	mov	r5, r0
 8005840:	4608      	mov	r0, r1
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	f7fb fa40 	bl	8000cc8 <_sbrk>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d000      	beq.n	800584e <_sbrk_r+0x16>
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0fb      	beq.n	800584c <_sbrk_r+0x14>
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20000a74 	.word	0x20000a74

0800585c <__sread>:
 800585c:	b510      	push	{r4, lr}
 800585e:	460c      	mov	r4, r1
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f001 ff40 	bl	80076e8 <_read_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	db03      	blt.n	8005874 <__sread+0x18>
 800586c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800586e:	4403      	add	r3, r0
 8005870:	6523      	str	r3, [r4, #80]	; 0x50
 8005872:	bd10      	pop	{r4, pc}
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	bd10      	pop	{r4, pc}
 800587e:	bf00      	nop

08005880 <__swrite>:
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	4616      	mov	r6, r2
 8005886:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800588a:	461f      	mov	r7, r3
 800588c:	05d3      	lsls	r3, r2, #23
 800588e:	460c      	mov	r4, r1
 8005890:	4605      	mov	r5, r0
 8005892:	d507      	bpl.n	80058a4 <__swrite+0x24>
 8005894:	2200      	movs	r2, #0
 8005896:	2302      	movs	r3, #2
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	f001 fe94 	bl	80075c8 <_lseek_r>
 80058a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ac:	81a2      	strh	r2, [r4, #12]
 80058ae:	463b      	mov	r3, r7
 80058b0:	4632      	mov	r2, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b8:	f001 bbd6 	b.w	8007068 <_write_r>

080058bc <__sseek>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	460c      	mov	r4, r1
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	f001 fe80 	bl	80075c8 <_lseek_r>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	1c42      	adds	r2, r0, #1
 80058cc:	bf0e      	itee	eq
 80058ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058d6:	6520      	strne	r0, [r4, #80]	; 0x50
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	bd10      	pop	{r4, pc}

080058dc <__sclose>:
 80058dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e0:	f001 bc08 	b.w	80070f4 <_close_r>
 80058e4:	0000      	movs	r0, r0
	...

080058e8 <_svfprintf_r>:
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	b0c5      	sub	sp, #276	; 0x114
 80058ee:	460c      	mov	r4, r1
 80058f0:	9109      	str	r1, [sp, #36]	; 0x24
 80058f2:	4615      	mov	r5, r2
 80058f4:	930e      	str	r3, [sp, #56]	; 0x38
 80058f6:	900a      	str	r0, [sp, #40]	; 0x28
 80058f8:	f7ff f8fa 	bl	8004af0 <_localeconv_r>
 80058fc:	6803      	ldr	r3, [r0, #0]
 80058fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005900:	4618      	mov	r0, r3
 8005902:	f7fc f9dd 	bl	8001cc0 <strlen>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	9016      	str	r0, [sp, #88]	; 0x58
 800590a:	061e      	lsls	r6, r3, #24
 800590c:	d503      	bpl.n	8005916 <_svfprintf_r+0x2e>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f001 8133 	beq.w	8006b7c <_svfprintf_r+0x1294>
 8005916:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005bb0 <_svfprintf_r+0x2c8>
 800591a:	2300      	movs	r3, #0
 800591c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005920:	9312      	str	r3, [sp, #72]	; 0x48
 8005922:	9329      	str	r3, [sp, #164]	; 0xa4
 8005924:	9328      	str	r3, [sp, #160]	; 0xa0
 8005926:	9319      	str	r3, [sp, #100]	; 0x64
 8005928:	930b      	str	r3, [sp, #44]	; 0x2c
 800592a:	f8df a290 	ldr.w	sl, [pc, #656]	; 8005bbc <_svfprintf_r+0x2d4>
 800592e:	ab34      	add	r3, sp, #208	; 0xd0
 8005930:	9327      	str	r3, [sp, #156]	; 0x9c
 8005932:	4699      	mov	r9, r3
 8005934:	46a8      	mov	r8, r5
 8005936:	f898 3000 	ldrb.w	r3, [r8]
 800593a:	4644      	mov	r4, r8
 800593c:	b1eb      	cbz	r3, 800597a <_svfprintf_r+0x92>
 800593e:	2b25      	cmp	r3, #37	; 0x25
 8005940:	d102      	bne.n	8005948 <_svfprintf_r+0x60>
 8005942:	e01a      	b.n	800597a <_svfprintf_r+0x92>
 8005944:	2b25      	cmp	r3, #37	; 0x25
 8005946:	d003      	beq.n	8005950 <_svfprintf_r+0x68>
 8005948:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f9      	bne.n	8005944 <_svfprintf_r+0x5c>
 8005950:	ebc8 0504 	rsb	r5, r8, r4
 8005954:	b18d      	cbz	r5, 800597a <_svfprintf_r+0x92>
 8005956:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005958:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800595a:	f8c9 8000 	str.w	r8, [r9]
 800595e:	3301      	adds	r3, #1
 8005960:	442a      	add	r2, r5
 8005962:	2b07      	cmp	r3, #7
 8005964:	f8c9 5004 	str.w	r5, [r9, #4]
 8005968:	9229      	str	r2, [sp, #164]	; 0xa4
 800596a:	9328      	str	r3, [sp, #160]	; 0xa0
 800596c:	f300 80a6 	bgt.w	8005abc <_svfprintf_r+0x1d4>
 8005970:	f109 0908 	add.w	r9, r9, #8
 8005974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005976:	442b      	add	r3, r5
 8005978:	930b      	str	r3, [sp, #44]	; 0x2c
 800597a:	7823      	ldrb	r3, [r4, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a6 	beq.w	8005ace <_svfprintf_r+0x1e6>
 8005982:	2300      	movs	r3, #0
 8005984:	461a      	mov	r2, r3
 8005986:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800598a:	4619      	mov	r1, r3
 800598c:	930c      	str	r3, [sp, #48]	; 0x30
 800598e:	9307      	str	r3, [sp, #28]
 8005990:	f04f 3bff 	mov.w	fp, #4294967295
 8005994:	7863      	ldrb	r3, [r4, #1]
 8005996:	f104 0801 	add.w	r8, r4, #1
 800599a:	465d      	mov	r5, fp
 800599c:	f108 0801 	add.w	r8, r8, #1
 80059a0:	f1a3 0020 	sub.w	r0, r3, #32
 80059a4:	2858      	cmp	r0, #88	; 0x58
 80059a6:	f200 8434 	bhi.w	8006212 <_svfprintf_r+0x92a>
 80059aa:	e8df f010 	tbh	[pc, r0, lsl #1]
 80059ae:	03a0      	.short	0x03a0
 80059b0:	04320432 	.word	0x04320432
 80059b4:	043203a8 	.word	0x043203a8
 80059b8:	04320432 	.word	0x04320432
 80059bc:	04320432 	.word	0x04320432
 80059c0:	03af0432 	.word	0x03af0432
 80059c4:	043203bd 	.word	0x043203bd
 80059c8:	00e2005d 	.word	0x00e2005d
 80059cc:	01090432 	.word	0x01090432
 80059d0:	01100110 	.word	0x01100110
 80059d4:	01100110 	.word	0x01100110
 80059d8:	01100110 	.word	0x01100110
 80059dc:	01100110 	.word	0x01100110
 80059e0:	04320110 	.word	0x04320110
 80059e4:	04320432 	.word	0x04320432
 80059e8:	04320432 	.word	0x04320432
 80059ec:	04320432 	.word	0x04320432
 80059f0:	04320432 	.word	0x04320432
 80059f4:	01200432 	.word	0x01200432
 80059f8:	04320286 	.word	0x04320286
 80059fc:	04320286 	.word	0x04320286
 8005a00:	04320432 	.word	0x04320432
 8005a04:	02d40432 	.word	0x02d40432
 8005a08:	04320432 	.word	0x04320432
 8005a0c:	043202e5 	.word	0x043202e5
 8005a10:	04320432 	.word	0x04320432
 8005a14:	04320432 	.word	0x04320432
 8005a18:	0432030f 	.word	0x0432030f
 8005a1c:	033d0432 	.word	0x033d0432
 8005a20:	04320432 	.word	0x04320432
 8005a24:	04320432 	.word	0x04320432
 8005a28:	04320432 	.word	0x04320432
 8005a2c:	04320432 	.word	0x04320432
 8005a30:	04320432 	.word	0x04320432
 8005a34:	0391037e 	.word	0x0391037e
 8005a38:	02860286 	.word	0x02860286
 8005a3c:	03990286 	.word	0x03990286
 8005a40:	04320391 	.word	0x04320391
 8005a44:	04070432 	.word	0x04070432
 8005a48:	04120432 	.word	0x04120432
 8005a4c:	006400a3 	.word	0x006400a3
 8005a50:	043203c2 	.word	0x043203c2
 8005a54:	043203c9 	.word	0x043203c9
 8005a58:	043203ea 	.word	0x043203ea
 8005a5c:	03f20432 	.word	0x03f20432
 8005a60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a62:	930e      	str	r3, [sp, #56]	; 0x38
 8005a64:	4240      	negs	r0, r0
 8005a66:	900c      	str	r0, [sp, #48]	; 0x30
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	f043 0304 	orr.w	r3, r3, #4
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	f898 3000 	ldrb.w	r3, [r8]
 8005a74:	e792      	b.n	800599c <_svfprintf_r+0xb4>
 8005a76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005a78:	46ab      	mov	fp, r5
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	6804      	ldr	r4, [r0, #0]
 8005a7e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005a82:	1d07      	adds	r7, r0, #4
 8005a84:	9807      	ldr	r0, [sp, #28]
 8005a86:	2330      	movs	r3, #48	; 0x30
 8005a88:	2278      	movs	r2, #120	; 0x78
 8005a8a:	458b      	cmp	fp, r1
 8005a8c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8005a90:	f04f 0500 	mov.w	r5, #0
 8005a94:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8005a98:	f040 0302 	orr.w	r3, r0, #2
 8005a9c:	f2c0 83d6 	blt.w	800624c <_svfprintf_r+0x964>
 8005aa0:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8005aa4:	f043 0302 	orr.w	r3, r3, #2
 8005aa8:	9307      	str	r3, [sp, #28]
 8005aaa:	ea54 0305 	orrs.w	r3, r4, r5
 8005aae:	970e      	str	r7, [sp, #56]	; 0x38
 8005ab0:	f000 83a2 	beq.w	80061f8 <_svfprintf_r+0x910>
 8005ab4:	460f      	mov	r7, r1
 8005ab6:	9211      	str	r2, [sp, #68]	; 0x44
 8005ab8:	483f      	ldr	r0, [pc, #252]	; (8005bb8 <_svfprintf_r+0x2d0>)
 8005aba:	e2e6      	b.n	800608a <_svfprintf_r+0x7a2>
 8005abc:	aa27      	add	r2, sp, #156	; 0x9c
 8005abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ac0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ac2:	f002 f817 	bl	8007af4 <__ssprint_r>
 8005ac6:	b948      	cbnz	r0, 8005adc <_svfprintf_r+0x1f4>
 8005ac8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005acc:	e752      	b.n	8005974 <_svfprintf_r+0x8c>
 8005ace:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005ad0:	b123      	cbz	r3, 8005adc <_svfprintf_r+0x1f4>
 8005ad2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad6:	aa27      	add	r2, sp, #156	; 0x9c
 8005ad8:	f002 f80c 	bl	8007af4 <__ssprint_r>
 8005adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ade:	899b      	ldrh	r3, [r3, #12]
 8005ae0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae6:	bf18      	it	ne
 8005ae8:	f04f 33ff 	movne.w	r3, #4294967295
 8005aec:	4618      	mov	r0, r3
 8005aee:	b045      	add	sp, #276	; 0x114
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	9311      	str	r3, [sp, #68]	; 0x44
 8005af6:	46ab      	mov	fp, r5
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	f041 823b 	bne.w	8006f74 <_svfprintf_r+0x168c>
 8005afe:	9a07      	ldr	r2, [sp, #28]
 8005b00:	f012 0320 	ands.w	r3, r2, #32
 8005b04:	f000 8246 	beq.w	8005f94 <_svfprintf_r+0x6ac>
 8005b08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005b0a:	3707      	adds	r7, #7
 8005b0c:	f027 0307 	bic.w	r3, r7, #7
 8005b10:	2700      	movs	r7, #0
 8005b12:	f103 0108 	add.w	r1, r3, #8
 8005b16:	45bb      	cmp	fp, r7
 8005b18:	910e      	str	r1, [sp, #56]	; 0x38
 8005b1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005b1e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005b22:	f2c0 8764 	blt.w	80069ee <_svfprintf_r+0x1106>
 8005b26:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005b2a:	9307      	str	r3, [sp, #28]
 8005b2c:	ea54 0305 	orrs.w	r3, r4, r5
 8005b30:	f000 8384 	beq.w	800623c <_svfprintf_r+0x954>
 8005b34:	ae34      	add	r6, sp, #208	; 0xd0
 8005b36:	08e2      	lsrs	r2, r4, #3
 8005b38:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8005b3c:	08e9      	lsrs	r1, r5, #3
 8005b3e:	f004 0307 	and.w	r3, r4, #7
 8005b42:	460d      	mov	r5, r1
 8005b44:	4614      	mov	r4, r2
 8005b46:	3330      	adds	r3, #48	; 0x30
 8005b48:	ea54 0205 	orrs.w	r2, r4, r5
 8005b4c:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8005b50:	d1f1      	bne.n	8005b36 <_svfprintf_r+0x24e>
 8005b52:	9a07      	ldr	r2, [sp, #28]
 8005b54:	07d1      	lsls	r1, r2, #31
 8005b56:	f140 808f 	bpl.w	8005c78 <_svfprintf_r+0x390>
 8005b5a:	2b30      	cmp	r3, #48	; 0x30
 8005b5c:	f000 808c 	beq.w	8005c78 <_svfprintf_r+0x390>
 8005b60:	2230      	movs	r2, #48	; 0x30
 8005b62:	1e73      	subs	r3, r6, #1
 8005b64:	f806 2c01 	strb.w	r2, [r6, #-1]
 8005b68:	aa34      	add	r2, sp, #208	; 0xd0
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	920d      	str	r2, [sp, #52]	; 0x34
 8005b6e:	461e      	mov	r6, r3
 8005b70:	e085      	b.n	8005c7e <_svfprintf_r+0x396>
 8005b72:	f898 3000 	ldrb.w	r3, [r8]
 8005b76:	2b2a      	cmp	r3, #42	; 0x2a
 8005b78:	f108 0401 	add.w	r4, r8, #1
 8005b7c:	f001 81ec 	beq.w	8006f58 <_svfprintf_r+0x1670>
 8005b80:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005b84:	2809      	cmp	r0, #9
 8005b86:	bf98      	it	ls
 8005b88:	2500      	movls	r5, #0
 8005b8a:	f201 818e 	bhi.w	8006eaa <_svfprintf_r+0x15c2>
 8005b8e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005b96:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005b9a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005b9e:	2809      	cmp	r0, #9
 8005ba0:	d9f5      	bls.n	8005b8e <_svfprintf_r+0x2a6>
 8005ba2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8005ba6:	46a0      	mov	r8, r4
 8005ba8:	e6fa      	b.n	80059a0 <_svfprintf_r+0xb8>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
	...
 8005bb8:	08008998 	.word	0x08008998
 8005bbc:	08008ad4 	.word	0x08008ad4
 8005bc0:	9b07      	ldr	r3, [sp, #28]
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	9307      	str	r3, [sp, #28]
 8005bc8:	f898 3000 	ldrb.w	r3, [r8]
 8005bcc:	e6e6      	b.n	800599c <_svfprintf_r+0xb4>
 8005bce:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	461c      	mov	r4, r3
 8005bd6:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005bda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005bde:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8005be2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005be6:	2809      	cmp	r0, #9
 8005be8:	d9f5      	bls.n	8005bd6 <_svfprintf_r+0x2ee>
 8005bea:	940c      	str	r4, [sp, #48]	; 0x30
 8005bec:	e6d8      	b.n	80059a0 <_svfprintf_r+0xb8>
 8005bee:	9311      	str	r3, [sp, #68]	; 0x44
 8005bf0:	46ab      	mov	fp, r5
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	f041 81cc 	bne.w	8006f90 <_svfprintf_r+0x16a8>
 8005bf8:	9b07      	ldr	r3, [sp, #28]
 8005bfa:	f043 0310 	orr.w	r3, r3, #16
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	9b07      	ldr	r3, [sp, #28]
 8005c02:	069c      	lsls	r4, r3, #26
 8005c04:	f140 8537 	bpl.w	8006676 <_svfprintf_r+0xd8e>
 8005c08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005c0a:	3707      	adds	r7, #7
 8005c0c:	f027 0707 	bic.w	r7, r7, #7
 8005c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c14:	f107 0108 	add.w	r1, r7, #8
 8005c18:	910e      	str	r1, [sp, #56]	; 0x38
 8005c1a:	4614      	mov	r4, r2
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	f173 0300 	sbcs.w	r3, r3, #0
 8005c24:	f2c0 8562 	blt.w	80066ec <_svfprintf_r+0xe04>
 8005c28:	f1bb 0f00 	cmp.w	fp, #0
 8005c2c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005c30:	f2c0 853f 	blt.w	80066b2 <_svfprintf_r+0xdca>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c3a:	9307      	str	r3, [sp, #28]
 8005c3c:	ea54 0305 	orrs.w	r3, r4, r5
 8005c40:	f000 81e8 	beq.w	8006014 <_svfprintf_r+0x72c>
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	bf08      	it	eq
 8005c48:	2c0a      	cmpeq	r4, #10
 8005c4a:	f0c0 81e8 	bcc.w	800601e <_svfprintf_r+0x736>
 8005c4e:	ae34      	add	r6, sp, #208	; 0xd0
 8005c50:	4620      	mov	r0, r4
 8005c52:	4629      	mov	r1, r5
 8005c54:	220a      	movs	r2, #10
 8005c56:	2300      	movs	r3, #0
 8005c58:	f002 fcea 	bl	8008630 <__aeabi_uldivmod>
 8005c5c:	3230      	adds	r2, #48	; 0x30
 8005c5e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	2300      	movs	r3, #0
 8005c68:	220a      	movs	r2, #10
 8005c6a:	f002 fce1 	bl	8008630 <__aeabi_uldivmod>
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	ea54 0305 	orrs.w	r3, r4, r5
 8005c76:	d1eb      	bne.n	8005c50 <_svfprintf_r+0x368>
 8005c78:	ab34      	add	r3, sp, #208	; 0xd0
 8005c7a:	1b9b      	subs	r3, r3, r6
 8005c7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c80:	455b      	cmp	r3, fp
 8005c82:	bfb8      	it	lt
 8005c84:	465b      	movlt	r3, fp
 8005c86:	9308      	str	r3, [sp, #32]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c8c:	b117      	cbz	r7, 8005c94 <_svfprintf_r+0x3ac>
 8005c8e:	9b08      	ldr	r3, [sp, #32]
 8005c90:	3301      	adds	r3, #1
 8005c92:	9308      	str	r3, [sp, #32]
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	f013 0302 	ands.w	r3, r3, #2
 8005c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c9c:	d002      	beq.n	8005ca4 <_svfprintf_r+0x3bc>
 8005c9e:	9b08      	ldr	r3, [sp, #32]
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	9308      	str	r3, [sp, #32]
 8005ca4:	9b07      	ldr	r3, [sp, #28]
 8005ca6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8005caa:	9310      	str	r3, [sp, #64]	; 0x40
 8005cac:	f040 82db 	bne.w	8006266 <_svfprintf_r+0x97e>
 8005cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cb2:	9a08      	ldr	r2, [sp, #32]
 8005cb4:	1a9d      	subs	r5, r3, r2
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	f340 82d5 	ble.w	8006266 <_svfprintf_r+0x97e>
 8005cbc:	2d10      	cmp	r5, #16
 8005cbe:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005cc0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005cc2:	4fa8      	ldr	r7, [pc, #672]	; (8005f64 <_svfprintf_r+0x67c>)
 8005cc4:	dd27      	ble.n	8005d16 <_svfprintf_r+0x42e>
 8005cc6:	9618      	str	r6, [sp, #96]	; 0x60
 8005cc8:	4648      	mov	r0, r9
 8005cca:	2410      	movs	r4, #16
 8005ccc:	46b9      	mov	r9, r7
 8005cce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005cd0:	462f      	mov	r7, r5
 8005cd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005cd4:	e004      	b.n	8005ce0 <_svfprintf_r+0x3f8>
 8005cd6:	3f10      	subs	r7, #16
 8005cd8:	2f10      	cmp	r7, #16
 8005cda:	f100 0008 	add.w	r0, r0, #8
 8005cde:	dd16      	ble.n	8005d0e <_svfprintf_r+0x426>
 8005ce0:	3201      	adds	r2, #1
 8005ce2:	4ba0      	ldr	r3, [pc, #640]	; (8005f64 <_svfprintf_r+0x67c>)
 8005ce4:	9228      	str	r2, [sp, #160]	; 0xa0
 8005ce6:	3110      	adds	r1, #16
 8005ce8:	2a07      	cmp	r2, #7
 8005cea:	9129      	str	r1, [sp, #164]	; 0xa4
 8005cec:	e880 0018 	stmia.w	r0, {r3, r4}
 8005cf0:	ddf1      	ble.n	8005cd6 <_svfprintf_r+0x3ee>
 8005cf2:	aa27      	add	r2, sp, #156	; 0x9c
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f001 fefc 	bl	8007af4 <__ssprint_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f47f aeed 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8005d02:	3f10      	subs	r7, #16
 8005d04:	2f10      	cmp	r7, #16
 8005d06:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005d08:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005d0a:	a834      	add	r0, sp, #208	; 0xd0
 8005d0c:	dce8      	bgt.n	8005ce0 <_svfprintf_r+0x3f8>
 8005d0e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8005d10:	463d      	mov	r5, r7
 8005d12:	464f      	mov	r7, r9
 8005d14:	4681      	mov	r9, r0
 8005d16:	3201      	adds	r2, #1
 8005d18:	186c      	adds	r4, r5, r1
 8005d1a:	2a07      	cmp	r2, #7
 8005d1c:	9429      	str	r4, [sp, #164]	; 0xa4
 8005d1e:	9228      	str	r2, [sp, #160]	; 0xa0
 8005d20:	f8c9 7000 	str.w	r7, [r9]
 8005d24:	f8c9 5004 	str.w	r5, [r9, #4]
 8005d28:	f300 842d 	bgt.w	8006586 <_svfprintf_r+0xc9e>
 8005d2c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005d30:	f109 0908 	add.w	r9, r9, #8
 8005d34:	b177      	cbz	r7, 8005d54 <_svfprintf_r+0x46c>
 8005d36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d38:	3301      	adds	r3, #1
 8005d3a:	3401      	adds	r4, #1
 8005d3c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8005d40:	2201      	movs	r2, #1
 8005d42:	2b07      	cmp	r3, #7
 8005d44:	9429      	str	r4, [sp, #164]	; 0xa4
 8005d46:	9328      	str	r3, [sp, #160]	; 0xa0
 8005d48:	e889 0006 	stmia.w	r9, {r1, r2}
 8005d4c:	f300 83a5 	bgt.w	800649a <_svfprintf_r+0xbb2>
 8005d50:	f109 0908 	add.w	r9, r9, #8
 8005d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d56:	b16b      	cbz	r3, 8005d74 <_svfprintf_r+0x48c>
 8005d58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	3402      	adds	r4, #2
 8005d5e:	a920      	add	r1, sp, #128	; 0x80
 8005d60:	2202      	movs	r2, #2
 8005d62:	2b07      	cmp	r3, #7
 8005d64:	9429      	str	r4, [sp, #164]	; 0xa4
 8005d66:	9328      	str	r3, [sp, #160]	; 0xa0
 8005d68:	e889 0006 	stmia.w	r9, {r1, r2}
 8005d6c:	f300 83a1 	bgt.w	80064b2 <_svfprintf_r+0xbca>
 8005d70:	f109 0908 	add.w	r9, r9, #8
 8005d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	f000 82e1 	beq.w	800633e <_svfprintf_r+0xa56>
 8005d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d7e:	ebc3 070b 	rsb	r7, r3, fp
 8005d82:	2f00      	cmp	r7, #0
 8005d84:	dd33      	ble.n	8005dee <_svfprintf_r+0x506>
 8005d86:	4a78      	ldr	r2, [pc, #480]	; (8005f68 <_svfprintf_r+0x680>)
 8005d88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d8a:	920f      	str	r2, [sp, #60]	; 0x3c
 8005d8c:	2f10      	cmp	r7, #16
 8005d8e:	dd22      	ble.n	8005dd6 <_svfprintf_r+0x4ee>
 8005d90:	4622      	mov	r2, r4
 8005d92:	f04f 0b10 	mov.w	fp, #16
 8005d96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005d98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005d9a:	e004      	b.n	8005da6 <_svfprintf_r+0x4be>
 8005d9c:	3f10      	subs	r7, #16
 8005d9e:	2f10      	cmp	r7, #16
 8005da0:	f109 0908 	add.w	r9, r9, #8
 8005da4:	dd16      	ble.n	8005dd4 <_svfprintf_r+0x4ec>
 8005da6:	3301      	adds	r3, #1
 8005da8:	3210      	adds	r2, #16
 8005daa:	2b07      	cmp	r3, #7
 8005dac:	9229      	str	r2, [sp, #164]	; 0xa4
 8005dae:	9328      	str	r3, [sp, #160]	; 0xa0
 8005db0:	e889 0c00 	stmia.w	r9, {sl, fp}
 8005db4:	ddf2      	ble.n	8005d9c <_svfprintf_r+0x4b4>
 8005db6:	aa27      	add	r2, sp, #156	; 0x9c
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f001 fe9a 	bl	8007af4 <__ssprint_r>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	f47f ae8b 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8005dc6:	3f10      	subs	r7, #16
 8005dc8:	2f10      	cmp	r7, #16
 8005dca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005dce:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005dd2:	dce8      	bgt.n	8005da6 <_svfprintf_r+0x4be>
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dda:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ddc:	443c      	add	r4, r7
 8005dde:	2b07      	cmp	r3, #7
 8005de0:	9429      	str	r4, [sp, #164]	; 0xa4
 8005de2:	e889 0084 	stmia.w	r9, {r2, r7}
 8005de6:	f300 834c 	bgt.w	8006482 <_svfprintf_r+0xb9a>
 8005dea:	f109 0908 	add.w	r9, r9, #8
 8005dee:	9b07      	ldr	r3, [sp, #28]
 8005df0:	05da      	lsls	r2, r3, #23
 8005df2:	f100 823a 	bmi.w	800626a <_svfprintf_r+0x982>
 8005df6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005df8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005dfa:	f8c9 6000 	str.w	r6, [r9]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	440c      	add	r4, r1
 8005e02:	2b07      	cmp	r3, #7
 8005e04:	9429      	str	r4, [sp, #164]	; 0xa4
 8005e06:	f8c9 1004 	str.w	r1, [r9, #4]
 8005e0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8005e0c:	f300 8323 	bgt.w	8006456 <_svfprintf_r+0xb6e>
 8005e10:	f109 0908 	add.w	r9, r9, #8
 8005e14:	9b07      	ldr	r3, [sp, #28]
 8005e16:	0759      	lsls	r1, r3, #29
 8005e18:	d53f      	bpl.n	8005e9a <_svfprintf_r+0x5b2>
 8005e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e1c:	9a08      	ldr	r2, [sp, #32]
 8005e1e:	1a9d      	subs	r5, r3, r2
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	dd3a      	ble.n	8005e9a <_svfprintf_r+0x5b2>
 8005e24:	2d10      	cmp	r5, #16
 8005e26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005e28:	4f4e      	ldr	r7, [pc, #312]	; (8005f64 <_svfprintf_r+0x67c>)
 8005e2a:	dd23      	ble.n	8005e74 <_svfprintf_r+0x58c>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	2610      	movs	r6, #16
 8005e30:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005e34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005e36:	e004      	b.n	8005e42 <_svfprintf_r+0x55a>
 8005e38:	3d10      	subs	r5, #16
 8005e3a:	2d10      	cmp	r5, #16
 8005e3c:	f109 0908 	add.w	r9, r9, #8
 8005e40:	dd17      	ble.n	8005e72 <_svfprintf_r+0x58a>
 8005e42:	3301      	adds	r3, #1
 8005e44:	4947      	ldr	r1, [pc, #284]	; (8005f64 <_svfprintf_r+0x67c>)
 8005e46:	9328      	str	r3, [sp, #160]	; 0xa0
 8005e48:	3210      	adds	r2, #16
 8005e4a:	2b07      	cmp	r3, #7
 8005e4c:	9229      	str	r2, [sp, #164]	; 0xa4
 8005e4e:	e889 0042 	stmia.w	r9, {r1, r6}
 8005e52:	ddf1      	ble.n	8005e38 <_svfprintf_r+0x550>
 8005e54:	aa27      	add	r2, sp, #156	; 0x9c
 8005e56:	4621      	mov	r1, r4
 8005e58:	4658      	mov	r0, fp
 8005e5a:	f001 fe4b 	bl	8007af4 <__ssprint_r>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f47f ae3c 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8005e64:	3d10      	subs	r5, #16
 8005e66:	2d10      	cmp	r5, #16
 8005e68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005e6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005e6c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005e70:	dce7      	bgt.n	8005e42 <_svfprintf_r+0x55a>
 8005e72:	4614      	mov	r4, r2
 8005e74:	3301      	adds	r3, #1
 8005e76:	442c      	add	r4, r5
 8005e78:	2b07      	cmp	r3, #7
 8005e7a:	9429      	str	r4, [sp, #164]	; 0xa4
 8005e7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8005e7e:	f8c9 7000 	str.w	r7, [r9]
 8005e82:	f8c9 5004 	str.w	r5, [r9, #4]
 8005e86:	dd08      	ble.n	8005e9a <_svfprintf_r+0x5b2>
 8005e88:	aa27      	add	r2, sp, #156	; 0x9c
 8005e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e8e:	f001 fe31 	bl	8007af4 <__ssprint_r>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f47f ae22 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8005e98:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e9e:	9908      	ldr	r1, [sp, #32]
 8005ea0:	428a      	cmp	r2, r1
 8005ea2:	bfac      	ite	ge
 8005ea4:	189b      	addge	r3, r3, r2
 8005ea6:	185b      	addlt	r3, r3, r1
 8005ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eaa:	2c00      	cmp	r4, #0
 8005eac:	f040 82df 	bne.w	800646e <_svfprintf_r+0xb86>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9328      	str	r3, [sp, #160]	; 0xa0
 8005eb4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005eb8:	e53d      	b.n	8005936 <_svfprintf_r+0x4e>
 8005eba:	9311      	str	r3, [sp, #68]	; 0x44
 8005ebc:	46ab      	mov	fp, r5
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	f041 806a 	bne.w	8006f98 <_svfprintf_r+0x16b0>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005ec8:	071a      	lsls	r2, r3, #28
 8005eca:	f107 0707 	add.w	r7, r7, #7
 8005ece:	f140 8576 	bpl.w	80069be <_svfprintf_r+0x10d6>
 8005ed2:	f027 0307 	bic.w	r3, r7, #7
 8005ed6:	ed93 7b00 	vldr	d7, [r3]
 8005eda:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005ede:	f103 0208 	add.w	r2, r3, #8
 8005ee2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ee4:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005ee8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005eec:	911a      	str	r1, [sp, #104]	; 0x68
 8005eee:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ef0:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4629      	mov	r1, r5
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <_svfprintf_r+0x684>)
 8005efe:	f002 fb59 	bl	80085b4 <__aeabi_dcmpun>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 84da 	bne.w	80068bc <_svfprintf_r+0xfd4>
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <_svfprintf_r+0x684>)
 8005f0e:	4620      	mov	r0, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	f002 fb31 	bl	8008578 <__aeabi_dcmple>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 84d0 	bne.w	80068bc <_svfprintf_r+0xfd4>
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005f24:	f002 fb1e 	bl	8008564 <__aeabi_dcmplt>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f040 875a 	bne.w	8006de2 <_svfprintf_r+0x14fa>
 8005f2e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005f32:	4e0f      	ldr	r6, [pc, #60]	; (8005f70 <_svfprintf_r+0x688>)
 8005f34:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <_svfprintf_r+0x68c>)
 8005f36:	9907      	ldr	r1, [sp, #28]
 8005f38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f3c:	9107      	str	r1, [sp, #28]
 8005f3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f40:	2203      	movs	r2, #3
 8005f42:	f04f 0b00 	mov.w	fp, #0
 8005f46:	9208      	str	r2, [sp, #32]
 8005f48:	2947      	cmp	r1, #71	; 0x47
 8005f4a:	bfd8      	it	le
 8005f4c:	461e      	movle	r6, r3
 8005f4e:	920d      	str	r2, [sp, #52]	; 0x34
 8005f50:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8005f54:	e69a      	b.n	8005c8c <_svfprintf_r+0x3a4>
 8005f56:	9b07      	ldr	r3, [sp, #28]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	9307      	str	r3, [sp, #28]
 8005f5e:	f898 3000 	ldrb.w	r3, [r8]
 8005f62:	e51b      	b.n	800599c <_svfprintf_r+0xb4>
 8005f64:	08008ae4 	.word	0x08008ae4
 8005f68:	08008ad4 	.word	0x08008ad4
 8005f6c:	7fefffff 	.word	0x7fefffff
 8005f70:	08008978 	.word	0x08008978
 8005f74:	08008974 	.word	0x08008974
 8005f78:	9311      	str	r3, [sp, #68]	; 0x44
 8005f7a:	46ab      	mov	fp, r5
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	f041 8017 	bne.w	8006fb0 <_svfprintf_r+0x16c8>
 8005f82:	9b07      	ldr	r3, [sp, #28]
 8005f84:	f043 0310 	orr.w	r3, r3, #16
 8005f88:	9307      	str	r3, [sp, #28]
 8005f8a:	9a07      	ldr	r2, [sp, #28]
 8005f8c:	f012 0320 	ands.w	r3, r2, #32
 8005f90:	f47f adba 	bne.w	8005b08 <_svfprintf_r+0x220>
 8005f94:	9907      	ldr	r1, [sp, #28]
 8005f96:	f011 0210 	ands.w	r2, r1, #16
 8005f9a:	f000 845b 	beq.w	8006854 <_svfprintf_r+0xf6c>
 8005f9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005fa0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005fa4:	f1bb 0f00 	cmp.w	fp, #0
 8005fa8:	6804      	ldr	r4, [r0, #0]
 8005faa:	f100 0704 	add.w	r7, r0, #4
 8005fae:	f04f 0500 	mov.w	r5, #0
 8005fb2:	f2c0 851b 	blt.w	80069ec <_svfprintf_r+0x1104>
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fbc:	9207      	str	r2, [sp, #28]
 8005fbe:	ea54 0205 	orrs.w	r2, r4, r5
 8005fc2:	970e      	str	r7, [sp, #56]	; 0x38
 8005fc4:	f000 813a 	beq.w	800623c <_svfprintf_r+0x954>
 8005fc8:	461f      	mov	r7, r3
 8005fca:	e5b3      	b.n	8005b34 <_svfprintf_r+0x24c>
 8005fcc:	9311      	str	r3, [sp, #68]	; 0x44
 8005fce:	46ab      	mov	fp, r5
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	f040 87e9 	bne.w	8006fa8 <_svfprintf_r+0x16c0>
 8005fd6:	9b07      	ldr	r3, [sp, #28]
 8005fd8:	f043 0310 	orr.w	r3, r3, #16
 8005fdc:	9307      	str	r3, [sp, #28]
 8005fde:	9a07      	ldr	r2, [sp, #28]
 8005fe0:	f012 0320 	ands.w	r3, r2, #32
 8005fe4:	f000 832c 	beq.w	8006640 <_svfprintf_r+0xd58>
 8005fe8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005fea:	3707      	adds	r7, #7
 8005fec:	f027 0307 	bic.w	r3, r7, #7
 8005ff0:	2700      	movs	r7, #0
 8005ff2:	f103 0108 	add.w	r1, r3, #8
 8005ff6:	45bb      	cmp	fp, r7
 8005ff8:	910e      	str	r1, [sp, #56]	; 0x38
 8005ffa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ffe:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006002:	f2c0 8356 	blt.w	80066b2 <_svfprintf_r+0xdca>
 8006006:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	ea54 0305 	orrs.w	r3, r4, r5
 8006010:	f47f ae18 	bne.w	8005c44 <_svfprintf_r+0x35c>
 8006014:	f1bb 0f00 	cmp.w	fp, #0
 8006018:	f000 80f5 	beq.w	8006206 <_svfprintf_r+0x91e>
 800601c:	2400      	movs	r4, #0
 800601e:	ae44      	add	r6, sp, #272	; 0x110
 8006020:	3430      	adds	r4, #48	; 0x30
 8006022:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006026:	e627      	b.n	8005c78 <_svfprintf_r+0x390>
 8006028:	9311      	str	r3, [sp, #68]	; 0x44
 800602a:	46ab      	mov	fp, r5
 800602c:	2a00      	cmp	r2, #0
 800602e:	f040 87b7 	bne.w	8006fa0 <_svfprintf_r+0x16b8>
 8006032:	9b07      	ldr	r3, [sp, #28]
 8006034:	48af      	ldr	r0, [pc, #700]	; (80062f4 <_svfprintf_r+0xa0c>)
 8006036:	069d      	lsls	r5, r3, #26
 8006038:	f140 80b5 	bpl.w	80061a6 <_svfprintf_r+0x8be>
 800603c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800603e:	3707      	adds	r7, #7
 8006040:	f027 0307 	bic.w	r3, r7, #7
 8006044:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006048:	f103 0208 	add.w	r2, r3, #8
 800604c:	920e      	str	r2, [sp, #56]	; 0x38
 800604e:	9a07      	ldr	r2, [sp, #28]
 8006050:	f012 0701 	ands.w	r7, r2, #1
 8006054:	f000 8239 	beq.w	80064ca <_svfprintf_r+0xbe2>
 8006058:	ea54 0305 	orrs.w	r3, r4, r5
 800605c:	f000 8504 	beq.w	8006a68 <_svfprintf_r+0x1180>
 8006060:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006064:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8006068:	2700      	movs	r7, #0
 800606a:	9a07      	ldr	r2, [sp, #28]
 800606c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006070:	2330      	movs	r3, #48	; 0x30
 8006072:	45bb      	cmp	fp, r7
 8006074:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006078:	f042 0302 	orr.w	r3, r2, #2
 800607c:	f2c0 86b6 	blt.w	8006dec <_svfprintf_r+0x1504>
 8006080:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006084:	f043 0302 	orr.w	r3, r3, #2
 8006088:	9307      	str	r3, [sp, #28]
 800608a:	ae34      	add	r6, sp, #208	; 0xd0
 800608c:	0923      	lsrs	r3, r4, #4
 800608e:	f004 010f 	and.w	r1, r4, #15
 8006092:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006096:	092a      	lsrs	r2, r5, #4
 8006098:	461c      	mov	r4, r3
 800609a:	4615      	mov	r5, r2
 800609c:	5c43      	ldrb	r3, [r0, r1]
 800609e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80060a2:	ea54 0305 	orrs.w	r3, r4, r5
 80060a6:	d1f1      	bne.n	800608c <_svfprintf_r+0x7a4>
 80060a8:	e5e6      	b.n	8005c78 <_svfprintf_r+0x390>
 80060aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80060ac:	9311      	str	r3, [sp, #68]	; 0x44
 80060ae:	680a      	ldr	r2, [r1, #0]
 80060b0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80060b4:	2300      	movs	r3, #0
 80060b6:	460a      	mov	r2, r1
 80060b8:	461f      	mov	r7, r3
 80060ba:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80060be:	3204      	adds	r2, #4
 80060c0:	2301      	movs	r3, #1
 80060c2:	9308      	str	r3, [sp, #32]
 80060c4:	46bb      	mov	fp, r7
 80060c6:	9713      	str	r7, [sp, #76]	; 0x4c
 80060c8:	920e      	str	r2, [sp, #56]	; 0x38
 80060ca:	930d      	str	r3, [sp, #52]	; 0x34
 80060cc:	ae2a      	add	r6, sp, #168	; 0xa8
 80060ce:	e5e1      	b.n	8005c94 <_svfprintf_r+0x3ac>
 80060d0:	9311      	str	r3, [sp, #68]	; 0x44
 80060d2:	46ab      	mov	fp, r5
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	f43f ad93 	beq.w	8005c00 <_svfprintf_r+0x318>
 80060da:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80060de:	e58f      	b.n	8005c00 <_svfprintf_r+0x318>
 80060e0:	9b07      	ldr	r3, [sp, #28]
 80060e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e6:	9307      	str	r3, [sp, #28]
 80060e8:	f898 3000 	ldrb.w	r3, [r8]
 80060ec:	e456      	b.n	800599c <_svfprintf_r+0xb4>
 80060ee:	f898 3000 	ldrb.w	r3, [r8]
 80060f2:	2900      	cmp	r1, #0
 80060f4:	f47f ac52 	bne.w	800599c <_svfprintf_r+0xb4>
 80060f8:	2201      	movs	r2, #1
 80060fa:	2120      	movs	r1, #32
 80060fc:	e44e      	b.n	800599c <_svfprintf_r+0xb4>
 80060fe:	9b07      	ldr	r3, [sp, #28]
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	f898 3000 	ldrb.w	r3, [r8]
 800610a:	e447      	b.n	800599c <_svfprintf_r+0xb4>
 800610c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	930c      	str	r3, [sp, #48]	; 0x30
 8006112:	4618      	mov	r0, r3
 8006114:	2800      	cmp	r0, #0
 8006116:	4623      	mov	r3, r4
 8006118:	f103 0304 	add.w	r3, r3, #4
 800611c:	f6ff aca0 	blt.w	8005a60 <_svfprintf_r+0x178>
 8006120:	930e      	str	r3, [sp, #56]	; 0x38
 8006122:	f898 3000 	ldrb.w	r3, [r8]
 8006126:	e439      	b.n	800599c <_svfprintf_r+0xb4>
 8006128:	f898 3000 	ldrb.w	r3, [r8]
 800612c:	2201      	movs	r2, #1
 800612e:	212b      	movs	r1, #43	; 0x2b
 8006130:	e434      	b.n	800599c <_svfprintf_r+0xb4>
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	9307      	str	r3, [sp, #28]
 800613a:	f898 3000 	ldrb.w	r3, [r8]
 800613e:	e42d      	b.n	800599c <_svfprintf_r+0xb4>
 8006140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006142:	9311      	str	r3, [sp, #68]	; 0x44
 8006144:	6816      	ldr	r6, [r2, #0]
 8006146:	2400      	movs	r4, #0
 8006148:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800614c:	1d17      	adds	r7, r2, #4
 800614e:	2e00      	cmp	r6, #0
 8006150:	f000 8621 	beq.w	8006d96 <_svfprintf_r+0x14ae>
 8006154:	2d00      	cmp	r5, #0
 8006156:	f2c0 8566 	blt.w	8006c26 <_svfprintf_r+0x133e>
 800615a:	462a      	mov	r2, r5
 800615c:	4621      	mov	r1, r4
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff f806 	bl	8005170 <memchr>
 8006164:	2800      	cmp	r0, #0
 8006166:	f000 866b 	beq.w	8006e40 <_svfprintf_r+0x1558>
 800616a:	1b83      	subs	r3, r0, r6
 800616c:	930d      	str	r3, [sp, #52]	; 0x34
 800616e:	46a3      	mov	fp, r4
 8006170:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006174:	970e      	str	r7, [sp, #56]	; 0x38
 8006176:	9308      	str	r3, [sp, #32]
 8006178:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800617c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006180:	e584      	b.n	8005c8c <_svfprintf_r+0x3a4>
 8006182:	9311      	str	r3, [sp, #68]	; 0x44
 8006184:	46ab      	mov	fp, r5
 8006186:	2a00      	cmp	r2, #0
 8006188:	f43f af29 	beq.w	8005fde <_svfprintf_r+0x6f6>
 800618c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006190:	e725      	b.n	8005fde <_svfprintf_r+0x6f6>
 8006192:	9311      	str	r3, [sp, #68]	; 0x44
 8006194:	46ab      	mov	fp, r5
 8006196:	2a00      	cmp	r2, #0
 8006198:	f040 8716 	bne.w	8006fc8 <_svfprintf_r+0x16e0>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	4856      	ldr	r0, [pc, #344]	; (80062f8 <_svfprintf_r+0xa10>)
 80061a0:	069d      	lsls	r5, r3, #26
 80061a2:	f53f af4b 	bmi.w	800603c <_svfprintf_r+0x754>
 80061a6:	9b07      	ldr	r3, [sp, #28]
 80061a8:	06dc      	lsls	r4, r3, #27
 80061aa:	f140 8440 	bpl.w	8006a2e <_svfprintf_r+0x1146>
 80061ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b0:	4613      	mov	r3, r2
 80061b2:	3304      	adds	r3, #4
 80061b4:	6814      	ldr	r4, [r2, #0]
 80061b6:	930e      	str	r3, [sp, #56]	; 0x38
 80061b8:	2500      	movs	r5, #0
 80061ba:	e748      	b.n	800604e <_svfprintf_r+0x766>
 80061bc:	f898 3000 	ldrb.w	r3, [r8]
 80061c0:	2b6c      	cmp	r3, #108	; 0x6c
 80061c2:	f000 84c4 	beq.w	8006b4e <_svfprintf_r+0x1266>
 80061c6:	9807      	ldr	r0, [sp, #28]
 80061c8:	f040 0010 	orr.w	r0, r0, #16
 80061cc:	9007      	str	r0, [sp, #28]
 80061ce:	f7ff bbe5 	b.w	800599c <_svfprintf_r+0xb4>
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	f040 86f4 	bne.w	8006fc0 <_svfprintf_r+0x16d8>
 80061d8:	9b07      	ldr	r3, [sp, #28]
 80061da:	069b      	lsls	r3, r3, #26
 80061dc:	f140 8357 	bpl.w	800688e <_svfprintf_r+0xfa6>
 80061e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061e4:	6813      	ldr	r3, [r2, #0]
 80061e6:	17cd      	asrs	r5, r1, #31
 80061e8:	4608      	mov	r0, r1
 80061ea:	3204      	adds	r2, #4
 80061ec:	4629      	mov	r1, r5
 80061ee:	920e      	str	r2, [sp, #56]	; 0x38
 80061f0:	e9c3 0100 	strd	r0, r1, [r3]
 80061f4:	f7ff bb9f 	b.w	8005936 <_svfprintf_r+0x4e>
 80061f8:	483f      	ldr	r0, [pc, #252]	; (80062f8 <_svfprintf_r+0xa10>)
 80061fa:	9211      	str	r2, [sp, #68]	; 0x44
 80061fc:	f1bb 0f00 	cmp.w	fp, #0
 8006200:	f040 8174 	bne.w	80064ec <_svfprintf_r+0xc04>
 8006204:	465f      	mov	r7, fp
 8006206:	f04f 0b00 	mov.w	fp, #0
 800620a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800620e:	ae34      	add	r6, sp, #208	; 0xd0
 8006210:	e535      	b.n	8005c7e <_svfprintf_r+0x396>
 8006212:	9311      	str	r3, [sp, #68]	; 0x44
 8006214:	2a00      	cmp	r2, #0
 8006216:	f040 86cf 	bne.w	8006fb8 <_svfprintf_r+0x16d0>
 800621a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800621c:	2a00      	cmp	r2, #0
 800621e:	f43f ac56 	beq.w	8005ace <_svfprintf_r+0x1e6>
 8006222:	2300      	movs	r3, #0
 8006224:	2101      	movs	r1, #1
 8006226:	461f      	mov	r7, r3
 8006228:	9108      	str	r1, [sp, #32]
 800622a:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800622e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006232:	469b      	mov	fp, r3
 8006234:	9313      	str	r3, [sp, #76]	; 0x4c
 8006236:	910d      	str	r1, [sp, #52]	; 0x34
 8006238:	ae2a      	add	r6, sp, #168	; 0xa8
 800623a:	e52b      	b.n	8005c94 <_svfprintf_r+0x3ac>
 800623c:	f1bb 0f00 	cmp.w	fp, #0
 8006240:	f000 8616 	beq.w	8006e70 <_svfprintf_r+0x1588>
 8006244:	2700      	movs	r7, #0
 8006246:	2400      	movs	r4, #0
 8006248:	2500      	movs	r5, #0
 800624a:	e473      	b.n	8005b34 <_svfprintf_r+0x24c>
 800624c:	482a      	ldr	r0, [pc, #168]	; (80062f8 <_svfprintf_r+0xa10>)
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	9211      	str	r2, [sp, #68]	; 0x44
 8006252:	ea54 0305 	orrs.w	r3, r4, r5
 8006256:	970e      	str	r7, [sp, #56]	; 0x38
 8006258:	f04f 0700 	mov.w	r7, #0
 800625c:	f47f af15 	bne.w	800608a <_svfprintf_r+0x7a2>
 8006260:	2400      	movs	r4, #0
 8006262:	2500      	movs	r5, #0
 8006264:	e711      	b.n	800608a <_svfprintf_r+0x7a2>
 8006266:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006268:	e564      	b.n	8005d34 <_svfprintf_r+0x44c>
 800626a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800626c:	2b65      	cmp	r3, #101	; 0x65
 800626e:	f340 80aa 	ble.w	80063c6 <_svfprintf_r+0xade>
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800627a:	f002 f969 	bl	8008550 <__aeabi_dcmpeq>
 800627e:	2800      	cmp	r0, #0
 8006280:	f000 8136 	beq.w	80064f0 <_svfprintf_r+0xc08>
 8006284:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006286:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <_svfprintf_r+0xa14>)
 8006288:	f8c9 2000 	str.w	r2, [r9]
 800628c:	3301      	adds	r3, #1
 800628e:	3401      	adds	r4, #1
 8006290:	2201      	movs	r2, #1
 8006292:	2b07      	cmp	r3, #7
 8006294:	9429      	str	r4, [sp, #164]	; 0xa4
 8006296:	9328      	str	r3, [sp, #160]	; 0xa0
 8006298:	f8c9 2004 	str.w	r2, [r9, #4]
 800629c:	f300 83f0 	bgt.w	8006a80 <_svfprintf_r+0x1198>
 80062a0:	f109 0908 	add.w	r9, r9, #8
 80062a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062a8:	4293      	cmp	r3, r2
 80062aa:	db03      	blt.n	80062b4 <_svfprintf_r+0x9cc>
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	07db      	lsls	r3, r3, #31
 80062b0:	f57f adb0 	bpl.w	8005e14 <_svfprintf_r+0x52c>
 80062b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80062b6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80062b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062ba:	f8c9 2000 	str.w	r2, [r9]
 80062be:	3301      	adds	r3, #1
 80062c0:	440c      	add	r4, r1
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	9429      	str	r4, [sp, #164]	; 0xa4
 80062c6:	f8c9 1004 	str.w	r1, [r9, #4]
 80062ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80062cc:	f300 8449 	bgt.w	8006b62 <_svfprintf_r+0x127a>
 80062d0:	f109 0908 	add.w	r9, r9, #8
 80062d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062d6:	1e5d      	subs	r5, r3, #1
 80062d8:	2d00      	cmp	r5, #0
 80062da:	f77f ad9b 	ble.w	8005e14 <_svfprintf_r+0x52c>
 80062de:	4a08      	ldr	r2, [pc, #32]	; (8006300 <_svfprintf_r+0xa18>)
 80062e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80062e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80062e4:	2d10      	cmp	r5, #16
 80062e6:	f340 81e9 	ble.w	80066bc <_svfprintf_r+0xdd4>
 80062ea:	2610      	movs	r6, #16
 80062ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80062ee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80062f2:	e00d      	b.n	8006310 <_svfprintf_r+0xa28>
 80062f4:	08008984 	.word	0x08008984
 80062f8:	08008998 	.word	0x08008998
 80062fc:	080089b4 	.word	0x080089b4
 8006300:	08008ad4 	.word	0x08008ad4
 8006304:	f109 0908 	add.w	r9, r9, #8
 8006308:	3d10      	subs	r5, #16
 800630a:	2d10      	cmp	r5, #16
 800630c:	f340 81d6 	ble.w	80066bc <_svfprintf_r+0xdd4>
 8006310:	3301      	adds	r3, #1
 8006312:	3410      	adds	r4, #16
 8006314:	2b07      	cmp	r3, #7
 8006316:	9429      	str	r4, [sp, #164]	; 0xa4
 8006318:	9328      	str	r3, [sp, #160]	; 0xa0
 800631a:	f8c9 a000 	str.w	sl, [r9]
 800631e:	f8c9 6004 	str.w	r6, [r9, #4]
 8006322:	ddef      	ble.n	8006304 <_svfprintf_r+0xa1c>
 8006324:	aa27      	add	r2, sp, #156	; 0x9c
 8006326:	4659      	mov	r1, fp
 8006328:	4638      	mov	r0, r7
 800632a:	f001 fbe3 	bl	8007af4 <__ssprint_r>
 800632e:	2800      	cmp	r0, #0
 8006330:	f47f abd4 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006334:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006336:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006338:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800633c:	e7e4      	b.n	8006308 <_svfprintf_r+0xa20>
 800633e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006340:	9a08      	ldr	r2, [sp, #32]
 8006342:	1a9f      	subs	r7, r3, r2
 8006344:	2f00      	cmp	r7, #0
 8006346:	f77f ad19 	ble.w	8005d7c <_svfprintf_r+0x494>
 800634a:	4abc      	ldr	r2, [pc, #752]	; (800663c <_svfprintf_r+0xd54>)
 800634c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800634e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006350:	2f10      	cmp	r7, #16
 8006352:	dd2b      	ble.n	80063ac <_svfprintf_r+0xac4>
 8006354:	464a      	mov	r2, r9
 8006356:	4621      	mov	r1, r4
 8006358:	46b9      	mov	r9, r7
 800635a:	2510      	movs	r5, #16
 800635c:	4637      	mov	r7, r6
 800635e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006360:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006362:	e006      	b.n	8006372 <_svfprintf_r+0xa8a>
 8006364:	f1a9 0910 	sub.w	r9, r9, #16
 8006368:	f1b9 0f10 	cmp.w	r9, #16
 800636c:	f102 0208 	add.w	r2, r2, #8
 8006370:	dd18      	ble.n	80063a4 <_svfprintf_r+0xabc>
 8006372:	3301      	adds	r3, #1
 8006374:	3110      	adds	r1, #16
 8006376:	2b07      	cmp	r3, #7
 8006378:	9129      	str	r1, [sp, #164]	; 0xa4
 800637a:	9328      	str	r3, [sp, #160]	; 0xa0
 800637c:	f8c2 a000 	str.w	sl, [r2]
 8006380:	6055      	str	r5, [r2, #4]
 8006382:	ddef      	ble.n	8006364 <_svfprintf_r+0xa7c>
 8006384:	aa27      	add	r2, sp, #156	; 0x9c
 8006386:	4631      	mov	r1, r6
 8006388:	4620      	mov	r0, r4
 800638a:	f001 fbb3 	bl	8007af4 <__ssprint_r>
 800638e:	2800      	cmp	r0, #0
 8006390:	f47f aba4 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006394:	f1a9 0910 	sub.w	r9, r9, #16
 8006398:	f1b9 0f10 	cmp.w	r9, #16
 800639c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800639e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063a0:	aa34      	add	r2, sp, #208	; 0xd0
 80063a2:	dce6      	bgt.n	8006372 <_svfprintf_r+0xa8a>
 80063a4:	463e      	mov	r6, r7
 80063a6:	460c      	mov	r4, r1
 80063a8:	464f      	mov	r7, r9
 80063aa:	4691      	mov	r9, r2
 80063ac:	3301      	adds	r3, #1
 80063ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80063b2:	443c      	add	r4, r7
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	9429      	str	r4, [sp, #164]	; 0xa4
 80063b8:	e889 0084 	stmia.w	r9, {r2, r7}
 80063bc:	f300 823d 	bgt.w	800683a <_svfprintf_r+0xf52>
 80063c0:	f109 0908 	add.w	r9, r9, #8
 80063c4:	e4da      	b.n	8005d7c <_svfprintf_r+0x494>
 80063c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063c8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	f340 820a 	ble.w	80067e4 <_svfprintf_r+0xefc>
 80063d0:	3501      	adds	r5, #1
 80063d2:	3401      	adds	r4, #1
 80063d4:	2301      	movs	r3, #1
 80063d6:	2d07      	cmp	r5, #7
 80063d8:	9429      	str	r4, [sp, #164]	; 0xa4
 80063da:	9528      	str	r5, [sp, #160]	; 0xa0
 80063dc:	f8c9 6000 	str.w	r6, [r9]
 80063e0:	f8c9 3004 	str.w	r3, [r9, #4]
 80063e4:	f300 820f 	bgt.w	8006806 <_svfprintf_r+0xf1e>
 80063e8:	f109 0908 	add.w	r9, r9, #8
 80063ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063f0:	f8c9 3000 	str.w	r3, [r9]
 80063f4:	3501      	adds	r5, #1
 80063f6:	4414      	add	r4, r2
 80063f8:	2d07      	cmp	r5, #7
 80063fa:	9429      	str	r4, [sp, #164]	; 0xa4
 80063fc:	9528      	str	r5, [sp, #160]	; 0xa0
 80063fe:	f8c9 2004 	str.w	r2, [r9, #4]
 8006402:	f300 820d 	bgt.w	8006820 <_svfprintf_r+0xf38>
 8006406:	f109 0908 	add.w	r9, r9, #8
 800640a:	2300      	movs	r3, #0
 800640c:	2200      	movs	r2, #0
 800640e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006412:	f002 f89d 	bl	8008550 <__aeabi_dcmpeq>
 8006416:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006418:	2800      	cmp	r0, #0
 800641a:	f040 80c3 	bne.w	80065a4 <_svfprintf_r+0xcbc>
 800641e:	3b01      	subs	r3, #1
 8006420:	3501      	adds	r5, #1
 8006422:	3601      	adds	r6, #1
 8006424:	441c      	add	r4, r3
 8006426:	2d07      	cmp	r5, #7
 8006428:	9528      	str	r5, [sp, #160]	; 0xa0
 800642a:	9429      	str	r4, [sp, #164]	; 0xa4
 800642c:	f8c9 6000 	str.w	r6, [r9]
 8006430:	f8c9 3004 	str.w	r3, [r9, #4]
 8006434:	f300 80f5 	bgt.w	8006622 <_svfprintf_r+0xd3a>
 8006438:	f109 0908 	add.w	r9, r9, #8
 800643c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800643e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006442:	3501      	adds	r5, #1
 8006444:	4414      	add	r4, r2
 8006446:	ab23      	add	r3, sp, #140	; 0x8c
 8006448:	2d07      	cmp	r5, #7
 800644a:	9429      	str	r4, [sp, #164]	; 0xa4
 800644c:	9528      	str	r5, [sp, #160]	; 0xa0
 800644e:	f8c9 3000 	str.w	r3, [r9]
 8006452:	f77f acdd 	ble.w	8005e10 <_svfprintf_r+0x528>
 8006456:	aa27      	add	r2, sp, #156	; 0x9c
 8006458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800645a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800645c:	f001 fb4a 	bl	8007af4 <__ssprint_r>
 8006460:	2800      	cmp	r0, #0
 8006462:	f47f ab3b 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006466:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006468:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800646c:	e4d2      	b.n	8005e14 <_svfprintf_r+0x52c>
 800646e:	aa27      	add	r2, sp, #156	; 0x9c
 8006470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006472:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006474:	f001 fb3e 	bl	8007af4 <__ssprint_r>
 8006478:	2800      	cmp	r0, #0
 800647a:	f43f ad19 	beq.w	8005eb0 <_svfprintf_r+0x5c8>
 800647e:	f7ff bb2d 	b.w	8005adc <_svfprintf_r+0x1f4>
 8006482:	aa27      	add	r2, sp, #156	; 0x9c
 8006484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006486:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006488:	f001 fb34 	bl	8007af4 <__ssprint_r>
 800648c:	2800      	cmp	r0, #0
 800648e:	f47f ab25 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006492:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006494:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006498:	e4a9      	b.n	8005dee <_svfprintf_r+0x506>
 800649a:	aa27      	add	r2, sp, #156	; 0x9c
 800649c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800649e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80064a0:	f001 fb28 	bl	8007af4 <__ssprint_r>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f47f ab19 	bne.w	8005adc <_svfprintf_r+0x1f4>
 80064aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80064ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80064b0:	e450      	b.n	8005d54 <_svfprintf_r+0x46c>
 80064b2:	aa27      	add	r2, sp, #156	; 0x9c
 80064b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80064b8:	f001 fb1c 	bl	8007af4 <__ssprint_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	f47f ab0d 	bne.w	8005adc <_svfprintf_r+0x1f4>
 80064c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80064c4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80064c8:	e454      	b.n	8005d74 <_svfprintf_r+0x48c>
 80064ca:	f1bb 0f00 	cmp.w	fp, #0
 80064ce:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80064d2:	f2c0 82e1 	blt.w	8006a98 <_svfprintf_r+0x11b0>
 80064d6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80064da:	9307      	str	r3, [sp, #28]
 80064dc:	ea54 0305 	orrs.w	r3, r4, r5
 80064e0:	f47f add3 	bne.w	800608a <_svfprintf_r+0x7a2>
 80064e4:	f1bb 0f00 	cmp.w	fp, #0
 80064e8:	f43f ae8c 	beq.w	8006204 <_svfprintf_r+0x91c>
 80064ec:	2700      	movs	r7, #0
 80064ee:	e6b7      	b.n	8006260 <_svfprintf_r+0x978>
 80064f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	f340 82d3 	ble.w	8006a9e <_svfprintf_r+0x11b6>
 80064f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064fc:	4293      	cmp	r3, r2
 80064fe:	bfa8      	it	ge
 8006500:	4613      	movge	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	461d      	mov	r5, r3
 8006506:	dd0d      	ble.n	8006524 <_svfprintf_r+0xc3c>
 8006508:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800650a:	f8c9 6000 	str.w	r6, [r9]
 800650e:	3301      	adds	r3, #1
 8006510:	442c      	add	r4, r5
 8006512:	2b07      	cmp	r3, #7
 8006514:	9429      	str	r4, [sp, #164]	; 0xa4
 8006516:	f8c9 5004 	str.w	r5, [r9, #4]
 800651a:	9328      	str	r3, [sp, #160]	; 0xa0
 800651c:	f300 83ae 	bgt.w	8006c7c <_svfprintf_r+0x1394>
 8006520:	f109 0908 	add.w	r9, r9, #8
 8006524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006526:	2d00      	cmp	r5, #0
 8006528:	bfa8      	it	ge
 800652a:	1b5b      	subge	r3, r3, r5
 800652c:	2b00      	cmp	r3, #0
 800652e:	461d      	mov	r5, r3
 8006530:	f340 80f8 	ble.w	8006724 <_svfprintf_r+0xe3c>
 8006534:	4a41      	ldr	r2, [pc, #260]	; (800663c <_svfprintf_r+0xd54>)
 8006536:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006538:	920f      	str	r2, [sp, #60]	; 0x3c
 800653a:	2d10      	cmp	r5, #16
 800653c:	f340 8285 	ble.w	8006a4a <_svfprintf_r+0x1162>
 8006540:	4622      	mov	r2, r4
 8006542:	2710      	movs	r7, #16
 8006544:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006548:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800654a:	e005      	b.n	8006558 <_svfprintf_r+0xc70>
 800654c:	f109 0908 	add.w	r9, r9, #8
 8006550:	3d10      	subs	r5, #16
 8006552:	2d10      	cmp	r5, #16
 8006554:	f340 8278 	ble.w	8006a48 <_svfprintf_r+0x1160>
 8006558:	3301      	adds	r3, #1
 800655a:	3210      	adds	r2, #16
 800655c:	2b07      	cmp	r3, #7
 800655e:	9229      	str	r2, [sp, #164]	; 0xa4
 8006560:	9328      	str	r3, [sp, #160]	; 0xa0
 8006562:	f8c9 a000 	str.w	sl, [r9]
 8006566:	f8c9 7004 	str.w	r7, [r9, #4]
 800656a:	ddef      	ble.n	800654c <_svfprintf_r+0xc64>
 800656c:	aa27      	add	r2, sp, #156	; 0x9c
 800656e:	4621      	mov	r1, r4
 8006570:	4658      	mov	r0, fp
 8006572:	f001 fabf 	bl	8007af4 <__ssprint_r>
 8006576:	2800      	cmp	r0, #0
 8006578:	f47f aab0 	bne.w	8005adc <_svfprintf_r+0x1f4>
 800657c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800657e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006580:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006584:	e7e4      	b.n	8006550 <_svfprintf_r+0xc68>
 8006586:	aa27      	add	r2, sp, #156	; 0x9c
 8006588:	9909      	ldr	r1, [sp, #36]	; 0x24
 800658a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800658c:	f001 fab2 	bl	8007af4 <__ssprint_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	f47f aaa3 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006596:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800659a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800659c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80065a0:	f7ff bbc8 	b.w	8005d34 <_svfprintf_r+0x44c>
 80065a4:	1e5e      	subs	r6, r3, #1
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	f77f af48 	ble.w	800643c <_svfprintf_r+0xb54>
 80065ac:	4b23      	ldr	r3, [pc, #140]	; (800663c <_svfprintf_r+0xd54>)
 80065ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b0:	2e10      	cmp	r6, #16
 80065b2:	dd2c      	ble.n	800660e <_svfprintf_r+0xd26>
 80065b4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80065b8:	2710      	movs	r7, #16
 80065ba:	46b0      	mov	r8, r6
 80065bc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80065c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80065c2:	e006      	b.n	80065d2 <_svfprintf_r+0xcea>
 80065c4:	f1a8 0810 	sub.w	r8, r8, #16
 80065c8:	f1b8 0f10 	cmp.w	r8, #16
 80065cc:	f109 0908 	add.w	r9, r9, #8
 80065d0:	dd1a      	ble.n	8006608 <_svfprintf_r+0xd20>
 80065d2:	3501      	adds	r5, #1
 80065d4:	3410      	adds	r4, #16
 80065d6:	2d07      	cmp	r5, #7
 80065d8:	9429      	str	r4, [sp, #164]	; 0xa4
 80065da:	9528      	str	r5, [sp, #160]	; 0xa0
 80065dc:	f8c9 a000 	str.w	sl, [r9]
 80065e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80065e4:	ddee      	ble.n	80065c4 <_svfprintf_r+0xcdc>
 80065e6:	aa27      	add	r2, sp, #156	; 0x9c
 80065e8:	4631      	mov	r1, r6
 80065ea:	4658      	mov	r0, fp
 80065ec:	f001 fa82 	bl	8007af4 <__ssprint_r>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f47f aa73 	bne.w	8005adc <_svfprintf_r+0x1f4>
 80065f6:	f1a8 0810 	sub.w	r8, r8, #16
 80065fa:	f1b8 0f10 	cmp.w	r8, #16
 80065fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006600:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006602:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006606:	dce4      	bgt.n	80065d2 <_svfprintf_r+0xcea>
 8006608:	4646      	mov	r6, r8
 800660a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800660e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006610:	3501      	adds	r5, #1
 8006612:	4434      	add	r4, r6
 8006614:	2d07      	cmp	r5, #7
 8006616:	9429      	str	r4, [sp, #164]	; 0xa4
 8006618:	9528      	str	r5, [sp, #160]	; 0xa0
 800661a:	e889 0048 	stmia.w	r9, {r3, r6}
 800661e:	f77f af0b 	ble.w	8006438 <_svfprintf_r+0xb50>
 8006622:	aa27      	add	r2, sp, #156	; 0x9c
 8006624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006626:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006628:	f001 fa64 	bl	8007af4 <__ssprint_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	f47f aa55 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006632:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006634:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006636:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800663a:	e6ff      	b.n	800643c <_svfprintf_r+0xb54>
 800663c:	08008ad4 	.word	0x08008ad4
 8006640:	9907      	ldr	r1, [sp, #28]
 8006642:	f011 0210 	ands.w	r2, r1, #16
 8006646:	f000 81d5 	beq.w	80069f4 <_svfprintf_r+0x110c>
 800664a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800664c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006650:	f1bb 0f00 	cmp.w	fp, #0
 8006654:	6804      	ldr	r4, [r0, #0]
 8006656:	f100 0704 	add.w	r7, r0, #4
 800665a:	f04f 0500 	mov.w	r5, #0
 800665e:	db26      	blt.n	80066ae <_svfprintf_r+0xdc6>
 8006660:	460a      	mov	r2, r1
 8006662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006666:	9207      	str	r2, [sp, #28]
 8006668:	ea54 0205 	orrs.w	r2, r4, r5
 800666c:	970e      	str	r7, [sp, #56]	; 0x38
 800666e:	461f      	mov	r7, r3
 8006670:	f47f aae8 	bne.w	8005c44 <_svfprintf_r+0x35c>
 8006674:	e4ce      	b.n	8006014 <_svfprintf_r+0x72c>
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	06d8      	lsls	r0, r3, #27
 800667a:	d42a      	bmi.n	80066d2 <_svfprintf_r+0xdea>
 800667c:	9b07      	ldr	r3, [sp, #28]
 800667e:	0659      	lsls	r1, r3, #25
 8006680:	d527      	bpl.n	80066d2 <_svfprintf_r+0xdea>
 8006682:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006684:	f9b1 4000 	ldrsh.w	r4, [r1]
 8006688:	3104      	adds	r1, #4
 800668a:	17e5      	asrs	r5, r4, #31
 800668c:	4622      	mov	r2, r4
 800668e:	462b      	mov	r3, r5
 8006690:	910e      	str	r1, [sp, #56]	; 0x38
 8006692:	f7ff bac4 	b.w	8005c1e <_svfprintf_r+0x336>
 8006696:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006698:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800669c:	f1bb 0f00 	cmp.w	fp, #0
 80066a0:	680c      	ldr	r4, [r1, #0]
 80066a2:	f101 0704 	add.w	r7, r1, #4
 80066a6:	f04f 0500 	mov.w	r5, #0
 80066aa:	f280 824e 	bge.w	8006b4a <_svfprintf_r+0x1262>
 80066ae:	970e      	str	r7, [sp, #56]	; 0x38
 80066b0:	461f      	mov	r7, r3
 80066b2:	ea54 0305 	orrs.w	r3, r4, r5
 80066b6:	f47f aac5 	bne.w	8005c44 <_svfprintf_r+0x35c>
 80066ba:	e4b0      	b.n	800601e <_svfprintf_r+0x736>
 80066bc:	3301      	adds	r3, #1
 80066be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80066c2:	442c      	add	r4, r5
 80066c4:	2b07      	cmp	r3, #7
 80066c6:	9429      	str	r4, [sp, #164]	; 0xa4
 80066c8:	e889 0024 	stmia.w	r9, {r2, r5}
 80066cc:	f77f aba0 	ble.w	8005e10 <_svfprintf_r+0x528>
 80066d0:	e6c1      	b.n	8006456 <_svfprintf_r+0xb6e>
 80066d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066d4:	6814      	ldr	r4, [r2, #0]
 80066d6:	4613      	mov	r3, r2
 80066d8:	3304      	adds	r3, #4
 80066da:	17e5      	asrs	r5, r4, #31
 80066dc:	4622      	mov	r2, r4
 80066de:	930e      	str	r3, [sp, #56]	; 0x38
 80066e0:	2a00      	cmp	r2, #0
 80066e2:	462b      	mov	r3, r5
 80066e4:	f173 0300 	sbcs.w	r3, r3, #0
 80066e8:	f6bf aa9e 	bge.w	8005c28 <_svfprintf_r+0x340>
 80066ec:	4264      	negs	r4, r4
 80066ee:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80066f2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80066f6:	f1bb 0f00 	cmp.w	fp, #0
 80066fa:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80066fe:	f6ff aaa1 	blt.w	8005c44 <_svfprintf_r+0x35c>
 8006702:	9b07      	ldr	r3, [sp, #28]
 8006704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006708:	9307      	str	r3, [sp, #28]
 800670a:	f7ff ba9b 	b.w	8005c44 <_svfprintf_r+0x35c>
 800670e:	aa27      	add	r2, sp, #156	; 0x9c
 8006710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006712:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006714:	f001 f9ee 	bl	8007af4 <__ssprint_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	f47f a9df 	bne.w	8005adc <_svfprintf_r+0x1f4>
 800671e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006720:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006724:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006728:	4432      	add	r2, r6
 800672a:	4617      	mov	r7, r2
 800672c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800672e:	4293      	cmp	r3, r2
 8006730:	db47      	blt.n	80067c2 <_svfprintf_r+0xeda>
 8006732:	9a07      	ldr	r2, [sp, #28]
 8006734:	07d5      	lsls	r5, r2, #31
 8006736:	d444      	bmi.n	80067c2 <_svfprintf_r+0xeda>
 8006738:	9912      	ldr	r1, [sp, #72]	; 0x48
 800673a:	440e      	add	r6, r1
 800673c:	1bf5      	subs	r5, r6, r7
 800673e:	1acb      	subs	r3, r1, r3
 8006740:	429d      	cmp	r5, r3
 8006742:	bfa8      	it	ge
 8006744:	461d      	movge	r5, r3
 8006746:	2d00      	cmp	r5, #0
 8006748:	462e      	mov	r6, r5
 800674a:	dd0d      	ble.n	8006768 <_svfprintf_r+0xe80>
 800674c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800674e:	f8c9 7000 	str.w	r7, [r9]
 8006752:	3201      	adds	r2, #1
 8006754:	442c      	add	r4, r5
 8006756:	2a07      	cmp	r2, #7
 8006758:	9429      	str	r4, [sp, #164]	; 0xa4
 800675a:	f8c9 5004 	str.w	r5, [r9, #4]
 800675e:	9228      	str	r2, [sp, #160]	; 0xa0
 8006760:	f300 830a 	bgt.w	8006d78 <_svfprintf_r+0x1490>
 8006764:	f109 0908 	add.w	r9, r9, #8
 8006768:	2e00      	cmp	r6, #0
 800676a:	bfac      	ite	ge
 800676c:	1b9d      	subge	r5, r3, r6
 800676e:	461d      	movlt	r5, r3
 8006770:	2d00      	cmp	r5, #0
 8006772:	f77f ab4f 	ble.w	8005e14 <_svfprintf_r+0x52c>
 8006776:	4abb      	ldr	r2, [pc, #748]	; (8006a64 <_svfprintf_r+0x117c>)
 8006778:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800677a:	920f      	str	r2, [sp, #60]	; 0x3c
 800677c:	2d10      	cmp	r5, #16
 800677e:	dd9d      	ble.n	80066bc <_svfprintf_r+0xdd4>
 8006780:	2610      	movs	r6, #16
 8006782:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006784:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006788:	e004      	b.n	8006794 <_svfprintf_r+0xeac>
 800678a:	f109 0908 	add.w	r9, r9, #8
 800678e:	3d10      	subs	r5, #16
 8006790:	2d10      	cmp	r5, #16
 8006792:	dd93      	ble.n	80066bc <_svfprintf_r+0xdd4>
 8006794:	3301      	adds	r3, #1
 8006796:	3410      	adds	r4, #16
 8006798:	2b07      	cmp	r3, #7
 800679a:	9429      	str	r4, [sp, #164]	; 0xa4
 800679c:	9328      	str	r3, [sp, #160]	; 0xa0
 800679e:	f8c9 a000 	str.w	sl, [r9]
 80067a2:	f8c9 6004 	str.w	r6, [r9, #4]
 80067a6:	ddf0      	ble.n	800678a <_svfprintf_r+0xea2>
 80067a8:	aa27      	add	r2, sp, #156	; 0x9c
 80067aa:	4659      	mov	r1, fp
 80067ac:	4638      	mov	r0, r7
 80067ae:	f001 f9a1 	bl	8007af4 <__ssprint_r>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f47f a992 	bne.w	8005adc <_svfprintf_r+0x1f4>
 80067b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80067ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80067bc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80067c0:	e7e5      	b.n	800678e <_svfprintf_r+0xea6>
 80067c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80067c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80067c6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80067c8:	f8c9 1000 	str.w	r1, [r9]
 80067cc:	3201      	adds	r2, #1
 80067ce:	4404      	add	r4, r0
 80067d0:	2a07      	cmp	r2, #7
 80067d2:	9429      	str	r4, [sp, #164]	; 0xa4
 80067d4:	f8c9 0004 	str.w	r0, [r9, #4]
 80067d8:	9228      	str	r2, [sp, #160]	; 0xa0
 80067da:	f300 82b9 	bgt.w	8006d50 <_svfprintf_r+0x1468>
 80067de:	f109 0908 	add.w	r9, r9, #8
 80067e2:	e7a9      	b.n	8006738 <_svfprintf_r+0xe50>
 80067e4:	9b07      	ldr	r3, [sp, #28]
 80067e6:	07d8      	lsls	r0, r3, #31
 80067e8:	f53f adf2 	bmi.w	80063d0 <_svfprintf_r+0xae8>
 80067ec:	3501      	adds	r5, #1
 80067ee:	3401      	adds	r4, #1
 80067f0:	2301      	movs	r3, #1
 80067f2:	2d07      	cmp	r5, #7
 80067f4:	9429      	str	r4, [sp, #164]	; 0xa4
 80067f6:	9528      	str	r5, [sp, #160]	; 0xa0
 80067f8:	f8c9 6000 	str.w	r6, [r9]
 80067fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8006800:	f77f ae1a 	ble.w	8006438 <_svfprintf_r+0xb50>
 8006804:	e70d      	b.n	8006622 <_svfprintf_r+0xd3a>
 8006806:	aa27      	add	r2, sp, #156	; 0x9c
 8006808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800680a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800680c:	f001 f972 	bl	8007af4 <__ssprint_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	f47f a963 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006816:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006818:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800681a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800681e:	e5e5      	b.n	80063ec <_svfprintf_r+0xb04>
 8006820:	aa27      	add	r2, sp, #156	; 0x9c
 8006822:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006824:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006826:	f001 f965 	bl	8007af4 <__ssprint_r>
 800682a:	2800      	cmp	r0, #0
 800682c:	f47f a956 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006830:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006832:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006834:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006838:	e5e7      	b.n	800640a <_svfprintf_r+0xb22>
 800683a:	aa27      	add	r2, sp, #156	; 0x9c
 800683c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006840:	f001 f958 	bl	8007af4 <__ssprint_r>
 8006844:	2800      	cmp	r0, #0
 8006846:	f47f a949 	bne.w	8005adc <_svfprintf_r+0x1f4>
 800684a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800684c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006850:	f7ff ba94 	b.w	8005d7c <_svfprintf_r+0x494>
 8006854:	9907      	ldr	r1, [sp, #28]
 8006856:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800685a:	f000 80bb 	beq.w	80069d4 <_svfprintf_r+0x10ec>
 800685e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006860:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006864:	4603      	mov	r3, r0
 8006866:	f1bb 0f00 	cmp.w	fp, #0
 800686a:	f103 0304 	add.w	r3, r3, #4
 800686e:	8804      	ldrh	r4, [r0, #0]
 8006870:	f04f 0500 	mov.w	r5, #0
 8006874:	f2c0 81c5 	blt.w	8006c02 <_svfprintf_r+0x131a>
 8006878:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800687c:	9107      	str	r1, [sp, #28]
 800687e:	ea54 0105 	orrs.w	r1, r4, r5
 8006882:	930e      	str	r3, [sp, #56]	; 0x38
 8006884:	f43f acda 	beq.w	800623c <_svfprintf_r+0x954>
 8006888:	4617      	mov	r7, r2
 800688a:	f7ff b953 	b.w	8005b34 <_svfprintf_r+0x24c>
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	06df      	lsls	r7, r3, #27
 8006892:	d40b      	bmi.n	80068ac <_svfprintf_r+0xfc4>
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	065e      	lsls	r6, r3, #25
 8006898:	d508      	bpl.n	80068ac <_svfprintf_r+0xfc4>
 800689a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800689c:	6813      	ldr	r3, [r2, #0]
 800689e:	3204      	adds	r2, #4
 80068a0:	920e      	str	r2, [sp, #56]	; 0x38
 80068a2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	f7ff b845 	b.w	8005936 <_svfprintf_r+0x4e>
 80068ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	3204      	adds	r2, #4
 80068b2:	920e      	str	r2, [sp, #56]	; 0x38
 80068b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f7ff b83d 	b.w	8005936 <_svfprintf_r+0x4e>
 80068bc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	f001 fe76 	bl	80085b4 <__aeabi_dcmpun>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 8305 	bne.w	8006ed8 <_svfprintf_r+0x15f0>
 80068ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d0:	f1bb 3fff 	cmp.w	fp, #4294967295
 80068d4:	f023 0720 	bic.w	r7, r3, #32
 80068d8:	f000 826c 	beq.w	8006db4 <_svfprintf_r+0x14cc>
 80068dc:	2f47      	cmp	r7, #71	; 0x47
 80068de:	f000 8187 	beq.w	8006bf0 <_svfprintf_r+0x1308>
 80068e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e4:	9a07      	ldr	r2, [sp, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80068ee:	f2c0 8280 	blt.w	8006df2 <_svfprintf_r+0x150a>
 80068f2:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 80068f6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 80068fa:	2300      	movs	r3, #0
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006900:	2b66      	cmp	r3, #102	; 0x66
 8006902:	f000 825a 	beq.w	8006dba <_svfprintf_r+0x14d2>
 8006906:	2b46      	cmp	r3, #70	; 0x46
 8006908:	f000 8147 	beq.w	8006b9a <_svfprintf_r+0x12b2>
 800690c:	2f45      	cmp	r7, #69	; 0x45
 800690e:	bf0c      	ite	eq
 8006910:	f10b 0501 	addeq.w	r5, fp, #1
 8006914:	465d      	movne	r5, fp
 8006916:	a825      	add	r0, sp, #148	; 0x94
 8006918:	a922      	add	r1, sp, #136	; 0x88
 800691a:	aa21      	add	r2, sp, #132	; 0x84
 800691c:	2302      	movs	r3, #2
 800691e:	9004      	str	r0, [sp, #16]
 8006920:	9202      	str	r2, [sp, #8]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	9501      	str	r5, [sp, #4]
 8006926:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800692a:	9103      	str	r1, [sp, #12]
 800692c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800692e:	f7fc ff27 	bl	8003780 <_dtoa_r>
 8006932:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006934:	2b67      	cmp	r3, #103	; 0x67
 8006936:	4606      	mov	r6, r0
 8006938:	f040 8271 	bne.w	8006e1e <_svfprintf_r+0x1536>
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	07da      	lsls	r2, r3, #31
 8006940:	f140 82bf 	bpl.w	8006ec2 <_svfprintf_r+0x15da>
 8006944:	1974      	adds	r4, r6, r5
 8006946:	2200      	movs	r2, #0
 8006948:	2300      	movs	r3, #0
 800694a:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800694e:	f001 fdff 	bl	8008550 <__aeabi_dcmpeq>
 8006952:	2800      	cmp	r0, #0
 8006954:	f040 8190 	bne.w	8006c78 <_svfprintf_r+0x1390>
 8006958:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800695a:	429c      	cmp	r4, r3
 800695c:	d906      	bls.n	800696c <_svfprintf_r+0x1084>
 800695e:	2130      	movs	r1, #48	; 0x30
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	9225      	str	r2, [sp, #148]	; 0x94
 8006964:	7019      	strb	r1, [r3, #0]
 8006966:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006968:	429c      	cmp	r4, r3
 800696a:	d8f9      	bhi.n	8006960 <_svfprintf_r+0x1078>
 800696c:	1b9b      	subs	r3, r3, r6
 800696e:	2f47      	cmp	r7, #71	; 0x47
 8006970:	9312      	str	r3, [sp, #72]	; 0x48
 8006972:	f000 817a 	beq.w	8006c6a <_svfprintf_r+0x1382>
 8006976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006978:	2b65      	cmp	r3, #101	; 0x65
 800697a:	f340 825f 	ble.w	8006e3c <_svfprintf_r+0x1554>
 800697e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006980:	2b66      	cmp	r3, #102	; 0x66
 8006982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006984:	9313      	str	r3, [sp, #76]	; 0x4c
 8006986:	f000 8266 	beq.w	8006e56 <_svfprintf_r+0x156e>
 800698a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800698c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800698e:	428a      	cmp	r2, r1
 8006990:	f2c0 8238 	blt.w	8006e04 <_svfprintf_r+0x151c>
 8006994:	9b07      	ldr	r3, [sp, #28]
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	f100 8295 	bmi.w	8006ec6 <_svfprintf_r+0x15de>
 800699c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80069a0:	920d      	str	r2, [sp, #52]	; 0x34
 80069a2:	2267      	movs	r2, #103	; 0x67
 80069a4:	9211      	str	r2, [sp, #68]	; 0x44
 80069a6:	9a08      	ldr	r2, [sp, #32]
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	f040 8132 	bne.w	8006c12 <_svfprintf_r+0x132a>
 80069ae:	9308      	str	r3, [sp, #32]
 80069b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069b2:	9307      	str	r3, [sp, #28]
 80069b4:	4693      	mov	fp, r2
 80069b6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80069ba:	f7ff b967 	b.w	8005c8c <_svfprintf_r+0x3a4>
 80069be:	f027 0707 	bic.w	r7, r7, #7
 80069c2:	ed97 7b00 	vldr	d7, [r7]
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80069ce:	930e      	str	r3, [sp, #56]	; 0x38
 80069d0:	f7ff ba88 	b.w	8005ee4 <_svfprintf_r+0x5fc>
 80069d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80069d6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80069da:	f1bb 0f00 	cmp.w	fp, #0
 80069de:	680c      	ldr	r4, [r1, #0]
 80069e0:	f101 0704 	add.w	r7, r1, #4
 80069e4:	f04f 0500 	mov.w	r5, #0
 80069e8:	f280 80ac 	bge.w	8006b44 <_svfprintf_r+0x125c>
 80069ec:	970e      	str	r7, [sp, #56]	; 0x38
 80069ee:	2700      	movs	r7, #0
 80069f0:	f7ff b8a0 	b.w	8005b34 <_svfprintf_r+0x24c>
 80069f4:	9907      	ldr	r1, [sp, #28]
 80069f6:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80069fa:	f43f ae4c 	beq.w	8006696 <_svfprintf_r+0xdae>
 80069fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006a00:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006a04:	4603      	mov	r3, r0
 8006a06:	f1bb 0f00 	cmp.w	fp, #0
 8006a0a:	f103 0304 	add.w	r3, r3, #4
 8006a0e:	8804      	ldrh	r4, [r0, #0]
 8006a10:	f04f 0500 	mov.w	r5, #0
 8006a14:	f2c0 80f2 	blt.w	8006bfc <_svfprintf_r+0x1314>
 8006a18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a1c:	9107      	str	r1, [sp, #28]
 8006a1e:	ea54 0105 	orrs.w	r1, r4, r5
 8006a22:	930e      	str	r3, [sp, #56]	; 0x38
 8006a24:	4617      	mov	r7, r2
 8006a26:	f47f a90d 	bne.w	8005c44 <_svfprintf_r+0x35c>
 8006a2a:	f7ff baf3 	b.w	8006014 <_svfprintf_r+0x72c>
 8006a2e:	9b07      	ldr	r3, [sp, #28]
 8006a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a36:	4613      	mov	r3, r2
 8006a38:	f000 80e5 	beq.w	8006c06 <_svfprintf_r+0x131e>
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	8814      	ldrh	r4, [r2, #0]
 8006a40:	930e      	str	r3, [sp, #56]	; 0x38
 8006a42:	2500      	movs	r5, #0
 8006a44:	f7ff bb03 	b.w	800604e <_svfprintf_r+0x766>
 8006a48:	4614      	mov	r4, r2
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a4e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006a50:	442c      	add	r4, r5
 8006a52:	2b07      	cmp	r3, #7
 8006a54:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a56:	e889 0024 	stmia.w	r9, {r2, r5}
 8006a5a:	f73f ae58 	bgt.w	800670e <_svfprintf_r+0xe26>
 8006a5e:	f109 0908 	add.w	r9, r9, #8
 8006a62:	e65f      	b.n	8006724 <_svfprintf_r+0xe3c>
 8006a64:	08008ad4 	.word	0x08008ad4
 8006a68:	2700      	movs	r7, #0
 8006a6a:	45bb      	cmp	fp, r7
 8006a6c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006a70:	f6ff abf6 	blt.w	8006260 <_svfprintf_r+0x978>
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	f7ff bbbe 	b.w	80061fc <_svfprintf_r+0x914>
 8006a80:	aa27      	add	r2, sp, #156	; 0x9c
 8006a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a86:	f001 f835 	bl	8007af4 <__ssprint_r>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f47f a826 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006a90:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a92:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a96:	e405      	b.n	80062a4 <_svfprintf_r+0x9bc>
 8006a98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006a9a:	f7ff bbda 	b.w	8006252 <_svfprintf_r+0x96a>
 8006a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006aa0:	4ab2      	ldr	r2, [pc, #712]	; (8006d6c <_svfprintf_r+0x1484>)
 8006aa2:	f8c9 2000 	str.w	r2, [r9]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	3401      	adds	r4, #1
 8006aaa:	2201      	movs	r2, #1
 8006aac:	2b07      	cmp	r3, #7
 8006aae:	9429      	str	r4, [sp, #164]	; 0xa4
 8006ab0:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ab2:	f8c9 2004 	str.w	r2, [r9, #4]
 8006ab6:	f300 808e 	bgt.w	8006bd6 <_svfprintf_r+0x12ee>
 8006aba:	f109 0908 	add.w	r9, r9, #8
 8006abe:	b92d      	cbnz	r5, 8006acc <_svfprintf_r+0x11e4>
 8006ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ac2:	b91b      	cbnz	r3, 8006acc <_svfprintf_r+0x11e4>
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	07df      	lsls	r7, r3, #31
 8006ac8:	f57f a9a4 	bpl.w	8005e14 <_svfprintf_r+0x52c>
 8006acc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ace:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ad0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ad2:	f8c9 2000 	str.w	r2, [r9]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	440c      	add	r4, r1
 8006ada:	2b07      	cmp	r3, #7
 8006adc:	9429      	str	r4, [sp, #164]	; 0xa4
 8006ade:	f8c9 1004 	str.w	r1, [r9, #4]
 8006ae2:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ae4:	f300 81d3 	bgt.w	8006e8e <_svfprintf_r+0x15a6>
 8006ae8:	f109 0908 	add.w	r9, r9, #8
 8006aec:	426d      	negs	r5, r5
 8006aee:	2d00      	cmp	r5, #0
 8006af0:	f340 80ad 	ble.w	8006c4e <_svfprintf_r+0x1366>
 8006af4:	4a9e      	ldr	r2, [pc, #632]	; (8006d70 <_svfprintf_r+0x1488>)
 8006af6:	920f      	str	r2, [sp, #60]	; 0x3c
 8006af8:	2d10      	cmp	r5, #16
 8006afa:	f340 80cc 	ble.w	8006c96 <_svfprintf_r+0x13ae>
 8006afe:	4622      	mov	r2, r4
 8006b00:	2710      	movs	r7, #16
 8006b02:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006b06:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006b08:	e005      	b.n	8006b16 <_svfprintf_r+0x122e>
 8006b0a:	f109 0908 	add.w	r9, r9, #8
 8006b0e:	3d10      	subs	r5, #16
 8006b10:	2d10      	cmp	r5, #16
 8006b12:	f340 80bf 	ble.w	8006c94 <_svfprintf_r+0x13ac>
 8006b16:	3301      	adds	r3, #1
 8006b18:	3210      	adds	r2, #16
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	9229      	str	r2, [sp, #164]	; 0xa4
 8006b1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b20:	f8c9 a000 	str.w	sl, [r9]
 8006b24:	f8c9 7004 	str.w	r7, [r9, #4]
 8006b28:	ddef      	ble.n	8006b0a <_svfprintf_r+0x1222>
 8006b2a:	aa27      	add	r2, sp, #156	; 0x9c
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4658      	mov	r0, fp
 8006b30:	f000 ffe0 	bl	8007af4 <__ssprint_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f47e afd1 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006b3a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006b3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b3e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b42:	e7e4      	b.n	8006b0e <_svfprintf_r+0x1226>
 8006b44:	9a07      	ldr	r2, [sp, #28]
 8006b46:	f7ff ba37 	b.w	8005fb8 <_svfprintf_r+0x6d0>
 8006b4a:	9a07      	ldr	r2, [sp, #28]
 8006b4c:	e589      	b.n	8006662 <_svfprintf_r+0xd7a>
 8006b4e:	9b07      	ldr	r3, [sp, #28]
 8006b50:	f043 0320 	orr.w	r3, r3, #32
 8006b54:	9307      	str	r3, [sp, #28]
 8006b56:	f108 0801 	add.w	r8, r8, #1
 8006b5a:	f898 3000 	ldrb.w	r3, [r8]
 8006b5e:	f7fe bf1d 	b.w	800599c <_svfprintf_r+0xb4>
 8006b62:	aa27      	add	r2, sp, #156	; 0x9c
 8006b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b68:	f000 ffc4 	bl	8007af4 <__ssprint_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	f47e afb5 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006b72:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b74:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b78:	f7ff bbac 	b.w	80062d4 <_svfprintf_r+0x9ec>
 8006b7c:	2140      	movs	r1, #64	; 0x40
 8006b7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b80:	f7fe f838 	bl	8004bf4 <_malloc_r>
 8006b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b86:	6010      	str	r0, [r2, #0]
 8006b88:	6110      	str	r0, [r2, #16]
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f000 81f9 	beq.w	8006f82 <_svfprintf_r+0x169a>
 8006b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	6153      	str	r3, [r2, #20]
 8006b96:	f7fe bebe 	b.w	8005916 <_svfprintf_r+0x2e>
 8006b9a:	a825      	add	r0, sp, #148	; 0x94
 8006b9c:	a922      	add	r1, sp, #136	; 0x88
 8006b9e:	aa21      	add	r2, sp, #132	; 0x84
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	9004      	str	r0, [sp, #16]
 8006ba4:	9202      	str	r2, [sp, #8]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	f8cd b004 	str.w	fp, [sp, #4]
 8006bac:	9103      	str	r1, [sp, #12]
 8006bae:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006bb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bb4:	f7fc fde4 	bl	8003780 <_dtoa_r>
 8006bb8:	465d      	mov	r5, fp
 8006bba:	4606      	mov	r6, r0
 8006bbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bbe:	2b46      	cmp	r3, #70	; 0x46
 8006bc0:	eb06 0405 	add.w	r4, r6, r5
 8006bc4:	f47f aebf 	bne.w	8006946 <_svfprintf_r+0x105e>
 8006bc8:	7833      	ldrb	r3, [r6, #0]
 8006bca:	2b30      	cmp	r3, #48	; 0x30
 8006bcc:	f000 818a 	beq.w	8006ee4 <_svfprintf_r+0x15fc>
 8006bd0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006bd2:	442c      	add	r4, r5
 8006bd4:	e6b7      	b.n	8006946 <_svfprintf_r+0x105e>
 8006bd6:	aa27      	add	r2, sp, #156	; 0x9c
 8006bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bdc:	f000 ff8a 	bl	8007af4 <__ssprint_r>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f47e af7b 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006be6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006be8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006bea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006bee:	e766      	b.n	8006abe <_svfprintf_r+0x11d6>
 8006bf0:	f1bb 0f00 	cmp.w	fp, #0
 8006bf4:	bf08      	it	eq
 8006bf6:	f04f 0b01 	moveq.w	fp, #1
 8006bfa:	e672      	b.n	80068e2 <_svfprintf_r+0xffa>
 8006bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8006bfe:	4617      	mov	r7, r2
 8006c00:	e557      	b.n	80066b2 <_svfprintf_r+0xdca>
 8006c02:	930e      	str	r3, [sp, #56]	; 0x38
 8006c04:	e6f3      	b.n	80069ee <_svfprintf_r+0x1106>
 8006c06:	3304      	adds	r3, #4
 8006c08:	6814      	ldr	r4, [r2, #0]
 8006c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	f7ff ba1e 	b.w	800604e <_svfprintf_r+0x766>
 8006c12:	272d      	movs	r7, #45	; 0x2d
 8006c14:	9308      	str	r3, [sp, #32]
 8006c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006c1e:	f04f 0b00 	mov.w	fp, #0
 8006c22:	f7ff b834 	b.w	8005c8e <_svfprintf_r+0x3a6>
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7fb f84a 	bl	8001cc0 <strlen>
 8006c2c:	46a3      	mov	fp, r4
 8006c2e:	4603      	mov	r3, r0
 8006c30:	900d      	str	r0, [sp, #52]	; 0x34
 8006c32:	f7ff ba9d 	b.w	8006170 <_svfprintf_r+0x888>
 8006c36:	aa27      	add	r2, sp, #156	; 0x9c
 8006c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c3c:	f000 ff5a 	bl	8007af4 <__ssprint_r>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	f47e af4b 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006c46:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006c4a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c4e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006c50:	f8c9 6000 	str.w	r6, [r9]
 8006c54:	3301      	adds	r3, #1
 8006c56:	440c      	add	r4, r1
 8006c58:	2b07      	cmp	r3, #7
 8006c5a:	9429      	str	r4, [sp, #164]	; 0xa4
 8006c5c:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c5e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006c62:	f77f a8d5 	ble.w	8005e10 <_svfprintf_r+0x528>
 8006c66:	f7ff bbf6 	b.w	8006456 <_svfprintf_r+0xb6e>
 8006c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c6c:	1cdd      	adds	r5, r3, #3
 8006c6e:	db1e      	blt.n	8006cae <_svfprintf_r+0x13c6>
 8006c70:	459b      	cmp	fp, r3
 8006c72:	db1c      	blt.n	8006cae <_svfprintf_r+0x13c6>
 8006c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c76:	e688      	b.n	800698a <_svfprintf_r+0x10a2>
 8006c78:	4623      	mov	r3, r4
 8006c7a:	e677      	b.n	800696c <_svfprintf_r+0x1084>
 8006c7c:	aa27      	add	r2, sp, #156	; 0x9c
 8006c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c82:	f000 ff37 	bl	8007af4 <__ssprint_r>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f47e af28 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006c8c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c8e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c92:	e447      	b.n	8006524 <_svfprintf_r+0xc3c>
 8006c94:	4614      	mov	r4, r2
 8006c96:	3301      	adds	r3, #1
 8006c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c9a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c9c:	442c      	add	r4, r5
 8006c9e:	2b07      	cmp	r3, #7
 8006ca0:	9429      	str	r4, [sp, #164]	; 0xa4
 8006ca2:	e889 0024 	stmia.w	r9, {r2, r5}
 8006ca6:	dcc6      	bgt.n	8006c36 <_svfprintf_r+0x134e>
 8006ca8:	f109 0908 	add.w	r9, r9, #8
 8006cac:	e7cf      	b.n	8006c4e <_svfprintf_r+0x1366>
 8006cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cb0:	3a02      	subs	r2, #2
 8006cb2:	9211      	str	r2, [sp, #68]	; 0x44
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006cbc:	9321      	str	r3, [sp, #132]	; 0x84
 8006cbe:	bfb8      	it	lt
 8006cc0:	425b      	neglt	r3, r3
 8006cc2:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8006cc6:	bfb4      	ite	lt
 8006cc8:	222d      	movlt	r2, #45	; 0x2d
 8006cca:	222b      	movge	r2, #43	; 0x2b
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8006cd2:	f340 80ee 	ble.w	8006eb2 <_svfprintf_r+0x15ca>
 8006cd6:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4a25      	ldr	r2, [pc, #148]	; (8006d74 <_svfprintf_r+0x148c>)
 8006cde:	fb82 2103 	smull	r2, r1, r2, r3
 8006ce2:	17da      	asrs	r2, r3, #31
 8006ce4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8006ce8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006cec:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8006cf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cf4:	2a09      	cmp	r2, #9
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8006cfc:	dcee      	bgt.n	8006cdc <_svfprintf_r+0x13f4>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	3330      	adds	r3, #48	; 0x30
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8006d08:	4288      	cmp	r0, r1
 8006d0a:	f240 8137 	bls.w	8006f7c <_svfprintf_r+0x1694>
 8006d0e:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8006d12:	4623      	mov	r3, r4
 8006d14:	e001      	b.n	8006d1a <_svfprintf_r+0x1432>
 8006d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d1a:	f801 2b01 	strb.w	r2, [r1], #1
 8006d1e:	4298      	cmp	r0, r3
 8006d20:	d1f9      	bne.n	8006d16 <_svfprintf_r+0x142e>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	1b1b      	subs	r3, r3, r4
 8006d26:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8006d2a:	4413      	add	r3, r2
 8006d2c:	aa23      	add	r2, sp, #140	; 0x8c
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d32:	9319      	str	r3, [sp, #100]	; 0x64
 8006d34:	2a01      	cmp	r2, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	930d      	str	r3, [sp, #52]	; 0x34
 8006d3a:	f340 80ea 	ble.w	8006f12 <_svfprintf_r+0x162a>
 8006d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d42:	4413      	add	r3, r2
 8006d44:	2200      	movs	r2, #0
 8006d46:	930d      	str	r3, [sp, #52]	; 0x34
 8006d48:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d4e:	e62a      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006d50:	aa27      	add	r2, sp, #156	; 0x9c
 8006d52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d56:	f000 fecd 	bl	8007af4 <__ssprint_r>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f47e aebe 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d62:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d64:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d68:	e4e6      	b.n	8006738 <_svfprintf_r+0xe50>
 8006d6a:	bf00      	nop
 8006d6c:	080089b4 	.word	0x080089b4
 8006d70:	08008ad4 	.word	0x08008ad4
 8006d74:	66666667 	.word	0x66666667
 8006d78:	aa27      	add	r2, sp, #156	; 0x9c
 8006d7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d7e:	f000 feb9 	bl	8007af4 <__ssprint_r>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	f47e aeaa 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d8c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d94:	e4e8      	b.n	8006768 <_svfprintf_r+0xe80>
 8006d96:	2d06      	cmp	r5, #6
 8006d98:	462b      	mov	r3, r5
 8006d9a:	bf28      	it	cs
 8006d9c:	2306      	movcs	r3, #6
 8006d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8006da0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006da4:	46b3      	mov	fp, r6
 8006da6:	970e      	str	r7, [sp, #56]	; 0x38
 8006da8:	9613      	str	r6, [sp, #76]	; 0x4c
 8006daa:	4637      	mov	r7, r6
 8006dac:	9308      	str	r3, [sp, #32]
 8006dae:	4e88      	ldr	r6, [pc, #544]	; (8006fd0 <_svfprintf_r+0x16e8>)
 8006db0:	f7fe bf6c 	b.w	8005c8c <_svfprintf_r+0x3a4>
 8006db4:	f04f 0b06 	mov.w	fp, #6
 8006db8:	e593      	b.n	80068e2 <_svfprintf_r+0xffa>
 8006dba:	a825      	add	r0, sp, #148	; 0x94
 8006dbc:	a922      	add	r1, sp, #136	; 0x88
 8006dbe:	aa21      	add	r2, sp, #132	; 0x84
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	9004      	str	r0, [sp, #16]
 8006dc4:	9202      	str	r2, [sp, #8]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	f8cd b004 	str.w	fp, [sp, #4]
 8006dcc:	9103      	str	r1, [sp, #12]
 8006dce:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006dd4:	f7fc fcd4 	bl	8003780 <_dtoa_r>
 8006dd8:	465d      	mov	r5, fp
 8006dda:	4606      	mov	r6, r0
 8006ddc:	eb00 040b 	add.w	r4, r0, fp
 8006de0:	e6f2      	b.n	8006bc8 <_svfprintf_r+0x12e0>
 8006de2:	272d      	movs	r7, #45	; 0x2d
 8006de4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006de8:	f7ff b8a3 	b.w	8005f32 <_svfprintf_r+0x64a>
 8006dec:	9307      	str	r3, [sp, #28]
 8006dee:	f7ff b94c 	b.w	800608a <_svfprintf_r+0x7a2>
 8006df2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006df6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8006dfa:	931d      	str	r3, [sp, #116]	; 0x74
 8006dfc:	232d      	movs	r3, #45	; 0x2d
 8006dfe:	911c      	str	r1, [sp, #112]	; 0x70
 8006e00:	9308      	str	r3, [sp, #32]
 8006e02:	e57c      	b.n	80068fe <_svfprintf_r+0x1016>
 8006e04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e08:	4413      	add	r3, r2
 8006e0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	f340 8089 	ble.w	8006f26 <_svfprintf_r+0x163e>
 8006e14:	2267      	movs	r2, #103	; 0x67
 8006e16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e1a:	9211      	str	r2, [sp, #68]	; 0x44
 8006e1c:	e5c3      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e20:	2b47      	cmp	r3, #71	; 0x47
 8006e22:	f47f ad8f 	bne.w	8006944 <_svfprintf_r+0x105c>
 8006e26:	9b07      	ldr	r3, [sp, #28]
 8006e28:	07db      	lsls	r3, r3, #31
 8006e2a:	f53f aec7 	bmi.w	8006bbc <_svfprintf_r+0x12d4>
 8006e2e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006e30:	2f47      	cmp	r7, #71	; 0x47
 8006e32:	eba3 0306 	sub.w	r3, r3, r6
 8006e36:	9312      	str	r3, [sp, #72]	; 0x48
 8006e38:	f43f af17 	beq.w	8006c6a <_svfprintf_r+0x1382>
 8006e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e3e:	e739      	b.n	8006cb4 <_svfprintf_r+0x13cc>
 8006e40:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8006e44:	970e      	str	r7, [sp, #56]	; 0x38
 8006e46:	9308      	str	r3, [sp, #32]
 8006e48:	950d      	str	r5, [sp, #52]	; 0x34
 8006e4a:	4683      	mov	fp, r0
 8006e4c:	9013      	str	r0, [sp, #76]	; 0x4c
 8006e4e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006e52:	f7fe bf1b 	b.w	8005c8c <_svfprintf_r+0x3a4>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd6d      	ble.n	8006f36 <_svfprintf_r+0x164e>
 8006e5a:	f1bb 0f00 	cmp.w	fp, #0
 8006e5e:	d14f      	bne.n	8006f00 <_svfprintf_r+0x1618>
 8006e60:	9a07      	ldr	r2, [sp, #28]
 8006e62:	07d4      	lsls	r4, r2, #31
 8006e64:	d44c      	bmi.n	8006f00 <_svfprintf_r+0x1618>
 8006e66:	461a      	mov	r2, r3
 8006e68:	920d      	str	r2, [sp, #52]	; 0x34
 8006e6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e6e:	e59a      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	07db      	lsls	r3, r3, #31
 8006e74:	465f      	mov	r7, fp
 8006e76:	d505      	bpl.n	8006e84 <_svfprintf_r+0x159c>
 8006e78:	ae44      	add	r6, sp, #272	; 0x110
 8006e7a:	2330      	movs	r3, #48	; 0x30
 8006e7c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8006e80:	f7fe befa 	b.w	8005c78 <_svfprintf_r+0x390>
 8006e84:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006e88:	ae34      	add	r6, sp, #208	; 0xd0
 8006e8a:	f7fe bef8 	b.w	8005c7e <_svfprintf_r+0x396>
 8006e8e:	aa27      	add	r2, sp, #156	; 0x9c
 8006e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e94:	f000 fe2e 	bl	8007af4 <__ssprint_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	f47e ae1f 	bne.w	8005adc <_svfprintf_r+0x1f4>
 8006e9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006ea0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ea4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006ea8:	e620      	b.n	8006aec <_svfprintf_r+0x1204>
 8006eaa:	46a0      	mov	r8, r4
 8006eac:	2500      	movs	r5, #0
 8006eae:	f7fe bd77 	b.w	80059a0 <_svfprintf_r+0xb8>
 8006eb2:	3330      	adds	r3, #48	; 0x30
 8006eb4:	2230      	movs	r2, #48	; 0x30
 8006eb6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8006eba:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8006ebe:	ab24      	add	r3, sp, #144	; 0x90
 8006ec0:	e734      	b.n	8006d2c <_svfprintf_r+0x1444>
 8006ec2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006ec4:	e552      	b.n	800696c <_svfprintf_r+0x1084>
 8006ec6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eca:	4413      	add	r3, r2
 8006ecc:	2267      	movs	r2, #103	; 0x67
 8006ece:	930d      	str	r3, [sp, #52]	; 0x34
 8006ed0:	9211      	str	r2, [sp, #68]	; 0x44
 8006ed2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ed6:	e566      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006ed8:	4e3e      	ldr	r6, [pc, #248]	; (8006fd4 <_svfprintf_r+0x16ec>)
 8006eda:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <_svfprintf_r+0x16f0>)
 8006edc:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006ee0:	f7ff b829 	b.w	8005f36 <_svfprintf_r+0x64e>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006eec:	f001 fb30 	bl	8008550 <__aeabi_dcmpeq>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f47f ae6d 	bne.w	8006bd0 <_svfprintf_r+0x12e8>
 8006ef6:	f1c5 0501 	rsb	r5, r5, #1
 8006efa:	9521      	str	r5, [sp, #132]	; 0x84
 8006efc:	442c      	add	r4, r5
 8006efe:	e522      	b.n	8006946 <_svfprintf_r+0x105e>
 8006f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f04:	189d      	adds	r5, r3, r2
 8006f06:	eb05 030b 	add.w	r3, r5, fp
 8006f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f10:	e549      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	f013 0301 	ands.w	r3, r3, #1
 8006f18:	f47f af11 	bne.w	8006d3e <_svfprintf_r+0x1456>
 8006f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f24:	e53f      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f2a:	f1c3 0301 	rsb	r3, r3, #1
 8006f2e:	441a      	add	r2, r3
 8006f30:	4613      	mov	r3, r2
 8006f32:	920d      	str	r2, [sp, #52]	; 0x34
 8006f34:	e76e      	b.n	8006e14 <_svfprintf_r+0x152c>
 8006f36:	f1bb 0f00 	cmp.w	fp, #0
 8006f3a:	d102      	bne.n	8006f42 <_svfprintf_r+0x165a>
 8006f3c:	9b07      	ldr	r3, [sp, #28]
 8006f3e:	07d8      	lsls	r0, r3, #31
 8006f40:	d507      	bpl.n	8006f52 <_svfprintf_r+0x166a>
 8006f42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f44:	1c5d      	adds	r5, r3, #1
 8006f46:	eb05 030b 	add.w	r3, r5, fp
 8006f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f50:	e529      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006f52:	2301      	movs	r3, #1
 8006f54:	930d      	str	r3, [sp, #52]	; 0x34
 8006f56:	e526      	b.n	80069a6 <_svfprintf_r+0x10be>
 8006f58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f5a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f5e:	6805      	ldr	r5, [r0, #0]
 8006f60:	3004      	adds	r0, #4
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	900e      	str	r0, [sp, #56]	; 0x38
 8006f66:	46a0      	mov	r8, r4
 8006f68:	f6be ad18 	bge.w	800599c <_svfprintf_r+0xb4>
 8006f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f70:	f7fe bd14 	b.w	800599c <_svfprintf_r+0xb4>
 8006f74:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006f78:	f7fe bdc1 	b.w	8005afe <_svfprintf_r+0x216>
 8006f7c:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8006f80:	e6d4      	b.n	8006d2c <_svfprintf_r+0x1444>
 8006f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f84:	230c      	movs	r3, #12
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	f7fe bdaf 	b.w	8005aee <_svfprintf_r+0x206>
 8006f90:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006f94:	f7fe be30 	b.w	8005bf8 <_svfprintf_r+0x310>
 8006f98:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006f9c:	f7fe bf92 	b.w	8005ec4 <_svfprintf_r+0x5dc>
 8006fa0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006fa4:	f7ff b845 	b.w	8006032 <_svfprintf_r+0x74a>
 8006fa8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006fac:	f7ff b813 	b.w	8005fd6 <_svfprintf_r+0x6ee>
 8006fb0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006fb4:	f7fe bfe5 	b.w	8005f82 <_svfprintf_r+0x69a>
 8006fb8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006fbc:	f7ff b92d 	b.w	800621a <_svfprintf_r+0x932>
 8006fc0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006fc4:	f7ff b908 	b.w	80061d8 <_svfprintf_r+0x8f0>
 8006fc8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006fcc:	f7ff b8e6 	b.w	800619c <_svfprintf_r+0x8b4>
 8006fd0:	080089ac 	.word	0x080089ac
 8006fd4:	08008980 	.word	0x08008980
 8006fd8:	0800897c 	.word	0x0800897c

08006fdc <__sprint_r.part.0>:
 8006fdc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe2:	049c      	lsls	r4, r3, #18
 8006fe4:	4692      	mov	sl, r2
 8006fe6:	d52c      	bpl.n	8007042 <__sprint_r.part.0+0x66>
 8006fe8:	6893      	ldr	r3, [r2, #8]
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	b33b      	cbz	r3, 800703e <__sprint_r.part.0+0x62>
 8006fee:	460f      	mov	r7, r1
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	f102 0908 	add.w	r9, r2, #8
 8006ff6:	e919 0060 	ldmdb	r9, {r5, r6}
 8006ffa:	08b6      	lsrs	r6, r6, #2
 8006ffc:	d017      	beq.n	800702e <__sprint_r.part.0+0x52>
 8006ffe:	3d04      	subs	r5, #4
 8007000:	2400      	movs	r4, #0
 8007002:	e001      	b.n	8007008 <__sprint_r.part.0+0x2c>
 8007004:	42a6      	cmp	r6, r4
 8007006:	d010      	beq.n	800702a <__sprint_r.part.0+0x4e>
 8007008:	463a      	mov	r2, r7
 800700a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800700e:	4640      	mov	r0, r8
 8007010:	f000 f910 	bl	8007234 <_fputwc_r>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	f104 0401 	add.w	r4, r4, #1
 800701a:	d1f3      	bne.n	8007004 <__sprint_r.part.0+0x28>
 800701c:	2300      	movs	r3, #0
 800701e:	f8ca 3008 	str.w	r3, [sl, #8]
 8007022:	f8ca 3004 	str.w	r3, [sl, #4]
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800702e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8007032:	f8ca 3008 	str.w	r3, [sl, #8]
 8007036:	f109 0908 	add.w	r9, r9, #8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1db      	bne.n	8006ff6 <__sprint_r.part.0+0x1a>
 800703e:	2000      	movs	r0, #0
 8007040:	e7ec      	b.n	800701c <__sprint_r.part.0+0x40>
 8007042:	f000 f91f 	bl	8007284 <__sfvwrite_r>
 8007046:	2300      	movs	r3, #0
 8007048:	f8ca 3008 	str.w	r3, [sl, #8]
 800704c:	f8ca 3004 	str.w	r3, [sl, #4]
 8007050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007054 <__sprint_r>:
 8007054:	6893      	ldr	r3, [r2, #8]
 8007056:	b10b      	cbz	r3, 800705c <__sprint_r+0x8>
 8007058:	f7ff bfc0 	b.w	8006fdc <__sprint_r.part.0>
 800705c:	b410      	push	{r4}
 800705e:	4618      	mov	r0, r3
 8007060:	6053      	str	r3, [r2, #4]
 8007062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007066:	4770      	bx	lr

08007068 <_write_r>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	460d      	mov	r5, r1
 800706c:	4c08      	ldr	r4, [pc, #32]	; (8007090 <_write_r+0x28>)
 800706e:	4611      	mov	r1, r2
 8007070:	4606      	mov	r6, r0
 8007072:	461a      	mov	r2, r3
 8007074:	4628      	mov	r0, r5
 8007076:	2300      	movs	r3, #0
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	f7f9 fb1b 	bl	80006b4 <_write>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d000      	beq.n	8007084 <_write_r+0x1c>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0fb      	beq.n	8007082 <_write_r+0x1a>
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	bf00      	nop
 8007090:	20000a74 	.word	0x20000a74

08007094 <_calloc_r>:
 8007094:	b510      	push	{r4, lr}
 8007096:	fb02 f101 	mul.w	r1, r2, r1
 800709a:	f7fd fdab 	bl	8004bf4 <_malloc_r>
 800709e:	4604      	mov	r4, r0
 80070a0:	b1d8      	cbz	r0, 80070da <_calloc_r+0x46>
 80070a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80070a6:	f022 0203 	bic.w	r2, r2, #3
 80070aa:	3a04      	subs	r2, #4
 80070ac:	2a24      	cmp	r2, #36	; 0x24
 80070ae:	d818      	bhi.n	80070e2 <_calloc_r+0x4e>
 80070b0:	2a13      	cmp	r2, #19
 80070b2:	d914      	bls.n	80070de <_calloc_r+0x4a>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2a1b      	cmp	r2, #27
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	6043      	str	r3, [r0, #4]
 80070bc:	d916      	bls.n	80070ec <_calloc_r+0x58>
 80070be:	2a24      	cmp	r2, #36	; 0x24
 80070c0:	6083      	str	r3, [r0, #8]
 80070c2:	60c3      	str	r3, [r0, #12]
 80070c4:	bf11      	iteee	ne
 80070c6:	f100 0210 	addne.w	r2, r0, #16
 80070ca:	6103      	streq	r3, [r0, #16]
 80070cc:	6143      	streq	r3, [r0, #20]
 80070ce:	f100 0218 	addeq.w	r2, r0, #24
 80070d2:	2300      	movs	r3, #0
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	6053      	str	r3, [r2, #4]
 80070d8:	6093      	str	r3, [r2, #8]
 80070da:	4620      	mov	r0, r4
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	4602      	mov	r2, r0
 80070e0:	e7f7      	b.n	80070d2 <_calloc_r+0x3e>
 80070e2:	2100      	movs	r1, #0
 80070e4:	f7fa fd80 	bl	8001be8 <memset>
 80070e8:	4620      	mov	r0, r4
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	f100 0208 	add.w	r2, r0, #8
 80070f0:	e7ef      	b.n	80070d2 <_calloc_r+0x3e>
 80070f2:	bf00      	nop

080070f4 <_close_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4c07      	ldr	r4, [pc, #28]	; (8007114 <_close_r+0x20>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4605      	mov	r5, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	6023      	str	r3, [r4, #0]
 8007100:	f7f9 fdc4 	bl	8000c8c <_close>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d000      	beq.n	800710a <_close_r+0x16>
 8007108:	bd38      	pop	{r3, r4, r5, pc}
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0fb      	beq.n	8007108 <_close_r+0x14>
 8007110:	602b      	str	r3, [r5, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20000a74 	.word	0x20000a74

08007118 <_fclose_r>:
 8007118:	2900      	cmp	r1, #0
 800711a:	d03d      	beq.n	8007198 <_fclose_r+0x80>
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4605      	mov	r5, r0
 8007120:	460c      	mov	r4, r1
 8007122:	b108      	cbz	r0, 8007128 <_fclose_r+0x10>
 8007124:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007126:	b37b      	cbz	r3, 8007188 <_fclose_r+0x70>
 8007128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712c:	b90b      	cbnz	r3, 8007132 <_fclose_r+0x1a>
 800712e:	2000      	movs	r0, #0
 8007130:	bd70      	pop	{r4, r5, r6, pc}
 8007132:	4621      	mov	r1, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f7fd fa39 	bl	80045ac <__sflush_r>
 800713a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800713c:	4606      	mov	r6, r0
 800713e:	b133      	cbz	r3, 800714e <_fclose_r+0x36>
 8007140:	69e1      	ldr	r1, [r4, #28]
 8007142:	4628      	mov	r0, r5
 8007144:	4798      	blx	r3
 8007146:	2800      	cmp	r0, #0
 8007148:	bfb8      	it	lt
 800714a:	f04f 36ff 	movlt.w	r6, #4294967295
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	061b      	lsls	r3, r3, #24
 8007152:	d41c      	bmi.n	800718e <_fclose_r+0x76>
 8007154:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007156:	b141      	cbz	r1, 800716a <_fclose_r+0x52>
 8007158:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800715c:	4299      	cmp	r1, r3
 800715e:	d002      	beq.n	8007166 <_fclose_r+0x4e>
 8007160:	4628      	mov	r0, r5
 8007162:	f7fd fbb3 	bl	80048cc <_free_r>
 8007166:	2300      	movs	r3, #0
 8007168:	6323      	str	r3, [r4, #48]	; 0x30
 800716a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800716c:	b121      	cbz	r1, 8007178 <_fclose_r+0x60>
 800716e:	4628      	mov	r0, r5
 8007170:	f7fd fbac 	bl	80048cc <_free_r>
 8007174:	2300      	movs	r3, #0
 8007176:	6463      	str	r3, [r4, #68]	; 0x44
 8007178:	f7fd fb56 	bl	8004828 <__sfp_lock_acquire>
 800717c:	2300      	movs	r3, #0
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	f7fd fb54 	bl	800482c <__sfp_lock_release>
 8007184:	4630      	mov	r0, r6
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	f7fd fb48 	bl	800481c <__sinit>
 800718c:	e7cc      	b.n	8007128 <_fclose_r+0x10>
 800718e:	6921      	ldr	r1, [r4, #16]
 8007190:	4628      	mov	r0, r5
 8007192:	f7fd fb9b 	bl	80048cc <_free_r>
 8007196:	e7dd      	b.n	8007154 <_fclose_r+0x3c>
 8007198:	2000      	movs	r0, #0
 800719a:	4770      	bx	lr

0800719c <__fputwc>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	4680      	mov	r8, r0
 80071a4:	4689      	mov	r9, r1
 80071a6:	4614      	mov	r4, r2
 80071a8:	f000 fa00 	bl	80075ac <__locale_mb_cur_max>
 80071ac:	2801      	cmp	r0, #1
 80071ae:	d033      	beq.n	8007218 <__fputwc+0x7c>
 80071b0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80071b4:	464a      	mov	r2, r9
 80071b6:	a901      	add	r1, sp, #4
 80071b8:	4640      	mov	r0, r8
 80071ba:	f000 fd71 	bl	8007ca0 <_wcrtomb_r>
 80071be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071c2:	4682      	mov	sl, r0
 80071c4:	d021      	beq.n	800720a <__fputwc+0x6e>
 80071c6:	b388      	cbz	r0, 800722c <__fputwc+0x90>
 80071c8:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80071cc:	2500      	movs	r5, #0
 80071ce:	e008      	b.n	80071e2 <__fputwc+0x46>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	701e      	strb	r6, [r3, #0]
 80071d8:	3501      	adds	r5, #1
 80071da:	4555      	cmp	r5, sl
 80071dc:	d226      	bcs.n	800722c <__fputwc+0x90>
 80071de:	ab01      	add	r3, sp, #4
 80071e0:	5d5e      	ldrb	r6, [r3, r5]
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	60a3      	str	r3, [r4, #8]
 80071ea:	daf1      	bge.n	80071d0 <__fputwc+0x34>
 80071ec:	69a7      	ldr	r7, [r4, #24]
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	4631      	mov	r1, r6
 80071f2:	4622      	mov	r2, r4
 80071f4:	4640      	mov	r0, r8
 80071f6:	db01      	blt.n	80071fc <__fputwc+0x60>
 80071f8:	2e0a      	cmp	r6, #10
 80071fa:	d1e9      	bne.n	80071d0 <__fputwc+0x34>
 80071fc:	f000 fcfa 	bl	8007bf4 <__swbuf_r>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d1e9      	bne.n	80071d8 <__fputwc+0x3c>
 8007204:	b002      	add	sp, #8
 8007206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	b002      	add	sp, #8
 8007214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007218:	f109 33ff 	add.w	r3, r9, #4294967295
 800721c:	2bfe      	cmp	r3, #254	; 0xfe
 800721e:	d8c7      	bhi.n	80071b0 <__fputwc+0x14>
 8007220:	fa5f f689 	uxtb.w	r6, r9
 8007224:	4682      	mov	sl, r0
 8007226:	f88d 6004 	strb.w	r6, [sp, #4]
 800722a:	e7cf      	b.n	80071cc <__fputwc+0x30>
 800722c:	4648      	mov	r0, r9
 800722e:	b002      	add	sp, #8
 8007230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007234 <_fputwc_r>:
 8007234:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8007238:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800723c:	d10b      	bne.n	8007256 <_fputwc_r+0x22>
 800723e:	b410      	push	{r4}
 8007240:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8007242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007246:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800724a:	6654      	str	r4, [r2, #100]	; 0x64
 800724c:	8193      	strh	r3, [r2, #12]
 800724e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007252:	f7ff bfa3 	b.w	800719c <__fputwc>
 8007256:	f7ff bfa1 	b.w	800719c <__fputwc>
 800725a:	bf00      	nop

0800725c <_fstat_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	460b      	mov	r3, r1
 8007260:	4c07      	ldr	r4, [pc, #28]	; (8007280 <_fstat_r+0x24>)
 8007262:	4605      	mov	r5, r0
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	2300      	movs	r3, #0
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	f7f9 fd18 	bl	8000ca0 <_fstat>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d000      	beq.n	8007276 <_fstat_r+0x1a>
 8007274:	bd38      	pop	{r3, r4, r5, pc}
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0fb      	beq.n	8007274 <_fstat_r+0x18>
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20000a74 	.word	0x20000a74

08007284 <__sfvwrite_r>:
 8007284:	6893      	ldr	r3, [r2, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d076      	beq.n	8007378 <__sfvwrite_r+0xf4>
 800728a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728e:	898b      	ldrh	r3, [r1, #12]
 8007290:	b085      	sub	sp, #20
 8007292:	460c      	mov	r4, r1
 8007294:	0719      	lsls	r1, r3, #28
 8007296:	9001      	str	r0, [sp, #4]
 8007298:	4616      	mov	r6, r2
 800729a:	d529      	bpl.n	80072f0 <__sfvwrite_r+0x6c>
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	b33a      	cbz	r2, 80072f0 <__sfvwrite_r+0x6c>
 80072a0:	f003 0802 	and.w	r8, r3, #2
 80072a4:	fa1f f088 	uxth.w	r0, r8
 80072a8:	6835      	ldr	r5, [r6, #0]
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d02f      	beq.n	800730e <__sfvwrite_r+0x8a>
 80072ae:	f04f 0900 	mov.w	r9, #0
 80072b2:	4fb4      	ldr	r7, [pc, #720]	; (8007584 <__sfvwrite_r+0x300>)
 80072b4:	46c8      	mov	r8, r9
 80072b6:	46b2      	mov	sl, r6
 80072b8:	45b8      	cmp	r8, r7
 80072ba:	4643      	mov	r3, r8
 80072bc:	464a      	mov	r2, r9
 80072be:	bf28      	it	cs
 80072c0:	463b      	movcs	r3, r7
 80072c2:	9801      	ldr	r0, [sp, #4]
 80072c4:	f1b8 0f00 	cmp.w	r8, #0
 80072c8:	d050      	beq.n	800736c <__sfvwrite_r+0xe8>
 80072ca:	69e1      	ldr	r1, [r4, #28]
 80072cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072ce:	47b0      	blx	r6
 80072d0:	2800      	cmp	r0, #0
 80072d2:	dd71      	ble.n	80073b8 <__sfvwrite_r+0x134>
 80072d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80072d8:	1a1b      	subs	r3, r3, r0
 80072da:	4481      	add	r9, r0
 80072dc:	ebc0 0808 	rsb	r8, r0, r8
 80072e0:	f8ca 3008 	str.w	r3, [sl, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e7      	bne.n	80072b8 <__sfvwrite_r+0x34>
 80072e8:	2000      	movs	r0, #0
 80072ea:	b005      	add	sp, #20
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	4621      	mov	r1, r4
 80072f2:	9801      	ldr	r0, [sp, #4]
 80072f4:	f7fc f94c 	bl	8003590 <__swsetup_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	f040 813a 	bne.w	8007572 <__sfvwrite_r+0x2ee>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	6835      	ldr	r5, [r6, #0]
 8007302:	f003 0802 	and.w	r8, r3, #2
 8007306:	fa1f f088 	uxth.w	r0, r8
 800730a:	2800      	cmp	r0, #0
 800730c:	d1cf      	bne.n	80072ae <__sfvwrite_r+0x2a>
 800730e:	f013 0901 	ands.w	r9, r3, #1
 8007312:	d15b      	bne.n	80073cc <__sfvwrite_r+0x148>
 8007314:	464f      	mov	r7, r9
 8007316:	9602      	str	r6, [sp, #8]
 8007318:	b31f      	cbz	r7, 8007362 <__sfvwrite_r+0xde>
 800731a:	059a      	lsls	r2, r3, #22
 800731c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8007320:	d52c      	bpl.n	800737c <__sfvwrite_r+0xf8>
 8007322:	4547      	cmp	r7, r8
 8007324:	46c2      	mov	sl, r8
 8007326:	f0c0 80a4 	bcc.w	8007472 <__sfvwrite_r+0x1ee>
 800732a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800732e:	f040 80b1 	bne.w	8007494 <__sfvwrite_r+0x210>
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	4652      	mov	r2, sl
 8007336:	4649      	mov	r1, r9
 8007338:	f000 f972 	bl	8007620 <memmove>
 800733c:	68a0      	ldr	r0, [r4, #8]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	ebc8 0000 	rsb	r0, r8, r0
 8007344:	4453      	add	r3, sl
 8007346:	60a0      	str	r0, [r4, #8]
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	4638      	mov	r0, r7
 800734c:	9a02      	ldr	r2, [sp, #8]
 800734e:	6893      	ldr	r3, [r2, #8]
 8007350:	1a1b      	subs	r3, r3, r0
 8007352:	4481      	add	r9, r0
 8007354:	1a3f      	subs	r7, r7, r0
 8007356:	6093      	str	r3, [r2, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0c5      	beq.n	80072e8 <__sfvwrite_r+0x64>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	2f00      	cmp	r7, #0
 8007360:	d1db      	bne.n	800731a <__sfvwrite_r+0x96>
 8007362:	f8d5 9000 	ldr.w	r9, [r5]
 8007366:	686f      	ldr	r7, [r5, #4]
 8007368:	3508      	adds	r5, #8
 800736a:	e7d5      	b.n	8007318 <__sfvwrite_r+0x94>
 800736c:	f8d5 9000 	ldr.w	r9, [r5]
 8007370:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007374:	3508      	adds	r5, #8
 8007376:	e79f      	b.n	80072b8 <__sfvwrite_r+0x34>
 8007378:	2000      	movs	r0, #0
 800737a:	4770      	bx	lr
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	4298      	cmp	r0, r3
 8007382:	d803      	bhi.n	800738c <__sfvwrite_r+0x108>
 8007384:	6961      	ldr	r1, [r4, #20]
 8007386:	428f      	cmp	r7, r1
 8007388:	f080 80b7 	bcs.w	80074fa <__sfvwrite_r+0x276>
 800738c:	45b8      	cmp	r8, r7
 800738e:	bf28      	it	cs
 8007390:	46b8      	movcs	r8, r7
 8007392:	4642      	mov	r2, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f000 f943 	bl	8007620 <memmove>
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	ebc8 0303 	rsb	r3, r8, r3
 80073a2:	4442      	add	r2, r8
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d149      	bne.n	8007440 <__sfvwrite_r+0x1bc>
 80073ac:	4621      	mov	r1, r4
 80073ae:	9801      	ldr	r0, [sp, #4]
 80073b0:	f7fd f9a0 	bl	80046f4 <_fflush_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d043      	beq.n	8007440 <__sfvwrite_r+0x1bc>
 80073b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	b005      	add	sp, #20
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	4680      	mov	r8, r0
 80073ce:	9002      	str	r0, [sp, #8]
 80073d0:	4682      	mov	sl, r0
 80073d2:	4681      	mov	r9, r0
 80073d4:	f1b9 0f00 	cmp.w	r9, #0
 80073d8:	d02a      	beq.n	8007430 <__sfvwrite_r+0x1ac>
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d04c      	beq.n	800747a <__sfvwrite_r+0x1f6>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	6962      	ldr	r2, [r4, #20]
 80073e6:	45c8      	cmp	r8, r9
 80073e8:	46c3      	mov	fp, r8
 80073ea:	bf28      	it	cs
 80073ec:	46cb      	movcs	fp, r9
 80073ee:	4298      	cmp	r0, r3
 80073f0:	465f      	mov	r7, fp
 80073f2:	d904      	bls.n	80073fe <__sfvwrite_r+0x17a>
 80073f4:	68a3      	ldr	r3, [r4, #8]
 80073f6:	4413      	add	r3, r2
 80073f8:	459b      	cmp	fp, r3
 80073fa:	f300 8090 	bgt.w	800751e <__sfvwrite_r+0x29a>
 80073fe:	4593      	cmp	fp, r2
 8007400:	db20      	blt.n	8007444 <__sfvwrite_r+0x1c0>
 8007402:	4613      	mov	r3, r2
 8007404:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007406:	69e1      	ldr	r1, [r4, #28]
 8007408:	9801      	ldr	r0, [sp, #4]
 800740a:	4652      	mov	r2, sl
 800740c:	47b8      	blx	r7
 800740e:	1e07      	subs	r7, r0, #0
 8007410:	ddd2      	ble.n	80073b8 <__sfvwrite_r+0x134>
 8007412:	ebb8 0807 	subs.w	r8, r8, r7
 8007416:	d023      	beq.n	8007460 <__sfvwrite_r+0x1dc>
 8007418:	68b3      	ldr	r3, [r6, #8]
 800741a:	1bdb      	subs	r3, r3, r7
 800741c:	44ba      	add	sl, r7
 800741e:	ebc7 0909 	rsb	r9, r7, r9
 8007422:	60b3      	str	r3, [r6, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f43f af5f 	beq.w	80072e8 <__sfvwrite_r+0x64>
 800742a:	f1b9 0f00 	cmp.w	r9, #0
 800742e:	d1d4      	bne.n	80073da <__sfvwrite_r+0x156>
 8007430:	2300      	movs	r3, #0
 8007432:	f8d5 a000 	ldr.w	sl, [r5]
 8007436:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	3508      	adds	r5, #8
 800743e:	e7c9      	b.n	80073d4 <__sfvwrite_r+0x150>
 8007440:	4640      	mov	r0, r8
 8007442:	e783      	b.n	800734c <__sfvwrite_r+0xc8>
 8007444:	465a      	mov	r2, fp
 8007446:	4651      	mov	r1, sl
 8007448:	f000 f8ea 	bl	8007620 <memmove>
 800744c:	68a2      	ldr	r2, [r4, #8]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	ebcb 0202 	rsb	r2, fp, r2
 8007454:	445b      	add	r3, fp
 8007456:	ebb8 0807 	subs.w	r8, r8, r7
 800745a:	60a2      	str	r2, [r4, #8]
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	d1db      	bne.n	8007418 <__sfvwrite_r+0x194>
 8007460:	4621      	mov	r1, r4
 8007462:	9801      	ldr	r0, [sp, #4]
 8007464:	f7fd f946 	bl	80046f4 <_fflush_r>
 8007468:	2800      	cmp	r0, #0
 800746a:	d1a5      	bne.n	80073b8 <__sfvwrite_r+0x134>
 800746c:	f8cd 8008 	str.w	r8, [sp, #8]
 8007470:	e7d2      	b.n	8007418 <__sfvwrite_r+0x194>
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	46b8      	mov	r8, r7
 8007476:	46ba      	mov	sl, r7
 8007478:	e75c      	b.n	8007334 <__sfvwrite_r+0xb0>
 800747a:	464a      	mov	r2, r9
 800747c:	210a      	movs	r1, #10
 800747e:	4650      	mov	r0, sl
 8007480:	f7fd fe76 	bl	8005170 <memchr>
 8007484:	2800      	cmp	r0, #0
 8007486:	d06f      	beq.n	8007568 <__sfvwrite_r+0x2e4>
 8007488:	3001      	adds	r0, #1
 800748a:	2301      	movs	r3, #1
 800748c:	ebca 0800 	rsb	r8, sl, r0
 8007490:	9302      	str	r3, [sp, #8]
 8007492:	e7a5      	b.n	80073e0 <__sfvwrite_r+0x15c>
 8007494:	6962      	ldr	r2, [r4, #20]
 8007496:	6820      	ldr	r0, [r4, #0]
 8007498:	6921      	ldr	r1, [r4, #16]
 800749a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800749e:	ebc1 0a00 	rsb	sl, r1, r0
 80074a2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80074a6:	f10a 0001 	add.w	r0, sl, #1
 80074aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074ae:	4438      	add	r0, r7
 80074b0:	4540      	cmp	r0, r8
 80074b2:	4642      	mov	r2, r8
 80074b4:	bf84      	itt	hi
 80074b6:	4680      	movhi	r8, r0
 80074b8:	4642      	movhi	r2, r8
 80074ba:	055b      	lsls	r3, r3, #21
 80074bc:	d542      	bpl.n	8007544 <__sfvwrite_r+0x2c0>
 80074be:	4611      	mov	r1, r2
 80074c0:	9801      	ldr	r0, [sp, #4]
 80074c2:	f7fd fb97 	bl	8004bf4 <_malloc_r>
 80074c6:	4683      	mov	fp, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d055      	beq.n	8007578 <__sfvwrite_r+0x2f4>
 80074cc:	4652      	mov	r2, sl
 80074ce:	6921      	ldr	r1, [r4, #16]
 80074d0:	f7fa faf0 	bl	8001ab4 <memcpy>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074de:	81a3      	strh	r3, [r4, #12]
 80074e0:	ebca 0308 	rsb	r3, sl, r8
 80074e4:	eb0b 000a 	add.w	r0, fp, sl
 80074e8:	f8c4 8014 	str.w	r8, [r4, #20]
 80074ec:	f8c4 b010 	str.w	fp, [r4, #16]
 80074f0:	6020      	str	r0, [r4, #0]
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	46b8      	mov	r8, r7
 80074f6:	46ba      	mov	sl, r7
 80074f8:	e71c      	b.n	8007334 <__sfvwrite_r+0xb0>
 80074fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80074fe:	42bb      	cmp	r3, r7
 8007500:	bf28      	it	cs
 8007502:	463b      	movcs	r3, r7
 8007504:	464a      	mov	r2, r9
 8007506:	fb93 f3f1 	sdiv	r3, r3, r1
 800750a:	9801      	ldr	r0, [sp, #4]
 800750c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	69e1      	ldr	r1, [r4, #28]
 8007514:	47b0      	blx	r6
 8007516:	2800      	cmp	r0, #0
 8007518:	f73f af18 	bgt.w	800734c <__sfvwrite_r+0xc8>
 800751c:	e74c      	b.n	80073b8 <__sfvwrite_r+0x134>
 800751e:	461a      	mov	r2, r3
 8007520:	4651      	mov	r1, sl
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	f000 f87c 	bl	8007620 <memmove>
 8007528:	6822      	ldr	r2, [r4, #0]
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	9801      	ldr	r0, [sp, #4]
 800752e:	441a      	add	r2, r3
 8007530:	6022      	str	r2, [r4, #0]
 8007532:	4621      	mov	r1, r4
 8007534:	f7fd f8de 	bl	80046f4 <_fflush_r>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	2800      	cmp	r0, #0
 800753c:	f47f af3c 	bne.w	80073b8 <__sfvwrite_r+0x134>
 8007540:	461f      	mov	r7, r3
 8007542:	e766      	b.n	8007412 <__sfvwrite_r+0x18e>
 8007544:	9801      	ldr	r0, [sp, #4]
 8007546:	f000 f8e5 	bl	8007714 <_realloc_r>
 800754a:	4683      	mov	fp, r0
 800754c:	2800      	cmp	r0, #0
 800754e:	d1c7      	bne.n	80074e0 <__sfvwrite_r+0x25c>
 8007550:	9d01      	ldr	r5, [sp, #4]
 8007552:	6921      	ldr	r1, [r4, #16]
 8007554:	4628      	mov	r0, r5
 8007556:	f7fd f9b9 	bl	80048cc <_free_r>
 800755a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755e:	220c      	movs	r2, #12
 8007560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	e729      	b.n	80073bc <__sfvwrite_r+0x138>
 8007568:	2301      	movs	r3, #1
 800756a:	f109 0801 	add.w	r8, r9, #1
 800756e:	9302      	str	r3, [sp, #8]
 8007570:	e736      	b.n	80073e0 <__sfvwrite_r+0x15c>
 8007572:	f04f 30ff 	mov.w	r0, #4294967295
 8007576:	e6b8      	b.n	80072ea <__sfvwrite_r+0x66>
 8007578:	9a01      	ldr	r2, [sp, #4]
 800757a:	230c      	movs	r3, #12
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007582:	e71b      	b.n	80073bc <__sfvwrite_r+0x138>
 8007584:	7ffffc00 	.word	0x7ffffc00

08007588 <_isatty_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4c07      	ldr	r4, [pc, #28]	; (80075a8 <_isatty_r+0x20>)
 800758c:	2300      	movs	r3, #0
 800758e:	4605      	mov	r5, r0
 8007590:	4608      	mov	r0, r1
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	f7f9 fbd8 	bl	8000d48 <_isatty>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d000      	beq.n	800759e <_isatty_r+0x16>
 800759c:	bd38      	pop	{r3, r4, r5, pc}
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0fb      	beq.n	800759c <_isatty_r+0x14>
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	20000a74 	.word	0x20000a74

080075ac <__locale_mb_cur_max>:
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <__locale_mb_cur_max+0x14>)
 80075ae:	4a05      	ldr	r2, [pc, #20]	; (80075c4 <__locale_mb_cur_max+0x18>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf08      	it	eq
 80075b8:	4613      	moveq	r3, r2
 80075ba:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80075be:	4770      	bx	lr
 80075c0:	20000460 	.word	0x20000460
 80075c4:	20000874 	.word	0x20000874

080075c8 <_lseek_r>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	460d      	mov	r5, r1
 80075cc:	4c08      	ldr	r4, [pc, #32]	; (80075f0 <_lseek_r+0x28>)
 80075ce:	4611      	mov	r1, r2
 80075d0:	4606      	mov	r6, r0
 80075d2:	461a      	mov	r2, r3
 80075d4:	4628      	mov	r0, r5
 80075d6:	2300      	movs	r3, #0
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	f7f9 fb3b 	bl	8000c54 <_lseek>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d000      	beq.n	80075e4 <_lseek_r+0x1c>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0fb      	beq.n	80075e2 <_lseek_r+0x1a>
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	bf00      	nop
 80075f0:	20000a74 	.word	0x20000a74

080075f4 <__ascii_mbtowc>:
 80075f4:	b082      	sub	sp, #8
 80075f6:	b149      	cbz	r1, 800760c <__ascii_mbtowc+0x18>
 80075f8:	b15a      	cbz	r2, 8007612 <__ascii_mbtowc+0x1e>
 80075fa:	b16b      	cbz	r3, 8007618 <__ascii_mbtowc+0x24>
 80075fc:	7813      	ldrb	r3, [r2, #0]
 80075fe:	600b      	str	r3, [r1, #0]
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	1c10      	adds	r0, r2, #0
 8007604:	bf18      	it	ne
 8007606:	2001      	movne	r0, #1
 8007608:	b002      	add	sp, #8
 800760a:	4770      	bx	lr
 800760c:	a901      	add	r1, sp, #4
 800760e:	2a00      	cmp	r2, #0
 8007610:	d1f3      	bne.n	80075fa <__ascii_mbtowc+0x6>
 8007612:	4610      	mov	r0, r2
 8007614:	b002      	add	sp, #8
 8007616:	4770      	bx	lr
 8007618:	f06f 0001 	mvn.w	r0, #1
 800761c:	e7f4      	b.n	8007608 <__ascii_mbtowc+0x14>
 800761e:	bf00      	nop

08007620 <memmove>:
 8007620:	4288      	cmp	r0, r1
 8007622:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007624:	d90d      	bls.n	8007642 <memmove+0x22>
 8007626:	188b      	adds	r3, r1, r2
 8007628:	4298      	cmp	r0, r3
 800762a:	d20a      	bcs.n	8007642 <memmove+0x22>
 800762c:	1881      	adds	r1, r0, r2
 800762e:	2a00      	cmp	r2, #0
 8007630:	d051      	beq.n	80076d6 <memmove+0xb6>
 8007632:	1a9a      	subs	r2, r3, r2
 8007634:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007638:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800763c:	4293      	cmp	r3, r2
 800763e:	d1f9      	bne.n	8007634 <memmove+0x14>
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007642:	2a0f      	cmp	r2, #15
 8007644:	d948      	bls.n	80076d8 <memmove+0xb8>
 8007646:	ea41 0300 	orr.w	r3, r1, r0
 800764a:	079b      	lsls	r3, r3, #30
 800764c:	d146      	bne.n	80076dc <memmove+0xbc>
 800764e:	f100 0410 	add.w	r4, r0, #16
 8007652:	f101 0310 	add.w	r3, r1, #16
 8007656:	4615      	mov	r5, r2
 8007658:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800765c:	f844 6c10 	str.w	r6, [r4, #-16]
 8007660:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8007664:	f844 6c0c 	str.w	r6, [r4, #-12]
 8007668:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800766c:	f844 6c08 	str.w	r6, [r4, #-8]
 8007670:	3d10      	subs	r5, #16
 8007672:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8007676:	f844 6c04 	str.w	r6, [r4, #-4]
 800767a:	2d0f      	cmp	r5, #15
 800767c:	f103 0310 	add.w	r3, r3, #16
 8007680:	f104 0410 	add.w	r4, r4, #16
 8007684:	d8e8      	bhi.n	8007658 <memmove+0x38>
 8007686:	f1a2 0310 	sub.w	r3, r2, #16
 800768a:	f023 030f 	bic.w	r3, r3, #15
 800768e:	f002 0e0f 	and.w	lr, r2, #15
 8007692:	3310      	adds	r3, #16
 8007694:	f1be 0f03 	cmp.w	lr, #3
 8007698:	4419      	add	r1, r3
 800769a:	4403      	add	r3, r0
 800769c:	d921      	bls.n	80076e2 <memmove+0xc2>
 800769e:	1f1e      	subs	r6, r3, #4
 80076a0:	460d      	mov	r5, r1
 80076a2:	4674      	mov	r4, lr
 80076a4:	3c04      	subs	r4, #4
 80076a6:	f855 7b04 	ldr.w	r7, [r5], #4
 80076aa:	f846 7f04 	str.w	r7, [r6, #4]!
 80076ae:	2c03      	cmp	r4, #3
 80076b0:	d8f8      	bhi.n	80076a4 <memmove+0x84>
 80076b2:	f1ae 0404 	sub.w	r4, lr, #4
 80076b6:	f024 0403 	bic.w	r4, r4, #3
 80076ba:	3404      	adds	r4, #4
 80076bc:	4423      	add	r3, r4
 80076be:	4421      	add	r1, r4
 80076c0:	f002 0203 	and.w	r2, r2, #3
 80076c4:	b162      	cbz	r2, 80076e0 <memmove+0xc0>
 80076c6:	3b01      	subs	r3, #1
 80076c8:	440a      	add	r2, r1
 80076ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d2:	428a      	cmp	r2, r1
 80076d4:	d1f9      	bne.n	80076ca <memmove+0xaa>
 80076d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d8:	4603      	mov	r3, r0
 80076da:	e7f3      	b.n	80076c4 <memmove+0xa4>
 80076dc:	4603      	mov	r3, r0
 80076de:	e7f2      	b.n	80076c6 <memmove+0xa6>
 80076e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e2:	4672      	mov	r2, lr
 80076e4:	e7ee      	b.n	80076c4 <memmove+0xa4>
 80076e6:	bf00      	nop

080076e8 <_read_r>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	460d      	mov	r5, r1
 80076ec:	4c08      	ldr	r4, [pc, #32]	; (8007710 <_read_r+0x28>)
 80076ee:	4611      	mov	r1, r2
 80076f0:	4606      	mov	r6, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	4628      	mov	r0, r5
 80076f6:	2300      	movs	r3, #0
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	f7f9 fab9 	bl	8000c70 <_read>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d000      	beq.n	8007704 <_read_r+0x1c>
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0fb      	beq.n	8007702 <_read_r+0x1a>
 800770a:	6033      	str	r3, [r6, #0]
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	bf00      	nop
 8007710:	20000a74 	.word	0x20000a74

08007714 <_realloc_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4617      	mov	r7, r2
 800771a:	b083      	sub	sp, #12
 800771c:	2900      	cmp	r1, #0
 800771e:	f000 80c1 	beq.w	80078a4 <_realloc_r+0x190>
 8007722:	460e      	mov	r6, r1
 8007724:	4681      	mov	r9, r0
 8007726:	f107 050b 	add.w	r5, r7, #11
 800772a:	f7fd fd71 	bl	8005210 <__malloc_lock>
 800772e:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8007732:	2d16      	cmp	r5, #22
 8007734:	f02e 0403 	bic.w	r4, lr, #3
 8007738:	f1a6 0808 	sub.w	r8, r6, #8
 800773c:	d840      	bhi.n	80077c0 <_realloc_r+0xac>
 800773e:	2210      	movs	r2, #16
 8007740:	4615      	mov	r5, r2
 8007742:	42af      	cmp	r7, r5
 8007744:	d841      	bhi.n	80077ca <_realloc_r+0xb6>
 8007746:	4294      	cmp	r4, r2
 8007748:	da75      	bge.n	8007836 <_realloc_r+0x122>
 800774a:	4bc9      	ldr	r3, [pc, #804]	; (8007a70 <_realloc_r+0x35c>)
 800774c:	6899      	ldr	r1, [r3, #8]
 800774e:	eb08 0004 	add.w	r0, r8, r4
 8007752:	4288      	cmp	r0, r1
 8007754:	6841      	ldr	r1, [r0, #4]
 8007756:	f000 80d9 	beq.w	800790c <_realloc_r+0x1f8>
 800775a:	f021 0301 	bic.w	r3, r1, #1
 800775e:	4403      	add	r3, r0
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	07db      	lsls	r3, r3, #31
 8007764:	d57d      	bpl.n	8007862 <_realloc_r+0x14e>
 8007766:	f01e 0f01 	tst.w	lr, #1
 800776a:	d035      	beq.n	80077d8 <_realloc_r+0xc4>
 800776c:	4639      	mov	r1, r7
 800776e:	4648      	mov	r0, r9
 8007770:	f7fd fa40 	bl	8004bf4 <_malloc_r>
 8007774:	4607      	mov	r7, r0
 8007776:	b1e0      	cbz	r0, 80077b2 <_realloc_r+0x9e>
 8007778:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800777c:	f023 0301 	bic.w	r3, r3, #1
 8007780:	4443      	add	r3, r8
 8007782:	f1a0 0208 	sub.w	r2, r0, #8
 8007786:	429a      	cmp	r2, r3
 8007788:	f000 8144 	beq.w	8007a14 <_realloc_r+0x300>
 800778c:	1f22      	subs	r2, r4, #4
 800778e:	2a24      	cmp	r2, #36	; 0x24
 8007790:	f200 8131 	bhi.w	80079f6 <_realloc_r+0x2e2>
 8007794:	2a13      	cmp	r2, #19
 8007796:	f200 8104 	bhi.w	80079a2 <_realloc_r+0x28e>
 800779a:	4603      	mov	r3, r0
 800779c:	4632      	mov	r2, r6
 800779e:	6811      	ldr	r1, [r2, #0]
 80077a0:	6019      	str	r1, [r3, #0]
 80077a2:	6851      	ldr	r1, [r2, #4]
 80077a4:	6059      	str	r1, [r3, #4]
 80077a6:	6892      	ldr	r2, [r2, #8]
 80077a8:	609a      	str	r2, [r3, #8]
 80077aa:	4631      	mov	r1, r6
 80077ac:	4648      	mov	r0, r9
 80077ae:	f7fd f88d 	bl	80048cc <_free_r>
 80077b2:	4648      	mov	r0, r9
 80077b4:	f7fd fd2e 	bl	8005214 <__malloc_unlock>
 80077b8:	4638      	mov	r0, r7
 80077ba:	b003      	add	sp, #12
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c0:	f025 0507 	bic.w	r5, r5, #7
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	462a      	mov	r2, r5
 80077c8:	dabb      	bge.n	8007742 <_realloc_r+0x2e>
 80077ca:	230c      	movs	r3, #12
 80077cc:	2000      	movs	r0, #0
 80077ce:	f8c9 3000 	str.w	r3, [r9]
 80077d2:	b003      	add	sp, #12
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80077dc:	ebc3 0a08 	rsb	sl, r3, r8
 80077e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80077e4:	f023 0c03 	bic.w	ip, r3, #3
 80077e8:	eb04 030c 	add.w	r3, r4, ip
 80077ec:	4293      	cmp	r3, r2
 80077ee:	dbbd      	blt.n	800776c <_realloc_r+0x58>
 80077f0:	4657      	mov	r7, sl
 80077f2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80077f6:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80077fa:	1f22      	subs	r2, r4, #4
 80077fc:	2a24      	cmp	r2, #36	; 0x24
 80077fe:	60c1      	str	r1, [r0, #12]
 8007800:	6088      	str	r0, [r1, #8]
 8007802:	f200 8117 	bhi.w	8007a34 <_realloc_r+0x320>
 8007806:	2a13      	cmp	r2, #19
 8007808:	f240 8112 	bls.w	8007a30 <_realloc_r+0x31c>
 800780c:	6831      	ldr	r1, [r6, #0]
 800780e:	f8ca 1008 	str.w	r1, [sl, #8]
 8007812:	6871      	ldr	r1, [r6, #4]
 8007814:	f8ca 100c 	str.w	r1, [sl, #12]
 8007818:	2a1b      	cmp	r2, #27
 800781a:	f200 812b 	bhi.w	8007a74 <_realloc_r+0x360>
 800781e:	3608      	adds	r6, #8
 8007820:	f10a 0210 	add.w	r2, sl, #16
 8007824:	6831      	ldr	r1, [r6, #0]
 8007826:	6011      	str	r1, [r2, #0]
 8007828:	6871      	ldr	r1, [r6, #4]
 800782a:	6051      	str	r1, [r2, #4]
 800782c:	68b1      	ldr	r1, [r6, #8]
 800782e:	6091      	str	r1, [r2, #8]
 8007830:	463e      	mov	r6, r7
 8007832:	461c      	mov	r4, r3
 8007834:	46d0      	mov	r8, sl
 8007836:	1b63      	subs	r3, r4, r5
 8007838:	2b0f      	cmp	r3, #15
 800783a:	d81d      	bhi.n	8007878 <_realloc_r+0x164>
 800783c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	4323      	orrs	r3, r4
 8007846:	4444      	add	r4, r8
 8007848:	f8c8 3004 	str.w	r3, [r8, #4]
 800784c:	6863      	ldr	r3, [r4, #4]
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	6063      	str	r3, [r4, #4]
 8007854:	4648      	mov	r0, r9
 8007856:	f7fd fcdd 	bl	8005214 <__malloc_unlock>
 800785a:	4630      	mov	r0, r6
 800785c:	b003      	add	sp, #12
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	f021 0103 	bic.w	r1, r1, #3
 8007866:	4421      	add	r1, r4
 8007868:	4291      	cmp	r1, r2
 800786a:	db21      	blt.n	80078b0 <_realloc_r+0x19c>
 800786c:	68c3      	ldr	r3, [r0, #12]
 800786e:	6882      	ldr	r2, [r0, #8]
 8007870:	460c      	mov	r4, r1
 8007872:	60d3      	str	r3, [r2, #12]
 8007874:	609a      	str	r2, [r3, #8]
 8007876:	e7de      	b.n	8007836 <_realloc_r+0x122>
 8007878:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800787c:	eb08 0105 	add.w	r1, r8, r5
 8007880:	f002 0201 	and.w	r2, r2, #1
 8007884:	4315      	orrs	r5, r2
 8007886:	f043 0201 	orr.w	r2, r3, #1
 800788a:	440b      	add	r3, r1
 800788c:	f8c8 5004 	str.w	r5, [r8, #4]
 8007890:	604a      	str	r2, [r1, #4]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	f042 0201 	orr.w	r2, r2, #1
 8007898:	3108      	adds	r1, #8
 800789a:	605a      	str	r2, [r3, #4]
 800789c:	4648      	mov	r0, r9
 800789e:	f7fd f815 	bl	80048cc <_free_r>
 80078a2:	e7d7      	b.n	8007854 <_realloc_r+0x140>
 80078a4:	4611      	mov	r1, r2
 80078a6:	b003      	add	sp, #12
 80078a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	f7fd b9a2 	b.w	8004bf4 <_malloc_r>
 80078b0:	f01e 0f01 	tst.w	lr, #1
 80078b4:	f47f af5a 	bne.w	800776c <_realloc_r+0x58>
 80078b8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80078bc:	ebc3 0a08 	rsb	sl, r3, r8
 80078c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80078c4:	f023 0c03 	bic.w	ip, r3, #3
 80078c8:	eb01 0e0c 	add.w	lr, r1, ip
 80078cc:	4596      	cmp	lr, r2
 80078ce:	db8b      	blt.n	80077e8 <_realloc_r+0xd4>
 80078d0:	68c3      	ldr	r3, [r0, #12]
 80078d2:	6882      	ldr	r2, [r0, #8]
 80078d4:	4657      	mov	r7, sl
 80078d6:	60d3      	str	r3, [r2, #12]
 80078d8:	609a      	str	r2, [r3, #8]
 80078da:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80078de:	f8da 300c 	ldr.w	r3, [sl, #12]
 80078e2:	60cb      	str	r3, [r1, #12]
 80078e4:	1f22      	subs	r2, r4, #4
 80078e6:	2a24      	cmp	r2, #36	; 0x24
 80078e8:	6099      	str	r1, [r3, #8]
 80078ea:	f200 8099 	bhi.w	8007a20 <_realloc_r+0x30c>
 80078ee:	2a13      	cmp	r2, #19
 80078f0:	d962      	bls.n	80079b8 <_realloc_r+0x2a4>
 80078f2:	6833      	ldr	r3, [r6, #0]
 80078f4:	f8ca 3008 	str.w	r3, [sl, #8]
 80078f8:	6873      	ldr	r3, [r6, #4]
 80078fa:	f8ca 300c 	str.w	r3, [sl, #12]
 80078fe:	2a1b      	cmp	r2, #27
 8007900:	f200 80a0 	bhi.w	8007a44 <_realloc_r+0x330>
 8007904:	3608      	adds	r6, #8
 8007906:	f10a 0310 	add.w	r3, sl, #16
 800790a:	e056      	b.n	80079ba <_realloc_r+0x2a6>
 800790c:	f021 0b03 	bic.w	fp, r1, #3
 8007910:	44a3      	add	fp, r4
 8007912:	f105 0010 	add.w	r0, r5, #16
 8007916:	4583      	cmp	fp, r0
 8007918:	da59      	bge.n	80079ce <_realloc_r+0x2ba>
 800791a:	f01e 0f01 	tst.w	lr, #1
 800791e:	f47f af25 	bne.w	800776c <_realloc_r+0x58>
 8007922:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8007926:	ebc1 0a08 	rsb	sl, r1, r8
 800792a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800792e:	f021 0c03 	bic.w	ip, r1, #3
 8007932:	44e3      	add	fp, ip
 8007934:	4558      	cmp	r0, fp
 8007936:	f73f af57 	bgt.w	80077e8 <_realloc_r+0xd4>
 800793a:	4657      	mov	r7, sl
 800793c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007940:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007944:	1f22      	subs	r2, r4, #4
 8007946:	2a24      	cmp	r2, #36	; 0x24
 8007948:	60c1      	str	r1, [r0, #12]
 800794a:	6088      	str	r0, [r1, #8]
 800794c:	f200 80b4 	bhi.w	8007ab8 <_realloc_r+0x3a4>
 8007950:	2a13      	cmp	r2, #19
 8007952:	f240 80a5 	bls.w	8007aa0 <_realloc_r+0x38c>
 8007956:	6831      	ldr	r1, [r6, #0]
 8007958:	f8ca 1008 	str.w	r1, [sl, #8]
 800795c:	6871      	ldr	r1, [r6, #4]
 800795e:	f8ca 100c 	str.w	r1, [sl, #12]
 8007962:	2a1b      	cmp	r2, #27
 8007964:	f200 80af 	bhi.w	8007ac6 <_realloc_r+0x3b2>
 8007968:	3608      	adds	r6, #8
 800796a:	f10a 0210 	add.w	r2, sl, #16
 800796e:	6831      	ldr	r1, [r6, #0]
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	6871      	ldr	r1, [r6, #4]
 8007974:	6051      	str	r1, [r2, #4]
 8007976:	68b1      	ldr	r1, [r6, #8]
 8007978:	6091      	str	r1, [r2, #8]
 800797a:	eb0a 0105 	add.w	r1, sl, r5
 800797e:	ebc5 020b 	rsb	r2, r5, fp
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	6099      	str	r1, [r3, #8]
 8007988:	604a      	str	r2, [r1, #4]
 800798a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	431d      	orrs	r5, r3
 8007994:	4648      	mov	r0, r9
 8007996:	f8ca 5004 	str.w	r5, [sl, #4]
 800799a:	f7fd fc3b 	bl	8005214 <__malloc_unlock>
 800799e:	4638      	mov	r0, r7
 80079a0:	e75c      	b.n	800785c <_realloc_r+0x148>
 80079a2:	6833      	ldr	r3, [r6, #0]
 80079a4:	6003      	str	r3, [r0, #0]
 80079a6:	6873      	ldr	r3, [r6, #4]
 80079a8:	6043      	str	r3, [r0, #4]
 80079aa:	2a1b      	cmp	r2, #27
 80079ac:	d827      	bhi.n	80079fe <_realloc_r+0x2ea>
 80079ae:	f100 0308 	add.w	r3, r0, #8
 80079b2:	f106 0208 	add.w	r2, r6, #8
 80079b6:	e6f2      	b.n	800779e <_realloc_r+0x8a>
 80079b8:	463b      	mov	r3, r7
 80079ba:	6832      	ldr	r2, [r6, #0]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	6872      	ldr	r2, [r6, #4]
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	68b2      	ldr	r2, [r6, #8]
 80079c4:	609a      	str	r2, [r3, #8]
 80079c6:	463e      	mov	r6, r7
 80079c8:	4674      	mov	r4, lr
 80079ca:	46d0      	mov	r8, sl
 80079cc:	e733      	b.n	8007836 <_realloc_r+0x122>
 80079ce:	eb08 0105 	add.w	r1, r8, r5
 80079d2:	ebc5 0b0b 	rsb	fp, r5, fp
 80079d6:	f04b 0201 	orr.w	r2, fp, #1
 80079da:	6099      	str	r1, [r3, #8]
 80079dc:	604a      	str	r2, [r1, #4]
 80079de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	431d      	orrs	r5, r3
 80079e8:	4648      	mov	r0, r9
 80079ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80079ee:	f7fd fc11 	bl	8005214 <__malloc_unlock>
 80079f2:	4630      	mov	r0, r6
 80079f4:	e732      	b.n	800785c <_realloc_r+0x148>
 80079f6:	4631      	mov	r1, r6
 80079f8:	f7ff fe12 	bl	8007620 <memmove>
 80079fc:	e6d5      	b.n	80077aa <_realloc_r+0x96>
 80079fe:	68b3      	ldr	r3, [r6, #8]
 8007a00:	6083      	str	r3, [r0, #8]
 8007a02:	68f3      	ldr	r3, [r6, #12]
 8007a04:	60c3      	str	r3, [r0, #12]
 8007a06:	2a24      	cmp	r2, #36	; 0x24
 8007a08:	d028      	beq.n	8007a5c <_realloc_r+0x348>
 8007a0a:	f100 0310 	add.w	r3, r0, #16
 8007a0e:	f106 0210 	add.w	r2, r6, #16
 8007a12:	e6c4      	b.n	800779e <_realloc_r+0x8a>
 8007a14:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007a18:	f023 0303 	bic.w	r3, r3, #3
 8007a1c:	441c      	add	r4, r3
 8007a1e:	e70a      	b.n	8007836 <_realloc_r+0x122>
 8007a20:	4631      	mov	r1, r6
 8007a22:	4638      	mov	r0, r7
 8007a24:	4674      	mov	r4, lr
 8007a26:	46d0      	mov	r8, sl
 8007a28:	f7ff fdfa 	bl	8007620 <memmove>
 8007a2c:	463e      	mov	r6, r7
 8007a2e:	e702      	b.n	8007836 <_realloc_r+0x122>
 8007a30:	463a      	mov	r2, r7
 8007a32:	e6f7      	b.n	8007824 <_realloc_r+0x110>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4638      	mov	r0, r7
 8007a38:	461c      	mov	r4, r3
 8007a3a:	46d0      	mov	r8, sl
 8007a3c:	f7ff fdf0 	bl	8007620 <memmove>
 8007a40:	463e      	mov	r6, r7
 8007a42:	e6f8      	b.n	8007836 <_realloc_r+0x122>
 8007a44:	68b3      	ldr	r3, [r6, #8]
 8007a46:	f8ca 3010 	str.w	r3, [sl, #16]
 8007a4a:	68f3      	ldr	r3, [r6, #12]
 8007a4c:	f8ca 3014 	str.w	r3, [sl, #20]
 8007a50:	2a24      	cmp	r2, #36	; 0x24
 8007a52:	d01b      	beq.n	8007a8c <_realloc_r+0x378>
 8007a54:	3610      	adds	r6, #16
 8007a56:	f10a 0318 	add.w	r3, sl, #24
 8007a5a:	e7ae      	b.n	80079ba <_realloc_r+0x2a6>
 8007a5c:	6933      	ldr	r3, [r6, #16]
 8007a5e:	6103      	str	r3, [r0, #16]
 8007a60:	6973      	ldr	r3, [r6, #20]
 8007a62:	6143      	str	r3, [r0, #20]
 8007a64:	f106 0218 	add.w	r2, r6, #24
 8007a68:	f100 0318 	add.w	r3, r0, #24
 8007a6c:	e697      	b.n	800779e <_realloc_r+0x8a>
 8007a6e:	bf00      	nop
 8007a70:	20000464 	.word	0x20000464
 8007a74:	68b1      	ldr	r1, [r6, #8]
 8007a76:	f8ca 1010 	str.w	r1, [sl, #16]
 8007a7a:	68f1      	ldr	r1, [r6, #12]
 8007a7c:	f8ca 1014 	str.w	r1, [sl, #20]
 8007a80:	2a24      	cmp	r2, #36	; 0x24
 8007a82:	d00f      	beq.n	8007aa4 <_realloc_r+0x390>
 8007a84:	3610      	adds	r6, #16
 8007a86:	f10a 0218 	add.w	r2, sl, #24
 8007a8a:	e6cb      	b.n	8007824 <_realloc_r+0x110>
 8007a8c:	6933      	ldr	r3, [r6, #16]
 8007a8e:	f8ca 3018 	str.w	r3, [sl, #24]
 8007a92:	6973      	ldr	r3, [r6, #20]
 8007a94:	f8ca 301c 	str.w	r3, [sl, #28]
 8007a98:	3618      	adds	r6, #24
 8007a9a:	f10a 0320 	add.w	r3, sl, #32
 8007a9e:	e78c      	b.n	80079ba <_realloc_r+0x2a6>
 8007aa0:	463a      	mov	r2, r7
 8007aa2:	e764      	b.n	800796e <_realloc_r+0x25a>
 8007aa4:	6932      	ldr	r2, [r6, #16]
 8007aa6:	f8ca 2018 	str.w	r2, [sl, #24]
 8007aaa:	6972      	ldr	r2, [r6, #20]
 8007aac:	f8ca 201c 	str.w	r2, [sl, #28]
 8007ab0:	3618      	adds	r6, #24
 8007ab2:	f10a 0220 	add.w	r2, sl, #32
 8007ab6:	e6b5      	b.n	8007824 <_realloc_r+0x110>
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4638      	mov	r0, r7
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	f7ff fdaf 	bl	8007620 <memmove>
 8007ac2:	9b01      	ldr	r3, [sp, #4]
 8007ac4:	e759      	b.n	800797a <_realloc_r+0x266>
 8007ac6:	68b1      	ldr	r1, [r6, #8]
 8007ac8:	f8ca 1010 	str.w	r1, [sl, #16]
 8007acc:	68f1      	ldr	r1, [r6, #12]
 8007ace:	f8ca 1014 	str.w	r1, [sl, #20]
 8007ad2:	2a24      	cmp	r2, #36	; 0x24
 8007ad4:	d003      	beq.n	8007ade <_realloc_r+0x3ca>
 8007ad6:	3610      	adds	r6, #16
 8007ad8:	f10a 0218 	add.w	r2, sl, #24
 8007adc:	e747      	b.n	800796e <_realloc_r+0x25a>
 8007ade:	6932      	ldr	r2, [r6, #16]
 8007ae0:	f8ca 2018 	str.w	r2, [sl, #24]
 8007ae4:	6972      	ldr	r2, [r6, #20]
 8007ae6:	f8ca 201c 	str.w	r2, [sl, #28]
 8007aea:	3618      	adds	r6, #24
 8007aec:	f10a 0220 	add.w	r2, sl, #32
 8007af0:	e73d      	b.n	800796e <_realloc_r+0x25a>
 8007af2:	bf00      	nop

08007af4 <__ssprint_r>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	6893      	ldr	r3, [r2, #8]
 8007afa:	b083      	sub	sp, #12
 8007afc:	4690      	mov	r8, r2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d072      	beq.n	8007be8 <__ssprint_r+0xf4>
 8007b02:	4683      	mov	fp, r0
 8007b04:	f04f 0900 	mov.w	r9, #0
 8007b08:	6816      	ldr	r6, [r2, #0]
 8007b0a:	6808      	ldr	r0, [r1, #0]
 8007b0c:	688b      	ldr	r3, [r1, #8]
 8007b0e:	460d      	mov	r5, r1
 8007b10:	464c      	mov	r4, r9
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	d045      	beq.n	8007ba2 <__ssprint_r+0xae>
 8007b16:	429c      	cmp	r4, r3
 8007b18:	461f      	mov	r7, r3
 8007b1a:	469a      	mov	sl, r3
 8007b1c:	d346      	bcc.n	8007bac <__ssprint_r+0xb8>
 8007b1e:	89ab      	ldrh	r3, [r5, #12]
 8007b20:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007b24:	d02d      	beq.n	8007b82 <__ssprint_r+0x8e>
 8007b26:	696f      	ldr	r7, [r5, #20]
 8007b28:	6929      	ldr	r1, [r5, #16]
 8007b2a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007b2e:	ebc1 0a00 	rsb	sl, r1, r0
 8007b32:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8007b36:	1c60      	adds	r0, r4, #1
 8007b38:	107f      	asrs	r7, r7, #1
 8007b3a:	4450      	add	r0, sl
 8007b3c:	42b8      	cmp	r0, r7
 8007b3e:	463a      	mov	r2, r7
 8007b40:	bf84      	itt	hi
 8007b42:	4607      	movhi	r7, r0
 8007b44:	463a      	movhi	r2, r7
 8007b46:	055b      	lsls	r3, r3, #21
 8007b48:	d533      	bpl.n	8007bb2 <__ssprint_r+0xbe>
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f7fd f851 	bl	8004bf4 <_malloc_r>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d037      	beq.n	8007bc6 <__ssprint_r+0xd2>
 8007b56:	4652      	mov	r2, sl
 8007b58:	6929      	ldr	r1, [r5, #16]
 8007b5a:	9001      	str	r0, [sp, #4]
 8007b5c:	f7f9 ffaa 	bl	8001ab4 <memcpy>
 8007b60:	89aa      	ldrh	r2, [r5, #12]
 8007b62:	9b01      	ldr	r3, [sp, #4]
 8007b64:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b6c:	81aa      	strh	r2, [r5, #12]
 8007b6e:	ebca 0207 	rsb	r2, sl, r7
 8007b72:	eb03 000a 	add.w	r0, r3, sl
 8007b76:	616f      	str	r7, [r5, #20]
 8007b78:	612b      	str	r3, [r5, #16]
 8007b7a:	6028      	str	r0, [r5, #0]
 8007b7c:	60aa      	str	r2, [r5, #8]
 8007b7e:	4627      	mov	r7, r4
 8007b80:	46a2      	mov	sl, r4
 8007b82:	4652      	mov	r2, sl
 8007b84:	4649      	mov	r1, r9
 8007b86:	f7ff fd4b 	bl	8007620 <memmove>
 8007b8a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007b8e:	68ab      	ldr	r3, [r5, #8]
 8007b90:	6828      	ldr	r0, [r5, #0]
 8007b92:	1bdb      	subs	r3, r3, r7
 8007b94:	4450      	add	r0, sl
 8007b96:	1b14      	subs	r4, r2, r4
 8007b98:	60ab      	str	r3, [r5, #8]
 8007b9a:	6028      	str	r0, [r5, #0]
 8007b9c:	f8c8 4008 	str.w	r4, [r8, #8]
 8007ba0:	b314      	cbz	r4, 8007be8 <__ssprint_r+0xf4>
 8007ba2:	f8d6 9000 	ldr.w	r9, [r6]
 8007ba6:	6874      	ldr	r4, [r6, #4]
 8007ba8:	3608      	adds	r6, #8
 8007baa:	e7b2      	b.n	8007b12 <__ssprint_r+0x1e>
 8007bac:	4627      	mov	r7, r4
 8007bae:	46a2      	mov	sl, r4
 8007bb0:	e7e7      	b.n	8007b82 <__ssprint_r+0x8e>
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f7ff fdae 	bl	8007714 <_realloc_r>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d1d7      	bne.n	8007b6e <__ssprint_r+0x7a>
 8007bbe:	6929      	ldr	r1, [r5, #16]
 8007bc0:	4658      	mov	r0, fp
 8007bc2:	f7fc fe83 	bl	80048cc <_free_r>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	f8cb 3000 	str.w	r3, [fp]
 8007bcc:	89ab      	ldrh	r3, [r5, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	81ab      	strh	r3, [r5, #12]
 8007bda:	f8c8 2008 	str.w	r2, [r8, #8]
 8007bde:	f8c8 2004 	str.w	r2, [r8, #4]
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	2000      	movs	r0, #0
 8007bea:	f8c8 0004 	str.w	r0, [r8, #4]
 8007bee:	b003      	add	sp, #12
 8007bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bf4 <__swbuf_r>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	b110      	cbz	r0, 8007c04 <__swbuf_r+0x10>
 8007bfe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d04a      	beq.n	8007c9a <__swbuf_r+0xa6>
 8007c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c08:	69a3      	ldr	r3, [r4, #24]
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	b291      	uxth	r1, r2
 8007c0e:	0708      	lsls	r0, r1, #28
 8007c10:	d538      	bpl.n	8007c84 <__swbuf_r+0x90>
 8007c12:	6923      	ldr	r3, [r4, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d035      	beq.n	8007c84 <__swbuf_r+0x90>
 8007c18:	0489      	lsls	r1, r1, #18
 8007c1a:	b2ef      	uxtb	r7, r5
 8007c1c:	d515      	bpl.n	8007c4a <__swbuf_r+0x56>
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	6961      	ldr	r1, [r4, #20]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	428b      	cmp	r3, r1
 8007c26:	da1c      	bge.n	8007c62 <__swbuf_r+0x6e>
 8007c28:	3301      	adds	r3, #1
 8007c2a:	68a1      	ldr	r1, [r4, #8]
 8007c2c:	1c50      	adds	r0, r2, #1
 8007c2e:	3901      	subs	r1, #1
 8007c30:	60a1      	str	r1, [r4, #8]
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	7015      	strb	r5, [r2, #0]
 8007c36:	6962      	ldr	r2, [r4, #20]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d01a      	beq.n	8007c72 <__swbuf_r+0x7e>
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	07db      	lsls	r3, r3, #31
 8007c40:	d501      	bpl.n	8007c46 <__swbuf_r+0x52>
 8007c42:	2f0a      	cmp	r7, #10
 8007c44:	d015      	beq.n	8007c72 <__swbuf_r+0x7e>
 8007c46:	4638      	mov	r0, r7
 8007c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c50:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8007c54:	81a2      	strh	r2, [r4, #12]
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	6661      	str	r1, [r4, #100]	; 0x64
 8007c5a:	6961      	ldr	r1, [r4, #20]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	428b      	cmp	r3, r1
 8007c60:	dbe2      	blt.n	8007c28 <__swbuf_r+0x34>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7fc fd45 	bl	80046f4 <_fflush_r>
 8007c6a:	b940      	cbnz	r0, 8007c7e <__swbuf_r+0x8a>
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e7db      	b.n	8007c2a <__swbuf_r+0x36>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4630      	mov	r0, r6
 8007c76:	f7fc fd3d 	bl	80046f4 <_fflush_r>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0e3      	beq.n	8007c46 <__swbuf_r+0x52>
 8007c7e:	f04f 37ff 	mov.w	r7, #4294967295
 8007c82:	e7e0      	b.n	8007c46 <__swbuf_r+0x52>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7fb fc82 	bl	8003590 <__swsetup_r>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1f6      	bne.n	8007c7e <__swbuf_r+0x8a>
 8007c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	b291      	uxth	r1, r2
 8007c98:	e7be      	b.n	8007c18 <__swbuf_r+0x24>
 8007c9a:	f7fc fdbf 	bl	800481c <__sinit>
 8007c9e:	e7b1      	b.n	8007c04 <__swbuf_r+0x10>

08007ca0 <_wcrtomb_r>:
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	461f      	mov	r7, r3
 8007ca8:	b189      	cbz	r1, 8007cce <_wcrtomb_r+0x2e>
 8007caa:	4c10      	ldr	r4, [pc, #64]	; (8007cec <_wcrtomb_r+0x4c>)
 8007cac:	4d10      	ldr	r5, [pc, #64]	; (8007cf0 <_wcrtomb_r+0x50>)
 8007cae:	6824      	ldr	r4, [r4, #0]
 8007cb0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	bf08      	it	eq
 8007cb6:	462c      	moveq	r4, r5
 8007cb8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007cbc:	47a0      	blx	r4
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d103      	bne.n	8007cca <_wcrtomb_r+0x2a>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	238a      	movs	r3, #138	; 0x8a
 8007cc6:	603a      	str	r2, [r7, #0]
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	b005      	add	sp, #20
 8007ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4906      	ldr	r1, [pc, #24]	; (8007cec <_wcrtomb_r+0x4c>)
 8007cd2:	4a07      	ldr	r2, [pc, #28]	; (8007cf0 <_wcrtomb_r+0x50>)
 8007cd4:	6809      	ldr	r1, [r1, #0]
 8007cd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	bf08      	it	eq
 8007cdc:	4611      	moveq	r1, r2
 8007cde:	4622      	mov	r2, r4
 8007ce0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8007ce4:	a901      	add	r1, sp, #4
 8007ce6:	47a0      	blx	r4
 8007ce8:	e7e9      	b.n	8007cbe <_wcrtomb_r+0x1e>
 8007cea:	bf00      	nop
 8007cec:	20000460 	.word	0x20000460
 8007cf0:	20000874 	.word	0x20000874

08007cf4 <__ascii_wctomb>:
 8007cf4:	b121      	cbz	r1, 8007d00 <__ascii_wctomb+0xc>
 8007cf6:	2aff      	cmp	r2, #255	; 0xff
 8007cf8:	d804      	bhi.n	8007d04 <__ascii_wctomb+0x10>
 8007cfa:	700a      	strb	r2, [r1, #0]
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	4770      	bx	lr
 8007d00:	4608      	mov	r0, r1
 8007d02:	4770      	bx	lr
 8007d04:	238a      	movs	r3, #138	; 0x8a
 8007d06:	6003      	str	r3, [r0, #0]
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop

08007d10 <__aeabi_drsub>:
 8007d10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007d14:	e002      	b.n	8007d1c <__adddf3>
 8007d16:	bf00      	nop

08007d18 <__aeabi_dsub>:
 8007d18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007d1c <__adddf3>:
 8007d1c:	b530      	push	{r4, r5, lr}
 8007d1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007d22:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007d26:	ea94 0f05 	teq	r4, r5
 8007d2a:	bf08      	it	eq
 8007d2c:	ea90 0f02 	teqeq	r0, r2
 8007d30:	bf1f      	itttt	ne
 8007d32:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007d36:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007d3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007d3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007d42:	f000 80e2 	beq.w	8007f0a <__adddf3+0x1ee>
 8007d46:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007d4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007d4e:	bfb8      	it	lt
 8007d50:	426d      	neglt	r5, r5
 8007d52:	dd0c      	ble.n	8007d6e <__adddf3+0x52>
 8007d54:	442c      	add	r4, r5
 8007d56:	ea80 0202 	eor.w	r2, r0, r2
 8007d5a:	ea81 0303 	eor.w	r3, r1, r3
 8007d5e:	ea82 0000 	eor.w	r0, r2, r0
 8007d62:	ea83 0101 	eor.w	r1, r3, r1
 8007d66:	ea80 0202 	eor.w	r2, r0, r2
 8007d6a:	ea81 0303 	eor.w	r3, r1, r3
 8007d6e:	2d36      	cmp	r5, #54	; 0x36
 8007d70:	bf88      	it	hi
 8007d72:	bd30      	pophi	{r4, r5, pc}
 8007d74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007d78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007d7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007d80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007d84:	d002      	beq.n	8007d8c <__adddf3+0x70>
 8007d86:	4240      	negs	r0, r0
 8007d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007d90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007d94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007d98:	d002      	beq.n	8007da0 <__adddf3+0x84>
 8007d9a:	4252      	negs	r2, r2
 8007d9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007da0:	ea94 0f05 	teq	r4, r5
 8007da4:	f000 80a7 	beq.w	8007ef6 <__adddf3+0x1da>
 8007da8:	f1a4 0401 	sub.w	r4, r4, #1
 8007dac:	f1d5 0e20 	rsbs	lr, r5, #32
 8007db0:	db0d      	blt.n	8007dce <__adddf3+0xb2>
 8007db2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007db6:	fa22 f205 	lsr.w	r2, r2, r5
 8007dba:	1880      	adds	r0, r0, r2
 8007dbc:	f141 0100 	adc.w	r1, r1, #0
 8007dc0:	fa03 f20e 	lsl.w	r2, r3, lr
 8007dc4:	1880      	adds	r0, r0, r2
 8007dc6:	fa43 f305 	asr.w	r3, r3, r5
 8007dca:	4159      	adcs	r1, r3
 8007dcc:	e00e      	b.n	8007dec <__adddf3+0xd0>
 8007dce:	f1a5 0520 	sub.w	r5, r5, #32
 8007dd2:	f10e 0e20 	add.w	lr, lr, #32
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007ddc:	bf28      	it	cs
 8007dde:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007de2:	fa43 f305 	asr.w	r3, r3, r5
 8007de6:	18c0      	adds	r0, r0, r3
 8007de8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007df0:	d507      	bpl.n	8007e02 <__adddf3+0xe6>
 8007df2:	f04f 0e00 	mov.w	lr, #0
 8007df6:	f1dc 0c00 	rsbs	ip, ip, #0
 8007dfa:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007dfe:	eb6e 0101 	sbc.w	r1, lr, r1
 8007e02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007e06:	d31b      	bcc.n	8007e40 <__adddf3+0x124>
 8007e08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007e0c:	d30c      	bcc.n	8007e28 <__adddf3+0x10c>
 8007e0e:	0849      	lsrs	r1, r1, #1
 8007e10:	ea5f 0030 	movs.w	r0, r0, rrx
 8007e14:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007e18:	f104 0401 	add.w	r4, r4, #1
 8007e1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007e20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007e24:	f080 809a 	bcs.w	8007f5c <__adddf3+0x240>
 8007e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007e2c:	bf08      	it	eq
 8007e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007e32:	f150 0000 	adcs.w	r0, r0, #0
 8007e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007e3a:	ea41 0105 	orr.w	r1, r1, r5
 8007e3e:	bd30      	pop	{r4, r5, pc}
 8007e40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007e44:	4140      	adcs	r0, r0
 8007e46:	eb41 0101 	adc.w	r1, r1, r1
 8007e4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007e4e:	f1a4 0401 	sub.w	r4, r4, #1
 8007e52:	d1e9      	bne.n	8007e28 <__adddf3+0x10c>
 8007e54:	f091 0f00 	teq	r1, #0
 8007e58:	bf04      	itt	eq
 8007e5a:	4601      	moveq	r1, r0
 8007e5c:	2000      	moveq	r0, #0
 8007e5e:	fab1 f381 	clz	r3, r1
 8007e62:	bf08      	it	eq
 8007e64:	3320      	addeq	r3, #32
 8007e66:	f1a3 030b 	sub.w	r3, r3, #11
 8007e6a:	f1b3 0220 	subs.w	r2, r3, #32
 8007e6e:	da0c      	bge.n	8007e8a <__adddf3+0x16e>
 8007e70:	320c      	adds	r2, #12
 8007e72:	dd08      	ble.n	8007e86 <__adddf3+0x16a>
 8007e74:	f102 0c14 	add.w	ip, r2, #20
 8007e78:	f1c2 020c 	rsb	r2, r2, #12
 8007e7c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007e80:	fa21 f102 	lsr.w	r1, r1, r2
 8007e84:	e00c      	b.n	8007ea0 <__adddf3+0x184>
 8007e86:	f102 0214 	add.w	r2, r2, #20
 8007e8a:	bfd8      	it	le
 8007e8c:	f1c2 0c20 	rsble	ip, r2, #32
 8007e90:	fa01 f102 	lsl.w	r1, r1, r2
 8007e94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007e98:	bfdc      	itt	le
 8007e9a:	ea41 010c 	orrle.w	r1, r1, ip
 8007e9e:	4090      	lslle	r0, r2
 8007ea0:	1ae4      	subs	r4, r4, r3
 8007ea2:	bfa2      	ittt	ge
 8007ea4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007ea8:	4329      	orrge	r1, r5
 8007eaa:	bd30      	popge	{r4, r5, pc}
 8007eac:	ea6f 0404 	mvn.w	r4, r4
 8007eb0:	3c1f      	subs	r4, #31
 8007eb2:	da1c      	bge.n	8007eee <__adddf3+0x1d2>
 8007eb4:	340c      	adds	r4, #12
 8007eb6:	dc0e      	bgt.n	8007ed6 <__adddf3+0x1ba>
 8007eb8:	f104 0414 	add.w	r4, r4, #20
 8007ebc:	f1c4 0220 	rsb	r2, r4, #32
 8007ec0:	fa20 f004 	lsr.w	r0, r0, r4
 8007ec4:	fa01 f302 	lsl.w	r3, r1, r2
 8007ec8:	ea40 0003 	orr.w	r0, r0, r3
 8007ecc:	fa21 f304 	lsr.w	r3, r1, r4
 8007ed0:	ea45 0103 	orr.w	r1, r5, r3
 8007ed4:	bd30      	pop	{r4, r5, pc}
 8007ed6:	f1c4 040c 	rsb	r4, r4, #12
 8007eda:	f1c4 0220 	rsb	r2, r4, #32
 8007ede:	fa20 f002 	lsr.w	r0, r0, r2
 8007ee2:	fa01 f304 	lsl.w	r3, r1, r4
 8007ee6:	ea40 0003 	orr.w	r0, r0, r3
 8007eea:	4629      	mov	r1, r5
 8007eec:	bd30      	pop	{r4, r5, pc}
 8007eee:	fa21 f004 	lsr.w	r0, r1, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	bd30      	pop	{r4, r5, pc}
 8007ef6:	f094 0f00 	teq	r4, #0
 8007efa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007efe:	bf06      	itte	eq
 8007f00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007f04:	3401      	addeq	r4, #1
 8007f06:	3d01      	subne	r5, #1
 8007f08:	e74e      	b.n	8007da8 <__adddf3+0x8c>
 8007f0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007f0e:	bf18      	it	ne
 8007f10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f14:	d029      	beq.n	8007f6a <__adddf3+0x24e>
 8007f16:	ea94 0f05 	teq	r4, r5
 8007f1a:	bf08      	it	eq
 8007f1c:	ea90 0f02 	teqeq	r0, r2
 8007f20:	d005      	beq.n	8007f2e <__adddf3+0x212>
 8007f22:	ea54 0c00 	orrs.w	ip, r4, r0
 8007f26:	bf04      	itt	eq
 8007f28:	4619      	moveq	r1, r3
 8007f2a:	4610      	moveq	r0, r2
 8007f2c:	bd30      	pop	{r4, r5, pc}
 8007f2e:	ea91 0f03 	teq	r1, r3
 8007f32:	bf1e      	ittt	ne
 8007f34:	2100      	movne	r1, #0
 8007f36:	2000      	movne	r0, #0
 8007f38:	bd30      	popne	{r4, r5, pc}
 8007f3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007f3e:	d105      	bne.n	8007f4c <__adddf3+0x230>
 8007f40:	0040      	lsls	r0, r0, #1
 8007f42:	4149      	adcs	r1, r1
 8007f44:	bf28      	it	cs
 8007f46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007f4a:	bd30      	pop	{r4, r5, pc}
 8007f4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007f50:	bf3c      	itt	cc
 8007f52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007f56:	bd30      	popcc	{r4, r5, pc}
 8007f58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007f60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f64:	f04f 0000 	mov.w	r0, #0
 8007f68:	bd30      	pop	{r4, r5, pc}
 8007f6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007f6e:	bf1a      	itte	ne
 8007f70:	4619      	movne	r1, r3
 8007f72:	4610      	movne	r0, r2
 8007f74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007f78:	bf1c      	itt	ne
 8007f7a:	460b      	movne	r3, r1
 8007f7c:	4602      	movne	r2, r0
 8007f7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007f82:	bf06      	itte	eq
 8007f84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007f88:	ea91 0f03 	teqeq	r1, r3
 8007f8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007f90:	bd30      	pop	{r4, r5, pc}
 8007f92:	bf00      	nop

08007f94 <__aeabi_ui2d>:
 8007f94:	f090 0f00 	teq	r0, #0
 8007f98:	bf04      	itt	eq
 8007f9a:	2100      	moveq	r1, #0
 8007f9c:	4770      	bxeq	lr
 8007f9e:	b530      	push	{r4, r5, lr}
 8007fa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007fa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007fa8:	f04f 0500 	mov.w	r5, #0
 8007fac:	f04f 0100 	mov.w	r1, #0
 8007fb0:	e750      	b.n	8007e54 <__adddf3+0x138>
 8007fb2:	bf00      	nop

08007fb4 <__aeabi_i2d>:
 8007fb4:	f090 0f00 	teq	r0, #0
 8007fb8:	bf04      	itt	eq
 8007fba:	2100      	moveq	r1, #0
 8007fbc:	4770      	bxeq	lr
 8007fbe:	b530      	push	{r4, r5, lr}
 8007fc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007fc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007fc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007fcc:	bf48      	it	mi
 8007fce:	4240      	negmi	r0, r0
 8007fd0:	f04f 0100 	mov.w	r1, #0
 8007fd4:	e73e      	b.n	8007e54 <__adddf3+0x138>
 8007fd6:	bf00      	nop

08007fd8 <__aeabi_f2d>:
 8007fd8:	0042      	lsls	r2, r0, #1
 8007fda:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007fde:	ea4f 0131 	mov.w	r1, r1, rrx
 8007fe2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007fe6:	bf1f      	itttt	ne
 8007fe8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007fec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007ff0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007ff4:	4770      	bxne	lr
 8007ff6:	f092 0f00 	teq	r2, #0
 8007ffa:	bf14      	ite	ne
 8007ffc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008000:	4770      	bxeq	lr
 8008002:	b530      	push	{r4, r5, lr}
 8008004:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008008:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800800c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008010:	e720      	b.n	8007e54 <__adddf3+0x138>
 8008012:	bf00      	nop

08008014 <__aeabi_ul2d>:
 8008014:	ea50 0201 	orrs.w	r2, r0, r1
 8008018:	bf08      	it	eq
 800801a:	4770      	bxeq	lr
 800801c:	b530      	push	{r4, r5, lr}
 800801e:	f04f 0500 	mov.w	r5, #0
 8008022:	e00a      	b.n	800803a <__aeabi_l2d+0x16>

08008024 <__aeabi_l2d>:
 8008024:	ea50 0201 	orrs.w	r2, r0, r1
 8008028:	bf08      	it	eq
 800802a:	4770      	bxeq	lr
 800802c:	b530      	push	{r4, r5, lr}
 800802e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008032:	d502      	bpl.n	800803a <__aeabi_l2d+0x16>
 8008034:	4240      	negs	r0, r0
 8008036:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800803a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800803e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008042:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008046:	f43f aedc 	beq.w	8007e02 <__adddf3+0xe6>
 800804a:	f04f 0203 	mov.w	r2, #3
 800804e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008052:	bf18      	it	ne
 8008054:	3203      	addne	r2, #3
 8008056:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800805a:	bf18      	it	ne
 800805c:	3203      	addne	r2, #3
 800805e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008062:	f1c2 0320 	rsb	r3, r2, #32
 8008066:	fa00 fc03 	lsl.w	ip, r0, r3
 800806a:	fa20 f002 	lsr.w	r0, r0, r2
 800806e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008072:	ea40 000e 	orr.w	r0, r0, lr
 8008076:	fa21 f102 	lsr.w	r1, r1, r2
 800807a:	4414      	add	r4, r2
 800807c:	e6c1      	b.n	8007e02 <__adddf3+0xe6>
 800807e:	bf00      	nop

08008080 <__aeabi_dmul>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008086:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800808a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800808e:	bf1d      	ittte	ne
 8008090:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008094:	ea94 0f0c 	teqne	r4, ip
 8008098:	ea95 0f0c 	teqne	r5, ip
 800809c:	f000 f8de 	bleq	800825c <__aeabi_dmul+0x1dc>
 80080a0:	442c      	add	r4, r5
 80080a2:	ea81 0603 	eor.w	r6, r1, r3
 80080a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80080aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80080ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80080b2:	bf18      	it	ne
 80080b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80080b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80080bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c0:	d038      	beq.n	8008134 <__aeabi_dmul+0xb4>
 80080c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80080c6:	f04f 0500 	mov.w	r5, #0
 80080ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80080ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80080d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80080d6:	f04f 0600 	mov.w	r6, #0
 80080da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80080de:	f09c 0f00 	teq	ip, #0
 80080e2:	bf18      	it	ne
 80080e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80080e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80080ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80080f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80080f4:	d204      	bcs.n	8008100 <__aeabi_dmul+0x80>
 80080f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80080fa:	416d      	adcs	r5, r5
 80080fc:	eb46 0606 	adc.w	r6, r6, r6
 8008100:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008104:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008108:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800810c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008110:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008114:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008118:	bf88      	it	hi
 800811a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800811e:	d81e      	bhi.n	800815e <__aeabi_dmul+0xde>
 8008120:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008124:	bf08      	it	eq
 8008126:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800812a:	f150 0000 	adcs.w	r0, r0, #0
 800812e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008138:	ea46 0101 	orr.w	r1, r6, r1
 800813c:	ea40 0002 	orr.w	r0, r0, r2
 8008140:	ea81 0103 	eor.w	r1, r1, r3
 8008144:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008148:	bfc2      	ittt	gt
 800814a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800814e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008152:	bd70      	popgt	{r4, r5, r6, pc}
 8008154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008158:	f04f 0e00 	mov.w	lr, #0
 800815c:	3c01      	subs	r4, #1
 800815e:	f300 80ab 	bgt.w	80082b8 <__aeabi_dmul+0x238>
 8008162:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008166:	bfde      	ittt	le
 8008168:	2000      	movle	r0, #0
 800816a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800816e:	bd70      	pople	{r4, r5, r6, pc}
 8008170:	f1c4 0400 	rsb	r4, r4, #0
 8008174:	3c20      	subs	r4, #32
 8008176:	da35      	bge.n	80081e4 <__aeabi_dmul+0x164>
 8008178:	340c      	adds	r4, #12
 800817a:	dc1b      	bgt.n	80081b4 <__aeabi_dmul+0x134>
 800817c:	f104 0414 	add.w	r4, r4, #20
 8008180:	f1c4 0520 	rsb	r5, r4, #32
 8008184:	fa00 f305 	lsl.w	r3, r0, r5
 8008188:	fa20 f004 	lsr.w	r0, r0, r4
 800818c:	fa01 f205 	lsl.w	r2, r1, r5
 8008190:	ea40 0002 	orr.w	r0, r0, r2
 8008194:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008198:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800819c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80081a0:	fa21 f604 	lsr.w	r6, r1, r4
 80081a4:	eb42 0106 	adc.w	r1, r2, r6
 80081a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80081ac:	bf08      	it	eq
 80081ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	f1c4 040c 	rsb	r4, r4, #12
 80081b8:	f1c4 0520 	rsb	r5, r4, #32
 80081bc:	fa00 f304 	lsl.w	r3, r0, r4
 80081c0:	fa20 f005 	lsr.w	r0, r0, r5
 80081c4:	fa01 f204 	lsl.w	r2, r1, r4
 80081c8:	ea40 0002 	orr.w	r0, r0, r2
 80081cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80081d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80081d4:	f141 0100 	adc.w	r1, r1, #0
 80081d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80081dc:	bf08      	it	eq
 80081de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	f1c4 0520 	rsb	r5, r4, #32
 80081e8:	fa00 f205 	lsl.w	r2, r0, r5
 80081ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80081f0:	fa20 f304 	lsr.w	r3, r0, r4
 80081f4:	fa01 f205 	lsl.w	r2, r1, r5
 80081f8:	ea43 0302 	orr.w	r3, r3, r2
 80081fc:	fa21 f004 	lsr.w	r0, r1, r4
 8008200:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008204:	fa21 f204 	lsr.w	r2, r1, r4
 8008208:	ea20 0002 	bic.w	r0, r0, r2
 800820c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008214:	bf08      	it	eq
 8008216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	f094 0f00 	teq	r4, #0
 8008220:	d10f      	bne.n	8008242 <__aeabi_dmul+0x1c2>
 8008222:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008226:	0040      	lsls	r0, r0, #1
 8008228:	eb41 0101 	adc.w	r1, r1, r1
 800822c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008230:	bf08      	it	eq
 8008232:	3c01      	subeq	r4, #1
 8008234:	d0f7      	beq.n	8008226 <__aeabi_dmul+0x1a6>
 8008236:	ea41 0106 	orr.w	r1, r1, r6
 800823a:	f095 0f00 	teq	r5, #0
 800823e:	bf18      	it	ne
 8008240:	4770      	bxne	lr
 8008242:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008246:	0052      	lsls	r2, r2, #1
 8008248:	eb43 0303 	adc.w	r3, r3, r3
 800824c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008250:	bf08      	it	eq
 8008252:	3d01      	subeq	r5, #1
 8008254:	d0f7      	beq.n	8008246 <__aeabi_dmul+0x1c6>
 8008256:	ea43 0306 	orr.w	r3, r3, r6
 800825a:	4770      	bx	lr
 800825c:	ea94 0f0c 	teq	r4, ip
 8008260:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008264:	bf18      	it	ne
 8008266:	ea95 0f0c 	teqne	r5, ip
 800826a:	d00c      	beq.n	8008286 <__aeabi_dmul+0x206>
 800826c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008270:	bf18      	it	ne
 8008272:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008276:	d1d1      	bne.n	800821c <__aeabi_dmul+0x19c>
 8008278:	ea81 0103 	eor.w	r1, r1, r3
 800827c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008280:	f04f 0000 	mov.w	r0, #0
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800828a:	bf06      	itte	eq
 800828c:	4610      	moveq	r0, r2
 800828e:	4619      	moveq	r1, r3
 8008290:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008294:	d019      	beq.n	80082ca <__aeabi_dmul+0x24a>
 8008296:	ea94 0f0c 	teq	r4, ip
 800829a:	d102      	bne.n	80082a2 <__aeabi_dmul+0x222>
 800829c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80082a0:	d113      	bne.n	80082ca <__aeabi_dmul+0x24a>
 80082a2:	ea95 0f0c 	teq	r5, ip
 80082a6:	d105      	bne.n	80082b4 <__aeabi_dmul+0x234>
 80082a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80082ac:	bf1c      	itt	ne
 80082ae:	4610      	movne	r0, r2
 80082b0:	4619      	movne	r1, r3
 80082b2:	d10a      	bne.n	80082ca <__aeabi_dmul+0x24a>
 80082b4:	ea81 0103 	eor.w	r1, r1, r3
 80082b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80082bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80082c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082c4:	f04f 0000 	mov.w	r0, #0
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
 80082ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80082ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80082d2:	bd70      	pop	{r4, r5, r6, pc}

080082d4 <__aeabi_ddiv>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80082da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80082de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80082e2:	bf1d      	ittte	ne
 80082e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80082e8:	ea94 0f0c 	teqne	r4, ip
 80082ec:	ea95 0f0c 	teqne	r5, ip
 80082f0:	f000 f8a7 	bleq	8008442 <__aeabi_ddiv+0x16e>
 80082f4:	eba4 0405 	sub.w	r4, r4, r5
 80082f8:	ea81 0e03 	eor.w	lr, r1, r3
 80082fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008304:	f000 8088 	beq.w	8008418 <__aeabi_ddiv+0x144>
 8008308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800830c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008310:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008314:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008318:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800831c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008320:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008324:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008328:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800832c:	429d      	cmp	r5, r3
 800832e:	bf08      	it	eq
 8008330:	4296      	cmpeq	r6, r2
 8008332:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008336:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800833a:	d202      	bcs.n	8008342 <__aeabi_ddiv+0x6e>
 800833c:	085b      	lsrs	r3, r3, #1
 800833e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008342:	1ab6      	subs	r6, r6, r2
 8008344:	eb65 0503 	sbc.w	r5, r5, r3
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	ea4f 0232 	mov.w	r2, r2, rrx
 800834e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008352:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008356:	ebb6 0e02 	subs.w	lr, r6, r2
 800835a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800835e:	bf22      	ittt	cs
 8008360:	1ab6      	subcs	r6, r6, r2
 8008362:	4675      	movcs	r5, lr
 8008364:	ea40 000c 	orrcs.w	r0, r0, ip
 8008368:	085b      	lsrs	r3, r3, #1
 800836a:	ea4f 0232 	mov.w	r2, r2, rrx
 800836e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008372:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008376:	bf22      	ittt	cs
 8008378:	1ab6      	subcs	r6, r6, r2
 800837a:	4675      	movcs	r5, lr
 800837c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	ea4f 0232 	mov.w	r2, r2, rrx
 8008386:	ebb6 0e02 	subs.w	lr, r6, r2
 800838a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800838e:	bf22      	ittt	cs
 8008390:	1ab6      	subcs	r6, r6, r2
 8008392:	4675      	movcs	r5, lr
 8008394:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	ea4f 0232 	mov.w	r2, r2, rrx
 800839e:	ebb6 0e02 	subs.w	lr, r6, r2
 80083a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80083a6:	bf22      	ittt	cs
 80083a8:	1ab6      	subcs	r6, r6, r2
 80083aa:	4675      	movcs	r5, lr
 80083ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80083b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80083b4:	d018      	beq.n	80083e8 <__aeabi_ddiv+0x114>
 80083b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80083ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80083be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80083c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80083c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80083ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80083ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80083d2:	d1c0      	bne.n	8008356 <__aeabi_ddiv+0x82>
 80083d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083d8:	d10b      	bne.n	80083f2 <__aeabi_ddiv+0x11e>
 80083da:	ea41 0100 	orr.w	r1, r1, r0
 80083de:	f04f 0000 	mov.w	r0, #0
 80083e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80083e6:	e7b6      	b.n	8008356 <__aeabi_ddiv+0x82>
 80083e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083ec:	bf04      	itt	eq
 80083ee:	4301      	orreq	r1, r0
 80083f0:	2000      	moveq	r0, #0
 80083f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80083f6:	bf88      	it	hi
 80083f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80083fc:	f63f aeaf 	bhi.w	800815e <__aeabi_dmul+0xde>
 8008400:	ebb5 0c03 	subs.w	ip, r5, r3
 8008404:	bf04      	itt	eq
 8008406:	ebb6 0c02 	subseq.w	ip, r6, r2
 800840a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800840e:	f150 0000 	adcs.w	r0, r0, #0
 8008412:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800841c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008420:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008424:	bfc2      	ittt	gt
 8008426:	ebd4 050c 	rsbsgt	r5, r4, ip
 800842a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800842e:	bd70      	popgt	{r4, r5, r6, pc}
 8008430:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008434:	f04f 0e00 	mov.w	lr, #0
 8008438:	3c01      	subs	r4, #1
 800843a:	e690      	b.n	800815e <__aeabi_dmul+0xde>
 800843c:	ea45 0e06 	orr.w	lr, r5, r6
 8008440:	e68d      	b.n	800815e <__aeabi_dmul+0xde>
 8008442:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008446:	ea94 0f0c 	teq	r4, ip
 800844a:	bf08      	it	eq
 800844c:	ea95 0f0c 	teqeq	r5, ip
 8008450:	f43f af3b 	beq.w	80082ca <__aeabi_dmul+0x24a>
 8008454:	ea94 0f0c 	teq	r4, ip
 8008458:	d10a      	bne.n	8008470 <__aeabi_ddiv+0x19c>
 800845a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800845e:	f47f af34 	bne.w	80082ca <__aeabi_dmul+0x24a>
 8008462:	ea95 0f0c 	teq	r5, ip
 8008466:	f47f af25 	bne.w	80082b4 <__aeabi_dmul+0x234>
 800846a:	4610      	mov	r0, r2
 800846c:	4619      	mov	r1, r3
 800846e:	e72c      	b.n	80082ca <__aeabi_dmul+0x24a>
 8008470:	ea95 0f0c 	teq	r5, ip
 8008474:	d106      	bne.n	8008484 <__aeabi_ddiv+0x1b0>
 8008476:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800847a:	f43f aefd 	beq.w	8008278 <__aeabi_dmul+0x1f8>
 800847e:	4610      	mov	r0, r2
 8008480:	4619      	mov	r1, r3
 8008482:	e722      	b.n	80082ca <__aeabi_dmul+0x24a>
 8008484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008488:	bf18      	it	ne
 800848a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800848e:	f47f aec5 	bne.w	800821c <__aeabi_dmul+0x19c>
 8008492:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008496:	f47f af0d 	bne.w	80082b4 <__aeabi_dmul+0x234>
 800849a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800849e:	f47f aeeb 	bne.w	8008278 <__aeabi_dmul+0x1f8>
 80084a2:	e712      	b.n	80082ca <__aeabi_dmul+0x24a>

080084a4 <__gedf2>:
 80084a4:	f04f 3cff 	mov.w	ip, #4294967295
 80084a8:	e006      	b.n	80084b8 <__cmpdf2+0x4>
 80084aa:	bf00      	nop

080084ac <__ledf2>:
 80084ac:	f04f 0c01 	mov.w	ip, #1
 80084b0:	e002      	b.n	80084b8 <__cmpdf2+0x4>
 80084b2:	bf00      	nop

080084b4 <__cmpdf2>:
 80084b4:	f04f 0c01 	mov.w	ip, #1
 80084b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80084bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80084c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80084c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80084c8:	bf18      	it	ne
 80084ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80084ce:	d01b      	beq.n	8008508 <__cmpdf2+0x54>
 80084d0:	b001      	add	sp, #4
 80084d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80084d6:	bf0c      	ite	eq
 80084d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80084dc:	ea91 0f03 	teqne	r1, r3
 80084e0:	bf02      	ittt	eq
 80084e2:	ea90 0f02 	teqeq	r0, r2
 80084e6:	2000      	moveq	r0, #0
 80084e8:	4770      	bxeq	lr
 80084ea:	f110 0f00 	cmn.w	r0, #0
 80084ee:	ea91 0f03 	teq	r1, r3
 80084f2:	bf58      	it	pl
 80084f4:	4299      	cmppl	r1, r3
 80084f6:	bf08      	it	eq
 80084f8:	4290      	cmpeq	r0, r2
 80084fa:	bf2c      	ite	cs
 80084fc:	17d8      	asrcs	r0, r3, #31
 80084fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008502:	f040 0001 	orr.w	r0, r0, #1
 8008506:	4770      	bx	lr
 8008508:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800850c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008510:	d102      	bne.n	8008518 <__cmpdf2+0x64>
 8008512:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008516:	d107      	bne.n	8008528 <__cmpdf2+0x74>
 8008518:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800851c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008520:	d1d6      	bne.n	80084d0 <__cmpdf2+0x1c>
 8008522:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008526:	d0d3      	beq.n	80084d0 <__cmpdf2+0x1c>
 8008528:	f85d 0b04 	ldr.w	r0, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop

08008530 <__aeabi_cdrcmple>:
 8008530:	4684      	mov	ip, r0
 8008532:	4610      	mov	r0, r2
 8008534:	4662      	mov	r2, ip
 8008536:	468c      	mov	ip, r1
 8008538:	4619      	mov	r1, r3
 800853a:	4663      	mov	r3, ip
 800853c:	e000      	b.n	8008540 <__aeabi_cdcmpeq>
 800853e:	bf00      	nop

08008540 <__aeabi_cdcmpeq>:
 8008540:	b501      	push	{r0, lr}
 8008542:	f7ff ffb7 	bl	80084b4 <__cmpdf2>
 8008546:	2800      	cmp	r0, #0
 8008548:	bf48      	it	mi
 800854a:	f110 0f00 	cmnmi.w	r0, #0
 800854e:	bd01      	pop	{r0, pc}

08008550 <__aeabi_dcmpeq>:
 8008550:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008554:	f7ff fff4 	bl	8008540 <__aeabi_cdcmpeq>
 8008558:	bf0c      	ite	eq
 800855a:	2001      	moveq	r0, #1
 800855c:	2000      	movne	r0, #0
 800855e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008562:	bf00      	nop

08008564 <__aeabi_dcmplt>:
 8008564:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008568:	f7ff ffea 	bl	8008540 <__aeabi_cdcmpeq>
 800856c:	bf34      	ite	cc
 800856e:	2001      	movcc	r0, #1
 8008570:	2000      	movcs	r0, #0
 8008572:	f85d fb08 	ldr.w	pc, [sp], #8
 8008576:	bf00      	nop

08008578 <__aeabi_dcmple>:
 8008578:	f84d ed08 	str.w	lr, [sp, #-8]!
 800857c:	f7ff ffe0 	bl	8008540 <__aeabi_cdcmpeq>
 8008580:	bf94      	ite	ls
 8008582:	2001      	movls	r0, #1
 8008584:	2000      	movhi	r0, #0
 8008586:	f85d fb08 	ldr.w	pc, [sp], #8
 800858a:	bf00      	nop

0800858c <__aeabi_dcmpge>:
 800858c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008590:	f7ff ffce 	bl	8008530 <__aeabi_cdrcmple>
 8008594:	bf94      	ite	ls
 8008596:	2001      	movls	r0, #1
 8008598:	2000      	movhi	r0, #0
 800859a:	f85d fb08 	ldr.w	pc, [sp], #8
 800859e:	bf00      	nop

080085a0 <__aeabi_dcmpgt>:
 80085a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80085a4:	f7ff ffc4 	bl	8008530 <__aeabi_cdrcmple>
 80085a8:	bf34      	ite	cc
 80085aa:	2001      	movcc	r0, #1
 80085ac:	2000      	movcs	r0, #0
 80085ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80085b2:	bf00      	nop

080085b4 <__aeabi_dcmpun>:
 80085b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80085b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80085bc:	d102      	bne.n	80085c4 <__aeabi_dcmpun+0x10>
 80085be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80085c2:	d10a      	bne.n	80085da <__aeabi_dcmpun+0x26>
 80085c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80085c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80085cc:	d102      	bne.n	80085d4 <__aeabi_dcmpun+0x20>
 80085ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80085d2:	d102      	bne.n	80085da <__aeabi_dcmpun+0x26>
 80085d4:	f04f 0000 	mov.w	r0, #0
 80085d8:	4770      	bx	lr
 80085da:	f04f 0001 	mov.w	r0, #1
 80085de:	4770      	bx	lr

080085e0 <__aeabi_d2iz>:
 80085e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80085e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80085e8:	d215      	bcs.n	8008616 <__aeabi_d2iz+0x36>
 80085ea:	d511      	bpl.n	8008610 <__aeabi_d2iz+0x30>
 80085ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80085f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80085f4:	d912      	bls.n	800861c <__aeabi_d2iz+0x3c>
 80085f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80085fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008602:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008606:	fa23 f002 	lsr.w	r0, r3, r2
 800860a:	bf18      	it	ne
 800860c:	4240      	negne	r0, r0
 800860e:	4770      	bx	lr
 8008610:	f04f 0000 	mov.w	r0, #0
 8008614:	4770      	bx	lr
 8008616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800861a:	d105      	bne.n	8008628 <__aeabi_d2iz+0x48>
 800861c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008620:	bf08      	it	eq
 8008622:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008626:	4770      	bx	lr
 8008628:	f04f 0000 	mov.w	r0, #0
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop

08008630 <__aeabi_uldivmod>:
 8008630:	b953      	cbnz	r3, 8008648 <__aeabi_uldivmod+0x18>
 8008632:	b94a      	cbnz	r2, 8008648 <__aeabi_uldivmod+0x18>
 8008634:	2900      	cmp	r1, #0
 8008636:	bf08      	it	eq
 8008638:	2800      	cmpeq	r0, #0
 800863a:	bf1c      	itt	ne
 800863c:	f04f 31ff 	movne.w	r1, #4294967295
 8008640:	f04f 30ff 	movne.w	r0, #4294967295
 8008644:	f000 b97e 	b.w	8008944 <__aeabi_idiv0>
 8008648:	f1ad 0c08 	sub.w	ip, sp, #8
 800864c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008650:	f000 f806 	bl	8008660 <__udivmoddi4>
 8008654:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800865c:	b004      	add	sp, #16
 800865e:	4770      	bx	lr

08008660 <__udivmoddi4>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	468c      	mov	ip, r1
 8008666:	460e      	mov	r6, r1
 8008668:	4604      	mov	r4, r0
 800866a:	9d08      	ldr	r5, [sp, #32]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d150      	bne.n	8008712 <__udivmoddi4+0xb2>
 8008670:	428a      	cmp	r2, r1
 8008672:	4617      	mov	r7, r2
 8008674:	d96c      	bls.n	8008750 <__udivmoddi4+0xf0>
 8008676:	fab2 fe82 	clz	lr, r2
 800867a:	f1be 0f00 	cmp.w	lr, #0
 800867e:	d00b      	beq.n	8008698 <__udivmoddi4+0x38>
 8008680:	f1ce 0420 	rsb	r4, lr, #32
 8008684:	fa20 f404 	lsr.w	r4, r0, r4
 8008688:	fa01 f60e 	lsl.w	r6, r1, lr
 800868c:	ea44 0c06 	orr.w	ip, r4, r6
 8008690:	fa02 f70e 	lsl.w	r7, r2, lr
 8008694:	fa00 f40e 	lsl.w	r4, r0, lr
 8008698:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800869c:	0c22      	lsrs	r2, r4, #16
 800869e:	fbbc f0f9 	udiv	r0, ip, r9
 80086a2:	fa1f f887 	uxth.w	r8, r7
 80086a6:	fb09 c610 	mls	r6, r9, r0, ip
 80086aa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80086ae:	fb00 f308 	mul.w	r3, r0, r8
 80086b2:	42b3      	cmp	r3, r6
 80086b4:	d909      	bls.n	80086ca <__udivmoddi4+0x6a>
 80086b6:	19f6      	adds	r6, r6, r7
 80086b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80086bc:	f080 8122 	bcs.w	8008904 <__udivmoddi4+0x2a4>
 80086c0:	42b3      	cmp	r3, r6
 80086c2:	f240 811f 	bls.w	8008904 <__udivmoddi4+0x2a4>
 80086c6:	3802      	subs	r0, #2
 80086c8:	443e      	add	r6, r7
 80086ca:	1af6      	subs	r6, r6, r3
 80086cc:	b2a2      	uxth	r2, r4
 80086ce:	fbb6 f3f9 	udiv	r3, r6, r9
 80086d2:	fb09 6613 	mls	r6, r9, r3, r6
 80086d6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80086da:	fb03 f808 	mul.w	r8, r3, r8
 80086de:	45a0      	cmp	r8, r4
 80086e0:	d909      	bls.n	80086f6 <__udivmoddi4+0x96>
 80086e2:	19e4      	adds	r4, r4, r7
 80086e4:	f103 32ff 	add.w	r2, r3, #4294967295
 80086e8:	f080 810a 	bcs.w	8008900 <__udivmoddi4+0x2a0>
 80086ec:	45a0      	cmp	r8, r4
 80086ee:	f240 8107 	bls.w	8008900 <__udivmoddi4+0x2a0>
 80086f2:	3b02      	subs	r3, #2
 80086f4:	443c      	add	r4, r7
 80086f6:	ebc8 0404 	rsb	r4, r8, r4
 80086fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80086fe:	2100      	movs	r1, #0
 8008700:	2d00      	cmp	r5, #0
 8008702:	d062      	beq.n	80087ca <__udivmoddi4+0x16a>
 8008704:	fa24 f40e 	lsr.w	r4, r4, lr
 8008708:	2300      	movs	r3, #0
 800870a:	602c      	str	r4, [r5, #0]
 800870c:	606b      	str	r3, [r5, #4]
 800870e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008712:	428b      	cmp	r3, r1
 8008714:	d907      	bls.n	8008726 <__udivmoddi4+0xc6>
 8008716:	2d00      	cmp	r5, #0
 8008718:	d055      	beq.n	80087c6 <__udivmoddi4+0x166>
 800871a:	2100      	movs	r1, #0
 800871c:	e885 0041 	stmia.w	r5, {r0, r6}
 8008720:	4608      	mov	r0, r1
 8008722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008726:	fab3 f183 	clz	r1, r3
 800872a:	2900      	cmp	r1, #0
 800872c:	f040 8090 	bne.w	8008850 <__udivmoddi4+0x1f0>
 8008730:	42b3      	cmp	r3, r6
 8008732:	d302      	bcc.n	800873a <__udivmoddi4+0xda>
 8008734:	4282      	cmp	r2, r0
 8008736:	f200 80f8 	bhi.w	800892a <__udivmoddi4+0x2ca>
 800873a:	1a84      	subs	r4, r0, r2
 800873c:	eb66 0603 	sbc.w	r6, r6, r3
 8008740:	2001      	movs	r0, #1
 8008742:	46b4      	mov	ip, r6
 8008744:	2d00      	cmp	r5, #0
 8008746:	d040      	beq.n	80087ca <__udivmoddi4+0x16a>
 8008748:	e885 1010 	stmia.w	r5, {r4, ip}
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	b912      	cbnz	r2, 8008758 <__udivmoddi4+0xf8>
 8008752:	2701      	movs	r7, #1
 8008754:	fbb7 f7f2 	udiv	r7, r7, r2
 8008758:	fab7 fe87 	clz	lr, r7
 800875c:	f1be 0f00 	cmp.w	lr, #0
 8008760:	d135      	bne.n	80087ce <__udivmoddi4+0x16e>
 8008762:	1bf3      	subs	r3, r6, r7
 8008764:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008768:	fa1f fc87 	uxth.w	ip, r7
 800876c:	2101      	movs	r1, #1
 800876e:	fbb3 f0f8 	udiv	r0, r3, r8
 8008772:	0c22      	lsrs	r2, r4, #16
 8008774:	fb08 3610 	mls	r6, r8, r0, r3
 8008778:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800877c:	fb0c f300 	mul.w	r3, ip, r0
 8008780:	42b3      	cmp	r3, r6
 8008782:	d907      	bls.n	8008794 <__udivmoddi4+0x134>
 8008784:	19f6      	adds	r6, r6, r7
 8008786:	f100 32ff 	add.w	r2, r0, #4294967295
 800878a:	d202      	bcs.n	8008792 <__udivmoddi4+0x132>
 800878c:	42b3      	cmp	r3, r6
 800878e:	f200 80ce 	bhi.w	800892e <__udivmoddi4+0x2ce>
 8008792:	4610      	mov	r0, r2
 8008794:	1af6      	subs	r6, r6, r3
 8008796:	b2a2      	uxth	r2, r4
 8008798:	fbb6 f3f8 	udiv	r3, r6, r8
 800879c:	fb08 6613 	mls	r6, r8, r3, r6
 80087a0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80087a4:	fb0c fc03 	mul.w	ip, ip, r3
 80087a8:	45a4      	cmp	ip, r4
 80087aa:	d907      	bls.n	80087bc <__udivmoddi4+0x15c>
 80087ac:	19e4      	adds	r4, r4, r7
 80087ae:	f103 32ff 	add.w	r2, r3, #4294967295
 80087b2:	d202      	bcs.n	80087ba <__udivmoddi4+0x15a>
 80087b4:	45a4      	cmp	ip, r4
 80087b6:	f200 80b5 	bhi.w	8008924 <__udivmoddi4+0x2c4>
 80087ba:	4613      	mov	r3, r2
 80087bc:	ebcc 0404 	rsb	r4, ip, r4
 80087c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80087c4:	e79c      	b.n	8008700 <__udivmoddi4+0xa0>
 80087c6:	4629      	mov	r1, r5
 80087c8:	4628      	mov	r0, r5
 80087ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ce:	f1ce 0120 	rsb	r1, lr, #32
 80087d2:	fa06 f30e 	lsl.w	r3, r6, lr
 80087d6:	fa07 f70e 	lsl.w	r7, r7, lr
 80087da:	fa20 f901 	lsr.w	r9, r0, r1
 80087de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80087e2:	40ce      	lsrs	r6, r1
 80087e4:	ea49 0903 	orr.w	r9, r9, r3
 80087e8:	fbb6 faf8 	udiv	sl, r6, r8
 80087ec:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80087f0:	fb08 661a 	mls	r6, r8, sl, r6
 80087f4:	fa1f fc87 	uxth.w	ip, r7
 80087f8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80087fc:	fb0a f20c 	mul.w	r2, sl, ip
 8008800:	429a      	cmp	r2, r3
 8008802:	fa00 f40e 	lsl.w	r4, r0, lr
 8008806:	d90a      	bls.n	800881e <__udivmoddi4+0x1be>
 8008808:	19db      	adds	r3, r3, r7
 800880a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800880e:	f080 8087 	bcs.w	8008920 <__udivmoddi4+0x2c0>
 8008812:	429a      	cmp	r2, r3
 8008814:	f240 8084 	bls.w	8008920 <__udivmoddi4+0x2c0>
 8008818:	f1aa 0a02 	sub.w	sl, sl, #2
 800881c:	443b      	add	r3, r7
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	fa1f f989 	uxth.w	r9, r9
 8008824:	fbb3 f1f8 	udiv	r1, r3, r8
 8008828:	fb08 3311 	mls	r3, r8, r1, r3
 800882c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8008830:	fb01 f60c 	mul.w	r6, r1, ip
 8008834:	429e      	cmp	r6, r3
 8008836:	d907      	bls.n	8008848 <__udivmoddi4+0x1e8>
 8008838:	19db      	adds	r3, r3, r7
 800883a:	f101 32ff 	add.w	r2, r1, #4294967295
 800883e:	d26b      	bcs.n	8008918 <__udivmoddi4+0x2b8>
 8008840:	429e      	cmp	r6, r3
 8008842:	d969      	bls.n	8008918 <__udivmoddi4+0x2b8>
 8008844:	3902      	subs	r1, #2
 8008846:	443b      	add	r3, r7
 8008848:	1b9b      	subs	r3, r3, r6
 800884a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800884e:	e78e      	b.n	800876e <__udivmoddi4+0x10e>
 8008850:	f1c1 0e20 	rsb	lr, r1, #32
 8008854:	fa22 f40e 	lsr.w	r4, r2, lr
 8008858:	408b      	lsls	r3, r1
 800885a:	4323      	orrs	r3, r4
 800885c:	fa20 f70e 	lsr.w	r7, r0, lr
 8008860:	fa06 f401 	lsl.w	r4, r6, r1
 8008864:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008868:	fa26 f60e 	lsr.w	r6, r6, lr
 800886c:	433c      	orrs	r4, r7
 800886e:	fbb6 f9fc 	udiv	r9, r6, ip
 8008872:	0c27      	lsrs	r7, r4, #16
 8008874:	fb0c 6619 	mls	r6, ip, r9, r6
 8008878:	fa1f f883 	uxth.w	r8, r3
 800887c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8008880:	fb09 f708 	mul.w	r7, r9, r8
 8008884:	42b7      	cmp	r7, r6
 8008886:	fa02 f201 	lsl.w	r2, r2, r1
 800888a:	fa00 fa01 	lsl.w	sl, r0, r1
 800888e:	d908      	bls.n	80088a2 <__udivmoddi4+0x242>
 8008890:	18f6      	adds	r6, r6, r3
 8008892:	f109 30ff 	add.w	r0, r9, #4294967295
 8008896:	d241      	bcs.n	800891c <__udivmoddi4+0x2bc>
 8008898:	42b7      	cmp	r7, r6
 800889a:	d93f      	bls.n	800891c <__udivmoddi4+0x2bc>
 800889c:	f1a9 0902 	sub.w	r9, r9, #2
 80088a0:	441e      	add	r6, r3
 80088a2:	1bf6      	subs	r6, r6, r7
 80088a4:	b2a0      	uxth	r0, r4
 80088a6:	fbb6 f4fc 	udiv	r4, r6, ip
 80088aa:	fb0c 6614 	mls	r6, ip, r4, r6
 80088ae:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80088b2:	fb04 f808 	mul.w	r8, r4, r8
 80088b6:	45b8      	cmp	r8, r7
 80088b8:	d907      	bls.n	80088ca <__udivmoddi4+0x26a>
 80088ba:	18ff      	adds	r7, r7, r3
 80088bc:	f104 30ff 	add.w	r0, r4, #4294967295
 80088c0:	d228      	bcs.n	8008914 <__udivmoddi4+0x2b4>
 80088c2:	45b8      	cmp	r8, r7
 80088c4:	d926      	bls.n	8008914 <__udivmoddi4+0x2b4>
 80088c6:	3c02      	subs	r4, #2
 80088c8:	441f      	add	r7, r3
 80088ca:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80088ce:	ebc8 0707 	rsb	r7, r8, r7
 80088d2:	fba0 8902 	umull	r8, r9, r0, r2
 80088d6:	454f      	cmp	r7, r9
 80088d8:	4644      	mov	r4, r8
 80088da:	464e      	mov	r6, r9
 80088dc:	d314      	bcc.n	8008908 <__udivmoddi4+0x2a8>
 80088de:	d029      	beq.n	8008934 <__udivmoddi4+0x2d4>
 80088e0:	b365      	cbz	r5, 800893c <__udivmoddi4+0x2dc>
 80088e2:	ebba 0304 	subs.w	r3, sl, r4
 80088e6:	eb67 0706 	sbc.w	r7, r7, r6
 80088ea:	fa07 fe0e 	lsl.w	lr, r7, lr
 80088ee:	40cb      	lsrs	r3, r1
 80088f0:	40cf      	lsrs	r7, r1
 80088f2:	ea4e 0303 	orr.w	r3, lr, r3
 80088f6:	e885 0088 	stmia.w	r5, {r3, r7}
 80088fa:	2100      	movs	r1, #0
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	4613      	mov	r3, r2
 8008902:	e6f8      	b.n	80086f6 <__udivmoddi4+0x96>
 8008904:	4610      	mov	r0, r2
 8008906:	e6e0      	b.n	80086ca <__udivmoddi4+0x6a>
 8008908:	ebb8 0402 	subs.w	r4, r8, r2
 800890c:	eb69 0603 	sbc.w	r6, r9, r3
 8008910:	3801      	subs	r0, #1
 8008912:	e7e5      	b.n	80088e0 <__udivmoddi4+0x280>
 8008914:	4604      	mov	r4, r0
 8008916:	e7d8      	b.n	80088ca <__udivmoddi4+0x26a>
 8008918:	4611      	mov	r1, r2
 800891a:	e795      	b.n	8008848 <__udivmoddi4+0x1e8>
 800891c:	4681      	mov	r9, r0
 800891e:	e7c0      	b.n	80088a2 <__udivmoddi4+0x242>
 8008920:	468a      	mov	sl, r1
 8008922:	e77c      	b.n	800881e <__udivmoddi4+0x1be>
 8008924:	3b02      	subs	r3, #2
 8008926:	443c      	add	r4, r7
 8008928:	e748      	b.n	80087bc <__udivmoddi4+0x15c>
 800892a:	4608      	mov	r0, r1
 800892c:	e70a      	b.n	8008744 <__udivmoddi4+0xe4>
 800892e:	3802      	subs	r0, #2
 8008930:	443e      	add	r6, r7
 8008932:	e72f      	b.n	8008794 <__udivmoddi4+0x134>
 8008934:	45c2      	cmp	sl, r8
 8008936:	d3e7      	bcc.n	8008908 <__udivmoddi4+0x2a8>
 8008938:	463e      	mov	r6, r7
 800893a:	e7d1      	b.n	80088e0 <__udivmoddi4+0x280>
 800893c:	4629      	mov	r1, r5
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	bf00      	nop

08008944 <__aeabi_idiv0>:
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	61746164 	.word	0x61746164
 800894c:	7325203a 	.word	0x7325203a
 8008950:	00000000 	.word	0x00000000
 8008954:	25203a58 	.word	0x25203a58
 8008958:	00000a64 	.word	0x00000a64
 800895c:	25203a59 	.word	0x25203a59
 8008960:	00000a64 	.word	0x00000a64

08008964 <zeroes.7273>:
 8008964:	30303030 30303030 30303030 30303030     0000000000000000
 8008974:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8008984:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8008994:	00000000 33323130 37363534 62613938     ....0123456789ab
 80089a4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 80089b4:	00000030                                0...

080089b8 <blanks.7272>:
 80089b8:	20202020 20202020 20202020 20202020                     
 80089c8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

080089d8 <__mprec_tens>:
 80089d8:	00000000 3ff00000 00000000 40240000     .......?......$@
 80089e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80089f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8008a08:	00000000 412e8480 00000000 416312d0     .......A......cA
 8008a18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8008a28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8008a38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8008a48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8008a58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008a68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008a78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008a88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008a98:	79d99db4 44ea7843                       ...yCx.D

08008aa0 <__mprec_bigtens>:
 8008aa0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008ab0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008ac0:	7f73bf3c 75154fdd                       <.s..O.u

08008ac8 <p05.6087>:
 8008ac8:	00000005 00000019 0000007d              ........}...

08008ad4 <zeroes.7258>:
 8008ad4:	30303030 30303030 30303030 30303030     0000000000000000

08008ae4 <blanks.7257>:
 8008ae4:	20202020 20202020 20202020 20202020                     
 8008af4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

08008b04 <_ctype_>:
 8008b04:	20202000 20202020 28282020 20282828     .         ((((( 
 8008b14:	20202020 20202020 20202020 20202020                     
 8008b24:	10108820 10101010 10101010 10101010      ...............
 8008b34:	04040410 04040404 10040404 10101010     ................
 8008b44:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8008b54:	01010101 01010101 01010101 10101010     ................
 8008b64:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8008b74:	02020202 02020202 02020202 10101010     ................
 8008b84:	00000020 00000000 00000000 00000000      ...............
	...
