
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b5 08 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 39 0c 00 08 b1 02 00 08 b1 02 00 08     ....9...........
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008ff8 	.word	0x0c008ff8
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e0 	.word	0x000009e0
 8000254:	0c0099d8 	.word	0x0c0099d8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c008ff8 	.word	0x0c008ff8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c008ff8 	.word	0x0c008ff8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e0 	.word	0x200009e0
 800027c:	00000098 	.word	0x00000098
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08000fe9 	.word	0x08000fe9
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08001cc1 	.word	0x08001cc1
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080008e9 	.word	0x080008e9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
 80002c0:	4613      	mov	r3, r2
 80002c2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80002c4:	78f8      	ldrb	r0, [r7, #3]
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	3306      	adds	r3, #6
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80002d6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80002d8:	431a      	orrs	r2, r3
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	1d83      	adds	r3, r0, #6
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	440b      	add	r3, r1
 80002e2:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80002fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031c:	f023 020f 	bic.w	r2, r3, #15
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	431a      	orrs	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 800033c:	2104      	movs	r1, #4
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ffe4 	bl	800030c <XMC_USIC_CH_SetMode>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
 8000358:	4613      	mov	r3, r2
 800035a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 800035c:	78f8      	ldrb	r0, [r7, #3]
 800035e:	78fb      	ldrb	r3, [r7, #3]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	3306      	adds	r3, #6
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	4413      	add	r3, r2
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800036e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	1d83      	adds	r3, r0, #6
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	440b      	add	r3, r1
 800037a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800037c:	78ba      	ldrb	r2, [r7, #2]
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	4619      	mov	r1, r3
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f7ff ff96 	bl	80002b4 <XMC_USIC_CH_SetInputSource>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <remote_i2c_to_mems_init>:
 * \brief This function configures the I2C interface to communicate via pins P0_5 (SDA)
 * 	      & P0_11 (SCL)
 * \param none
 * \return 0 on success
 */
uint8_t remote_i2c_to_mems_init(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	XMC_I2C_CH_Init(XMC_I2C1_CH0, &i2c_cfg);
 80003d0:	490e      	ldr	r1, [pc, #56]	; (800040c <remote_i2c_to_mems_init+0x40>)
 80003d2:	480f      	ldr	r0, [pc, #60]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003d4:	f001 f88e 	bl	80014f4 <XMC_I2C_CH_Init>
	XMC_I2C_CH_SetInputSource(XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA,
 80003d8:	2201      	movs	r2, #1
 80003da:	2100      	movs	r1, #0
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003de:	f7ff ffb5 	bl	800034c <XMC_I2C_CH_SetInputSource>
	USIC1_C0_DX0_P0_5);
	XMC_I2C_CH_SetInputSource(XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL,
 80003e2:	2206      	movs	r2, #6
 80003e4:	2101      	movs	r1, #1
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003e8:	f7ff ffb0 	bl	800034c <XMC_I2C_CH_SetInputSource>
	USIC1_C0_DX1_SCLKOUT);
	XMC_I2C_CH_Start(XMC_I2C1_CH0);
 80003ec:	4808      	ldr	r0, [pc, #32]	; (8000410 <remote_i2c_to_mems_init+0x44>)
 80003ee:	f7ff ffa1 	bl	8000334 <XMC_I2C_CH_Start>
	XMC_GPIO_Init (P0_11, &i2c_scl);
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <remote_i2c_to_mems_init+0x48>)
 80003f4:	210b      	movs	r1, #11
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <remote_i2c_to_mems_init+0x4c>)
 80003f8:	f000 ffb8 	bl	800136c <XMC_GPIO_Init>
	XMC_GPIO_Init (P0_5, &i2c_sda);
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <remote_i2c_to_mems_init+0x50>)
 80003fe:	2105      	movs	r1, #5
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <remote_i2c_to_mems_init+0x4c>)
 8000402:	f000 ffb3 	bl	800136c <XMC_GPIO_Init>

	return 0;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000030 	.word	0x20000030
 8000410:	48020000 	.word	0x48020000
 8000414:	20000024 	.word	0x20000024
 8000418:	48028000 	.word	0x48028000
 800041c:	20000018 	.word	0x20000018

08000420 <remote_i2c_write>:
 * \brief This function sends a byte via the I2C interface and waits for the ack
 * \param channel ... the channel of the USIC module for I2C communication
 *        data    ... data to be written on the I2C interface
 * \return either the sent data or 0xFFFF on error
 */
uint16_t remote_i2c_write(XMC_USIC_CH_t * const channel, uint8_t data) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]

	XMC_I2C_CH_MasterTransmit(channel, data);
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	4619      	mov	r1, r3
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f001 f971 	bl	8001718 <XMC_I2C_CH_MasterTransmit>
	if(remote_i2c_wait_for_ack(channel)) {
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 f848 	bl	80004cc <remote_i2c_wait_for_ack>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <remote_i2c_write+0x28>
		return 0xFFFF;
 8000442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000446:	e001      	b.n	800044c <remote_i2c_write+0x2c>
	}

	return data;
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	b29b      	uxth	r3, r3

}
 800044c:	4618      	mov	r0, r3
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <remote_i2c_read>:
 *        is read and a NACK of the master is sent
 * \param channel ... I2C channel to be read of
 *        id      ... address of the slave
 * \return either the received value or 0xFFFF on error
 */
uint16_t remote_i2c_read(XMC_USIC_CH_t * const channel, uint8_t id) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]

	uint8_t recv = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	73fb      	strb	r3, [r7, #15]

	XMC_I2C_CH_MasterRepeatedStart(channel, id, XMC_I2C_CH_CMD_READ);
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	b29b      	uxth	r3, r3
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f001 f8f9 	bl	8001664 <XMC_I2C_CH_MasterRepeatedStart>
	if(remote_i2c_wait_for_ack(channel)) {
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f82a 	bl	80004cc <remote_i2c_wait_for_ack>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d002      	beq.n	8000484 <remote_i2c_read+0x30>
		return 0xFFFF;
 800047e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000482:	e01d      	b.n	80004c0 <remote_i2c_read+0x6c>
	}



	XMC_I2C_CH_MasterReceiveNack(channel);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f001 f993 	bl	80017b0 <XMC_I2C_CH_MasterReceiveNack>

	while ((XMC_USIC_CH_GetReceiveBufferStatus(channel)
 800048a:	bf00      	nop
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ff2f 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000492:	4603      	mov	r3, r0
 8000494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000498:	d006      	beq.n	80004a8 <remote_i2c_read+0x54>
			!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)
			&& ((uint32_t) XMC_USIC_CH_GetReceiveBufferStatus(channel)
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ff28 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 80004a0:	4603      	mov	r3, r0
 80004a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004a6:	d1f1      	bne.n	800048c <remote_i2c_read+0x38>
					!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
		;

	XMC_I2C_CH_ClearStatusFlag(XMC_I2C1_CH0, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 80004a8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80004ac:	4806      	ldr	r0, [pc, #24]	; (80004c8 <remote_i2c_read+0x74>)
 80004ae:	f7ff ff7b 	bl	80003a8 <XMC_I2C_CH_ClearStatusFlag>
                                           XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);

	recv = XMC_I2C_CH_GetReceivedData(channel);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f001 f9a2 	bl	80017fc <XMC_I2C_CH_GetReceivedData>
 80004b8:	4603      	mov	r3, r0
 80004ba:	73fb      	strb	r3, [r7, #15]

	return recv;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	b29b      	uxth	r3, r3

}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	48020000 	.word	0x48020000

080004cc <remote_i2c_wait_for_ack>:
 * \brief Waits for a ack of the slave, if no ack is received after 5000 cycles an
 *        error is returned
 * \param channel	... the channel on which the ack shall be received
 * \return 0 on success, 1 on failure
 */
uint8_t remote_i2c_wait_for_ack(XMC_USIC_CH_t * const channel) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	uint8_t ret = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73fb      	strb	r3, [r7, #15]
	uint16_t timeout_counter = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	81bb      	strh	r3, [r7, #12]

	while ((XMC_I2C_CH_GetStatusFlag(channel)
 80004dc:	e00a      	b.n	80004f4 <remote_i2c_wait_for_ack+0x28>
			& XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
		/* wait for ACK */
		timeout_counter++;
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	81bb      	strh	r3, [r7, #12]
		if(timeout_counter > 10000) {
 80004e4:	89bb      	ldrh	r3, [r7, #12]
 80004e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d902      	bls.n	80004f4 <remote_i2c_wait_for_ack+0x28>
			ret = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]
			break;
 80004f2:	e007      	b.n	8000504 <remote_i2c_wait_for_ack+0x38>
uint8_t remote_i2c_wait_for_ack(XMC_USIC_CH_t * const channel) {

	uint8_t ret = 0;
	uint16_t timeout_counter = 0;

	while ((XMC_I2C_CH_GetStatusFlag(channel)
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff ff4b 	bl	8000390 <XMC_I2C_CH_GetStatusFlag>
 80004fa:	4603      	mov	r3, r0
			& XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80004fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
uint8_t remote_i2c_wait_for_ack(XMC_USIC_CH_t * const channel) {

	uint8_t ret = 0;
	uint16_t timeout_counter = 0;

	while ((XMC_I2C_CH_GetStatusFlag(channel)
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0ec      	beq.n	80004de <remote_i2c_wait_for_ack+0x12>
		if(timeout_counter > 10000) {
			ret = 1;
			break;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff ff4d 	bl	80003a8 <XMC_I2C_CH_ClearStatusFlag>
	return ret;
 800050e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <remote_i2c_write_read>:
 *        write_read  ... distinction between write or read access
 *                        0 = write / 1 = read
 * \return sent or received data or 0xFFFF in case of an error
 */
uint16_t remote_i2c_write_read(uint8_t id, uint8_t reg_addr, uint8_t i2c_data,
		_Bool write_read) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	4604      	mov	r4, r0
 8000520:	4608      	mov	r0, r1
 8000522:	4611      	mov	r1, r2
 8000524:	461a      	mov	r2, r3
 8000526:	4623      	mov	r3, r4
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	4603      	mov	r3, r0
 800052c:	71bb      	strb	r3, [r7, #6]
 800052e:	460b      	mov	r3, r1
 8000530:	717b      	strb	r3, [r7, #5]
 8000532:	4613      	mov	r3, r2
 8000534:	713b      	strb	r3, [r7, #4]

	XMC_USIC_CH_t *channel;
	channel = XMC_I2C1_CH0;
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <remote_i2c_write_read+0x98>)
 8000538:	60bb      	str	r3, [r7, #8]

	uint16_t ret = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	81fb      	strh	r3, [r7, #14]
   *        address of the desired slave
   * \param channel ... I2C Channel on which the data should be sent
   *        id      ... Address of the desired slave
   * \return none
   */
	XMC_I2C_CH_MasterStart(channel, id, XMC_I2C_CH_CMD_WRITE);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	b29b      	uxth	r3, r3
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	68b8      	ldr	r0, [r7, #8]
 8000548:	f001 f858 	bl	80015fc <XMC_I2C_CH_MasterStart>
	#if DEBUG_ALL
		printf("\t-I2C started\n");
	#endif
	if(remote_i2c_wait_for_ack(channel)) {
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f7ff ffbd 	bl	80004cc <remote_i2c_wait_for_ack>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <remote_i2c_write_read+0x46>
		return 0xFFFF;
 8000558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800055c:	e023      	b.n	80005a6 <remote_i2c_write_read+0x8e>
	}
	#if DEBUG_ALL
		printf("\t-ACK received\n");
	#endif

	XMC_I2C_CH_MasterTransmit(channel, reg_addr);
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	4619      	mov	r1, r3
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f001 f8d8 	bl	8001718 <XMC_I2C_CH_MasterTransmit>
	#if DEBUG_ALL
		printf("\t-reg_addr transmitted\n");
	#endif
	if(remote_i2c_wait_for_ack(channel)) {
 8000568:	68b8      	ldr	r0, [r7, #8]
 800056a:	f7ff ffaf 	bl	80004cc <remote_i2c_wait_for_ack>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d002      	beq.n	800057a <remote_i2c_write_read+0x62>
		return 0xFFFF;
 8000574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000578:	e015      	b.n	80005a6 <remote_i2c_write_read+0x8e>
	}
	#if DEBUG_ALL
		printf("\t-ACK received\n");
	#endif

	if (write_read) { // read = 1
 800057a:	793b      	ldrb	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d007      	beq.n	8000590 <remote_i2c_write_read+0x78>
		ret = remote_i2c_read(channel, id);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	4619      	mov	r1, r3
 8000584:	68b8      	ldr	r0, [r7, #8]
 8000586:	f7ff ff65 	bl	8000454 <remote_i2c_read>
 800058a:	4603      	mov	r3, r0
 800058c:	81fb      	strh	r3, [r7, #14]
 800058e:	e006      	b.n	800059e <remote_i2c_write_read+0x86>
	} else { // write = 0
		ret = remote_i2c_write(channel, i2c_data);
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	4619      	mov	r1, r3
 8000594:	68b8      	ldr	r0, [r7, #8]
 8000596:	f7ff ff43 	bl	8000420 <remote_i2c_write>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]
	}
	#if DEBUG_ALL
		printf("\t-read/write complete\n");
	#endif

	XMC_I2C_CH_MasterStop(channel);
 800059e:	68b8      	ldr	r0, [r7, #8]
 80005a0:	f001 f894 	bl	80016cc <XMC_I2C_CH_MasterStop>
	#if DEBUG_ALL
		printf("\t-I2C finished\n");
	#endif
	return ret;
 80005a4:	89fb      	ldrh	r3, [r7, #14]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48020000 	.word	0x48020000

080005b4 <remote_i2c_read_xy>:
 * \param id          ... address of the slave
 *        reg_addr    ... register address to be read of or written to
 *        *received   ... data received from sensor
 * \return 0 on sucess, 1 on failure
 */
uint8_t remote_i2c_read_xy(uint8_t id, uint8_t reg_addr, uint8_t *received) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	603a      	str	r2, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	460b      	mov	r3, r1
 80005c2:	71bb      	strb	r3, [r7, #6]
	XMC_USIC_CH_t *channel;
	channel = XMC_I2C1_CH0;
 80005c4:	4b31      	ldr	r3, [pc, #196]	; (800068c <remote_i2c_read_xy+0xd8>)
 80005c6:	60bb      	str	r3, [r7, #8]
   *        address of the desired slave
   * \param channel ... I2C Channel on which the data should be sent
   *        id      ... Address of the desired slave
   * \return none
   */
	XMC_I2C_CH_MasterStart(channel, id, XMC_I2C_CH_CMD_WRITE);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2200      	movs	r2, #0
 80005ce:	4619      	mov	r1, r3
 80005d0:	68b8      	ldr	r0, [r7, #8]
 80005d2:	f001 f813 	bl	80015fc <XMC_I2C_CH_MasterStart>
	if(remote_i2c_wait_for_ack(channel)) {
 80005d6:	68b8      	ldr	r0, [r7, #8]
 80005d8:	f7ff ff78 	bl	80004cc <remote_i2c_wait_for_ack>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <remote_i2c_read_xy+0x32>
		return 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e04e      	b.n	8000684 <remote_i2c_read_xy+0xd0>
	}

	XMC_I2C_CH_MasterTransmit(channel, reg_addr);
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	4619      	mov	r1, r3
 80005ea:	68b8      	ldr	r0, [r7, #8]
 80005ec:	f001 f894 	bl	8001718 <XMC_I2C_CH_MasterTransmit>
	if(remote_i2c_wait_for_ack(channel)) {
 80005f0:	68b8      	ldr	r0, [r7, #8]
 80005f2:	f7ff ff6b 	bl	80004cc <remote_i2c_wait_for_ack>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <remote_i2c_read_xy+0x4c>
		return 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e041      	b.n	8000684 <remote_i2c_read_xy+0xd0>
	}

	XMC_I2C_CH_MasterRepeatedStart(channel, id, XMC_I2C_CH_CMD_READ);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	b29b      	uxth	r3, r3
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	68b8      	ldr	r0, [r7, #8]
 800060a:	f001 f82b 	bl	8001664 <XMC_I2C_CH_MasterRepeatedStart>
	if(remote_i2c_wait_for_ack(channel)) {
 800060e:	68b8      	ldr	r0, [r7, #8]
 8000610:	f7ff ff5c 	bl	80004cc <remote_i2c_wait_for_ack>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <remote_i2c_read_xy+0x6a>
		return 1;
 800061a:	2301      	movs	r3, #1
 800061c:	e032      	b.n	8000684 <remote_i2c_read_xy+0xd0>
	}

	/*
	 * Waits until valid data is available on reception register
	 */
	for(uint8_t receive_counter = 0; receive_counter < 4; receive_counter++)
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e028      	b.n	8000676 <remote_i2c_read_xy+0xc2>
	{
		#if DEBUG_ALL
			printf("Retrieving #%d\n", receive_counter);
		#endif
		if(receive_counter < 3) {
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d803      	bhi.n	8000632 <remote_i2c_read_xy+0x7e>
			XMC_I2C_CH_MasterReceiveAck(channel);	// is sent as soon as channel is not busy
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f001 f89a 	bl	8001764 <XMC_I2C_CH_MasterReceiveAck>
 8000630:	e002      	b.n	8000638 <remote_i2c_read_xy+0x84>
			#if DEBUG_ALL
				printf("Master ACK is sent\n");
			#endif
		} else {
			XMC_I2C_CH_MasterReceiveNack(channel);
 8000632:	68b8      	ldr	r0, [r7, #8]
 8000634:	f001 f8bc 	bl	80017b0 <XMC_I2C_CH_MasterReceiveNack>
		}
		while ((XMC_USIC_CH_GetReceiveBufferStatus(channel)
 8000638:	bf00      	nop
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f7ff fe58 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000640:	4603      	mov	r3, r0
 8000642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000646:	d006      	beq.n	8000656 <remote_i2c_read_xy+0xa2>
				!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus(channel)
 8000648:	68b8      	ldr	r0, [r7, #8]
 800064a:	f7ff fe51 	bl	80002f0 <XMC_USIC_CH_GetReceiveBufferStatus>
 800064e:	4603      	mov	r3, r0
 8000650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000654:	d1f1      	bne.n	800063a <remote_i2c_read_xy+0x86>
					!= (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

		XMC_I2C_CH_ClearStatusFlag(XMC_I2C1_CH0, XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
 8000656:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <remote_i2c_read_xy+0xd8>)
 800065c:	f7ff fea4 	bl	80003a8 <XMC_I2C_CH_ClearStatusFlag>

		#if DEBUG_ALL
			printf("#%d retrieved\n", receive_counter);
		#endif

		received[receive_counter] = XMC_I2C_CH_GetReceivedData(channel);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	18d4      	adds	r4, r2, r3
 8000666:	68b8      	ldr	r0, [r7, #8]
 8000668:	f001 f8c8 	bl	80017fc <XMC_I2C_CH_GetReceivedData>
 800066c:	4603      	mov	r3, r0
 800066e:	7023      	strb	r3, [r4, #0]
	}

	/*
	 * Waits until valid data is available on reception register
	 */
	for(uint8_t receive_counter = 0; receive_counter < 4; receive_counter++)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d9d3      	bls.n	8000624 <remote_i2c_read_xy+0x70>
		#endif

		received[receive_counter] = XMC_I2C_CH_GetReceivedData(channel);
	}

	XMC_I2C_CH_MasterStop(channel);
 800067c:	68b8      	ldr	r0, [r7, #8]
 800067e:	f001 f825 	bl	80016cc <XMC_I2C_CH_MasterStop>

	return 0;
 8000682:	2300      	movs	r3, #0

}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	48020000 	.word	0x48020000

08000690 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d013      	beq.n	80006d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006b0:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00b      	beq.n	80006d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006b8:	e000      	b.n	80006bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80006ba:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <initRetargetSwo+0x7c>)
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <initRetargetSwo+0x7c>)
 80006e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80006ea:	f023 030c 	bic.w	r3, r3, #12
 80006ee:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <initRetargetSwo+0x7c>)
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <initRetargetSwo+0x7c>)
 80006f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <initRetargetSwo+0x80>)
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <initRetargetSwo+0x80>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000706:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <initRetargetSwo+0x84>)
 800070a:	2277      	movs	r2, #119	; 0x77
 800070c:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <initRetargetSwo+0x84>)
 8000710:	2202      	movs	r2, #2
 8000712:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <initRetargetSwo+0x84>)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <initRetargetSwo+0x84>)
 800071a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800071e:	f023 0302 	bic.w	r3, r3, #2
 8000722:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 8000726:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <initRetargetSwo+0x88>)
 800072c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8000730:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000734:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000738:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 8000744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000748:	f04f 32ff 	mov.w	r2, #4294967295
 800074c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	48028200 	.word	0x48028200
 8000760:	e000edf0 	.word	0xe000edf0
 8000764:	e0040000 	.word	0xe0040000
 8000768:	c5acce55 	.word	0xc5acce55

0800076c <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e009      	b.n	8000792 <_write+0x26>
		ITM_SendChar ( (*buf++));
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff82 	bl	8000690 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	3301      	adds	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	dbf1      	blt.n	800077e <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 800079a:	687b      	ldr	r3, [r7, #4]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	490d      	ldr	r1, [pc, #52]	; (80007f0 <__NVIC_SetPriority+0x4c>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <__NVIC_SetPriority+0x50>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
  }
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	213f      	movs	r1, #63	; 0x3f
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ffc2 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800084e:	409a      	lsls	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	605a      	str	r2, [r3, #4]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	fa22 f303 	lsr.w	r3, r2, r3
 8000876:	f003 0301 	and.w	r3, r3, #1
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <delay>:
/******************************************************************************
 * Start of user functions
 *****************************************************************************/

void delay(uint16_t cnt_wait)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
	uint16_t cnt_passed = cnt_wait;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	81fb      	strh	r3, [r7, #14]
	while(--cnt_passed) {
 8000896:	e001      	b.n	800089c <delay+0x14>
		__NOP();
 8000898:	bf00      	nop
		__NOP();
 800089a:	bf00      	nop
 *****************************************************************************/

void delay(uint16_t cnt_wait)
{
	uint16_t cnt_passed = cnt_wait;
	while(--cnt_passed) {
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	3b01      	subs	r3, #1
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f7      	bne.n	8000898 <delay+0x10>
		__NOP();
		__NOP();
	}
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:


void SysTick_Handler (void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	static uint32_t ticks = 0;

	ticks++;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <SysTick_Handler+0x2c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <SysTick_Handler+0x2c>)
 80008c0:	6013      	str	r3, [r2, #0]
	if (ticks >= TICKS_WAIT) {
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <SysTick_Handler+0x2c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008ca:	d306      	bcc.n	80008da <SysTick_Handler+0x26>
		XMC_GPIO_ToggleOutput(LED1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <SysTick_Handler+0x30>)
 80008d0:	f7ff ffb4 	bl	800083c <XMC_GPIO_ToggleOutput>
		ticks = 0;
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <SysTick_Handler+0x2c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
	}
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000a30 	.word	0x20000a30
 80008e4:	48028100 	.word	0x48028100

080008e8 <main>:


int main (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af02      	add	r7, sp, #8

	uint8_t data[6];
	char mems_status;

	initRetargetSwo();
 80008ee:	f7ff fef7 	bl	80006e0 <initRetargetSwo>

	XMC_GPIO_CONFIG_t led_config;
	led_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	733b      	strb	r3, [r7, #12]
	led_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 80008f6:	2301      	movs	r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
	led_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80008fa:	2304      	movs	r3, #4
 80008fc:	753b      	strb	r3, [r7, #20]
	XMC_GPIO_Init(LED1, &led_config);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	461a      	mov	r2, r3
 8000904:	2101      	movs	r1, #1
 8000906:	4837      	ldr	r0, [pc, #220]	; (80009e4 <main+0xfc>)
 8000908:	f000 fd30 	bl	800136c <XMC_GPIO_Init>

	led_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	613b      	str	r3, [r7, #16]
	XMC_GPIO_Init(LED2, &led_config);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	461a      	mov	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <main+0xfc>)
 800091c:	f000 fd26 	bl	800136c <XMC_GPIO_Init>

	XMC_GPIO_CONFIG_t interrupt_config;    // IR1 Pin of the sensor module
	interrupt_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8000920:	2300      	movs	r3, #0
 8000922:	703b      	strb	r3, [r7, #0]
	XMC_GPIO_Init(DATAREADY, &interrupt_config);
 8000924:	463b      	mov	r3, r7
 8000926:	461a      	mov	r2, r3
 8000928:	2103      	movs	r1, #3
 800092a:	482f      	ldr	r0, [pc, #188]	; (80009e8 <main+0x100>)
 800092c:	f000 fd1e 	bl	800136c <XMC_GPIO_Init>

#if DEBUG_ALL
	printf("Pin Init finished\n");
#endif

	delay(50000);
 8000930:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000934:	f7ff ffa8 	bl	8000888 <delay>

	SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <main+0x104>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <main+0x108>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	099b      	lsrs	r3, r3, #6
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff57 	bl	80007f8 <SysTick_Config>

#if I2C
	remote_i2c_to_mems_init();
 800094a:	f7ff fd3f 	bl	80003cc <remote_i2c_to_mems_init>
	#if DEBUG
		printf("I2C Init finished\n");
 800094e:	4829      	ldr	r0, [pc, #164]	; (80009f4 <main+0x10c>)
 8000950:	f001 fb0e 	bl	8001f70 <puts>
	#endif
	remote_mems_init();
 8000954:	f000 fa10 	bl	8000d78 <remote_mems_init>
	#if DEBUG
		printf("Mems Init finished\n");
 8000958:	4827      	ldr	r0, [pc, #156]	; (80009f8 <main+0x110>)
 800095a:	f001 fb09 	bl	8001f70 <puts>
	#endif
	__NOP();
 800095e:	bf00      	nop
#endif // I2C

#if UART
	remote_uart_to_pc_init();
 8000960:	f000 f924 	bl	8000bac <remote_uart_to_pc_init>
#endif // UART

	while (1) {
		__NOP();
 8000964:	bf00      	nop
		#if DEBUG_ALL
			printf("while loop started\n");
		#endif
		if(XMC_GPIO_GetInput(DATAREADY))
 8000966:	2103      	movs	r1, #3
 8000968:	481f      	ldr	r0, [pc, #124]	; (80009e8 <main+0x100>)
 800096a:	f7ff ff79 	bl	8000860 <XMC_GPIO_GetInput>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f7      	beq.n	8000964 <main+0x7c>
		{
			__NOP();
 8000974:	bf00      	nop
			mems_status = remote_i2c_write_read(MEMS_ADDRESS, MEMS_STATUS_REG2, 0, 1);
 8000976:	2301      	movs	r3, #1
 8000978:	2200      	movs	r2, #0
 800097a:	2127      	movs	r1, #39	; 0x27
 800097c:	2030      	movs	r0, #48	; 0x30
 800097e:	f7ff fdcb 	bl	8000518 <remote_i2c_write_read>
 8000982:	4603      	mov	r3, r0
 8000984:	77fb      	strb	r3, [r7, #31]
			#if DEBUG
				printf("Status read\n");
 8000986:	481d      	ldr	r0, [pc, #116]	; (80009fc <main+0x114>)
 8000988:	f001 faf2 	bl	8001f70 <puts>
				printf("accelerometer status: %d\n", mems_status);
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	4619      	mov	r1, r3
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <main+0x118>)
 8000992:	f001 faa5 	bl	8001ee0 <printf>
				__NOP();
 8000996:	bf00      	nop
			#endif
			if(mems_status & (1 << 3))
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0e0      	beq.n	8000964 <main+0x7c>
			{
				__NOP();
 80009a2:	bf00      	nop
				#if DEBUG_ALL
					printf("Retrieving data...\n");
				#endif

				#if I2C
					remote_i2c_read_xy(MEMS_ADDRESS, MEMS_OUT_XY_FULL_READ, data);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	461a      	mov	r2, r3
 80009aa:	21a8      	movs	r1, #168	; 0xa8
 80009ac:	2030      	movs	r0, #48	; 0x30
 80009ae:	f7ff fe01 	bl	80005b4 <remote_i2c_read_xy>
					XMC_GPIO_ToggleOutput(LED2);
 80009b2:	2100      	movs	r1, #0
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <main+0xfc>)
 80009b6:	f7ff ff41 	bl	800083c <XMC_GPIO_ToggleOutput>
				#endif // I2C

				#if DEBUG
					printf("Data retrieved\n");
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <main+0x11c>)
 80009bc:	f001 fad8 	bl	8001f70 <puts>
				#endif

				#if UART
					remote_transmit_data(data);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fa2d 	bl	8000e24 <remote_transmit_data>
				#endif	// UART

				#if DEBUG
					printf("x_l: %d\tx_h: %d\ny_l: %d\ty_h: %d\n\n", data[0], data[1], data[2], data[3]);
 80009ca:	7e3b      	ldrb	r3, [r7, #24]
 80009cc:	4619      	mov	r1, r3
 80009ce:	7e7b      	ldrb	r3, [r7, #25]
 80009d0:	461a      	mov	r2, r3
 80009d2:	7ebb      	ldrb	r3, [r7, #26]
 80009d4:	4618      	mov	r0, r3
 80009d6:	7efb      	ldrb	r3, [r7, #27]
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4603      	mov	r3, r0
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <main+0x120>)
 80009de:	f001 fa7f 	bl	8001ee0 <printf>
				#endif
			}
		}

	}
 80009e2:	e7bf      	b.n	8000964 <main+0x7c>
 80009e4:	48028100 	.word	0x48028100
 80009e8:	48028000 	.word	0x48028000
 80009ec:	2000ffc0 	.word	0x2000ffc0
 80009f0:	10624dd3 	.word	0x10624dd3
 80009f4:	08008c04 	.word	0x08008c04
 80009f8:	08008c18 	.word	0x08008c18
 80009fc:	08008c2c 	.word	0x08008c2c
 8000a00:	08008c38 	.word	0x08008c38
 8000a04:	08008c54 	.word	0x08008c54
 8000a08:	08008c64 	.word	0x08008c64

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a1e:	4909      	ldr	r1, [pc, #36]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	095b      	lsrs	r3, r3, #5
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	f002 021f 	and.w	r2, r2, #31
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	490d      	ldr	r1, [pc, #52]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	4909      	ldr	r1, [pc, #36]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
  }
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000aac:	78f8      	ldrb	r0, [r7, #3]
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	3306      	adds	r3, #6
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000abe:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	1d83      	adds	r3, r0, #6
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aea:	b2db      	uxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf14      	ite	ne
 8000b36:	2301      	movne	r3, #1
 8000b38:	2300      	moveq	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f023 030f 	bic.w	r3, r3, #15
 8000b58:	f043 0202 	orr.w	r2, r3, #2
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000b7c:	78f8      	ldrb	r0, [r7, #3]
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	3306      	adds	r3, #6
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	1d83      	adds	r3, r0, #6
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000b98:	78ba      	ldrb	r2, [r7, #2]
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff7c 	bl	8000a9c <XMC_USIC_CH_SetInputSource>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <remote_uart_to_pc_init>:

/**
 * \brief Configures the UART module with 115200 baud, 1 stopbit, 8 databits and no parity
 */
void remote_uart_to_pc_init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	/* USIC channels initialization */
	XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000bb0:	491c      	ldr	r1, [pc, #112]	; (8000c24 <remote_uart_to_pc_init+0x78>)
 8000bb2:	481d      	ldr	r0, [pc, #116]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bb4:	f000 fe5a 	bl	800186c <XMC_UART_CH_Init>

	XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2100      	movs	r1, #0
 8000bbc:	481a      	ldr	r0, [pc, #104]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bbe:	f7ff ffd5 	bl	8000b6c <XMC_UART_CH_SetInputSource>
	/* FIFOs initialization for both channels:
	 *  8 entries for TxFIFO from point 0, LIMIT=1
	 *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
	 *                                              been received)
	 *  */
	XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4817      	ldr	r0, [pc, #92]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bca:	f000 ffdf 	bl	8001b8c <XMC_USIC_CH_TXFIFO_Configure>
	XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bd6:	f001 f801 	bl	8001bdc <XMC_USIC_CH_RXFIFO_Configure>

	/* Enabling events for TX FIFO and RX FIFO */
	XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000bda:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000be0:	f7ff ff8a 	bl	8000af8 <XMC_USIC_CH_RXFIFO_EnableEvent>
					XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
					XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

	/* Connecting the previously enabled events to a Service Request line number */
	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2110      	movs	r1, #16
 8000be8:	480f      	ldr	r0, [pc, #60]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bea:	f001 f821 	bl	8001c30 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2113      	movs	r1, #19
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bf4:	f001 f81c 	bl	8001c30 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

	/* Start USIC operation as UART */
	XMC_UART_CH_Start (XMC_UART0_CH0);
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <remote_uart_to_pc_init+0x7c>)
 8000bfa:	f7ff ffa5 	bl	8000b48 <XMC_UART_CH_Start>

	/*Initialization of the necessary ports*/
	XMC_GPIO_Init (UART_TX, &uart_tx);
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <remote_uart_to_pc_init+0x80>)
 8000c00:	2105      	movs	r1, #5
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <remote_uart_to_pc_init+0x84>)
 8000c04:	f000 fbb2 	bl	800136c <XMC_GPIO_Init>
	XMC_GPIO_Init (UART_RX, &uart_rx);
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <remote_uart_to_pc_init+0x88>)
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <remote_uart_to_pc_init+0x84>)
 8000c0e:	f000 fbad 	bl	800136c <XMC_GPIO_Init>

	/* Configuring priority and enabling NVIC IRQ for the defined service request
	line number */
	NVIC_SetPriority (USIC0_0_IRQn, 63U);
 8000c12:	213f      	movs	r1, #63	; 0x3f
 8000c14:	2054      	movs	r0, #84	; 0x54
 8000c16:	f7ff ff17 	bl	8000a48 <__NVIC_SetPriority>
	NVIC_EnableIRQ (USIC0_0_IRQn);
 8000c1a:	2054      	movs	r0, #84	; 0x54
 8000c1c:	f7ff fef6 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000000c 	.word	0x2000000c
 8000c28:	40030000 	.word	0x40030000
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	48028100 	.word	0x48028100
 8000c34:	20000a24 	.word	0x20000a24

08000c38 <USIC0_0_IRQHandler>:
/**
 * \brief Handles the reception of data via the UART module via interupts
 * \return none
 */
void USIC0_0_IRQHandler (void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	static uint8_t rx_ctr = 0;
	uint8_t rx_tmp = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71fb      	strb	r3, [r7, #7]

	/* Read the RX FIFO till it is empty */
	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000c42:	e01f      	b.n	8000c84 <USIC0_0_IRQHandler+0x4c>
		rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 8000c44:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <USIC0_0_IRQHandler+0x68>)
 8000c46:	f000 fe8f 	bl	8001968 <XMC_UART_CH_GetReceivedData>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]

		if ( (rx_tmp != STRING_CR) && (!str_available)) {
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b0d      	cmp	r3, #13
 8000c52:	d011      	beq.n	8000c78 <USIC0_0_IRQHandler+0x40>
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <USIC0_0_IRQHandler+0x6c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00a      	beq.n	8000c78 <USIC0_0_IRQHandler+0x40>
			rx_buffer[rx_ctr++] = rx_tmp;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <USIC0_0_IRQHandler+0x70>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	b2d1      	uxtb	r1, r2
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <USIC0_0_IRQHandler+0x70>)
 8000c6c:	7011      	strb	r1, [r2, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <USIC0_0_IRQHandler+0x74>)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	5453      	strb	r3, [r2, r1]
 8000c76:	e005      	b.n	8000c84 <USIC0_0_IRQHandler+0x4c>
		} else {
			rx_ctr = 0;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <USIC0_0_IRQHandler+0x70>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			str_available = true;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <USIC0_0_IRQHandler+0x6c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
{
	static uint8_t rx_ctr = 0;
	uint8_t rx_tmp = 0;

	/* Read the RX FIFO till it is empty */
	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <USIC0_0_IRQHandler+0x68>)
 8000c86:	f7ff ff4b 	bl	8000b20 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1d6      	bne.n	8000c44 <USIC0_0_IRQHandler+0xc>
		} else {
			rx_ctr = 0;
			str_available = true;
		}
	}
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40030000 	.word	0x40030000
 8000ca4:	200009e0 	.word	0x200009e0
 8000ca8:	20000a34 	.word	0x20000a34
 8000cac:	200009e4 	.word	0x200009e4

08000cb0 <remote_uart_printf>:
 * \param  fmt      ... String of the printf routine
 * \param  VARARGS  ... to the string corresponding arguments
 * \return 0 on success
 */
uint8_t remote_uart_printf (char *fmt, ...)
{
 8000cb0:	b40f      	push	{r0, r1, r2, r3}
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b0c2      	sub	sp, #264	; 0x108
 8000cb6:	af00      	add	r7, sp, #0
	va_list arg_ptr;
	char buffer[BUFFER_SIZE_PRINTF];

	if (fmt == NULL)  {
 8000cb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <remote_uart_printf+0x14>
		return ERR_OUT_OF_MEMORY;
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	e010      	b.n	8000ce6 <remote_uart_printf+0x36>
	}

	va_start (arg_ptr, fmt);
 8000cc4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000cc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	vsprintf (buffer, fmt, arg_ptr);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000cd2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fdae 	bl	8003838 <vsprintf>
	va_end (arg_ptr);

	remote_uart_send_string (buffer);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f80a 	bl	8000cf8 <remote_uart_send_string>
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000cec:	46bd      	mov	sp, r7
 8000cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cf2:	b004      	add	sp, #16
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <remote_uart_send_string>:
 * \brief sends a string via the UART module
 * \param  str string to be sent via
 * \return 0 on success
 */
uint8_t remote_uart_send_string (char *str)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	if (str == NULL) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <remote_uart_send_string+0x12>
		return ERR_OUT_OF_MEMORY;
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	e01d      	b.n	8000d46 <remote_uart_send_string+0x4e>
	}

	for (int i = 0; i < strlen (str); i++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	e012      	b.n	8000d36 <remote_uart_send_string+0x3e>
		while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8000d10:	bf00      	nop
 8000d12:	480f      	ldr	r0, [pc, #60]	; (8000d50 <remote_uart_send_string+0x58>)
 8000d14:	f7ff fee0 	bl	8000ad8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b80      	cmp	r3, #128	; 0x80
 8000d1c:	d0f9      	beq.n	8000d12 <remote_uart_send_string+0x1a>
		XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <remote_uart_send_string+0x58>)
 8000d2c:	f000 fdf6 	bl	800191c <XMC_UART_CH_Transmit>
{
	if (str == NULL) {
		return ERR_OUT_OF_MEMORY;
	}

	for (int i = 0; i < strlen (str); i++) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f001 f922 	bl	8001f80 <strlen>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8e5      	bhi.n	8000d10 <remote_uart_send_string+0x18>
		while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
		XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
	}
	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40030000 	.word	0x40030000

08000d54 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000d66:	409a      	lsls	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	605a      	str	r2, [r3, #4]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <remote_mems_init>:
 * \brief Initialises the mems sensor to the necessary specifications
 * \param none
 * \return 0 on success
 */
uint8_t remote_mems_init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /*!< Initialises register 1 of the sensor to select a desired refresh
        rate and enable X & Y Axis */
  while(remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG1, ONE_HZ_X_AND_Y, 0) == 0xFFFF)
 8000d7c:	e006      	b.n	8000d8c <remote_mems_init+0x14>
  {
    XMC_GPIO_ToggleOutput(LED1);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <remote_mems_init+0x94>)
 8000d82:	f7ff ffe7 	bl	8000d54 <XMC_GPIO_ToggleOutput>
    #if DEBUG
      printf("CTRL_REG1 failed\n");
 8000d86:	4822      	ldr	r0, [pc, #136]	; (8000e10 <remote_mems_init+0x98>)
 8000d88:	f001 f8f2 	bl	8001f70 <puts>
 */
uint8_t remote_mems_init(void)
{
  /*!< Initialises register 1 of the sensor to select a desired refresh
        rate and enable X & Y Axis */
  while(remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG1, ONE_HZ_X_AND_Y, 0) == 0xFFFF)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	2213      	movs	r2, #19
 8000d90:	2120      	movs	r1, #32
 8000d92:	2030      	movs	r0, #48	; 0x30
 8000d94:	f7ff fbc0 	bl	8000518 <remote_i2c_write_read>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d0ec      	beq.n	8000d7e <remote_mems_init+0x6>
    #if DEBUG
      printf("CTRL_REG1 failed\n");
    #endif
  }
#if DEBUG
  printf("Mems Init MEMS_CTRL_REG1 finished\n");
 8000da4:	481b      	ldr	r0, [pc, #108]	; (8000e14 <remote_mems_init+0x9c>)
 8000da6:	f001 f8e3 	bl	8001f70 <puts>
#endif


  /*!< Initialises register 3 of the sensor to enable data ready interrupt
        forwarding to the INT1 pin */
  while(remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG3, 0b00010000, 0) == 0xFFFF)
 8000daa:	e006      	b.n	8000dba <remote_mems_init+0x42>
  {
    XMC_GPIO_ToggleOutput(LED1);
 8000dac:	2101      	movs	r1, #1
 8000dae:	4817      	ldr	r0, [pc, #92]	; (8000e0c <remote_mems_init+0x94>)
 8000db0:	f7ff ffd0 	bl	8000d54 <XMC_GPIO_ToggleOutput>
    #if DEBUG
      printf("CTRL_REG1 failed\n");
 8000db4:	4816      	ldr	r0, [pc, #88]	; (8000e10 <remote_mems_init+0x98>)
 8000db6:	f001 f8db 	bl	8001f70 <puts>
#endif


  /*!< Initialises register 3 of the sensor to enable data ready interrupt
        forwarding to the INT1 pin */
  while(remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG3, 0b00010000, 0) == 0xFFFF)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	2122      	movs	r1, #34	; 0x22
 8000dc0:	2030      	movs	r0, #48	; 0x30
 8000dc2:	f7ff fba9 	bl	8000518 <remote_i2c_write_read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d0ec      	beq.n	8000dac <remote_mems_init+0x34>
    #if DEBUG
      printf("CTRL_REG1 failed\n");
    #endif
  }
#if DEBUG
  printf("Mems Init MEMS_CTRL_REG3 finished\n");
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <remote_mems_init+0xa0>)
 8000dd4:	f001 f8cc 	bl	8001f70 <puts>
#endif


  /*!< Initialises register 4 of the sensor to ensure full scale selection of 2G */
  while(remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG4, 0, 0) == 0xFFFF)
 8000dd8:	e006      	b.n	8000de8 <remote_mems_init+0x70>
  {
    XMC_GPIO_ToggleOutput(LED1);
 8000dda:	2101      	movs	r1, #1
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <remote_mems_init+0x94>)
 8000dde:	f7ff ffb9 	bl	8000d54 <XMC_GPIO_ToggleOutput>
    #if DEBUG
    printf("CTRL_REG4 failed\n");
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <remote_mems_init+0xa4>)
 8000de4:	f001 f8c4 	bl	8001f70 <puts>
  printf("Mems Init MEMS_CTRL_REG3 finished\n");
#endif


  /*!< Initialises register 4 of the sensor to ensure full scale selection of 2G */
  while(remote_i2c_write_read(MEMS_ADDRESS, MEMS_CTRL_REG4, 0, 0) == 0xFFFF)
 8000de8:	2300      	movs	r3, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	2123      	movs	r1, #35	; 0x23
 8000dee:	2030      	movs	r0, #48	; 0x30
 8000df0:	f7ff fb92 	bl	8000518 <remote_i2c_write_read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d0ec      	beq.n	8000dda <remote_mems_init+0x62>
    #if DEBUG
    printf("CTRL_REG4 failed\n");
    #endif
  }
#if DEBUG
  printf("Mems Init MEMS_CTRL_REG4 finished\n");
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <remote_mems_init+0xa8>)
 8000e02:	f001 f8b5 	bl	8001f70 <puts>
#endif

  return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	48028100 	.word	0x48028100
 8000e10:	08008c88 	.word	0x08008c88
 8000e14:	08008c9c 	.word	0x08008c9c
 8000e18:	08008cc0 	.word	0x08008cc0
 8000e1c:	08008ce4 	.word	0x08008ce4
 8000e20:	08008cf8 	.word	0x08008cf8

08000e24 <remote_transmit_data>:
   \brief Transmitts the data of the mems sensor to the PC
   \param data  ... string of the data to be transmitted
   \return 0 on success
*/
uint8_t remote_transmit_data(uint8_t *data)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  int16_t data_x = data[1];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	81fb      	strh	r3, [r7, #14]
  data_x <<= 8;
 8000e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	81fb      	strh	r3, [r7, #14]
  data_x |= data[0];
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	81fb      	strh	r3, [r7, #14]
  int16_t data_y = data[3];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	81bb      	strh	r3, [r7, #12]
  data_y <<= 8;
 8000e50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	81bb      	strh	r3, [r7, #12]
  data_y |= data[2];
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	89bb      	ldrh	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	81bb      	strh	r3, [r7, #12]
  #if DEBUG
    printf("UART_X: %d\n", data_x);
 8000e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <remote_transmit_data+0x7c>)
 8000e6e:	f001 f837 	bl	8001ee0 <printf>
    printf("UART_Y: %d\n\n", data_y);
 8000e72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e76:	4619      	mov	r1, r3
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <remote_transmit_data+0x80>)
 8000e7a:	f001 f831 	bl	8001ee0 <printf>
  #endif
  remote_uart_printf("X: %d\n", data_x);
 8000e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <remote_transmit_data+0x84>)
 8000e86:	f7ff ff13 	bl	8000cb0 <remote_uart_printf>
  remote_uart_printf("Y: %d\n", data_y);
 8000e8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4806      	ldr	r0, [pc, #24]	; (8000eac <remote_transmit_data+0x88>)
 8000e92:	f7ff ff0d 	bl	8000cb0 <remote_uart_printf>
  return 0;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	08008d1c 	.word	0x08008d1c
 8000ea4:	08008d28 	.word	0x08008d28
 8000ea8:	08008d38 	.word	0x08008d38
 8000eac:	08008d40 	.word	0x08008d40

08000eb0 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8000ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
 return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <_fstat+0x16>
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	e001      	b.n	8000f16 <_fstat+0x1a>
 else
  return -2;
 8000f12:	f06f 0301 	mvn.w	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f2e:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d108      	bne.n	8000f4a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x6c>)
 8000f48:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <_sbrk+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8000f5c:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8000f60:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <_sbrk+0x6c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d301      	bcc.n	8000f70 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e003      	b.n	8000f78 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8000f76:	693b      	ldr	r3, [r7, #16]
 }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	0000f548 	.word	0x0000f548
 8000f88:	20000a38 	.word	0x20000a38
 8000f8c:	20000a78 	.word	0x20000a78
 8000f90:	20000a3c 	.word	0x20000a3c

08000f94 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e003      	b.n	8000fd2 <delay+0x16>
  {
    __NOP();
 8000fca:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3f7      	bcc.n	8000fca <delay+0xe>
  {
    __NOP();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000fe8:	b598      	push	{r3, r4, r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000ffa:	f000 f807 	bl	800100c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000ffe:	f000 f83d 	bl	800107c <SystemCoreClockSetup>
}
 8001002:	bf00      	nop
 8001004:	bd98      	pop	{r3, r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	2000ffc4 	.word	0x2000ffc4

0800100c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001012:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <SystemCoreSetup+0x64>)
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <SystemCoreSetup+0x68>)
 8001018:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800101a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800101e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <SystemCoreSetup+0x64>)
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <SystemCoreSetup+0x64>)
 8001024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <SystemCoreSetup+0x64>)
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <SystemCoreSetup+0x64>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f023 0308 	bic.w	r3, r3, #8
 800103a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <SystemCoreSetup+0x6c>)
 800103e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001042:	3314      	adds	r3, #20
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f023 030f 	bic.w	r3, r3, #15
 800104e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f043 0303 	orr.w	r3, r3, #3
 8001056:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <SystemCoreSetup+0x6c>)
 800105a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105e:	3314      	adds	r3, #20
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	08000000 	.word	0x08000000
 8001078:	58001000 	.word	0x58001000

0800107c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <SystemCoreClockSetup+0x1dc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10c      	bne.n	80010a6 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800108c:	4a72      	ldr	r2, [pc, #456]	; (8001258 <SystemCoreClockSetup+0x1dc>)
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <SystemCoreClockSetup+0x1dc>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001098:	bf00      	nop
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <SystemCoreClockSetup+0x1dc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f9      	beq.n	800109a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80010a6:	4b6d      	ldr	r3, [pc, #436]	; (800125c <SystemCoreClockSetup+0x1e0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80010b2:	4a6a      	ldr	r2, [pc, #424]	; (800125c <SystemCoreClockSetup+0x1e0>)
 80010b4:	4b69      	ldr	r3, [pc, #420]	; (800125c <SystemCoreClockSetup+0x1e0>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010bc:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80010be:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80010c2:	f7ff ff7b 	bl	8000fbc <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80010c6:	4a66      	ldr	r2, [pc, #408]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80010c8:	4b65      	ldr	r3, [pc, #404]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010d0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80010d2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80010d6:	f7ff ff71 	bl	8000fbc <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80010da:	4a61      	ldr	r2, [pc, #388]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e4:	f023 0302 	bic.w	r3, r3, #2
 80010e8:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80010ea:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <SystemCoreClockSetup+0x1e8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d029      	beq.n	800114a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80010f6:	4a5b      	ldr	r2, [pc, #364]	; (8001264 <SystemCoreClockSetup+0x1e8>)
 80010f8:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <SystemCoreClockSetup+0x1e8>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001100:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001104:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001106:	f000 f927 	bl	8001358 <OSCHP_GetFrequency>
 800110a:	4602      	mov	r2, r0
 800110c:	4b56      	ldr	r3, [pc, #344]	; (8001268 <SystemCoreClockSetup+0x1ec>)
 800110e:	fba3 2302 	umull	r2, r3, r3, r2
 8001112:	0d1b      	lsrs	r3, r3, #20
 8001114:	3b01      	subs	r3, #1
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	4952      	ldr	r1, [pc, #328]	; (8001264 <SystemCoreClockSetup+0x1e8>)
 800111a:	4a52      	ldr	r2, [pc, #328]	; (8001264 <SystemCoreClockSetup+0x1e8>)
 800111c:	6852      	ldr	r2, [r2, #4]
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8001122:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800112e:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001130:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001138:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800113a:	bf00      	nop
 800113c:	4b48      	ldr	r3, [pc, #288]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001144:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001148:	d1f8      	bne.n	800113c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800114a:	4a45      	ldr	r2, [pc, #276]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001156:	4a42      	ldr	r2, [pc, #264]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001164:	4a41      	ldr	r2, [pc, #260]	; (800126c <SystemCoreClockSetup+0x1f0>)
 8001166:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001168:	4a3d      	ldr	r2, [pc, #244]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001172:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001174:	4a3a      	ldr	r2, [pc, #232]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0310 	bic.w	r3, r3, #16
 800117e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8001180:	4a37      	ldr	r2, [pc, #220]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001182:	4b37      	ldr	r3, [pc, #220]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800118c:	bf00      	nop
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f9      	beq.n	800118e <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800119a:	4a31      	ldr	r2, [pc, #196]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80011a6:	bf00      	nop
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f9      	bne.n	80011a8 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 80011e0:	2203      	movs	r2, #3
 80011e2:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ee:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <SystemCoreClockSetup+0x1f8>)
 80011f4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80011f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011fa:	f7ff fedf 	bl	8000fbc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80011fe:	bf00      	nop
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f9      	beq.n	8001200 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800120e:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <SystemCoreClockSetup+0x1fc>)
 8001210:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8001212:	f241 1094 	movw	r0, #4500	; 0x1194
 8001216:	f7ff fed1 	bl	8000fbc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800121a:	bf00      	nop
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <SystemCoreClockSetup+0x200>)
 800122c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800122e:	f241 7070 	movw	r0, #6000	; 0x1770
 8001232:	f7ff fec3 	bl	8000fbc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001236:	bf00      	nop
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <SystemCoreClockSetup+0x1e4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f9      	beq.n	8001238 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <SystemCoreClockSetup+0x204>)
 8001246:	2205      	movs	r2, #5
 8001248:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <SystemCoreClockSetup+0x1f4>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8001250:	f000 f818 	bl	8001284 <SystemCoreClockUpdate>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	50004200 	.word	0x50004200
 800125c:	50004400 	.word	0x50004400
 8001260:	50004710 	.word	0x50004710
 8001264:	50004700 	.word	0x50004700
 8001268:	6b5fca6b 	.word	0x6b5fca6b
 800126c:	01134f00 	.word	0x01134f00
 8001270:	50004600 	.word	0x50004600
 8001274:	01074f00 	.word	0x01074f00
 8001278:	01044f00 	.word	0x01044f00
 800127c:	01034f00 	.word	0x01034f00
 8001280:	50004160 	.word	0x50004160

08001284 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <SystemCoreClockUpdate+0xc4>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03e      	beq.n	8001314 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <SystemCoreClockUpdate+0xc8>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <SystemCoreClockUpdate+0xcc>)
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e002      	b.n	80012ae <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80012a8:	f000 f856 	bl	8001358 <OSCHP_GetFrequency>
 80012ac:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <SystemCoreClockUpdate+0xc8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d020      	beq.n	80012fc <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <SystemCoreClockUpdate+0xc8>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80012c2:	0e1b      	lsrs	r3, r3, #24
 80012c4:	3301      	adds	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <SystemCoreClockUpdate+0xc8>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	3301      	adds	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <SystemCoreClockUpdate+0xc8>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012de:	0c1b      	lsrs	r3, r3, #16
 80012e0:	3301      	adds	r3, #1
 80012e2:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	e00d      	b.n	8001318 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <SystemCoreClockUpdate+0xc8>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001304:	3301      	adds	r3, #1
 8001306:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e001      	b.n	8001318 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <SystemCoreClockUpdate+0xcc>)
 8001316:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <SystemCoreClockUpdate+0xc4>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <SystemCoreClockUpdate+0xc4>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	3301      	adds	r3, #1
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	fbb2 f3f3 	udiv	r3, r2, r3
 8001338:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <SystemCoreClockUpdate+0xd0>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	50004600 	.word	0x50004600
 800134c:	50004710 	.word	0x50004710
 8001350:	016e3600 	.word	0x016e3600
 8001354:	2000ffc0 	.word	0x2000ffc0

08001358 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <OSCHP_GetFrequency+0x10>)
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	00b71b00 	.word	0x00b71b00

0800136c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	460b      	mov	r3, r1
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3204      	adds	r2, #4
 800138e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	21f8      	movs	r1, #248	; 0xf8
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	ea02 0103 	and.w	r1, r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1d02      	adds	r2, r0, #4
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2103      	movs	r1, #3
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <XMC_GPIO_Init+0x13c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d003      	beq.n	80013d4 <XMC_GPIO_Init+0x68>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <XMC_GPIO_Init+0x140>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d10a      	bne.n	80013ea <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	661a      	str	r2, [r3, #96]	; 0x60
 80013e8:	e03c      	b.n	8001464 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3210      	adds	r2, #16
 800140a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	2107      	movs	r1, #7
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	ea02 0103 	and.w	r1, r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f100 0210 	add.w	r2, r0, #16
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3210      	adds	r2, #16
 8001440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7a1b      	ldrb	r3, [r3, #8]
 8001448:	4619      	mov	r1, r3
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	ea42 0103 	orr.w	r1, r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f100 0210 	add.w	r2, r0, #16
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001464:	7afb      	ldrb	r3, [r7, #11]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3204      	adds	r2, #4
 8001478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	ea42 0103 	orr.w	r1, r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1d02      	adds	r2, r0, #4
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	48028e00 	.word	0x48028e00
 80014ac:	48028f00 	.word	0x48028f00

080014b0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80014c2:	b2db      	uxtb	r3, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fa86 	bl	8001a10 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <XMC_I2C_CH_Init+0x4c>)
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f817 	bl	8001544 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f831 	bl	8001584 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	073f0303 	.word	0x073f0303

08001544 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8001556:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800155a:	d109      	bne.n	8001570 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 800156e:	e003      	b.n	8001578 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	021a      	lsls	r2, r3, #8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <XMC_I2C_CH_SetBaudrate+0x70>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d810      	bhi.n	80015bc <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80015a6:	220a      	movs	r2, #10
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fa7e 	bl	8001aac <XMC_USIC_CH_SetBaudrate>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d119      	bne.n	80015ea <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e016      	b.n	80015ea <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <XMC_I2C_CH_SetBaudrate+0x74>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d810      	bhi.n	80015e6 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 80015d0:	2219      	movs	r2, #25
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fa69 	bl	8001aac <XMC_USIC_CH_SetBaudrate>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	000186a0 	.word	0x000186a0
 80015f8:	00061a80 	.word	0x00061a80

080015fc <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	b29b      	uxth	r3, r3
 8001614:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001616:	787b      	ldrb	r3, [r7, #1]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d103      	bne.n	8001624 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800162a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d110      	bne.n	8001654 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001632:	bf00      	nop
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff3b 	bl	80014b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800163a:	4603      	mov	r3, r0
 800163c:	2b80      	cmp	r3, #128	; 0x80
 800163e:	d0f9      	beq.n	8001634 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff43 	bl	80014d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8001652:	e003      	b.n	800165c <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800167a:	b29b      	uxth	r3, r3
 800167c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800167e:	787b      	ldrb	r3, [r7, #1]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d103      	bne.n	800168c <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001692:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d110      	bne.n	80016bc <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800169a:	bf00      	nop
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff07 	bl	80014b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b80      	cmp	r3, #128	; 0x80
 80016a6:	d0f9      	beq.n	800169c <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80016a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff0f 	bl	80014d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 80016ba:	e003      	b.n	80016c4 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d111      	bne.n	8001706 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80016e2:	bf00      	nop
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fee3 	bl	80014b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b80      	cmp	r3, #128	; 0x80
 80016ee:	d0f9      	beq.n	80016e4 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80016f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff feeb 	bl	80014d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8001704:	e004      	b.n	8001710 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800170c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800172a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d110      	bne.n	8001754 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001732:	bf00      	nop
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff febb 	bl	80014b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800173a:	4603      	mov	r3, r0
 800173c:	2b80      	cmp	r3, #128	; 0x80
 800173e:	d0f9      	beq.n	8001734 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fec3 	bl	80014d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8001752:	e003      	b.n	800175c <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001772:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800177a:	bf00      	nop
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe97 	bl	80014b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001782:	4603      	mov	r3, r0
 8001784:	2b80      	cmp	r3, #128	; 0x80
 8001786:	d0f9      	beq.n	800177c <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fe9f 	bl	80014d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
}
 800179c:	e004      	b.n	80017a8 <XMC_I2C_CH_MasterReceiveAck+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017be:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d111      	bne.n	80017ea <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80017c6:	bf00      	nop
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fe71 	bl	80014b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	d0f9      	beq.n	80017c8 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fe79 	bl	80014d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 80017e8:	e004      	b.n	80017f4 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800180a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e003      	b.n	8001822 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001820:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001842:	b2db      	uxtb	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001876:	2310      	movs	r3, #16
 8001878:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8c8 	bl	8001a10 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	79db      	ldrb	r3, [r3, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	79db      	ldrb	r3, [r3, #7]
 800188c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f908 	bl	8001aac <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	799b      	ldrb	r3, [r3, #6]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	3301      	adds	r3, #1
 80018aa:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80018ac:	4313      	orrs	r3, r2
 80018ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	795b      	ldrb	r3, [r3, #5]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	795b      	ldrb	r3, [r3, #5]
 80018da:	3b01      	subs	r3, #1
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
 80018e4:	e008      	b.n	80018f8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f04f 32ff 	mov.w	r2, #4294967295
 8001906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	891b      	ldrh	r3, [r3, #8]
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop

0800191c <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800192e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d110      	bne.n	8001958 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001936:	bf00      	nop
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff79 	bl	8001830 <XMC_USIC_CH_GetTransmitBufferStatus>
 800193e:	4603      	mov	r3, r0
 8001940:	2b80      	cmp	r3, #128	; 0x80
 8001942:	d0f9      	beq.n	8001938 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff81 	bl	8001850 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8001956:	e003      	b.n	8001960 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001976:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	81fb      	strh	r3, [r7, #14]
 8001984:	e003      	b.n	800198e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800198c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800198e:	89fb      	ldrh	r3, [r7, #14]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000ffc0 	.word	0x2000ffc0

080019b4 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0f1b      	lsrs	r3, r3, #28
 80019c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80019c8:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80019d8:	4413      	add	r3, r2
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	601a      	str	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	50004414 	.word	0x50004414

080019f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80019f4:	f7ff ffd2 	bl	800199c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80019f8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	50004600 	.word	0x50004600

08001a10 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <XMC_USIC_CH_Enable+0x78>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <XMC_USIC_CH_Enable+0x18>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <XMC_USIC_CH_Enable+0x7c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d103      	bne.n	8001a30 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <XMC_USIC_CH_Enable+0x80>)
 8001a2a:	f000 f91f 	bl	8001c6c <XMC_USIC_Enable>
 8001a2e:	e016      	b.n	8001a5e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <XMC_USIC_CH_Enable+0x84>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d003      	beq.n	8001a40 <XMC_USIC_CH_Enable+0x30>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <XMC_USIC_CH_Enable+0x88>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d103      	bne.n	8001a48 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001a40:	4816      	ldr	r0, [pc, #88]	; (8001a9c <XMC_USIC_CH_Enable+0x8c>)
 8001a42:	f000 f913 	bl	8001c6c <XMC_USIC_Enable>
 8001a46:	e00a      	b.n	8001a5e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <XMC_USIC_CH_Enable+0x90>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d003      	beq.n	8001a58 <XMC_USIC_CH_Enable+0x48>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <XMC_USIC_CH_Enable+0x94>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d102      	bne.n	8001a5e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <XMC_USIC_CH_Enable+0x98>)
 8001a5a:	f000 f907 	bl	8001c6c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001a64:	bf00      	nop
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f9      	beq.n	8001a66 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f023 020f 	bic.w	r2, r3, #15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40030000 	.word	0x40030000
 8001a8c:	40030200 	.word	0x40030200
 8001a90:	40030008 	.word	0x40030008
 8001a94:	48020000 	.word	0x48020000
 8001a98:	48020200 	.word	0x48020200
 8001a9c:	48020008 	.word	0x48020008
 8001aa0:	48024000 	.word	0x48024000
 8001aa4:	48024200 	.word	0x48024200
 8001aa8:	48024008 	.word	0x48024008

08001aac <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	; 0x38
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b63      	cmp	r3, #99	; 0x63
 8001abc:	d958      	bls.n	8001b70 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d055      	beq.n	8001b70 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001ac4:	f7ff ff94 	bl	80019f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001acc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001ae8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001aee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
 8001af4:	e022      	b.n	8001b3c <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afa:	fb02 f203 	mul.w	r2, r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b18:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d209      	bcs.n	8001b36 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d205      	bcs.n	8001b36 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1d9      	bne.n	8001af6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001b52:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	3a01      	subs	r2, #1
 8001b58:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001b5a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001b62:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b6e:	e002      	b.n	8001b76 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001b76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3738      	adds	r7, #56	; 0x38
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	51eb851f 	.word	0x51eb851f
 8001b88:	fc0080ef 	.word	0xfc0080ef

08001b8c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ba2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001bb4:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	0211      	lsls	r1, r2, #8
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001bc2:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001bc4:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	f8ffc0c0 	.word	0xf8ffc0c0

08001bdc <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bf2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001c04:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	0211      	lsls	r1, r2, #8
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001c0e:	79fa      	ldrb	r2, [r7, #7]
 8001c10:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001c12:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	efffc0c0 	.word	0xefffc0c0

08001c30 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	2107      	movs	r1, #7
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <XMC_USIC_Enable+0x40>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d104      	bne.n	8001c86 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001c7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c80:	f7ff fe98 	bl	80019b4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001c84:	e00e      	b.n	8001ca4 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <XMC_USIC_Enable+0x44>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d103      	bne.n	8001c96 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001c8e:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <XMC_USIC_Enable+0x48>)
 8001c90:	f7ff fe90 	bl	80019b4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001c94:	e006      	b.n	8001ca4 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <XMC_USIC_Enable+0x4c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d102      	bne.n	8001ca4 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <XMC_USIC_Enable+0x50>)
 8001ca0:	f7ff fe88 	bl	80019b4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40030008 	.word	0x40030008
 8001cb0:	48020008 	.word	0x48020008
 8001cb4:	10000080 	.word	0x10000080
 8001cb8:	48024008 	.word	0x48024008
 8001cbc:	10000100 	.word	0x10000100

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4e0f      	ldr	r6, [pc, #60]	; (8001d00 <__libc_init_array+0x40>)
 8001cc4:	4d0f      	ldr	r5, [pc, #60]	; (8001d04 <__libc_init_array+0x44>)
 8001cc6:	1b76      	subs	r6, r6, r5
 8001cc8:	10b6      	asrs	r6, r6, #2
 8001cca:	bf18      	it	ne
 8001ccc:	2400      	movne	r4, #0
 8001cce:	d005      	beq.n	8001cdc <__libc_init_array+0x1c>
 8001cd0:	3401      	adds	r4, #1
 8001cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd6:	4798      	blx	r3
 8001cd8:	42a6      	cmp	r6, r4
 8001cda:	d1f9      	bne.n	8001cd0 <__libc_init_array+0x10>
 8001cdc:	4e0a      	ldr	r6, [pc, #40]	; (8001d08 <__libc_init_array+0x48>)
 8001cde:	4d0b      	ldr	r5, [pc, #44]	; (8001d0c <__libc_init_array+0x4c>)
 8001ce0:	1b76      	subs	r6, r6, r5
 8001ce2:	f7ff f957 	bl	8000f94 <_init>
 8001ce6:	10b6      	asrs	r6, r6, #2
 8001ce8:	bf18      	it	ne
 8001cea:	2400      	movne	r4, #0
 8001cec:	d006      	beq.n	8001cfc <__libc_init_array+0x3c>
 8001cee:	3401      	adds	r4, #1
 8001cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf4:	4798      	blx	r3
 8001cf6:	42a6      	cmp	r6, r4
 8001cf8:	d1f9      	bne.n	8001cee <__libc_init_array+0x2e>
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
 8001cfe:	bf00      	nop
 8001d00:	200009e0 	.word	0x200009e0
 8001d04:	200009e0 	.word	0x200009e0
 8001d08:	200009e0 	.word	0x200009e0
 8001d0c:	200009e0 	.word	0x200009e0

08001d10 <memcpy>:
 8001d10:	4684      	mov	ip, r0
 8001d12:	ea41 0300 	orr.w	r3, r1, r0
 8001d16:	f013 0303 	ands.w	r3, r3, #3
 8001d1a:	d16d      	bne.n	8001df8 <memcpy+0xe8>
 8001d1c:	3a40      	subs	r2, #64	; 0x40
 8001d1e:	d341      	bcc.n	8001da4 <memcpy+0x94>
 8001d20:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d24:	f840 3b04 	str.w	r3, [r0], #4
 8001d28:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d2c:	f840 3b04 	str.w	r3, [r0], #4
 8001d30:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d34:	f840 3b04 	str.w	r3, [r0], #4
 8001d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d3c:	f840 3b04 	str.w	r3, [r0], #4
 8001d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d44:	f840 3b04 	str.w	r3, [r0], #4
 8001d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d4c:	f840 3b04 	str.w	r3, [r0], #4
 8001d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d54:	f840 3b04 	str.w	r3, [r0], #4
 8001d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d5c:	f840 3b04 	str.w	r3, [r0], #4
 8001d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d64:	f840 3b04 	str.w	r3, [r0], #4
 8001d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d6c:	f840 3b04 	str.w	r3, [r0], #4
 8001d70:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d74:	f840 3b04 	str.w	r3, [r0], #4
 8001d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d7c:	f840 3b04 	str.w	r3, [r0], #4
 8001d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d84:	f840 3b04 	str.w	r3, [r0], #4
 8001d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d8c:	f840 3b04 	str.w	r3, [r0], #4
 8001d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d94:	f840 3b04 	str.w	r3, [r0], #4
 8001d98:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d9c:	f840 3b04 	str.w	r3, [r0], #4
 8001da0:	3a40      	subs	r2, #64	; 0x40
 8001da2:	d2bd      	bcs.n	8001d20 <memcpy+0x10>
 8001da4:	3230      	adds	r2, #48	; 0x30
 8001da6:	d311      	bcc.n	8001dcc <memcpy+0xbc>
 8001da8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dac:	f840 3b04 	str.w	r3, [r0], #4
 8001db0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001db4:	f840 3b04 	str.w	r3, [r0], #4
 8001db8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dbc:	f840 3b04 	str.w	r3, [r0], #4
 8001dc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dc4:	f840 3b04 	str.w	r3, [r0], #4
 8001dc8:	3a10      	subs	r2, #16
 8001dca:	d2ed      	bcs.n	8001da8 <memcpy+0x98>
 8001dcc:	320c      	adds	r2, #12
 8001dce:	d305      	bcc.n	8001ddc <memcpy+0xcc>
 8001dd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dd4:	f840 3b04 	str.w	r3, [r0], #4
 8001dd8:	3a04      	subs	r2, #4
 8001dda:	d2f9      	bcs.n	8001dd0 <memcpy+0xc0>
 8001ddc:	3204      	adds	r2, #4
 8001dde:	d008      	beq.n	8001df2 <memcpy+0xe2>
 8001de0:	07d2      	lsls	r2, r2, #31
 8001de2:	bf1c      	itt	ne
 8001de4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001de8:	f800 3b01 	strbne.w	r3, [r0], #1
 8001dec:	d301      	bcc.n	8001df2 <memcpy+0xe2>
 8001dee:	880b      	ldrh	r3, [r1, #0]
 8001df0:	8003      	strh	r3, [r0, #0]
 8001df2:	4660      	mov	r0, ip
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2a08      	cmp	r2, #8
 8001dfa:	d313      	bcc.n	8001e24 <memcpy+0x114>
 8001dfc:	078b      	lsls	r3, r1, #30
 8001dfe:	d08d      	beq.n	8001d1c <memcpy+0xc>
 8001e00:	f010 0303 	ands.w	r3, r0, #3
 8001e04:	d08a      	beq.n	8001d1c <memcpy+0xc>
 8001e06:	f1c3 0304 	rsb	r3, r3, #4
 8001e0a:	1ad2      	subs	r2, r2, r3
 8001e0c:	07db      	lsls	r3, r3, #31
 8001e0e:	bf1c      	itt	ne
 8001e10:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001e14:	f800 3b01 	strbne.w	r3, [r0], #1
 8001e18:	d380      	bcc.n	8001d1c <memcpy+0xc>
 8001e1a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001e1e:	f820 3b02 	strh.w	r3, [r0], #2
 8001e22:	e77b      	b.n	8001d1c <memcpy+0xc>
 8001e24:	3a04      	subs	r2, #4
 8001e26:	d3d9      	bcc.n	8001ddc <memcpy+0xcc>
 8001e28:	3a01      	subs	r2, #1
 8001e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e2e:	f800 3b01 	strb.w	r3, [r0], #1
 8001e32:	d2f9      	bcs.n	8001e28 <memcpy+0x118>
 8001e34:	780b      	ldrb	r3, [r1, #0]
 8001e36:	7003      	strb	r3, [r0, #0]
 8001e38:	784b      	ldrb	r3, [r1, #1]
 8001e3a:	7043      	strb	r3, [r0, #1]
 8001e3c:	788b      	ldrb	r3, [r1, #2]
 8001e3e:	7083      	strb	r3, [r0, #2]
 8001e40:	4660      	mov	r0, ip
 8001e42:	4770      	bx	lr

08001e44 <memset>:
 8001e44:	b470      	push	{r4, r5, r6}
 8001e46:	0784      	lsls	r4, r0, #30
 8001e48:	d046      	beq.n	8001ed8 <memset+0x94>
 8001e4a:	1e54      	subs	r4, r2, #1
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d041      	beq.n	8001ed4 <memset+0x90>
 8001e50:	b2cd      	uxtb	r5, r1
 8001e52:	4603      	mov	r3, r0
 8001e54:	e002      	b.n	8001e5c <memset+0x18>
 8001e56:	1e62      	subs	r2, r4, #1
 8001e58:	b3e4      	cbz	r4, 8001ed4 <memset+0x90>
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	f803 5b01 	strb.w	r5, [r3], #1
 8001e60:	079a      	lsls	r2, r3, #30
 8001e62:	d1f8      	bne.n	8001e56 <memset+0x12>
 8001e64:	2c03      	cmp	r4, #3
 8001e66:	d92e      	bls.n	8001ec6 <memset+0x82>
 8001e68:	b2cd      	uxtb	r5, r1
 8001e6a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001e6e:	2c0f      	cmp	r4, #15
 8001e70:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001e74:	d919      	bls.n	8001eaa <memset+0x66>
 8001e76:	f103 0210 	add.w	r2, r3, #16
 8001e7a:	4626      	mov	r6, r4
 8001e7c:	3e10      	subs	r6, #16
 8001e7e:	2e0f      	cmp	r6, #15
 8001e80:	f842 5c10 	str.w	r5, [r2, #-16]
 8001e84:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001e88:	f842 5c08 	str.w	r5, [r2, #-8]
 8001e8c:	f842 5c04 	str.w	r5, [r2, #-4]
 8001e90:	f102 0210 	add.w	r2, r2, #16
 8001e94:	d8f2      	bhi.n	8001e7c <memset+0x38>
 8001e96:	f1a4 0210 	sub.w	r2, r4, #16
 8001e9a:	f022 020f 	bic.w	r2, r2, #15
 8001e9e:	f004 040f 	and.w	r4, r4, #15
 8001ea2:	3210      	adds	r2, #16
 8001ea4:	2c03      	cmp	r4, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	d90d      	bls.n	8001ec6 <memset+0x82>
 8001eaa:	461e      	mov	r6, r3
 8001eac:	4622      	mov	r2, r4
 8001eae:	3a04      	subs	r2, #4
 8001eb0:	2a03      	cmp	r2, #3
 8001eb2:	f846 5b04 	str.w	r5, [r6], #4
 8001eb6:	d8fa      	bhi.n	8001eae <memset+0x6a>
 8001eb8:	1f22      	subs	r2, r4, #4
 8001eba:	f022 0203 	bic.w	r2, r2, #3
 8001ebe:	3204      	adds	r2, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f004 0403 	and.w	r4, r4, #3
 8001ec6:	b12c      	cbz	r4, 8001ed4 <memset+0x90>
 8001ec8:	b2c9      	uxtb	r1, r1
 8001eca:	441c      	add	r4, r3
 8001ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed0:	42a3      	cmp	r3, r4
 8001ed2:	d1fb      	bne.n	8001ecc <memset+0x88>
 8001ed4:	bc70      	pop	{r4, r5, r6}
 8001ed6:	4770      	bx	lr
 8001ed8:	4614      	mov	r4, r2
 8001eda:	4603      	mov	r3, r0
 8001edc:	e7c2      	b.n	8001e64 <memset+0x20>
 8001ede:	bf00      	nop

08001ee0 <printf>:
 8001ee0:	b40f      	push	{r0, r1, r2, r3}
 8001ee2:	b500      	push	{lr}
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <printf+0x24>)
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	ab04      	add	r3, sp, #16
 8001eea:	6808      	ldr	r0, [r1, #0]
 8001eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ef0:	6881      	ldr	r1, [r0, #8]
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	f000 f8b4 	bl	8002060 <_vfprintf_r>
 8001ef8:	b003      	add	sp, #12
 8001efa:	f85d eb04 	ldr.w	lr, [sp], #4
 8001efe:	b004      	add	sp, #16
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000460 	.word	0x20000460

08001f08 <_puts_r>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	4605      	mov	r5, r0
 8001f0c:	b089      	sub	sp, #36	; 0x24
 8001f0e:	4608      	mov	r0, r1
 8001f10:	460c      	mov	r4, r1
 8001f12:	f000 f835 	bl	8001f80 <strlen>
 8001f16:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001f18:	4f14      	ldr	r7, [pc, #80]	; (8001f6c <_puts_r+0x64>)
 8001f1a:	9404      	str	r4, [sp, #16]
 8001f1c:	2601      	movs	r6, #1
 8001f1e:	1c44      	adds	r4, r0, #1
 8001f20:	a904      	add	r1, sp, #16
 8001f22:	2202      	movs	r2, #2
 8001f24:	9403      	str	r4, [sp, #12]
 8001f26:	9005      	str	r0, [sp, #20]
 8001f28:	68ac      	ldr	r4, [r5, #8]
 8001f2a:	9706      	str	r7, [sp, #24]
 8001f2c:	9607      	str	r6, [sp, #28]
 8001f2e:	9101      	str	r1, [sp, #4]
 8001f30:	9202      	str	r2, [sp, #8]
 8001f32:	b1b3      	cbz	r3, 8001f62 <_puts_r+0x5a>
 8001f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f38:	049a      	lsls	r2, r3, #18
 8001f3a:	d406      	bmi.n	8001f4a <_puts_r+0x42>
 8001f3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f46:	81a3      	strh	r3, [r4, #12]
 8001f48:	6662      	str	r2, [r4, #100]	; 0x64
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	aa01      	add	r2, sp, #4
 8001f50:	f002 ff04 	bl	8004d5c <__sfvwrite_r>
 8001f54:	2800      	cmp	r0, #0
 8001f56:	bf14      	ite	ne
 8001f58:	f04f 30ff 	movne.w	r0, #4294967295
 8001f5c:	200a      	moveq	r0, #10
 8001f5e:	b009      	add	sp, #36	; 0x24
 8001f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f62:	4628      	mov	r0, r5
 8001f64:	f002 fdba 	bl	8004adc <__sinit>
 8001f68:	e7e4      	b.n	8001f34 <_puts_r+0x2c>
 8001f6a:	bf00      	nop
 8001f6c:	08008d48 	.word	0x08008d48

08001f70 <puts>:
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <puts+0xc>)
 8001f72:	4601      	mov	r1, r0
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f7ff bfc7 	b.w	8001f08 <_puts_r>
 8001f7a:	bf00      	nop
 8001f7c:	20000460 	.word	0x20000460

08001f80 <strlen>:
 8001f80:	f890 f000 	pld	[r0]
 8001f84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001f88:	f020 0107 	bic.w	r1, r0, #7
 8001f8c:	f06f 0c00 	mvn.w	ip, #0
 8001f90:	f010 0407 	ands.w	r4, r0, #7
 8001f94:	f891 f020 	pld	[r1, #32]
 8001f98:	f040 8049 	bne.w	800202e <strlen+0xae>
 8001f9c:	f04f 0400 	mov.w	r4, #0
 8001fa0:	f06f 0007 	mvn.w	r0, #7
 8001fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001fa8:	f891 f040 	pld	[r1, #64]	; 0x40
 8001fac:	f100 0008 	add.w	r0, r0, #8
 8001fb0:	fa82 f24c 	uadd8	r2, r2, ip
 8001fb4:	faa4 f28c 	sel	r2, r4, ip
 8001fb8:	fa83 f34c 	uadd8	r3, r3, ip
 8001fbc:	faa2 f38c 	sel	r3, r2, ip
 8001fc0:	bb4b      	cbnz	r3, 8002016 <strlen+0x96>
 8001fc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001fc6:	fa82 f24c 	uadd8	r2, r2, ip
 8001fca:	f100 0008 	add.w	r0, r0, #8
 8001fce:	faa4 f28c 	sel	r2, r4, ip
 8001fd2:	fa83 f34c 	uadd8	r3, r3, ip
 8001fd6:	faa2 f38c 	sel	r3, r2, ip
 8001fda:	b9e3      	cbnz	r3, 8002016 <strlen+0x96>
 8001fdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8001fe0:	fa82 f24c 	uadd8	r2, r2, ip
 8001fe4:	f100 0008 	add.w	r0, r0, #8
 8001fe8:	faa4 f28c 	sel	r2, r4, ip
 8001fec:	fa83 f34c 	uadd8	r3, r3, ip
 8001ff0:	faa2 f38c 	sel	r3, r2, ip
 8001ff4:	b97b      	cbnz	r3, 8002016 <strlen+0x96>
 8001ff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8001ffa:	f101 0120 	add.w	r1, r1, #32
 8001ffe:	fa82 f24c 	uadd8	r2, r2, ip
 8002002:	f100 0008 	add.w	r0, r0, #8
 8002006:	faa4 f28c 	sel	r2, r4, ip
 800200a:	fa83 f34c 	uadd8	r3, r3, ip
 800200e:	faa2 f38c 	sel	r3, r2, ip
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0c6      	beq.n	8001fa4 <strlen+0x24>
 8002016:	2a00      	cmp	r2, #0
 8002018:	bf04      	itt	eq
 800201a:	3004      	addeq	r0, #4
 800201c:	461a      	moveq	r2, r3
 800201e:	ba12      	rev	r2, r2
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8002028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800202c:	4770      	bx	lr
 800202e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002032:	f004 0503 	and.w	r5, r4, #3
 8002036:	f1c4 0000 	rsb	r0, r4, #0
 800203a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800203e:	f014 0f04 	tst.w	r4, #4
 8002042:	f891 f040 	pld	[r1, #64]	; 0x40
 8002046:	fa0c f505 	lsl.w	r5, ip, r5
 800204a:	ea62 0205 	orn	r2, r2, r5
 800204e:	bf1c      	itt	ne
 8002050:	ea63 0305 	ornne	r3, r3, r5
 8002054:	4662      	movne	r2, ip
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	e7a9      	b.n	8001fb0 <strlen+0x30>
 800205c:	0000      	movs	r0, r0
	...

08002060 <_vfprintf_r>:
 8002060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002064:	b0c5      	sub	sp, #276	; 0x114
 8002066:	461c      	mov	r4, r3
 8002068:	9108      	str	r1, [sp, #32]
 800206a:	4616      	mov	r6, r2
 800206c:	4605      	mov	r5, r0
 800206e:	900a      	str	r0, [sp, #40]	; 0x28
 8002070:	f003 f820 	bl	80050b4 <_localeconv_r>
 8002074:	6803      	ldr	r3, [r0, #0]
 8002076:	9317      	str	r3, [sp, #92]	; 0x5c
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff81 	bl	8001f80 <strlen>
 800207e:	940e      	str	r4, [sp, #56]	; 0x38
 8002080:	9016      	str	r0, [sp, #88]	; 0x58
 8002082:	b11d      	cbz	r5, 800208c <_vfprintf_r+0x2c>
 8002084:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8123 	beq.w	80022d2 <_vfprintf_r+0x272>
 800208c:	9808      	ldr	r0, [sp, #32]
 800208e:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8002092:	b293      	uxth	r3, r2
 8002094:	0499      	lsls	r1, r3, #18
 8002096:	d407      	bmi.n	80020a8 <_vfprintf_r+0x48>
 8002098:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800209a:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 800209e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80020a2:	8183      	strh	r3, [r0, #12]
 80020a4:	6641      	str	r1, [r0, #100]	; 0x64
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	071a      	lsls	r2, r3, #28
 80020aa:	f140 80dd 	bpl.w	8002268 <_vfprintf_r+0x208>
 80020ae:	9a08      	ldr	r2, [sp, #32]
 80020b0:	6912      	ldr	r2, [r2, #16]
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	f000 80d8 	beq.w	8002268 <_vfprintf_r+0x208>
 80020b8:	f003 031a 	and.w	r3, r3, #26
 80020bc:	2b0a      	cmp	r3, #10
 80020be:	f000 80e1 	beq.w	8002284 <_vfprintf_r+0x224>
 80020c2:	ed9f 7b87 	vldr	d7, [pc, #540]	; 80022e0 <_vfprintf_r+0x280>
 80020c6:	2300      	movs	r3, #0
 80020c8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80020cc:	9312      	str	r3, [sp, #72]	; 0x48
 80020ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80020d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80020d2:	9319      	str	r3, [sp, #100]	; 0x64
 80020d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80020d6:	f8df a214 	ldr.w	sl, [pc, #532]	; 80022ec <_vfprintf_r+0x28c>
 80020da:	ab34      	add	r3, sp, #208	; 0xd0
 80020dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80020de:	4699      	mov	r9, r3
 80020e0:	46b0      	mov	r8, r6
 80020e2:	f898 3000 	ldrb.w	r3, [r8]
 80020e6:	4644      	mov	r4, r8
 80020e8:	b1eb      	cbz	r3, 8002126 <_vfprintf_r+0xc6>
 80020ea:	2b25      	cmp	r3, #37	; 0x25
 80020ec:	d102      	bne.n	80020f4 <_vfprintf_r+0x94>
 80020ee:	e01a      	b.n	8002126 <_vfprintf_r+0xc6>
 80020f0:	2b25      	cmp	r3, #37	; 0x25
 80020f2:	d003      	beq.n	80020fc <_vfprintf_r+0x9c>
 80020f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f9      	bne.n	80020f0 <_vfprintf_r+0x90>
 80020fc:	ebc8 0504 	rsb	r5, r8, r4
 8002100:	b18d      	cbz	r5, 8002126 <_vfprintf_r+0xc6>
 8002102:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002104:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002106:	f8c9 8000 	str.w	r8, [r9]
 800210a:	3301      	adds	r3, #1
 800210c:	442a      	add	r2, r5
 800210e:	2b07      	cmp	r3, #7
 8002110:	f8c9 5004 	str.w	r5, [r9, #4]
 8002114:	9229      	str	r2, [sp, #164]	; 0xa4
 8002116:	9328      	str	r3, [sp, #160]	; 0xa0
 8002118:	f300 80c2 	bgt.w	80022a0 <_vfprintf_r+0x240>
 800211c:	f109 0908 	add.w	r9, r9, #8
 8002120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002122:	442b      	add	r3, r5
 8002124:	930b      	str	r3, [sp, #44]	; 0x2c
 8002126:	7823      	ldrb	r3, [r4, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80c2 	beq.w	80022b2 <_vfprintf_r+0x252>
 800212e:	2300      	movs	r3, #0
 8002130:	461a      	mov	r2, r3
 8002132:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002136:	4619      	mov	r1, r3
 8002138:	930c      	str	r3, [sp, #48]	; 0x30
 800213a:	9307      	str	r3, [sp, #28]
 800213c:	f04f 3bff 	mov.w	fp, #4294967295
 8002140:	7863      	ldrb	r3, [r4, #1]
 8002142:	f104 0801 	add.w	r8, r4, #1
 8002146:	465d      	mov	r5, fp
 8002148:	f108 0801 	add.w	r8, r8, #1
 800214c:	f1a3 0020 	sub.w	r0, r3, #32
 8002150:	2858      	cmp	r0, #88	; 0x58
 8002152:	f200 8459 	bhi.w	8002a08 <_vfprintf_r+0x9a8>
 8002156:	e8df f010 	tbh	[pc, r0, lsl #1]
 800215a:	040f      	.short	0x040f
 800215c:	04570457 	.word	0x04570457
 8002160:	04570418 	.word	0x04570418
 8002164:	04570457 	.word	0x04570457
 8002168:	04570457 	.word	0x04570457
 800216c:	03620457 	.word	0x03620457
 8002170:	04570449 	.word	0x04570449
 8002174:	0109005d 	.word	0x0109005d
 8002178:	01250457 	.word	0x01250457
 800217c:	03700370 	.word	0x03700370
 8002180:	03700370 	.word	0x03700370
 8002184:	03700370 	.word	0x03700370
 8002188:	03700370 	.word	0x03700370
 800218c:	04570370 	.word	0x04570370
 8002190:	04570457 	.word	0x04570457
 8002194:	04570457 	.word	0x04570457
 8002198:	04570457 	.word	0x04570457
 800219c:	04570457 	.word	0x04570457
 80021a0:	03800457 	.word	0x03800457
 80021a4:	0457039d 	.word	0x0457039d
 80021a8:	0457039d 	.word	0x0457039d
 80021ac:	04570457 	.word	0x04570457
 80021b0:	03eb0457 	.word	0x03eb0457
 80021b4:	04570457 	.word	0x04570457
 80021b8:	0457012c 	.word	0x0457012c
 80021bc:	04570457 	.word	0x04570457
 80021c0:	04570457 	.word	0x04570457
 80021c4:	04570155 	.word	0x04570155
 80021c8:	02b40457 	.word	0x02b40457
 80021cc:	04570457 	.word	0x04570457
 80021d0:	04570457 	.word	0x04570457
 80021d4:	04570457 	.word	0x04570457
 80021d8:	04570457 	.word	0x04570457
 80021dc:	04570457 	.word	0x04570457
 80021e0:	030f02f5 	.word	0x030f02f5
 80021e4:	039d039d 	.word	0x039d039d
 80021e8:	033f039d 	.word	0x033f039d
 80021ec:	0457030f 	.word	0x0457030f
 80021f0:	03460457 	.word	0x03460457
 80021f4:	03500457 	.word	0x03500457
 80021f8:	006400cb 	.word	0x006400cb
 80021fc:	04570420 	.word	0x04570420
 8002200:	04570428 	.word	0x04570428
 8002204:	045703f2 	.word	0x045703f2
 8002208:	03fa0457 	.word	0x03fa0457
 800220c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800220e:	930e      	str	r3, [sp, #56]	; 0x38
 8002210:	4240      	negs	r0, r0
 8002212:	900c      	str	r0, [sp, #48]	; 0x30
 8002214:	9b07      	ldr	r3, [sp, #28]
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	9307      	str	r3, [sp, #28]
 800221c:	f898 3000 	ldrb.w	r3, [r8]
 8002220:	e792      	b.n	8002148 <_vfprintf_r+0xe8>
 8002222:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002224:	46ab      	mov	fp, r5
 8002226:	2100      	movs	r1, #0
 8002228:	6804      	ldr	r4, [r0, #0]
 800222a:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800222e:	1d07      	adds	r7, r0, #4
 8002230:	9807      	ldr	r0, [sp, #28]
 8002232:	2330      	movs	r3, #48	; 0x30
 8002234:	2278      	movs	r2, #120	; 0x78
 8002236:	458b      	cmp	fp, r1
 8002238:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800223c:	f04f 0500 	mov.w	r5, #0
 8002240:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002244:	f040 0302 	orr.w	r3, r0, #2
 8002248:	f2c0 83fb 	blt.w	8002a42 <_vfprintf_r+0x9e2>
 800224c:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	9307      	str	r3, [sp, #28]
 8002256:	ea54 0305 	orrs.w	r3, r4, r5
 800225a:	970e      	str	r7, [sp, #56]	; 0x38
 800225c:	f000 83cc 	beq.w	80029f8 <_vfprintf_r+0x998>
 8002260:	460f      	mov	r7, r1
 8002262:	9211      	str	r2, [sp, #68]	; 0x44
 8002264:	4820      	ldr	r0, [pc, #128]	; (80022e8 <_vfprintf_r+0x288>)
 8002266:	e25d      	b.n	8002724 <_vfprintf_r+0x6c4>
 8002268:	9908      	ldr	r1, [sp, #32]
 800226a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800226c:	f001 faf0 	bl	8003850 <__swsetup_r>
 8002270:	2800      	cmp	r0, #0
 8002272:	f041 803f 	bne.w	80032f4 <_vfprintf_r+0x1294>
 8002276:	9b08      	ldr	r3, [sp, #32]
 8002278:	899b      	ldrh	r3, [r3, #12]
 800227a:	f003 031a 	and.w	r3, r3, #26
 800227e:	2b0a      	cmp	r3, #10
 8002280:	f47f af1f 	bne.w	80020c2 <_vfprintf_r+0x62>
 8002284:	9908      	ldr	r1, [sp, #32]
 8002286:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f6ff af19 	blt.w	80020c2 <_vfprintf_r+0x62>
 8002290:	4623      	mov	r3, r4
 8002292:	4632      	mov	r2, r6
 8002294:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002296:	f001 fa7f 	bl	8003798 <__sbprintf>
 800229a:	b045      	add	sp, #276	; 0x114
 800229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a0:	aa27      	add	r2, sp, #156	; 0x9c
 80022a2:	9908      	ldr	r1, [sp, #32]
 80022a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022a6:	f005 fc09 	bl	8007abc <__sprint_r>
 80022aa:	b948      	cbnz	r0, 80022c0 <_vfprintf_r+0x260>
 80022ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80022b0:	e736      	b.n	8002120 <_vfprintf_r+0xc0>
 80022b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80022b4:	b123      	cbz	r3, 80022c0 <_vfprintf_r+0x260>
 80022b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022b8:	9908      	ldr	r1, [sp, #32]
 80022ba:	aa27      	add	r2, sp, #156	; 0x9c
 80022bc:	f005 fbfe 	bl	8007abc <__sprint_r>
 80022c0:	9b08      	ldr	r3, [sp, #32]
 80022c2:	899b      	ldrh	r3, [r3, #12]
 80022c4:	0659      	lsls	r1, r3, #25
 80022c6:	f101 8015 	bmi.w	80032f4 <_vfprintf_r+0x1294>
 80022ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80022cc:	b045      	add	sp, #276	; 0x114
 80022ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022d4:	f002 fc02 	bl	8004adc <__sinit>
 80022d8:	e6d8      	b.n	800208c <_vfprintf_r+0x2c>
 80022da:	bf00      	nop
 80022dc:	f3af 8000 	nop.w
	...
 80022e8:	08008d80 	.word	0x08008d80
 80022ec:	08008d4c 	.word	0x08008d4c
 80022f0:	9311      	str	r3, [sp, #68]	; 0x44
 80022f2:	46ab      	mov	fp, r5
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	f041 8232 	bne.w	800375e <_vfprintf_r+0x16fe>
 80022fa:	9a07      	ldr	r2, [sp, #28]
 80022fc:	f012 0320 	ands.w	r3, r2, #32
 8002300:	d064      	beq.n	80023cc <_vfprintf_r+0x36c>
 8002302:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002304:	3707      	adds	r7, #7
 8002306:	f027 0307 	bic.w	r3, r7, #7
 800230a:	2700      	movs	r7, #0
 800230c:	f103 0108 	add.w	r1, r3, #8
 8002310:	45bb      	cmp	fp, r7
 8002312:	910e      	str	r1, [sp, #56]	; 0x38
 8002314:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002318:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800231c:	f2c0 86ba 	blt.w	8003094 <_vfprintf_r+0x1034>
 8002320:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002324:	9307      	str	r3, [sp, #28]
 8002326:	ea54 0305 	orrs.w	r3, r4, r5
 800232a:	f000 8382 	beq.w	8002a32 <_vfprintf_r+0x9d2>
 800232e:	ae34      	add	r6, sp, #208	; 0xd0
 8002330:	08e2      	lsrs	r2, r4, #3
 8002332:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8002336:	08e9      	lsrs	r1, r5, #3
 8002338:	f004 0307 	and.w	r3, r4, #7
 800233c:	460d      	mov	r5, r1
 800233e:	4614      	mov	r4, r2
 8002340:	3330      	adds	r3, #48	; 0x30
 8002342:	ea54 0205 	orrs.w	r2, r4, r5
 8002346:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800234a:	d1f1      	bne.n	8002330 <_vfprintf_r+0x2d0>
 800234c:	9a07      	ldr	r2, [sp, #28]
 800234e:	07d2      	lsls	r2, r2, #31
 8002350:	f140 8096 	bpl.w	8002480 <_vfprintf_r+0x420>
 8002354:	2b30      	cmp	r3, #48	; 0x30
 8002356:	f000 8093 	beq.w	8002480 <_vfprintf_r+0x420>
 800235a:	2230      	movs	r2, #48	; 0x30
 800235c:	1e73      	subs	r3, r6, #1
 800235e:	f806 2c01 	strb.w	r2, [r6, #-1]
 8002362:	aa34      	add	r2, sp, #208	; 0xd0
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	920d      	str	r2, [sp, #52]	; 0x34
 8002368:	461e      	mov	r6, r3
 800236a:	e08c      	b.n	8002486 <_vfprintf_r+0x426>
 800236c:	f898 3000 	ldrb.w	r3, [r8]
 8002370:	2b2a      	cmp	r3, #42	; 0x2a
 8002372:	f108 0401 	add.w	r4, r8, #1
 8002376:	f001 81d0 	beq.w	800371a <_vfprintf_r+0x16ba>
 800237a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800237e:	2809      	cmp	r0, #9
 8002380:	bf98      	it	ls
 8002382:	2500      	movls	r5, #0
 8002384:	f201 816c 	bhi.w	8003660 <_vfprintf_r+0x1600>
 8002388:	f814 3b01 	ldrb.w	r3, [r4], #1
 800238c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002390:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8002394:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002398:	2809      	cmp	r0, #9
 800239a:	d9f5      	bls.n	8002388 <_vfprintf_r+0x328>
 800239c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80023a0:	46a0      	mov	r8, r4
 80023a2:	e6d3      	b.n	800214c <_vfprintf_r+0xec>
 80023a4:	9b07      	ldr	r3, [sp, #28]
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	9307      	str	r3, [sp, #28]
 80023ac:	f898 3000 	ldrb.w	r3, [r8]
 80023b0:	e6ca      	b.n	8002148 <_vfprintf_r+0xe8>
 80023b2:	9311      	str	r3, [sp, #68]	; 0x44
 80023b4:	46ab      	mov	fp, r5
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	f041 81d9 	bne.w	800376e <_vfprintf_r+0x170e>
 80023bc:	9b07      	ldr	r3, [sp, #28]
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	9307      	str	r3, [sp, #28]
 80023c4:	9a07      	ldr	r2, [sp, #28]
 80023c6:	f012 0320 	ands.w	r3, r2, #32
 80023ca:	d19a      	bne.n	8002302 <_vfprintf_r+0x2a2>
 80023cc:	9907      	ldr	r1, [sp, #28]
 80023ce:	f011 0210 	ands.w	r2, r1, #16
 80023d2:	f000 8634 	beq.w	800303e <_vfprintf_r+0xfde>
 80023d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80023d8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80023dc:	f1bb 0f00 	cmp.w	fp, #0
 80023e0:	6804      	ldr	r4, [r0, #0]
 80023e2:	f100 0704 	add.w	r7, r0, #4
 80023e6:	f04f 0500 	mov.w	r5, #0
 80023ea:	f2c0 8652 	blt.w	8003092 <_vfprintf_r+0x1032>
 80023ee:	460a      	mov	r2, r1
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	9207      	str	r2, [sp, #28]
 80023f6:	ea54 0205 	orrs.w	r2, r4, r5
 80023fa:	970e      	str	r7, [sp, #56]	; 0x38
 80023fc:	f000 8319 	beq.w	8002a32 <_vfprintf_r+0x9d2>
 8002400:	461f      	mov	r7, r3
 8002402:	e794      	b.n	800232e <_vfprintf_r+0x2ce>
 8002404:	9311      	str	r3, [sp, #68]	; 0x44
 8002406:	46ab      	mov	fp, r5
 8002408:	2a00      	cmp	r2, #0
 800240a:	f041 81a0 	bne.w	800374e <_vfprintf_r+0x16ee>
 800240e:	9b07      	ldr	r3, [sp, #28]
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	9307      	str	r3, [sp, #28]
 8002416:	9a07      	ldr	r2, [sp, #28]
 8002418:	f012 0320 	ands.w	r3, r2, #32
 800241c:	f000 84fa 	beq.w	8002e14 <_vfprintf_r+0xdb4>
 8002420:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002422:	3707      	adds	r7, #7
 8002424:	f027 0307 	bic.w	r3, r7, #7
 8002428:	2700      	movs	r7, #0
 800242a:	f103 0108 	add.w	r1, r3, #8
 800242e:	45bb      	cmp	fp, r7
 8002430:	910e      	str	r1, [sp, #56]	; 0x38
 8002432:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002436:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800243a:	f2c0 8523 	blt.w	8002e84 <_vfprintf_r+0xe24>
 800243e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002442:	9307      	str	r3, [sp, #28]
 8002444:	ea54 0305 	orrs.w	r3, r4, r5
 8002448:	f000 81bc 	beq.w	80027c4 <_vfprintf_r+0x764>
 800244c:	2d00      	cmp	r5, #0
 800244e:	bf08      	it	eq
 8002450:	2c0a      	cmpeq	r4, #10
 8002452:	f0c0 851b 	bcc.w	8002e8c <_vfprintf_r+0xe2c>
 8002456:	ae34      	add	r6, sp, #208	; 0xd0
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	220a      	movs	r2, #10
 800245e:	2300      	movs	r3, #0
 8002460:	f006 fa44 	bl	80088ec <__aeabi_uldivmod>
 8002464:	3230      	adds	r2, #48	; 0x30
 8002466:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	2300      	movs	r3, #0
 8002470:	220a      	movs	r2, #10
 8002472:	f006 fa3b 	bl	80088ec <__aeabi_uldivmod>
 8002476:	4604      	mov	r4, r0
 8002478:	460d      	mov	r5, r1
 800247a:	ea54 0305 	orrs.w	r3, r4, r5
 800247e:	d1eb      	bne.n	8002458 <_vfprintf_r+0x3f8>
 8002480:	ab34      	add	r3, sp, #208	; 0xd0
 8002482:	1b9b      	subs	r3, r3, r6
 8002484:	930d      	str	r3, [sp, #52]	; 0x34
 8002486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002488:	455b      	cmp	r3, fp
 800248a:	bfb8      	it	lt
 800248c:	465b      	movlt	r3, fp
 800248e:	9309      	str	r3, [sp, #36]	; 0x24
 8002490:	2300      	movs	r3, #0
 8002492:	9313      	str	r3, [sp, #76]	; 0x4c
 8002494:	b117      	cbz	r7, 800249c <_vfprintf_r+0x43c>
 8002496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	9309      	str	r3, [sp, #36]	; 0x24
 800249c:	9b07      	ldr	r3, [sp, #28]
 800249e:	f013 0302 	ands.w	r3, r3, #2
 80024a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80024a4:	d002      	beq.n	80024ac <_vfprintf_r+0x44c>
 80024a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024a8:	3302      	adds	r3, #2
 80024aa:	9309      	str	r3, [sp, #36]	; 0x24
 80024ac:	9b07      	ldr	r3, [sp, #28]
 80024ae:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80024b2:	9310      	str	r3, [sp, #64]	; 0x40
 80024b4:	f040 82d2 	bne.w	8002a5c <_vfprintf_r+0x9fc>
 80024b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024bc:	1a9d      	subs	r5, r3, r2
 80024be:	2d00      	cmp	r5, #0
 80024c0:	f340 82cc 	ble.w	8002a5c <_vfprintf_r+0x9fc>
 80024c4:	2d10      	cmp	r5, #16
 80024c6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80024c8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80024ca:	4fa8      	ldr	r7, [pc, #672]	; (800276c <_vfprintf_r+0x70c>)
 80024cc:	dd27      	ble.n	800251e <_vfprintf_r+0x4be>
 80024ce:	9618      	str	r6, [sp, #96]	; 0x60
 80024d0:	4648      	mov	r0, r9
 80024d2:	2410      	movs	r4, #16
 80024d4:	46b9      	mov	r9, r7
 80024d6:	9e08      	ldr	r6, [sp, #32]
 80024d8:	462f      	mov	r7, r5
 80024da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80024dc:	e004      	b.n	80024e8 <_vfprintf_r+0x488>
 80024de:	3f10      	subs	r7, #16
 80024e0:	2f10      	cmp	r7, #16
 80024e2:	f100 0008 	add.w	r0, r0, #8
 80024e6:	dd16      	ble.n	8002516 <_vfprintf_r+0x4b6>
 80024e8:	3201      	adds	r2, #1
 80024ea:	4ba0      	ldr	r3, [pc, #640]	; (800276c <_vfprintf_r+0x70c>)
 80024ec:	9228      	str	r2, [sp, #160]	; 0xa0
 80024ee:	3110      	adds	r1, #16
 80024f0:	2a07      	cmp	r2, #7
 80024f2:	9129      	str	r1, [sp, #164]	; 0xa4
 80024f4:	e880 0018 	stmia.w	r0, {r3, r4}
 80024f8:	ddf1      	ble.n	80024de <_vfprintf_r+0x47e>
 80024fa:	aa27      	add	r2, sp, #156	; 0x9c
 80024fc:	4631      	mov	r1, r6
 80024fe:	4628      	mov	r0, r5
 8002500:	f005 fadc 	bl	8007abc <__sprint_r>
 8002504:	2800      	cmp	r0, #0
 8002506:	f47f aedb 	bne.w	80022c0 <_vfprintf_r+0x260>
 800250a:	3f10      	subs	r7, #16
 800250c:	2f10      	cmp	r7, #16
 800250e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002510:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002512:	a834      	add	r0, sp, #208	; 0xd0
 8002514:	dce8      	bgt.n	80024e8 <_vfprintf_r+0x488>
 8002516:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8002518:	463d      	mov	r5, r7
 800251a:	464f      	mov	r7, r9
 800251c:	4681      	mov	r9, r0
 800251e:	3201      	adds	r2, #1
 8002520:	186c      	adds	r4, r5, r1
 8002522:	2a07      	cmp	r2, #7
 8002524:	9429      	str	r4, [sp, #164]	; 0xa4
 8002526:	9228      	str	r2, [sp, #160]	; 0xa0
 8002528:	f8c9 7000 	str.w	r7, [r9]
 800252c:	f8c9 5004 	str.w	r5, [r9, #4]
 8002530:	f300 8428 	bgt.w	8002d84 <_vfprintf_r+0xd24>
 8002534:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002538:	f109 0908 	add.w	r9, r9, #8
 800253c:	b177      	cbz	r7, 800255c <_vfprintf_r+0x4fc>
 800253e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002540:	3301      	adds	r3, #1
 8002542:	3401      	adds	r4, #1
 8002544:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8002548:	2201      	movs	r2, #1
 800254a:	2b07      	cmp	r3, #7
 800254c:	9429      	str	r4, [sp, #164]	; 0xa4
 800254e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002550:	e889 0006 	stmia.w	r9, {r1, r2}
 8002554:	f300 83a0 	bgt.w	8002c98 <_vfprintf_r+0xc38>
 8002558:	f109 0908 	add.w	r9, r9, #8
 800255c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800255e:	b16b      	cbz	r3, 800257c <_vfprintf_r+0x51c>
 8002560:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002562:	3301      	adds	r3, #1
 8002564:	3402      	adds	r4, #2
 8002566:	a920      	add	r1, sp, #128	; 0x80
 8002568:	2202      	movs	r2, #2
 800256a:	2b07      	cmp	r3, #7
 800256c:	9429      	str	r4, [sp, #164]	; 0xa4
 800256e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002570:	e889 0006 	stmia.w	r9, {r1, r2}
 8002574:	f300 839c 	bgt.w	8002cb0 <_vfprintf_r+0xc50>
 8002578:	f109 0908 	add.w	r9, r9, #8
 800257c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	f000 82d0 	beq.w	8002b24 <_vfprintf_r+0xac4>
 8002584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002586:	ebc3 070b 	rsb	r7, r3, fp
 800258a:	2f00      	cmp	r7, #0
 800258c:	dd33      	ble.n	80025f6 <_vfprintf_r+0x596>
 800258e:	4a78      	ldr	r2, [pc, #480]	; (8002770 <_vfprintf_r+0x710>)
 8002590:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002592:	920f      	str	r2, [sp, #60]	; 0x3c
 8002594:	2f10      	cmp	r7, #16
 8002596:	dd22      	ble.n	80025de <_vfprintf_r+0x57e>
 8002598:	4622      	mov	r2, r4
 800259a:	f04f 0b10 	mov.w	fp, #16
 800259e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80025a0:	9c08      	ldr	r4, [sp, #32]
 80025a2:	e004      	b.n	80025ae <_vfprintf_r+0x54e>
 80025a4:	3f10      	subs	r7, #16
 80025a6:	2f10      	cmp	r7, #16
 80025a8:	f109 0908 	add.w	r9, r9, #8
 80025ac:	dd16      	ble.n	80025dc <_vfprintf_r+0x57c>
 80025ae:	3301      	adds	r3, #1
 80025b0:	3210      	adds	r2, #16
 80025b2:	2b07      	cmp	r3, #7
 80025b4:	9229      	str	r2, [sp, #164]	; 0xa4
 80025b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80025b8:	e889 0c00 	stmia.w	r9, {sl, fp}
 80025bc:	ddf2      	ble.n	80025a4 <_vfprintf_r+0x544>
 80025be:	aa27      	add	r2, sp, #156	; 0x9c
 80025c0:	4621      	mov	r1, r4
 80025c2:	4628      	mov	r0, r5
 80025c4:	f005 fa7a 	bl	8007abc <__sprint_r>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	f47f ae79 	bne.w	80022c0 <_vfprintf_r+0x260>
 80025ce:	3f10      	subs	r7, #16
 80025d0:	2f10      	cmp	r7, #16
 80025d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80025d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80025d6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80025da:	dce8      	bgt.n	80025ae <_vfprintf_r+0x54e>
 80025dc:	4614      	mov	r4, r2
 80025de:	3301      	adds	r3, #1
 80025e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80025e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80025e4:	443c      	add	r4, r7
 80025e6:	2b07      	cmp	r3, #7
 80025e8:	9429      	str	r4, [sp, #164]	; 0xa4
 80025ea:	e889 0084 	stmia.w	r9, {r2, r7}
 80025ee:	f300 8347 	bgt.w	8002c80 <_vfprintf_r+0xc20>
 80025f2:	f109 0908 	add.w	r9, r9, #8
 80025f6:	9b07      	ldr	r3, [sp, #28]
 80025f8:	05dd      	lsls	r5, r3, #23
 80025fa:	f100 8231 	bmi.w	8002a60 <_vfprintf_r+0xa00>
 80025fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002602:	f8c9 6000 	str.w	r6, [r9]
 8002606:	3301      	adds	r3, #1
 8002608:	440c      	add	r4, r1
 800260a:	2b07      	cmp	r3, #7
 800260c:	9429      	str	r4, [sp, #164]	; 0xa4
 800260e:	f8c9 1004 	str.w	r1, [r9, #4]
 8002612:	9328      	str	r3, [sp, #160]	; 0xa0
 8002614:	f300 831e 	bgt.w	8002c54 <_vfprintf_r+0xbf4>
 8002618:	f109 0908 	add.w	r9, r9, #8
 800261c:	9b07      	ldr	r3, [sp, #28]
 800261e:	0758      	lsls	r0, r3, #29
 8002620:	d53f      	bpl.n	80026a2 <_vfprintf_r+0x642>
 8002622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002626:	1a9d      	subs	r5, r3, r2
 8002628:	2d00      	cmp	r5, #0
 800262a:	dd3a      	ble.n	80026a2 <_vfprintf_r+0x642>
 800262c:	2d10      	cmp	r5, #16
 800262e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002630:	4f4e      	ldr	r7, [pc, #312]	; (800276c <_vfprintf_r+0x70c>)
 8002632:	dd23      	ble.n	800267c <_vfprintf_r+0x61c>
 8002634:	4622      	mov	r2, r4
 8002636:	2610      	movs	r6, #16
 8002638:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800263c:	9c08      	ldr	r4, [sp, #32]
 800263e:	e004      	b.n	800264a <_vfprintf_r+0x5ea>
 8002640:	3d10      	subs	r5, #16
 8002642:	2d10      	cmp	r5, #16
 8002644:	f109 0908 	add.w	r9, r9, #8
 8002648:	dd17      	ble.n	800267a <_vfprintf_r+0x61a>
 800264a:	3301      	adds	r3, #1
 800264c:	4947      	ldr	r1, [pc, #284]	; (800276c <_vfprintf_r+0x70c>)
 800264e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002650:	3210      	adds	r2, #16
 8002652:	2b07      	cmp	r3, #7
 8002654:	9229      	str	r2, [sp, #164]	; 0xa4
 8002656:	e889 0042 	stmia.w	r9, {r1, r6}
 800265a:	ddf1      	ble.n	8002640 <_vfprintf_r+0x5e0>
 800265c:	aa27      	add	r2, sp, #156	; 0x9c
 800265e:	4621      	mov	r1, r4
 8002660:	4658      	mov	r0, fp
 8002662:	f005 fa2b 	bl	8007abc <__sprint_r>
 8002666:	2800      	cmp	r0, #0
 8002668:	f47f ae2a 	bne.w	80022c0 <_vfprintf_r+0x260>
 800266c:	3d10      	subs	r5, #16
 800266e:	2d10      	cmp	r5, #16
 8002670:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002672:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002674:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002678:	dce7      	bgt.n	800264a <_vfprintf_r+0x5ea>
 800267a:	4614      	mov	r4, r2
 800267c:	3301      	adds	r3, #1
 800267e:	442c      	add	r4, r5
 8002680:	2b07      	cmp	r3, #7
 8002682:	9429      	str	r4, [sp, #164]	; 0xa4
 8002684:	9328      	str	r3, [sp, #160]	; 0xa0
 8002686:	f8c9 7000 	str.w	r7, [r9]
 800268a:	f8c9 5004 	str.w	r5, [r9, #4]
 800268e:	dd08      	ble.n	80026a2 <_vfprintf_r+0x642>
 8002690:	aa27      	add	r2, sp, #156	; 0x9c
 8002692:	9908      	ldr	r1, [sp, #32]
 8002694:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002696:	f005 fa11 	bl	8007abc <__sprint_r>
 800269a:	2800      	cmp	r0, #0
 800269c:	f47f ae10 	bne.w	80022c0 <_vfprintf_r+0x260>
 80026a0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80026a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80026a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026a8:	428a      	cmp	r2, r1
 80026aa:	bfac      	ite	ge
 80026ac:	189b      	addge	r3, r3, r2
 80026ae:	185b      	addlt	r3, r3, r1
 80026b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80026b2:	2c00      	cmp	r4, #0
 80026b4:	f040 82da 	bne.w	8002c6c <_vfprintf_r+0xc0c>
 80026b8:	2300      	movs	r3, #0
 80026ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80026bc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80026c0:	e50f      	b.n	80020e2 <_vfprintf_r+0x82>
 80026c2:	9311      	str	r3, [sp, #68]	; 0x44
 80026c4:	46ab      	mov	fp, r5
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	f041 803d 	bne.w	8003746 <_vfprintf_r+0x16e6>
 80026cc:	9b07      	ldr	r3, [sp, #28]
 80026ce:	4829      	ldr	r0, [pc, #164]	; (8002774 <_vfprintf_r+0x714>)
 80026d0:	069c      	lsls	r4, r3, #26
 80026d2:	f140 8146 	bpl.w	8002962 <_vfprintf_r+0x902>
 80026d6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80026d8:	3707      	adds	r7, #7
 80026da:	f027 0307 	bic.w	r3, r7, #7
 80026de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026e2:	f103 0208 	add.w	r2, r3, #8
 80026e6:	920e      	str	r2, [sp, #56]	; 0x38
 80026e8:	9a07      	ldr	r2, [sp, #28]
 80026ea:	f012 0701 	ands.w	r7, r2, #1
 80026ee:	f000 82eb 	beq.w	8002cc8 <_vfprintf_r+0xc68>
 80026f2:	ea54 0305 	orrs.w	r3, r4, r5
 80026f6:	f000 8582 	beq.w	80031fe <_vfprintf_r+0x119e>
 80026fa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80026fe:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002702:	2700      	movs	r7, #0
 8002704:	9a07      	ldr	r2, [sp, #28]
 8002706:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800270a:	2330      	movs	r3, #48	; 0x30
 800270c:	45bb      	cmp	fp, r7
 800270e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002712:	f042 0302 	orr.w	r3, r2, #2
 8002716:	f2c0 873b 	blt.w	8003590 <_vfprintf_r+0x1530>
 800271a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	9307      	str	r3, [sp, #28]
 8002724:	ae34      	add	r6, sp, #208	; 0xd0
 8002726:	0923      	lsrs	r3, r4, #4
 8002728:	f004 010f 	and.w	r1, r4, #15
 800272c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8002730:	092a      	lsrs	r2, r5, #4
 8002732:	461c      	mov	r4, r3
 8002734:	4615      	mov	r5, r2
 8002736:	5c43      	ldrb	r3, [r0, r1]
 8002738:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800273c:	ea54 0305 	orrs.w	r3, r4, r5
 8002740:	d1f1      	bne.n	8002726 <_vfprintf_r+0x6c6>
 8002742:	e69d      	b.n	8002480 <_vfprintf_r+0x420>
 8002744:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002746:	9311      	str	r3, [sp, #68]	; 0x44
 8002748:	680a      	ldr	r2, [r1, #0]
 800274a:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800274e:	2300      	movs	r3, #0
 8002750:	460a      	mov	r2, r1
 8002752:	461f      	mov	r7, r3
 8002754:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002758:	3204      	adds	r2, #4
 800275a:	2301      	movs	r3, #1
 800275c:	9309      	str	r3, [sp, #36]	; 0x24
 800275e:	46bb      	mov	fp, r7
 8002760:	9713      	str	r7, [sp, #76]	; 0x4c
 8002762:	920e      	str	r2, [sp, #56]	; 0x38
 8002764:	930d      	str	r3, [sp, #52]	; 0x34
 8002766:	ae2a      	add	r6, sp, #168	; 0xa8
 8002768:	e698      	b.n	800249c <_vfprintf_r+0x43c>
 800276a:	bf00      	nop
 800276c:	08008da0 	.word	0x08008da0
 8002770:	08008d4c 	.word	0x08008d4c
 8002774:	08008d6c 	.word	0x08008d6c
 8002778:	9311      	str	r3, [sp, #68]	; 0x44
 800277a:	46ab      	mov	fp, r5
 800277c:	2a00      	cmp	r2, #0
 800277e:	f040 87ea 	bne.w	8003756 <_vfprintf_r+0x16f6>
 8002782:	9b07      	ldr	r3, [sp, #28]
 8002784:	069b      	lsls	r3, r3, #26
 8002786:	d574      	bpl.n	8002872 <_vfprintf_r+0x812>
 8002788:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800278a:	3707      	adds	r7, #7
 800278c:	f027 0707 	bic.w	r7, r7, #7
 8002790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002794:	f107 0108 	add.w	r1, r7, #8
 8002798:	910e      	str	r1, [sp, #56]	; 0x38
 800279a:	4614      	mov	r4, r2
 800279c:	461d      	mov	r5, r3
 800279e:	2a00      	cmp	r2, #0
 80027a0:	f173 0300 	sbcs.w	r3, r3, #0
 80027a4:	f2c0 843a 	blt.w	800301c <_vfprintf_r+0xfbc>
 80027a8:	f1bb 0f00 	cmp.w	fp, #0
 80027ac:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80027b0:	f2c0 8368 	blt.w	8002e84 <_vfprintf_r+0xe24>
 80027b4:	9b07      	ldr	r3, [sp, #28]
 80027b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ba:	9307      	str	r3, [sp, #28]
 80027bc:	ea54 0305 	orrs.w	r3, r4, r5
 80027c0:	f47f ae44 	bne.w	800244c <_vfprintf_r+0x3ec>
 80027c4:	f1bb 0f00 	cmp.w	fp, #0
 80027c8:	f040 8408 	bne.w	8002fdc <_vfprintf_r+0xf7c>
 80027cc:	f04f 0b00 	mov.w	fp, #0
 80027d0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80027d4:	ae34      	add	r6, sp, #208	; 0xd0
 80027d6:	e656      	b.n	8002486 <_vfprintf_r+0x426>
 80027d8:	9b07      	ldr	r3, [sp, #28]
 80027da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027de:	9307      	str	r3, [sp, #28]
 80027e0:	f898 3000 	ldrb.w	r3, [r8]
 80027e4:	e4b0      	b.n	8002148 <_vfprintf_r+0xe8>
 80027e6:	f898 3000 	ldrb.w	r3, [r8]
 80027ea:	2b6c      	cmp	r3, #108	; 0x6c
 80027ec:	f000 85d5 	beq.w	800339a <_vfprintf_r+0x133a>
 80027f0:	9807      	ldr	r0, [sp, #28]
 80027f2:	f040 0010 	orr.w	r0, r0, #16
 80027f6:	9007      	str	r0, [sp, #28]
 80027f8:	e4a6      	b.n	8002148 <_vfprintf_r+0xe8>
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	f040 879f 	bne.w	800373e <_vfprintf_r+0x16de>
 8002800:	9b07      	ldr	r3, [sp, #28]
 8002802:	069f      	lsls	r7, r3, #26
 8002804:	f140 84e4 	bpl.w	80031d0 <_vfprintf_r+0x1170>
 8002808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800280a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	17cd      	asrs	r5, r1, #31
 8002810:	4608      	mov	r0, r1
 8002812:	3204      	adds	r2, #4
 8002814:	4629      	mov	r1, r5
 8002816:	920e      	str	r2, [sp, #56]	; 0x38
 8002818:	e9c3 0100 	strd	r0, r1, [r3]
 800281c:	e461      	b.n	80020e2 <_vfprintf_r+0x82>
 800281e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	930c      	str	r3, [sp, #48]	; 0x30
 8002824:	4618      	mov	r0, r3
 8002826:	2800      	cmp	r0, #0
 8002828:	4623      	mov	r3, r4
 800282a:	f103 0304 	add.w	r3, r3, #4
 800282e:	f6ff aced 	blt.w	800220c <_vfprintf_r+0x1ac>
 8002832:	930e      	str	r3, [sp, #56]	; 0x38
 8002834:	f898 3000 	ldrb.w	r3, [r8]
 8002838:	e486      	b.n	8002148 <_vfprintf_r+0xe8>
 800283a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800283e:	2300      	movs	r3, #0
 8002840:	461c      	mov	r4, r3
 8002842:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002846:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800284a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800284e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002852:	2809      	cmp	r0, #9
 8002854:	d9f5      	bls.n	8002842 <_vfprintf_r+0x7e2>
 8002856:	940c      	str	r4, [sp, #48]	; 0x30
 8002858:	e478      	b.n	800214c <_vfprintf_r+0xec>
 800285a:	9311      	str	r3, [sp, #68]	; 0x44
 800285c:	46ab      	mov	fp, r5
 800285e:	2a00      	cmp	r2, #0
 8002860:	f040 8769 	bne.w	8003736 <_vfprintf_r+0x16d6>
 8002864:	9b07      	ldr	r3, [sp, #28]
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	9307      	str	r3, [sp, #28]
 800286c:	9b07      	ldr	r3, [sp, #28]
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	d48a      	bmi.n	8002788 <_vfprintf_r+0x728>
 8002872:	9b07      	ldr	r3, [sp, #28]
 8002874:	06df      	lsls	r7, r3, #27
 8002876:	f100 8294 	bmi.w	8002da2 <_vfprintf_r+0xd42>
 800287a:	9b07      	ldr	r3, [sp, #28]
 800287c:	065e      	lsls	r6, r3, #25
 800287e:	f140 8290 	bpl.w	8002da2 <_vfprintf_r+0xd42>
 8002882:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002884:	f9b1 4000 	ldrsh.w	r4, [r1]
 8002888:	3104      	adds	r1, #4
 800288a:	17e5      	asrs	r5, r4, #31
 800288c:	4622      	mov	r2, r4
 800288e:	462b      	mov	r3, r5
 8002890:	910e      	str	r1, [sp, #56]	; 0x38
 8002892:	e784      	b.n	800279e <_vfprintf_r+0x73e>
 8002894:	9311      	str	r3, [sp, #68]	; 0x44
 8002896:	46ab      	mov	fp, r5
 8002898:	2a00      	cmp	r2, #0
 800289a:	f040 8770 	bne.w	800377e <_vfprintf_r+0x171e>
 800289e:	9b07      	ldr	r3, [sp, #28]
 80028a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80028a2:	071d      	lsls	r5, r3, #28
 80028a4:	f107 0707 	add.w	r7, r7, #7
 80028a8:	f140 8487 	bpl.w	80031ba <_vfprintf_r+0x115a>
 80028ac:	f027 0307 	bic.w	r3, r7, #7
 80028b0:	ed93 7b00 	vldr	d7, [r3]
 80028b4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80028b8:	f103 0208 	add.w	r2, r3, #8
 80028bc:	920e      	str	r2, [sp, #56]	; 0x38
 80028be:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80028c2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80028c6:	911a      	str	r1, [sp, #104]	; 0x68
 80028c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80028ca:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80028ce:	f04f 32ff 	mov.w	r2, #4294967295
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	4bb5      	ldr	r3, [pc, #724]	; (8002bac <_vfprintf_r+0xb4c>)
 80028d8:	f005 ffca 	bl	8008870 <__aeabi_dcmpun>
 80028dc:	2800      	cmp	r0, #0
 80028de:	f040 83eb 	bne.w	80030b8 <_vfprintf_r+0x1058>
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295
 80028e6:	4bb1      	ldr	r3, [pc, #708]	; (8002bac <_vfprintf_r+0xb4c>)
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f005 ffa2 	bl	8008834 <__aeabi_dcmple>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	f040 83e1 	bne.w	80030b8 <_vfprintf_r+0x1058>
 80028f6:	2200      	movs	r2, #0
 80028f8:	2300      	movs	r3, #0
 80028fa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80028fe:	f005 ff8f 	bl	8008820 <__aeabi_dcmplt>
 8002902:	2800      	cmp	r0, #0
 8002904:	f040 864a 	bne.w	800359c <_vfprintf_r+0x153c>
 8002908:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800290c:	4ea8      	ldr	r6, [pc, #672]	; (8002bb0 <_vfprintf_r+0xb50>)
 800290e:	4ba9      	ldr	r3, [pc, #676]	; (8002bb4 <_vfprintf_r+0xb54>)
 8002910:	9907      	ldr	r1, [sp, #28]
 8002912:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002916:	9107      	str	r1, [sp, #28]
 8002918:	9911      	ldr	r1, [sp, #68]	; 0x44
 800291a:	2203      	movs	r2, #3
 800291c:	f04f 0b00 	mov.w	fp, #0
 8002920:	9209      	str	r2, [sp, #36]	; 0x24
 8002922:	2947      	cmp	r1, #71	; 0x47
 8002924:	bfd8      	it	le
 8002926:	461e      	movle	r6, r3
 8002928:	920d      	str	r2, [sp, #52]	; 0x34
 800292a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800292e:	e5b1      	b.n	8002494 <_vfprintf_r+0x434>
 8002930:	9b07      	ldr	r3, [sp, #28]
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	9307      	str	r3, [sp, #28]
 8002938:	f898 3000 	ldrb.w	r3, [r8]
 800293c:	e404      	b.n	8002148 <_vfprintf_r+0xe8>
 800293e:	9311      	str	r3, [sp, #68]	; 0x44
 8002940:	46ab      	mov	fp, r5
 8002942:	2a00      	cmp	r2, #0
 8002944:	f43f ad67 	beq.w	8002416 <_vfprintf_r+0x3b6>
 8002948:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800294c:	e563      	b.n	8002416 <_vfprintf_r+0x3b6>
 800294e:	9311      	str	r3, [sp, #68]	; 0x44
 8002950:	46ab      	mov	fp, r5
 8002952:	2a00      	cmp	r2, #0
 8002954:	f040 870f 	bne.w	8003776 <_vfprintf_r+0x1716>
 8002958:	9b07      	ldr	r3, [sp, #28]
 800295a:	4897      	ldr	r0, [pc, #604]	; (8002bb8 <_vfprintf_r+0xb58>)
 800295c:	069c      	lsls	r4, r3, #26
 800295e:	f53f aeba 	bmi.w	80026d6 <_vfprintf_r+0x676>
 8002962:	9b07      	ldr	r3, [sp, #28]
 8002964:	06d9      	lsls	r1, r3, #27
 8002966:	f140 8398 	bpl.w	800309a <_vfprintf_r+0x103a>
 800296a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800296c:	4613      	mov	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	6814      	ldr	r4, [r2, #0]
 8002972:	930e      	str	r3, [sp, #56]	; 0x38
 8002974:	2500      	movs	r5, #0
 8002976:	e6b7      	b.n	80026e8 <_vfprintf_r+0x688>
 8002978:	f898 3000 	ldrb.w	r3, [r8]
 800297c:	2900      	cmp	r1, #0
 800297e:	f47f abe3 	bne.w	8002148 <_vfprintf_r+0xe8>
 8002982:	2201      	movs	r2, #1
 8002984:	2120      	movs	r1, #32
 8002986:	f7ff bbdf 	b.w	8002148 <_vfprintf_r+0xe8>
 800298a:	9b07      	ldr	r3, [sp, #28]
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	9307      	str	r3, [sp, #28]
 8002992:	f898 3000 	ldrb.w	r3, [r8]
 8002996:	f7ff bbd7 	b.w	8002148 <_vfprintf_r+0xe8>
 800299a:	9b07      	ldr	r3, [sp, #28]
 800299c:	f043 0320 	orr.w	r3, r3, #32
 80029a0:	9307      	str	r3, [sp, #28]
 80029a2:	f898 3000 	ldrb.w	r3, [r8]
 80029a6:	f7ff bbcf 	b.w	8002148 <_vfprintf_r+0xe8>
 80029aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029ac:	9311      	str	r3, [sp, #68]	; 0x44
 80029ae:	6816      	ldr	r6, [r2, #0]
 80029b0:	2400      	movs	r4, #0
 80029b2:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 80029b6:	1d17      	adds	r7, r2, #4
 80029b8:	2e00      	cmp	r6, #0
 80029ba:	f000 85b7 	beq.w	800352c <_vfprintf_r+0x14cc>
 80029be:	2d00      	cmp	r5, #0
 80029c0:	f2c0 8502 	blt.w	80033c8 <_vfprintf_r+0x1368>
 80029c4:	462a      	mov	r2, r5
 80029c6:	4621      	mov	r1, r4
 80029c8:	4630      	mov	r0, r6
 80029ca:	f002 feb1 	bl	8005730 <memchr>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	f000 861c 	beq.w	800360c <_vfprintf_r+0x15ac>
 80029d4:	1b83      	subs	r3, r0, r6
 80029d6:	930d      	str	r3, [sp, #52]	; 0x34
 80029d8:	46a3      	mov	fp, r4
 80029da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029de:	970e      	str	r7, [sp, #56]	; 0x38
 80029e0:	9309      	str	r3, [sp, #36]	; 0x24
 80029e2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80029e6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80029ea:	e553      	b.n	8002494 <_vfprintf_r+0x434>
 80029ec:	f898 3000 	ldrb.w	r3, [r8]
 80029f0:	2201      	movs	r2, #1
 80029f2:	212b      	movs	r1, #43	; 0x2b
 80029f4:	f7ff bba8 	b.w	8002148 <_vfprintf_r+0xe8>
 80029f8:	486f      	ldr	r0, [pc, #444]	; (8002bb8 <_vfprintf_r+0xb58>)
 80029fa:	9211      	str	r2, [sp, #68]	; 0x44
 80029fc:	f1bb 0f00 	cmp.w	fp, #0
 8002a00:	f040 8173 	bne.w	8002cea <_vfprintf_r+0xc8a>
 8002a04:	465f      	mov	r7, fp
 8002a06:	e6e1      	b.n	80027cc <_vfprintf_r+0x76c>
 8002a08:	9311      	str	r3, [sp, #68]	; 0x44
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	f040 86ab 	bne.w	8003766 <_vfprintf_r+0x1706>
 8002a10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	f43f ac4d 	beq.w	80022b2 <_vfprintf_r+0x252>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	461f      	mov	r7, r3
 8002a1e:	9109      	str	r1, [sp, #36]	; 0x24
 8002a20:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8002a24:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002a28:	469b      	mov	fp, r3
 8002a2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a2c:	910d      	str	r1, [sp, #52]	; 0x34
 8002a2e:	ae2a      	add	r6, sp, #168	; 0xa8
 8002a30:	e534      	b.n	800249c <_vfprintf_r+0x43c>
 8002a32:	f1bb 0f00 	cmp.w	fp, #0
 8002a36:	f000 85da 	beq.w	80035ee <_vfprintf_r+0x158e>
 8002a3a:	2700      	movs	r7, #0
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	2500      	movs	r5, #0
 8002a40:	e475      	b.n	800232e <_vfprintf_r+0x2ce>
 8002a42:	485d      	ldr	r0, [pc, #372]	; (8002bb8 <_vfprintf_r+0xb58>)
 8002a44:	9307      	str	r3, [sp, #28]
 8002a46:	9211      	str	r2, [sp, #68]	; 0x44
 8002a48:	ea54 0305 	orrs.w	r3, r4, r5
 8002a4c:	970e      	str	r7, [sp, #56]	; 0x38
 8002a4e:	f04f 0700 	mov.w	r7, #0
 8002a52:	f47f ae67 	bne.w	8002724 <_vfprintf_r+0x6c4>
 8002a56:	2400      	movs	r4, #0
 8002a58:	2500      	movs	r5, #0
 8002a5a:	e663      	b.n	8002724 <_vfprintf_r+0x6c4>
 8002a5c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a5e:	e56d      	b.n	800253c <_vfprintf_r+0x4dc>
 8002a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a62:	2b65      	cmp	r3, #101	; 0x65
 8002a64:	f340 80ae 	ble.w	8002bc4 <_vfprintf_r+0xb64>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002a70:	f005 fecc 	bl	800880c <__aeabi_dcmpeq>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	f000 813a 	beq.w	8002cee <_vfprintf_r+0xc8e>
 8002a7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <_vfprintf_r+0xb5c>)
 8002a7e:	f8c9 2000 	str.w	r2, [r9]
 8002a82:	3301      	adds	r3, #1
 8002a84:	3401      	adds	r4, #1
 8002a86:	2201      	movs	r2, #1
 8002a88:	2b07      	cmp	r3, #7
 8002a8a:	9429      	str	r4, [sp, #164]	; 0xa4
 8002a8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a8e:	f8c9 2004 	str.w	r2, [r9, #4]
 8002a92:	f300 83ce 	bgt.w	8003232 <_vfprintf_r+0x11d2>
 8002a96:	f109 0908 	add.w	r9, r9, #8
 8002a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	db03      	blt.n	8002aaa <_vfprintf_r+0xa4a>
 8002aa2:	9b07      	ldr	r3, [sp, #28]
 8002aa4:	07d8      	lsls	r0, r3, #31
 8002aa6:	f57f adb9 	bpl.w	800261c <_vfprintf_r+0x5bc>
 8002aaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002aac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002aae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002ab0:	f8c9 2000 	str.w	r2, [r9]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	440c      	add	r4, r1
 8002ab8:	2b07      	cmp	r3, #7
 8002aba:	9429      	str	r4, [sp, #164]	; 0xa4
 8002abc:	f8c9 1004 	str.w	r1, [r9, #4]
 8002ac0:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ac2:	f300 8474 	bgt.w	80033ae <_vfprintf_r+0x134e>
 8002ac6:	f109 0908 	add.w	r9, r9, #8
 8002aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002acc:	1e5d      	subs	r5, r3, #1
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	f77f ada4 	ble.w	800261c <_vfprintf_r+0x5bc>
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <_vfprintf_r+0xb60>)
 8002ad6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ad8:	920f      	str	r2, [sp, #60]	; 0x3c
 8002ada:	2d10      	cmp	r5, #16
 8002adc:	f340 81b4 	ble.w	8002e48 <_vfprintf_r+0xde8>
 8002ae0:	2610      	movs	r6, #16
 8002ae2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002ae4:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002ae8:	e005      	b.n	8002af6 <_vfprintf_r+0xa96>
 8002aea:	f109 0908 	add.w	r9, r9, #8
 8002aee:	3d10      	subs	r5, #16
 8002af0:	2d10      	cmp	r5, #16
 8002af2:	f340 81a9 	ble.w	8002e48 <_vfprintf_r+0xde8>
 8002af6:	3301      	adds	r3, #1
 8002af8:	3410      	adds	r4, #16
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	9429      	str	r4, [sp, #164]	; 0xa4
 8002afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b00:	f8c9 a000 	str.w	sl, [r9]
 8002b04:	f8c9 6004 	str.w	r6, [r9, #4]
 8002b08:	ddef      	ble.n	8002aea <_vfprintf_r+0xa8a>
 8002b0a:	aa27      	add	r2, sp, #156	; 0x9c
 8002b0c:	4659      	mov	r1, fp
 8002b0e:	4638      	mov	r0, r7
 8002b10:	f004 ffd4 	bl	8007abc <__sprint_r>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	f47f abd3 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002b1a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002b1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002b1e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002b22:	e7e4      	b.n	8002aee <_vfprintf_r+0xa8e>
 8002b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b28:	1a9f      	subs	r7, r3, r2
 8002b2a:	2f00      	cmp	r7, #0
 8002b2c:	f77f ad2a 	ble.w	8002584 <_vfprintf_r+0x524>
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <_vfprintf_r+0xb60>)
 8002b32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002b34:	920f      	str	r2, [sp, #60]	; 0x3c
 8002b36:	2f10      	cmp	r7, #16
 8002b38:	dd2b      	ble.n	8002b92 <_vfprintf_r+0xb32>
 8002b3a:	464a      	mov	r2, r9
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	46b9      	mov	r9, r7
 8002b40:	2510      	movs	r5, #16
 8002b42:	4637      	mov	r7, r6
 8002b44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002b46:	9e08      	ldr	r6, [sp, #32]
 8002b48:	e006      	b.n	8002b58 <_vfprintf_r+0xaf8>
 8002b4a:	f1a9 0910 	sub.w	r9, r9, #16
 8002b4e:	f1b9 0f10 	cmp.w	r9, #16
 8002b52:	f102 0208 	add.w	r2, r2, #8
 8002b56:	dd18      	ble.n	8002b8a <_vfprintf_r+0xb2a>
 8002b58:	3301      	adds	r3, #1
 8002b5a:	3110      	adds	r1, #16
 8002b5c:	2b07      	cmp	r3, #7
 8002b5e:	9129      	str	r1, [sp, #164]	; 0xa4
 8002b60:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b62:	f8c2 a000 	str.w	sl, [r2]
 8002b66:	6055      	str	r5, [r2, #4]
 8002b68:	ddef      	ble.n	8002b4a <_vfprintf_r+0xaea>
 8002b6a:	aa27      	add	r2, sp, #156	; 0x9c
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f004 ffa4 	bl	8007abc <__sprint_r>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f47f aba3 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002b7a:	f1a9 0910 	sub.w	r9, r9, #16
 8002b7e:	f1b9 0f10 	cmp.w	r9, #16
 8002b82:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002b84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002b86:	aa34      	add	r2, sp, #208	; 0xd0
 8002b88:	dce6      	bgt.n	8002b58 <_vfprintf_r+0xaf8>
 8002b8a:	463e      	mov	r6, r7
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	464f      	mov	r7, r9
 8002b90:	4691      	mov	r9, r2
 8002b92:	3301      	adds	r3, #1
 8002b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b96:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b98:	443c      	add	r4, r7
 8002b9a:	2b07      	cmp	r3, #7
 8002b9c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002b9e:	e889 0084 	stmia.w	r9, {r2, r7}
 8002ba2:	f300 822b 	bgt.w	8002ffc <_vfprintf_r+0xf9c>
 8002ba6:	f109 0908 	add.w	r9, r9, #8
 8002baa:	e4eb      	b.n	8002584 <_vfprintf_r+0x524>
 8002bac:	7fefffff 	.word	0x7fefffff
 8002bb0:	08008d60 	.word	0x08008d60
 8002bb4:	08008d5c 	.word	0x08008d5c
 8002bb8:	08008d80 	.word	0x08008d80
 8002bbc:	08008d9c 	.word	0x08008d9c
 8002bc0:	08008d4c 	.word	0x08008d4c
 8002bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002bc6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f340 81d0 	ble.w	8002f6e <_vfprintf_r+0xf0e>
 8002bce:	3501      	adds	r5, #1
 8002bd0:	3401      	adds	r4, #1
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2d07      	cmp	r5, #7
 8002bd6:	9429      	str	r4, [sp, #164]	; 0xa4
 8002bd8:	9528      	str	r5, [sp, #160]	; 0xa0
 8002bda:	f8c9 6000 	str.w	r6, [r9]
 8002bde:	f8c9 3004 	str.w	r3, [r9, #4]
 8002be2:	f300 81e1 	bgt.w	8002fa8 <_vfprintf_r+0xf48>
 8002be6:	f109 0908 	add.w	r9, r9, #8
 8002bea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002bec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002bee:	f8c9 3000 	str.w	r3, [r9]
 8002bf2:	3501      	adds	r5, #1
 8002bf4:	4414      	add	r4, r2
 8002bf6:	2d07      	cmp	r5, #7
 8002bf8:	9429      	str	r4, [sp, #164]	; 0xa4
 8002bfa:	9528      	str	r5, [sp, #160]	; 0xa0
 8002bfc:	f8c9 2004 	str.w	r2, [r9, #4]
 8002c00:	f300 81df 	bgt.w	8002fc2 <_vfprintf_r+0xf62>
 8002c04:	f109 0908 	add.w	r9, r9, #8
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002c10:	f005 fdfc 	bl	800880c <__aeabi_dcmpeq>
 8002c14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c16:	2800      	cmp	r0, #0
 8002c18:	f040 80cc 	bne.w	8002db4 <_vfprintf_r+0xd54>
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	3501      	adds	r5, #1
 8002c20:	3601      	adds	r6, #1
 8002c22:	441c      	add	r4, r3
 8002c24:	2d07      	cmp	r5, #7
 8002c26:	9528      	str	r5, [sp, #160]	; 0xa0
 8002c28:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c2a:	f8c9 6000 	str.w	r6, [r9]
 8002c2e:	f8c9 3004 	str.w	r3, [r9, #4]
 8002c32:	f300 81ac 	bgt.w	8002f8e <_vfprintf_r+0xf2e>
 8002c36:	f109 0908 	add.w	r9, r9, #8
 8002c3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002c3c:	f8c9 2004 	str.w	r2, [r9, #4]
 8002c40:	3501      	adds	r5, #1
 8002c42:	4414      	add	r4, r2
 8002c44:	ab23      	add	r3, sp, #140	; 0x8c
 8002c46:	2d07      	cmp	r5, #7
 8002c48:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c4a:	9528      	str	r5, [sp, #160]	; 0xa0
 8002c4c:	f8c9 3000 	str.w	r3, [r9]
 8002c50:	f77f ace2 	ble.w	8002618 <_vfprintf_r+0x5b8>
 8002c54:	aa27      	add	r2, sp, #156	; 0x9c
 8002c56:	9908      	ldr	r1, [sp, #32]
 8002c58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c5a:	f004 ff2f 	bl	8007abc <__sprint_r>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	f47f ab2e 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002c64:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002c66:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002c6a:	e4d7      	b.n	800261c <_vfprintf_r+0x5bc>
 8002c6c:	aa27      	add	r2, sp, #156	; 0x9c
 8002c6e:	9908      	ldr	r1, [sp, #32]
 8002c70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c72:	f004 ff23 	bl	8007abc <__sprint_r>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	f43f ad1e 	beq.w	80026b8 <_vfprintf_r+0x658>
 8002c7c:	f7ff bb20 	b.w	80022c0 <_vfprintf_r+0x260>
 8002c80:	aa27      	add	r2, sp, #156	; 0x9c
 8002c82:	9908      	ldr	r1, [sp, #32]
 8002c84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c86:	f004 ff19 	bl	8007abc <__sprint_r>
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	f47f ab18 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002c90:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002c92:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002c96:	e4ae      	b.n	80025f6 <_vfprintf_r+0x596>
 8002c98:	aa27      	add	r2, sp, #156	; 0x9c
 8002c9a:	9908      	ldr	r1, [sp, #32]
 8002c9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c9e:	f004 ff0d 	bl	8007abc <__sprint_r>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	f47f ab0c 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002ca8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002caa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002cae:	e455      	b.n	800255c <_vfprintf_r+0x4fc>
 8002cb0:	aa27      	add	r2, sp, #156	; 0x9c
 8002cb2:	9908      	ldr	r1, [sp, #32]
 8002cb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cb6:	f004 ff01 	bl	8007abc <__sprint_r>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	f47f ab00 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002cc0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002cc2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002cc6:	e459      	b.n	800257c <_vfprintf_r+0x51c>
 8002cc8:	f1bb 0f00 	cmp.w	fp, #0
 8002ccc:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002cd0:	f2c0 830d 	blt.w	80032ee <_vfprintf_r+0x128e>
 8002cd4:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002cd8:	9307      	str	r3, [sp, #28]
 8002cda:	ea54 0305 	orrs.w	r3, r4, r5
 8002cde:	f47f ad21 	bne.w	8002724 <_vfprintf_r+0x6c4>
 8002ce2:	f1bb 0f00 	cmp.w	fp, #0
 8002ce6:	f43f ae8d 	beq.w	8002a04 <_vfprintf_r+0x9a4>
 8002cea:	2700      	movs	r7, #0
 8002cec:	e6b3      	b.n	8002a56 <_vfprintf_r+0x9f6>
 8002cee:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002cf0:	2d00      	cmp	r5, #0
 8002cf2:	f340 82aa 	ble.w	800324a <_vfprintf_r+0x11ea>
 8002cf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002cf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	bfa8      	it	ge
 8002cfe:	4613      	movge	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	461d      	mov	r5, r3
 8002d04:	dd0d      	ble.n	8002d22 <_vfprintf_r+0xcc2>
 8002d06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d08:	f8c9 6000 	str.w	r6, [r9]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	442c      	add	r4, r5
 8002d10:	2b07      	cmp	r3, #7
 8002d12:	9429      	str	r4, [sp, #164]	; 0xa4
 8002d14:	f8c9 5004 	str.w	r5, [r9, #4]
 8002d18:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d1a:	f300 8387 	bgt.w	800342c <_vfprintf_r+0x13cc>
 8002d1e:	f109 0908 	add.w	r9, r9, #8
 8002d22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d24:	2d00      	cmp	r5, #0
 8002d26:	bfa8      	it	ge
 8002d28:	1b5b      	subge	r3, r3, r5
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	461d      	mov	r5, r3
 8002d2e:	f340 80be 	ble.w	8002eae <_vfprintf_r+0xe4e>
 8002d32:	4ab9      	ldr	r2, [pc, #740]	; (8003018 <_vfprintf_r+0xfb8>)
 8002d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d36:	920f      	str	r2, [sp, #60]	; 0x3c
 8002d38:	2d10      	cmp	r5, #16
 8002d3a:	f340 826d 	ble.w	8003218 <_vfprintf_r+0x11b8>
 8002d3e:	4622      	mov	r2, r4
 8002d40:	2710      	movs	r7, #16
 8002d42:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002d46:	9c08      	ldr	r4, [sp, #32]
 8002d48:	e005      	b.n	8002d56 <_vfprintf_r+0xcf6>
 8002d4a:	f109 0908 	add.w	r9, r9, #8
 8002d4e:	3d10      	subs	r5, #16
 8002d50:	2d10      	cmp	r5, #16
 8002d52:	f340 8260 	ble.w	8003216 <_vfprintf_r+0x11b6>
 8002d56:	3301      	adds	r3, #1
 8002d58:	3210      	adds	r2, #16
 8002d5a:	2b07      	cmp	r3, #7
 8002d5c:	9229      	str	r2, [sp, #164]	; 0xa4
 8002d5e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d60:	f8c9 a000 	str.w	sl, [r9]
 8002d64:	f8c9 7004 	str.w	r7, [r9, #4]
 8002d68:	ddef      	ble.n	8002d4a <_vfprintf_r+0xcea>
 8002d6a:	aa27      	add	r2, sp, #156	; 0x9c
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	4658      	mov	r0, fp
 8002d70:	f004 fea4 	bl	8007abc <__sprint_r>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	f47f aaa3 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002d7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002d7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d7e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d82:	e7e4      	b.n	8002d4e <_vfprintf_r+0xcee>
 8002d84:	aa27      	add	r2, sp, #156	; 0x9c
 8002d86:	9908      	ldr	r1, [sp, #32]
 8002d88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d8a:	f004 fe97 	bl	8007abc <__sprint_r>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	f47f aa96 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002d94:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002d98:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002d9a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d9e:	f7ff bbcd 	b.w	800253c <_vfprintf_r+0x4dc>
 8002da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002da4:	6814      	ldr	r4, [r2, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	17e5      	asrs	r5, r4, #31
 8002dac:	930e      	str	r3, [sp, #56]	; 0x38
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	e4f4      	b.n	800279e <_vfprintf_r+0x73e>
 8002db4:	1e5e      	subs	r6, r3, #1
 8002db6:	2e00      	cmp	r6, #0
 8002db8:	f77f af3f 	ble.w	8002c3a <_vfprintf_r+0xbda>
 8002dbc:	4b96      	ldr	r3, [pc, #600]	; (8003018 <_vfprintf_r+0xfb8>)
 8002dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8002dc0:	2e10      	cmp	r6, #16
 8002dc2:	f340 8110 	ble.w	8002fe6 <_vfprintf_r+0xf86>
 8002dc6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8002dca:	2710      	movs	r7, #16
 8002dcc:	46b0      	mov	r8, r6
 8002dce:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002dd2:	9e08      	ldr	r6, [sp, #32]
 8002dd4:	e007      	b.n	8002de6 <_vfprintf_r+0xd86>
 8002dd6:	f109 0908 	add.w	r9, r9, #8
 8002dda:	f1a8 0810 	sub.w	r8, r8, #16
 8002dde:	f1b8 0f10 	cmp.w	r8, #16
 8002de2:	f340 80fd 	ble.w	8002fe0 <_vfprintf_r+0xf80>
 8002de6:	3501      	adds	r5, #1
 8002de8:	3410      	adds	r4, #16
 8002dea:	2d07      	cmp	r5, #7
 8002dec:	9429      	str	r4, [sp, #164]	; 0xa4
 8002dee:	9528      	str	r5, [sp, #160]	; 0xa0
 8002df0:	f8c9 a000 	str.w	sl, [r9]
 8002df4:	f8c9 7004 	str.w	r7, [r9, #4]
 8002df8:	dded      	ble.n	8002dd6 <_vfprintf_r+0xd76>
 8002dfa:	aa27      	add	r2, sp, #156	; 0x9c
 8002dfc:	4631      	mov	r1, r6
 8002dfe:	4658      	mov	r0, fp
 8002e00:	f004 fe5c 	bl	8007abc <__sprint_r>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f47f aa5b 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002e0a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002e0c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002e0e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002e12:	e7e2      	b.n	8002dda <_vfprintf_r+0xd7a>
 8002e14:	9907      	ldr	r1, [sp, #28]
 8002e16:	f011 0210 	ands.w	r2, r1, #16
 8002e1a:	d020      	beq.n	8002e5e <_vfprintf_r+0xdfe>
 8002e1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002e1e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002e22:	f1bb 0f00 	cmp.w	fp, #0
 8002e26:	6804      	ldr	r4, [r0, #0]
 8002e28:	f100 0704 	add.w	r7, r0, #4
 8002e2c:	f04f 0500 	mov.w	r5, #0
 8002e30:	db26      	blt.n	8002e80 <_vfprintf_r+0xe20>
 8002e32:	460a      	mov	r2, r1
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	9207      	str	r2, [sp, #28]
 8002e3a:	ea54 0205 	orrs.w	r2, r4, r5
 8002e3e:	970e      	str	r7, [sp, #56]	; 0x38
 8002e40:	461f      	mov	r7, r3
 8002e42:	f47f ab03 	bne.w	800244c <_vfprintf_r+0x3ec>
 8002e46:	e4bd      	b.n	80027c4 <_vfprintf_r+0x764>
 8002e48:	3301      	adds	r3, #1
 8002e4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e4e:	442c      	add	r4, r5
 8002e50:	2b07      	cmp	r3, #7
 8002e52:	9429      	str	r4, [sp, #164]	; 0xa4
 8002e54:	e889 0024 	stmia.w	r9, {r2, r5}
 8002e58:	f77f abde 	ble.w	8002618 <_vfprintf_r+0x5b8>
 8002e5c:	e6fa      	b.n	8002c54 <_vfprintf_r+0xbf4>
 8002e5e:	9907      	ldr	r1, [sp, #28]
 8002e60:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8002e64:	f040 824a 	bne.w	80032fc <_vfprintf_r+0x129c>
 8002e68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002e6a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002e6e:	f1bb 0f00 	cmp.w	fp, #0
 8002e72:	680c      	ldr	r4, [r1, #0]
 8002e74:	f101 0704 	add.w	r7, r1, #4
 8002e78:	f04f 0500 	mov.w	r5, #0
 8002e7c:	f280 811a 	bge.w	80030b4 <_vfprintf_r+0x1054>
 8002e80:	970e      	str	r7, [sp, #56]	; 0x38
 8002e82:	461f      	mov	r7, r3
 8002e84:	ea54 0305 	orrs.w	r3, r4, r5
 8002e88:	f47f aae0 	bne.w	800244c <_vfprintf_r+0x3ec>
 8002e8c:	ae44      	add	r6, sp, #272	; 0x110
 8002e8e:	3430      	adds	r4, #48	; 0x30
 8002e90:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8002e94:	f7ff baf4 	b.w	8002480 <_vfprintf_r+0x420>
 8002e98:	aa27      	add	r2, sp, #156	; 0x9c
 8002e9a:	9908      	ldr	r1, [sp, #32]
 8002e9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e9e:	f004 fe0d 	bl	8007abc <__sprint_r>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	f47f aa0c 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002ea8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002eaa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002eae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002eb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eb2:	4432      	add	r2, r6
 8002eb4:	4617      	mov	r7, r2
 8002eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	db47      	blt.n	8002f4c <_vfprintf_r+0xeec>
 8002ebc:	9a07      	ldr	r2, [sp, #28]
 8002ebe:	07d2      	lsls	r2, r2, #31
 8002ec0:	d444      	bmi.n	8002f4c <_vfprintf_r+0xeec>
 8002ec2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002ec4:	440e      	add	r6, r1
 8002ec6:	1bf5      	subs	r5, r6, r7
 8002ec8:	1acb      	subs	r3, r1, r3
 8002eca:	429d      	cmp	r5, r3
 8002ecc:	bfa8      	it	ge
 8002ece:	461d      	movge	r5, r3
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	462e      	mov	r6, r5
 8002ed4:	dd0d      	ble.n	8002ef2 <_vfprintf_r+0xe92>
 8002ed6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002ed8:	f8c9 7000 	str.w	r7, [r9]
 8002edc:	3201      	adds	r2, #1
 8002ede:	442c      	add	r4, r5
 8002ee0:	2a07      	cmp	r2, #7
 8002ee2:	9429      	str	r4, [sp, #164]	; 0xa4
 8002ee4:	f8c9 5004 	str.w	r5, [r9, #4]
 8002ee8:	9228      	str	r2, [sp, #160]	; 0xa0
 8002eea:	f300 832e 	bgt.w	800354a <_vfprintf_r+0x14ea>
 8002eee:	f109 0908 	add.w	r9, r9, #8
 8002ef2:	2e00      	cmp	r6, #0
 8002ef4:	bfac      	ite	ge
 8002ef6:	1b9d      	subge	r5, r3, r6
 8002ef8:	461d      	movlt	r5, r3
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	f77f ab8e 	ble.w	800261c <_vfprintf_r+0x5bc>
 8002f00:	4a45      	ldr	r2, [pc, #276]	; (8003018 <_vfprintf_r+0xfb8>)
 8002f02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f04:	920f      	str	r2, [sp, #60]	; 0x3c
 8002f06:	2d10      	cmp	r5, #16
 8002f08:	dd9e      	ble.n	8002e48 <_vfprintf_r+0xde8>
 8002f0a:	2610      	movs	r6, #16
 8002f0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002f0e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002f12:	e004      	b.n	8002f1e <_vfprintf_r+0xebe>
 8002f14:	f109 0908 	add.w	r9, r9, #8
 8002f18:	3d10      	subs	r5, #16
 8002f1a:	2d10      	cmp	r5, #16
 8002f1c:	dd94      	ble.n	8002e48 <_vfprintf_r+0xde8>
 8002f1e:	3301      	adds	r3, #1
 8002f20:	3410      	adds	r4, #16
 8002f22:	2b07      	cmp	r3, #7
 8002f24:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f26:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f28:	f8c9 a000 	str.w	sl, [r9]
 8002f2c:	f8c9 6004 	str.w	r6, [r9, #4]
 8002f30:	ddf0      	ble.n	8002f14 <_vfprintf_r+0xeb4>
 8002f32:	aa27      	add	r2, sp, #156	; 0x9c
 8002f34:	4659      	mov	r1, fp
 8002f36:	4638      	mov	r0, r7
 8002f38:	f004 fdc0 	bl	8007abc <__sprint_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f47f a9bf 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002f42:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002f44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f46:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002f4a:	e7e5      	b.n	8002f18 <_vfprintf_r+0xeb8>
 8002f4c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002f4e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002f50:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002f52:	f8c9 1000 	str.w	r1, [r9]
 8002f56:	3201      	adds	r2, #1
 8002f58:	4404      	add	r4, r0
 8002f5a:	2a07      	cmp	r2, #7
 8002f5c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f5e:	f8c9 0004 	str.w	r0, [r9, #4]
 8002f62:	9228      	str	r2, [sp, #160]	; 0xa0
 8002f64:	f300 82cf 	bgt.w	8003506 <_vfprintf_r+0x14a6>
 8002f68:	f109 0908 	add.w	r9, r9, #8
 8002f6c:	e7a9      	b.n	8002ec2 <_vfprintf_r+0xe62>
 8002f6e:	9b07      	ldr	r3, [sp, #28]
 8002f70:	07df      	lsls	r7, r3, #31
 8002f72:	f53f ae2c 	bmi.w	8002bce <_vfprintf_r+0xb6e>
 8002f76:	3501      	adds	r5, #1
 8002f78:	3401      	adds	r4, #1
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	2d07      	cmp	r5, #7
 8002f7e:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f80:	9528      	str	r5, [sp, #160]	; 0xa0
 8002f82:	f8c9 6000 	str.w	r6, [r9]
 8002f86:	f8c9 3004 	str.w	r3, [r9, #4]
 8002f8a:	f77f ae54 	ble.w	8002c36 <_vfprintf_r+0xbd6>
 8002f8e:	aa27      	add	r2, sp, #156	; 0x9c
 8002f90:	9908      	ldr	r1, [sp, #32]
 8002f92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002f94:	f004 fd92 	bl	8007abc <__sprint_r>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f47f a991 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002f9e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002fa0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002fa2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002fa6:	e648      	b.n	8002c3a <_vfprintf_r+0xbda>
 8002fa8:	aa27      	add	r2, sp, #156	; 0x9c
 8002faa:	9908      	ldr	r1, [sp, #32]
 8002fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fae:	f004 fd85 	bl	8007abc <__sprint_r>
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	f47f a984 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002fb8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002fba:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002fbc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002fc0:	e613      	b.n	8002bea <_vfprintf_r+0xb8a>
 8002fc2:	aa27      	add	r2, sp, #156	; 0x9c
 8002fc4:	9908      	ldr	r1, [sp, #32]
 8002fc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fc8:	f004 fd78 	bl	8007abc <__sprint_r>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	f47f a977 	bne.w	80022c0 <_vfprintf_r+0x260>
 8002fd2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002fd4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002fd6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002fda:	e615      	b.n	8002c08 <_vfprintf_r+0xba8>
 8002fdc:	2400      	movs	r4, #0
 8002fde:	e755      	b.n	8002e8c <_vfprintf_r+0xe2c>
 8002fe0:	4646      	mov	r6, r8
 8002fe2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8002fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fe8:	3501      	adds	r5, #1
 8002fea:	4434      	add	r4, r6
 8002fec:	2d07      	cmp	r5, #7
 8002fee:	9429      	str	r4, [sp, #164]	; 0xa4
 8002ff0:	9528      	str	r5, [sp, #160]	; 0xa0
 8002ff2:	e889 0048 	stmia.w	r9, {r3, r6}
 8002ff6:	f77f ae1e 	ble.w	8002c36 <_vfprintf_r+0xbd6>
 8002ffa:	e7c8      	b.n	8002f8e <_vfprintf_r+0xf2e>
 8002ffc:	aa27      	add	r2, sp, #156	; 0x9c
 8002ffe:	9908      	ldr	r1, [sp, #32]
 8003000:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003002:	f004 fd5b 	bl	8007abc <__sprint_r>
 8003006:	2800      	cmp	r0, #0
 8003008:	f47f a95a 	bne.w	80022c0 <_vfprintf_r+0x260>
 800300c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800300e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003012:	f7ff bab7 	b.w	8002584 <_vfprintf_r+0x524>
 8003016:	bf00      	nop
 8003018:	08008d4c 	.word	0x08008d4c
 800301c:	4264      	negs	r4, r4
 800301e:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8003022:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003026:	f1bb 0f00 	cmp.w	fp, #0
 800302a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800302e:	f6ff aa0d 	blt.w	800244c <_vfprintf_r+0x3ec>
 8003032:	9b07      	ldr	r3, [sp, #28]
 8003034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003038:	9307      	str	r3, [sp, #28]
 800303a:	f7ff ba07 	b.w	800244c <_vfprintf_r+0x3ec>
 800303e:	9907      	ldr	r1, [sp, #28]
 8003040:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8003044:	d017      	beq.n	8003076 <_vfprintf_r+0x1016>
 8003046:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003048:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800304c:	4603      	mov	r3, r0
 800304e:	f1bb 0f00 	cmp.w	fp, #0
 8003052:	f103 0304 	add.w	r3, r3, #4
 8003056:	8804      	ldrh	r4, [r0, #0]
 8003058:	f04f 0500 	mov.w	r5, #0
 800305c:	f2c0 831b 	blt.w	8003696 <_vfprintf_r+0x1636>
 8003060:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003064:	9107      	str	r1, [sp, #28]
 8003066:	ea54 0105 	orrs.w	r1, r4, r5
 800306a:	930e      	str	r3, [sp, #56]	; 0x38
 800306c:	f43f ace1 	beq.w	8002a32 <_vfprintf_r+0x9d2>
 8003070:	4617      	mov	r7, r2
 8003072:	f7ff b95c 	b.w	800232e <_vfprintf_r+0x2ce>
 8003076:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003078:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800307c:	f1bb 0f00 	cmp.w	fp, #0
 8003080:	680c      	ldr	r4, [r1, #0]
 8003082:	f101 0704 	add.w	r7, r1, #4
 8003086:	f04f 0500 	mov.w	r5, #0
 800308a:	db02      	blt.n	8003092 <_vfprintf_r+0x1032>
 800308c:	9a07      	ldr	r2, [sp, #28]
 800308e:	f7ff b9af 	b.w	80023f0 <_vfprintf_r+0x390>
 8003092:	970e      	str	r7, [sp, #56]	; 0x38
 8003094:	2700      	movs	r7, #0
 8003096:	f7ff b94a 	b.w	800232e <_vfprintf_r+0x2ce>
 800309a:	9b07      	ldr	r3, [sp, #28]
 800309c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800309e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030a2:	4613      	mov	r3, r2
 80030a4:	f000 8142 	beq.w	800332c <_vfprintf_r+0x12cc>
 80030a8:	3304      	adds	r3, #4
 80030aa:	8814      	ldrh	r4, [r2, #0]
 80030ac:	930e      	str	r3, [sp, #56]	; 0x38
 80030ae:	2500      	movs	r5, #0
 80030b0:	f7ff bb1a 	b.w	80026e8 <_vfprintf_r+0x688>
 80030b4:	9a07      	ldr	r2, [sp, #28]
 80030b6:	e6bd      	b.n	8002e34 <_vfprintf_r+0xdd4>
 80030b8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	f005 fbd6 	bl	8008870 <__aeabi_dcmpun>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	f040 82e8 	bne.w	800369a <_vfprintf_r+0x163a>
 80030ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030cc:	f1bb 3fff 	cmp.w	fp, #4294967295
 80030d0:	f023 0720 	bic.w	r7, r3, #32
 80030d4:	f000 825f 	beq.w	8003596 <_vfprintf_r+0x1536>
 80030d8:	2f47      	cmp	r7, #71	; 0x47
 80030da:	f000 8158 	beq.w	800338e <_vfprintf_r+0x132e>
 80030de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80030e0:	9a07      	ldr	r2, [sp, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80030ea:	f2c0 825c 	blt.w	80035a6 <_vfprintf_r+0x1546>
 80030ee:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 80030f2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 80030f6:	2300      	movs	r3, #0
 80030f8:	9309      	str	r3, [sp, #36]	; 0x24
 80030fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030fc:	2b66      	cmp	r3, #102	; 0x66
 80030fe:	f000 8233 	beq.w	8003568 <_vfprintf_r+0x1508>
 8003102:	2b46      	cmp	r3, #70	; 0x46
 8003104:	f000 8125 	beq.w	8003352 <_vfprintf_r+0x12f2>
 8003108:	2f45      	cmp	r7, #69	; 0x45
 800310a:	bf0c      	ite	eq
 800310c:	f10b 0501 	addeq.w	r5, fp, #1
 8003110:	465d      	movne	r5, fp
 8003112:	a825      	add	r0, sp, #148	; 0x94
 8003114:	a922      	add	r1, sp, #136	; 0x88
 8003116:	aa21      	add	r2, sp, #132	; 0x84
 8003118:	2302      	movs	r3, #2
 800311a:	9004      	str	r0, [sp, #16]
 800311c:	9202      	str	r2, [sp, #8]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	9501      	str	r5, [sp, #4]
 8003122:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003126:	9103      	str	r1, [sp, #12]
 8003128:	980a      	ldr	r0, [sp, #40]	; 0x28
 800312a:	f000 fc89 	bl	8003a40 <_dtoa_r>
 800312e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003130:	2b67      	cmp	r3, #103	; 0x67
 8003132:	4606      	mov	r6, r0
 8003134:	f040 8275 	bne.w	8003622 <_vfprintf_r+0x15c2>
 8003138:	9b07      	ldr	r3, [sp, #28]
 800313a:	07da      	lsls	r2, r3, #31
 800313c:	f140 8294 	bpl.w	8003668 <_vfprintf_r+0x1608>
 8003140:	1974      	adds	r4, r6, r5
 8003142:	2200      	movs	r2, #0
 8003144:	2300      	movs	r3, #0
 8003146:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800314a:	f005 fb5f 	bl	800880c <__aeabi_dcmpeq>
 800314e:	2800      	cmp	r0, #0
 8003150:	f040 8178 	bne.w	8003444 <_vfprintf_r+0x13e4>
 8003154:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003156:	429c      	cmp	r4, r3
 8003158:	d906      	bls.n	8003168 <_vfprintf_r+0x1108>
 800315a:	2130      	movs	r1, #48	; 0x30
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	9225      	str	r2, [sp, #148]	; 0x94
 8003160:	7019      	strb	r1, [r3, #0]
 8003162:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003164:	429c      	cmp	r4, r3
 8003166:	d8f9      	bhi.n	800315c <_vfprintf_r+0x10fc>
 8003168:	1b9b      	subs	r3, r3, r6
 800316a:	2f47      	cmp	r7, #71	; 0x47
 800316c:	9312      	str	r3, [sp, #72]	; 0x48
 800316e:	f000 8156 	beq.w	800341e <_vfprintf_r+0x13be>
 8003172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003174:	2b65      	cmp	r3, #101	; 0x65
 8003176:	f340 8263 	ble.w	8003640 <_vfprintf_r+0x15e0>
 800317a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800317c:	2b66      	cmp	r3, #102	; 0x66
 800317e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003180:	9313      	str	r3, [sp, #76]	; 0x4c
 8003182:	f000 8226 	beq.w	80035d2 <_vfprintf_r+0x1572>
 8003186:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003188:	9912      	ldr	r1, [sp, #72]	; 0x48
 800318a:	428a      	cmp	r2, r1
 800318c:	f2c0 8214 	blt.w	80035b8 <_vfprintf_r+0x1558>
 8003190:	9b07      	ldr	r3, [sp, #28]
 8003192:	07db      	lsls	r3, r3, #31
 8003194:	f100 826a 	bmi.w	800366c <_vfprintf_r+0x160c>
 8003198:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800319c:	920d      	str	r2, [sp, #52]	; 0x34
 800319e:	2267      	movs	r2, #103	; 0x67
 80031a0:	9211      	str	r2, [sp, #68]	; 0x44
 80031a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	f040 8117 	bne.w	80033d8 <_vfprintf_r+0x1378>
 80031aa:	9309      	str	r3, [sp, #36]	; 0x24
 80031ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031ae:	9307      	str	r3, [sp, #28]
 80031b0:	4693      	mov	fp, r2
 80031b2:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80031b6:	f7ff b96d 	b.w	8002494 <_vfprintf_r+0x434>
 80031ba:	f027 0707 	bic.w	r7, r7, #7
 80031be:	ed97 7b00 	vldr	d7, [r7]
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80031ca:	930e      	str	r3, [sp, #56]	; 0x38
 80031cc:	f7ff bb77 	b.w	80028be <_vfprintf_r+0x85e>
 80031d0:	9b07      	ldr	r3, [sp, #28]
 80031d2:	06de      	lsls	r6, r3, #27
 80031d4:	d40b      	bmi.n	80031ee <_vfprintf_r+0x118e>
 80031d6:	9b07      	ldr	r3, [sp, #28]
 80031d8:	065d      	lsls	r5, r3, #25
 80031da:	d508      	bpl.n	80031ee <_vfprintf_r+0x118e>
 80031dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	3204      	adds	r2, #4
 80031e2:	920e      	str	r2, [sp, #56]	; 0x38
 80031e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	f7fe bf7a 	b.w	80020e2 <_vfprintf_r+0x82>
 80031ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	3204      	adds	r2, #4
 80031f4:	920e      	str	r2, [sp, #56]	; 0x38
 80031f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f7fe bf72 	b.w	80020e2 <_vfprintf_r+0x82>
 80031fe:	2700      	movs	r7, #0
 8003200:	45bb      	cmp	fp, r7
 8003202:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003206:	f6ff ac26 	blt.w	8002a56 <_vfprintf_r+0x9f6>
 800320a:	9b07      	ldr	r3, [sp, #28]
 800320c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003210:	9307      	str	r3, [sp, #28]
 8003212:	f7ff bbf3 	b.w	80029fc <_vfprintf_r+0x99c>
 8003216:	4614      	mov	r4, r2
 8003218:	3301      	adds	r3, #1
 800321a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800321c:	9328      	str	r3, [sp, #160]	; 0xa0
 800321e:	442c      	add	r4, r5
 8003220:	2b07      	cmp	r3, #7
 8003222:	9429      	str	r4, [sp, #164]	; 0xa4
 8003224:	e889 0024 	stmia.w	r9, {r2, r5}
 8003228:	f73f ae36 	bgt.w	8002e98 <_vfprintf_r+0xe38>
 800322c:	f109 0908 	add.w	r9, r9, #8
 8003230:	e63d      	b.n	8002eae <_vfprintf_r+0xe4e>
 8003232:	aa27      	add	r2, sp, #156	; 0x9c
 8003234:	9908      	ldr	r1, [sp, #32]
 8003236:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003238:	f004 fc40 	bl	8007abc <__sprint_r>
 800323c:	2800      	cmp	r0, #0
 800323e:	f47f a83f 	bne.w	80022c0 <_vfprintf_r+0x260>
 8003242:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003244:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003248:	e427      	b.n	8002a9a <_vfprintf_r+0xa3a>
 800324a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800324c:	4ab4      	ldr	r2, [pc, #720]	; (8003520 <_vfprintf_r+0x14c0>)
 800324e:	f8c9 2000 	str.w	r2, [r9]
 8003252:	3301      	adds	r3, #1
 8003254:	3401      	adds	r4, #1
 8003256:	2201      	movs	r2, #1
 8003258:	2b07      	cmp	r3, #7
 800325a:	9429      	str	r4, [sp, #164]	; 0xa4
 800325c:	9328      	str	r3, [sp, #160]	; 0xa0
 800325e:	f8c9 2004 	str.w	r2, [r9, #4]
 8003262:	dc69      	bgt.n	8003338 <_vfprintf_r+0x12d8>
 8003264:	f109 0908 	add.w	r9, r9, #8
 8003268:	b92d      	cbnz	r5, 8003276 <_vfprintf_r+0x1216>
 800326a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800326c:	b91b      	cbnz	r3, 8003276 <_vfprintf_r+0x1216>
 800326e:	9b07      	ldr	r3, [sp, #28]
 8003270:	07d9      	lsls	r1, r3, #31
 8003272:	f57f a9d3 	bpl.w	800261c <_vfprintf_r+0x5bc>
 8003276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003278:	9916      	ldr	r1, [sp, #88]	; 0x58
 800327a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800327c:	f8c9 2000 	str.w	r2, [r9]
 8003280:	3301      	adds	r3, #1
 8003282:	440c      	add	r4, r1
 8003284:	2b07      	cmp	r3, #7
 8003286:	9429      	str	r4, [sp, #164]	; 0xa4
 8003288:	f8c9 1004 	str.w	r1, [r9, #4]
 800328c:	9328      	str	r3, [sp, #160]	; 0xa0
 800328e:	f300 81d9 	bgt.w	8003644 <_vfprintf_r+0x15e4>
 8003292:	f109 0908 	add.w	r9, r9, #8
 8003296:	426d      	negs	r5, r5
 8003298:	2d00      	cmp	r5, #0
 800329a:	f340 80b3 	ble.w	8003404 <_vfprintf_r+0x13a4>
 800329e:	4aa1      	ldr	r2, [pc, #644]	; (8003524 <_vfprintf_r+0x14c4>)
 80032a0:	920f      	str	r2, [sp, #60]	; 0x3c
 80032a2:	2d10      	cmp	r5, #16
 80032a4:	f340 8122 	ble.w	80034ec <_vfprintf_r+0x148c>
 80032a8:	4622      	mov	r2, r4
 80032aa:	2710      	movs	r7, #16
 80032ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80032b0:	9c08      	ldr	r4, [sp, #32]
 80032b2:	e005      	b.n	80032c0 <_vfprintf_r+0x1260>
 80032b4:	f109 0908 	add.w	r9, r9, #8
 80032b8:	3d10      	subs	r5, #16
 80032ba:	2d10      	cmp	r5, #16
 80032bc:	f340 8115 	ble.w	80034ea <_vfprintf_r+0x148a>
 80032c0:	3301      	adds	r3, #1
 80032c2:	3210      	adds	r2, #16
 80032c4:	2b07      	cmp	r3, #7
 80032c6:	9229      	str	r2, [sp, #164]	; 0xa4
 80032c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80032ca:	f8c9 a000 	str.w	sl, [r9]
 80032ce:	f8c9 7004 	str.w	r7, [r9, #4]
 80032d2:	ddef      	ble.n	80032b4 <_vfprintf_r+0x1254>
 80032d4:	aa27      	add	r2, sp, #156	; 0x9c
 80032d6:	4621      	mov	r1, r4
 80032d8:	4658      	mov	r0, fp
 80032da:	f004 fbef 	bl	8007abc <__sprint_r>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f47e afee 	bne.w	80022c0 <_vfprintf_r+0x260>
 80032e4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80032e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032e8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80032ec:	e7e4      	b.n	80032b8 <_vfprintf_r+0x1258>
 80032ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80032f0:	f7ff bbaa 	b.w	8002a48 <_vfprintf_r+0x9e8>
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f7fe bfe8 	b.w	80022cc <_vfprintf_r+0x26c>
 80032fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80032fe:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003302:	4603      	mov	r3, r0
 8003304:	f1bb 0f00 	cmp.w	fp, #0
 8003308:	f103 0304 	add.w	r3, r3, #4
 800330c:	8804      	ldrh	r4, [r0, #0]
 800330e:	f04f 0500 	mov.w	r5, #0
 8003312:	f2c0 81b4 	blt.w	800367e <_vfprintf_r+0x161e>
 8003316:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800331a:	9107      	str	r1, [sp, #28]
 800331c:	ea54 0105 	orrs.w	r1, r4, r5
 8003320:	930e      	str	r3, [sp, #56]	; 0x38
 8003322:	4617      	mov	r7, r2
 8003324:	f47f a892 	bne.w	800244c <_vfprintf_r+0x3ec>
 8003328:	f7ff ba4c 	b.w	80027c4 <_vfprintf_r+0x764>
 800332c:	3304      	adds	r3, #4
 800332e:	6814      	ldr	r4, [r2, #0]
 8003330:	930e      	str	r3, [sp, #56]	; 0x38
 8003332:	2500      	movs	r5, #0
 8003334:	f7ff b9d8 	b.w	80026e8 <_vfprintf_r+0x688>
 8003338:	aa27      	add	r2, sp, #156	; 0x9c
 800333a:	9908      	ldr	r1, [sp, #32]
 800333c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800333e:	f004 fbbd 	bl	8007abc <__sprint_r>
 8003342:	2800      	cmp	r0, #0
 8003344:	f47e afbc 	bne.w	80022c0 <_vfprintf_r+0x260>
 8003348:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800334a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800334c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003350:	e78a      	b.n	8003268 <_vfprintf_r+0x1208>
 8003352:	a825      	add	r0, sp, #148	; 0x94
 8003354:	a922      	add	r1, sp, #136	; 0x88
 8003356:	aa21      	add	r2, sp, #132	; 0x84
 8003358:	2303      	movs	r3, #3
 800335a:	9004      	str	r0, [sp, #16]
 800335c:	9202      	str	r2, [sp, #8]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f8cd b004 	str.w	fp, [sp, #4]
 8003364:	9103      	str	r1, [sp, #12]
 8003366:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800336a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800336c:	f000 fb68 	bl	8003a40 <_dtoa_r>
 8003370:	465d      	mov	r5, fp
 8003372:	4606      	mov	r6, r0
 8003374:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003376:	2b46      	cmp	r3, #70	; 0x46
 8003378:	eb06 0405 	add.w	r4, r6, r5
 800337c:	f47f aee1 	bne.w	8003142 <_vfprintf_r+0x10e2>
 8003380:	7833      	ldrb	r3, [r6, #0]
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	f000 8198 	beq.w	80036b8 <_vfprintf_r+0x1658>
 8003388:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800338a:	442c      	add	r4, r5
 800338c:	e6d9      	b.n	8003142 <_vfprintf_r+0x10e2>
 800338e:	f1bb 0f00 	cmp.w	fp, #0
 8003392:	bf08      	it	eq
 8003394:	f04f 0b01 	moveq.w	fp, #1
 8003398:	e6a1      	b.n	80030de <_vfprintf_r+0x107e>
 800339a:	9b07      	ldr	r3, [sp, #28]
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	9307      	str	r3, [sp, #28]
 80033a2:	f108 0801 	add.w	r8, r8, #1
 80033a6:	f898 3000 	ldrb.w	r3, [r8]
 80033aa:	f7fe becd 	b.w	8002148 <_vfprintf_r+0xe8>
 80033ae:	aa27      	add	r2, sp, #156	; 0x9c
 80033b0:	9908      	ldr	r1, [sp, #32]
 80033b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033b4:	f004 fb82 	bl	8007abc <__sprint_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	f47e af81 	bne.w	80022c0 <_vfprintf_r+0x260>
 80033be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80033c0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80033c4:	f7ff bb81 	b.w	8002aca <_vfprintf_r+0xa6a>
 80033c8:	4630      	mov	r0, r6
 80033ca:	f7fe fdd9 	bl	8001f80 <strlen>
 80033ce:	46a3      	mov	fp, r4
 80033d0:	4603      	mov	r3, r0
 80033d2:	900d      	str	r0, [sp, #52]	; 0x34
 80033d4:	f7ff bb01 	b.w	80029da <_vfprintf_r+0x97a>
 80033d8:	272d      	movs	r7, #45	; 0x2d
 80033da:	9309      	str	r3, [sp, #36]	; 0x24
 80033dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033de:	9307      	str	r3, [sp, #28]
 80033e0:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80033e4:	f04f 0b00 	mov.w	fp, #0
 80033e8:	f7ff b855 	b.w	8002496 <_vfprintf_r+0x436>
 80033ec:	aa27      	add	r2, sp, #156	; 0x9c
 80033ee:	9908      	ldr	r1, [sp, #32]
 80033f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033f2:	f004 fb63 	bl	8007abc <__sprint_r>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	f47e af62 	bne.w	80022c0 <_vfprintf_r+0x260>
 80033fc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80033fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003400:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003404:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003406:	f8c9 6000 	str.w	r6, [r9]
 800340a:	3301      	adds	r3, #1
 800340c:	440c      	add	r4, r1
 800340e:	2b07      	cmp	r3, #7
 8003410:	9429      	str	r4, [sp, #164]	; 0xa4
 8003412:	9328      	str	r3, [sp, #160]	; 0xa0
 8003414:	f8c9 1004 	str.w	r1, [r9, #4]
 8003418:	f77f a8fe 	ble.w	8002618 <_vfprintf_r+0x5b8>
 800341c:	e41a      	b.n	8002c54 <_vfprintf_r+0xbf4>
 800341e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003420:	1cd8      	adds	r0, r3, #3
 8003422:	db11      	blt.n	8003448 <_vfprintf_r+0x13e8>
 8003424:	459b      	cmp	fp, r3
 8003426:	db0f      	blt.n	8003448 <_vfprintf_r+0x13e8>
 8003428:	9313      	str	r3, [sp, #76]	; 0x4c
 800342a:	e6ac      	b.n	8003186 <_vfprintf_r+0x1126>
 800342c:	aa27      	add	r2, sp, #156	; 0x9c
 800342e:	9908      	ldr	r1, [sp, #32]
 8003430:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003432:	f004 fb43 	bl	8007abc <__sprint_r>
 8003436:	2800      	cmp	r0, #0
 8003438:	f47e af42 	bne.w	80022c0 <_vfprintf_r+0x260>
 800343c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800343e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003442:	e46e      	b.n	8002d22 <_vfprintf_r+0xcc2>
 8003444:	4623      	mov	r3, r4
 8003446:	e68f      	b.n	8003168 <_vfprintf_r+0x1108>
 8003448:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800344a:	3a02      	subs	r2, #2
 800344c:	9211      	str	r2, [sp, #68]	; 0x44
 800344e:	3b01      	subs	r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8003456:	9321      	str	r3, [sp, #132]	; 0x84
 8003458:	bfb8      	it	lt
 800345a:	425b      	neglt	r3, r3
 800345c:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8003460:	bfb4      	ite	lt
 8003462:	222d      	movlt	r2, #45	; 0x2d
 8003464:	222b      	movge	r2, #43	; 0x2b
 8003466:	2b09      	cmp	r3, #9
 8003468:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 800346c:	f340 810b 	ble.w	8003686 <_vfprintf_r+0x1626>
 8003470:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8003474:	4604      	mov	r4, r0
 8003476:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <_vfprintf_r+0x14c8>)
 8003478:	fb82 2103 	smull	r2, r1, r2, r3
 800347c:	17da      	asrs	r2, r3, #31
 800347e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003482:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003486:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800348a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800348e:	2a09      	cmp	r2, #9
 8003490:	4613      	mov	r3, r2
 8003492:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8003496:	dcee      	bgt.n	8003476 <_vfprintf_r+0x1416>
 8003498:	4621      	mov	r1, r4
 800349a:	3330      	adds	r3, #48	; 0x30
 800349c:	b2da      	uxtb	r2, r3
 800349e:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80034a2:	4288      	cmp	r0, r1
 80034a4:	f240 816f 	bls.w	8003786 <_vfprintf_r+0x1726>
 80034a8:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 80034ac:	4623      	mov	r3, r4
 80034ae:	e001      	b.n	80034b4 <_vfprintf_r+0x1454>
 80034b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b4:	f801 2b01 	strb.w	r2, [r1], #1
 80034b8:	4298      	cmp	r0, r3
 80034ba:	d1f9      	bne.n	80034b0 <_vfprintf_r+0x1450>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	1b1b      	subs	r3, r3, r4
 80034c0:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 80034c4:	4413      	add	r3, r2
 80034c6:	aa23      	add	r2, sp, #140	; 0x8c
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034cc:	9319      	str	r3, [sp, #100]	; 0x64
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	930d      	str	r3, [sp, #52]	; 0x34
 80034d4:	f340 80fe 	ble.w	80036d4 <_vfprintf_r+0x1674>
 80034d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80034dc:	4413      	add	r3, r2
 80034de:	2200      	movs	r2, #0
 80034e0:	930d      	str	r3, [sp, #52]	; 0x34
 80034e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80034e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80034e8:	e65b      	b.n	80031a2 <_vfprintf_r+0x1142>
 80034ea:	4614      	mov	r4, r2
 80034ec:	3301      	adds	r3, #1
 80034ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80034f2:	442c      	add	r4, r5
 80034f4:	2b07      	cmp	r3, #7
 80034f6:	9429      	str	r4, [sp, #164]	; 0xa4
 80034f8:	e889 0024 	stmia.w	r9, {r2, r5}
 80034fc:	f73f af76 	bgt.w	80033ec <_vfprintf_r+0x138c>
 8003500:	f109 0908 	add.w	r9, r9, #8
 8003504:	e77e      	b.n	8003404 <_vfprintf_r+0x13a4>
 8003506:	aa27      	add	r2, sp, #156	; 0x9c
 8003508:	9908      	ldr	r1, [sp, #32]
 800350a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800350c:	f004 fad6 	bl	8007abc <__sprint_r>
 8003510:	2800      	cmp	r0, #0
 8003512:	f47e aed5 	bne.w	80022c0 <_vfprintf_r+0x260>
 8003516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003518:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800351a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800351e:	e4d0      	b.n	8002ec2 <_vfprintf_r+0xe62>
 8003520:	08008d9c 	.word	0x08008d9c
 8003524:	08008d4c 	.word	0x08008d4c
 8003528:	66666667 	.word	0x66666667
 800352c:	2d06      	cmp	r5, #6
 800352e:	462b      	mov	r3, r5
 8003530:	bf28      	it	cs
 8003532:	2306      	movcs	r3, #6
 8003534:	930d      	str	r3, [sp, #52]	; 0x34
 8003536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800353a:	46b3      	mov	fp, r6
 800353c:	970e      	str	r7, [sp, #56]	; 0x38
 800353e:	9613      	str	r6, [sp, #76]	; 0x4c
 8003540:	4637      	mov	r7, r6
 8003542:	9309      	str	r3, [sp, #36]	; 0x24
 8003544:	4e91      	ldr	r6, [pc, #580]	; (800378c <_vfprintf_r+0x172c>)
 8003546:	f7fe bfa5 	b.w	8002494 <_vfprintf_r+0x434>
 800354a:	aa27      	add	r2, sp, #156	; 0x9c
 800354c:	9908      	ldr	r1, [sp, #32]
 800354e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003550:	f004 fab4 	bl	8007abc <__sprint_r>
 8003554:	2800      	cmp	r0, #0
 8003556:	f47e aeb3 	bne.w	80022c0 <_vfprintf_r+0x260>
 800355a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800355c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800355e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003566:	e4c4      	b.n	8002ef2 <_vfprintf_r+0xe92>
 8003568:	a825      	add	r0, sp, #148	; 0x94
 800356a:	a922      	add	r1, sp, #136	; 0x88
 800356c:	aa21      	add	r2, sp, #132	; 0x84
 800356e:	2303      	movs	r3, #3
 8003570:	9004      	str	r0, [sp, #16]
 8003572:	9202      	str	r2, [sp, #8]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	f8cd b004 	str.w	fp, [sp, #4]
 800357a:	9103      	str	r1, [sp, #12]
 800357c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003580:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003582:	f000 fa5d 	bl	8003a40 <_dtoa_r>
 8003586:	465d      	mov	r5, fp
 8003588:	4606      	mov	r6, r0
 800358a:	eb00 040b 	add.w	r4, r0, fp
 800358e:	e6f7      	b.n	8003380 <_vfprintf_r+0x1320>
 8003590:	9307      	str	r3, [sp, #28]
 8003592:	f7ff b8c7 	b.w	8002724 <_vfprintf_r+0x6c4>
 8003596:	f04f 0b06 	mov.w	fp, #6
 800359a:	e5a0      	b.n	80030de <_vfprintf_r+0x107e>
 800359c:	272d      	movs	r7, #45	; 0x2d
 800359e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80035a2:	f7ff b9b3 	b.w	800290c <_vfprintf_r+0x8ac>
 80035a6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80035aa:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80035ae:	931d      	str	r3, [sp, #116]	; 0x74
 80035b0:	232d      	movs	r3, #45	; 0x2d
 80035b2:	911c      	str	r1, [sp, #112]	; 0x70
 80035b4:	9309      	str	r3, [sp, #36]	; 0x24
 80035b6:	e5a0      	b.n	80030fa <_vfprintf_r+0x109a>
 80035b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80035ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035bc:	4413      	add	r3, r2
 80035be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80035c0:	930d      	str	r3, [sp, #52]	; 0x34
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	f340 8090 	ble.w	80036e8 <_vfprintf_r+0x1688>
 80035c8:	2267      	movs	r2, #103	; 0x67
 80035ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80035ce:	9211      	str	r2, [sp, #68]	; 0x44
 80035d0:	e5e7      	b.n	80031a2 <_vfprintf_r+0x1142>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f340 8090 	ble.w	80036f8 <_vfprintf_r+0x1698>
 80035d8:	f1bb 0f00 	cmp.w	fp, #0
 80035dc:	d163      	bne.n	80036a6 <_vfprintf_r+0x1646>
 80035de:	9a07      	ldr	r2, [sp, #28]
 80035e0:	07d1      	lsls	r1, r2, #31
 80035e2:	d460      	bmi.n	80036a6 <_vfprintf_r+0x1646>
 80035e4:	461a      	mov	r2, r3
 80035e6:	920d      	str	r2, [sp, #52]	; 0x34
 80035e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80035ec:	e5d9      	b.n	80031a2 <_vfprintf_r+0x1142>
 80035ee:	9b07      	ldr	r3, [sp, #28]
 80035f0:	07db      	lsls	r3, r3, #31
 80035f2:	465f      	mov	r7, fp
 80035f4:	d505      	bpl.n	8003602 <_vfprintf_r+0x15a2>
 80035f6:	ae44      	add	r6, sp, #272	; 0x110
 80035f8:	2330      	movs	r3, #48	; 0x30
 80035fa:	f806 3d41 	strb.w	r3, [r6, #-65]!
 80035fe:	f7fe bf3f 	b.w	8002480 <_vfprintf_r+0x420>
 8003602:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003606:	ae34      	add	r6, sp, #208	; 0xd0
 8003608:	f7fe bf3d 	b.w	8002486 <_vfprintf_r+0x426>
 800360c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003610:	970e      	str	r7, [sp, #56]	; 0x38
 8003612:	9309      	str	r3, [sp, #36]	; 0x24
 8003614:	950d      	str	r5, [sp, #52]	; 0x34
 8003616:	4683      	mov	fp, r0
 8003618:	9013      	str	r0, [sp, #76]	; 0x4c
 800361a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800361e:	f7fe bf39 	b.w	8002494 <_vfprintf_r+0x434>
 8003622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003624:	2b47      	cmp	r3, #71	; 0x47
 8003626:	f47f ad8b 	bne.w	8003140 <_vfprintf_r+0x10e0>
 800362a:	9b07      	ldr	r3, [sp, #28]
 800362c:	07dc      	lsls	r4, r3, #31
 800362e:	f53f aea1 	bmi.w	8003374 <_vfprintf_r+0x1314>
 8003632:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003634:	2f47      	cmp	r7, #71	; 0x47
 8003636:	eba3 0306 	sub.w	r3, r3, r6
 800363a:	9312      	str	r3, [sp, #72]	; 0x48
 800363c:	f43f aeef 	beq.w	800341e <_vfprintf_r+0x13be>
 8003640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003642:	e704      	b.n	800344e <_vfprintf_r+0x13ee>
 8003644:	aa27      	add	r2, sp, #156	; 0x9c
 8003646:	9908      	ldr	r1, [sp, #32]
 8003648:	980a      	ldr	r0, [sp, #40]	; 0x28
 800364a:	f004 fa37 	bl	8007abc <__sprint_r>
 800364e:	2800      	cmp	r0, #0
 8003650:	f47e ae36 	bne.w	80022c0 <_vfprintf_r+0x260>
 8003654:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003656:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003658:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800365a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800365e:	e61a      	b.n	8003296 <_vfprintf_r+0x1236>
 8003660:	46a0      	mov	r8, r4
 8003662:	2500      	movs	r5, #0
 8003664:	f7fe bd72 	b.w	800214c <_vfprintf_r+0xec>
 8003668:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800366a:	e57d      	b.n	8003168 <_vfprintf_r+0x1108>
 800366c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800366e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003670:	4413      	add	r3, r2
 8003672:	2267      	movs	r2, #103	; 0x67
 8003674:	930d      	str	r3, [sp, #52]	; 0x34
 8003676:	9211      	str	r2, [sp, #68]	; 0x44
 8003678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800367c:	e591      	b.n	80031a2 <_vfprintf_r+0x1142>
 800367e:	930e      	str	r3, [sp, #56]	; 0x38
 8003680:	4617      	mov	r7, r2
 8003682:	f7ff bbff 	b.w	8002e84 <_vfprintf_r+0xe24>
 8003686:	3330      	adds	r3, #48	; 0x30
 8003688:	2230      	movs	r2, #48	; 0x30
 800368a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800368e:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8003692:	ab24      	add	r3, sp, #144	; 0x90
 8003694:	e717      	b.n	80034c6 <_vfprintf_r+0x1466>
 8003696:	930e      	str	r3, [sp, #56]	; 0x38
 8003698:	e4fc      	b.n	8003094 <_vfprintf_r+0x1034>
 800369a:	4e3d      	ldr	r6, [pc, #244]	; (8003790 <_vfprintf_r+0x1730>)
 800369c:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <_vfprintf_r+0x1734>)
 800369e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80036a2:	f7ff b935 	b.w	8002910 <_vfprintf_r+0x8b0>
 80036a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80036a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80036aa:	189d      	adds	r5, r3, r2
 80036ac:	eb05 030b 	add.w	r3, r5, fp
 80036b0:	930d      	str	r3, [sp, #52]	; 0x34
 80036b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80036b6:	e574      	b.n	80031a2 <_vfprintf_r+0x1142>
 80036b8:	2200      	movs	r2, #0
 80036ba:	2300      	movs	r3, #0
 80036bc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80036c0:	f005 f8a4 	bl	800880c <__aeabi_dcmpeq>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	f47f ae5f 	bne.w	8003388 <_vfprintf_r+0x1328>
 80036ca:	f1c5 0501 	rsb	r5, r5, #1
 80036ce:	9521      	str	r5, [sp, #132]	; 0x84
 80036d0:	442c      	add	r4, r5
 80036d2:	e536      	b.n	8003142 <_vfprintf_r+0x10e2>
 80036d4:	9b07      	ldr	r3, [sp, #28]
 80036d6:	f013 0301 	ands.w	r3, r3, #1
 80036da:	f47f aefd 	bne.w	80034d8 <_vfprintf_r+0x1478>
 80036de:	9313      	str	r3, [sp, #76]	; 0x4c
 80036e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80036e6:	e55c      	b.n	80031a2 <_vfprintf_r+0x1142>
 80036e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80036ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036ec:	f1c3 0301 	rsb	r3, r3, #1
 80036f0:	441a      	add	r2, r3
 80036f2:	4613      	mov	r3, r2
 80036f4:	920d      	str	r2, [sp, #52]	; 0x34
 80036f6:	e767      	b.n	80035c8 <_vfprintf_r+0x1568>
 80036f8:	f1bb 0f00 	cmp.w	fp, #0
 80036fc:	d102      	bne.n	8003704 <_vfprintf_r+0x16a4>
 80036fe:	9b07      	ldr	r3, [sp, #28]
 8003700:	07da      	lsls	r2, r3, #31
 8003702:	d507      	bpl.n	8003714 <_vfprintf_r+0x16b4>
 8003704:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003706:	1c5d      	adds	r5, r3, #1
 8003708:	eb05 030b 	add.w	r3, r5, fp
 800370c:	930d      	str	r3, [sp, #52]	; 0x34
 800370e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003712:	e546      	b.n	80031a2 <_vfprintf_r+0x1142>
 8003714:	2301      	movs	r3, #1
 8003716:	930d      	str	r3, [sp, #52]	; 0x34
 8003718:	e543      	b.n	80031a2 <_vfprintf_r+0x1142>
 800371a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800371c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003720:	6805      	ldr	r5, [r0, #0]
 8003722:	3004      	adds	r0, #4
 8003724:	2d00      	cmp	r5, #0
 8003726:	900e      	str	r0, [sp, #56]	; 0x38
 8003728:	46a0      	mov	r8, r4
 800372a:	f6be ad0d 	bge.w	8002148 <_vfprintf_r+0xe8>
 800372e:	f04f 35ff 	mov.w	r5, #4294967295
 8003732:	f7fe bd09 	b.w	8002148 <_vfprintf_r+0xe8>
 8003736:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800373a:	f7ff b893 	b.w	8002864 <_vfprintf_r+0x804>
 800373e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003742:	f7ff b85d 	b.w	8002800 <_vfprintf_r+0x7a0>
 8003746:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800374a:	f7fe bfbf 	b.w	80026cc <_vfprintf_r+0x66c>
 800374e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003752:	f7fe be5c 	b.w	800240e <_vfprintf_r+0x3ae>
 8003756:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800375a:	f7ff b812 	b.w	8002782 <_vfprintf_r+0x722>
 800375e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003762:	f7fe bdca 	b.w	80022fa <_vfprintf_r+0x29a>
 8003766:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800376a:	f7ff b951 	b.w	8002a10 <_vfprintf_r+0x9b0>
 800376e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003772:	f7fe be23 	b.w	80023bc <_vfprintf_r+0x35c>
 8003776:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800377a:	f7ff b8ed 	b.w	8002958 <_vfprintf_r+0x8f8>
 800377e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003782:	f7ff b88c 	b.w	800289e <_vfprintf_r+0x83e>
 8003786:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800378a:	e69c      	b.n	80034c6 <_vfprintf_r+0x1466>
 800378c:	08008d94 	.word	0x08008d94
 8003790:	08008d68 	.word	0x08008d68
 8003794:	08008d64 	.word	0x08008d64

08003798 <__sbprintf>:
 8003798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379a:	460c      	mov	r4, r1
 800379c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80037a0:	8989      	ldrh	r1, [r1, #12]
 80037a2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80037a4:	89e5      	ldrh	r5, [r4, #14]
 80037a6:	9619      	str	r6, [sp, #100]	; 0x64
 80037a8:	f021 0102 	bic.w	r1, r1, #2
 80037ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80037ae:	f8ad 500e 	strh.w	r5, [sp, #14]
 80037b2:	2500      	movs	r5, #0
 80037b4:	69e7      	ldr	r7, [r4, #28]
 80037b6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80037ba:	9609      	str	r6, [sp, #36]	; 0x24
 80037bc:	9506      	str	r5, [sp, #24]
 80037be:	ae1a      	add	r6, sp, #104	; 0x68
 80037c0:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80037c4:	4669      	mov	r1, sp
 80037c6:	9600      	str	r6, [sp, #0]
 80037c8:	9604      	str	r6, [sp, #16]
 80037ca:	9502      	str	r5, [sp, #8]
 80037cc:	9505      	str	r5, [sp, #20]
 80037ce:	9707      	str	r7, [sp, #28]
 80037d0:	4606      	mov	r6, r0
 80037d2:	f7fe fc45 	bl	8002060 <_vfprintf_r>
 80037d6:	1e05      	subs	r5, r0, #0
 80037d8:	db07      	blt.n	80037ea <__sbprintf+0x52>
 80037da:	4630      	mov	r0, r6
 80037dc:	4669      	mov	r1, sp
 80037de:	f001 f8e9 	bl	80049b4 <_fflush_r>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	bf18      	it	ne
 80037e6:	f04f 35ff 	movne.w	r5, #4294967295
 80037ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80037ee:	065b      	lsls	r3, r3, #25
 80037f0:	d503      	bpl.n	80037fa <__sbprintf+0x62>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f8:	81a3      	strh	r3, [r4, #12]
 80037fa:	4628      	mov	r0, r5
 80037fc:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8003800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003802:	bf00      	nop

08003804 <_vsprintf_r>:
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	b09b      	sub	sp, #108	; 0x6c
 8003808:	460d      	mov	r5, r1
 800380a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800380e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003812:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003816:	4669      	mov	r1, sp
 8003818:	9500      	str	r5, [sp, #0]
 800381a:	9504      	str	r5, [sp, #16]
 800381c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8003820:	9402      	str	r4, [sp, #8]
 8003822:	9405      	str	r4, [sp, #20]
 8003824:	f8ad 600e 	strh.w	r6, [sp, #14]
 8003828:	f002 fd92 	bl	8006350 <_svfprintf_r>
 800382c:	9b00      	ldr	r3, [sp, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	b01b      	add	sp, #108	; 0x6c
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003836:	bf00      	nop

08003838 <vsprintf>:
 8003838:	b410      	push	{r4}
 800383a:	4c04      	ldr	r4, [pc, #16]	; (800384c <vsprintf+0x14>)
 800383c:	4613      	mov	r3, r2
 800383e:	460a      	mov	r2, r1
 8003840:	4601      	mov	r1, r0
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003848:	f7ff bfdc 	b.w	8003804 <_vsprintf_r>
 800384c:	20000460 	.word	0x20000460

08003850 <__swsetup_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	4b30      	ldr	r3, [pc, #192]	; (8003914 <__swsetup_r+0xc4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4605      	mov	r5, r0
 8003858:	460c      	mov	r4, r1
 800385a:	b113      	cbz	r3, 8003862 <__swsetup_r+0x12>
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	2a00      	cmp	r2, #0
 8003860:	d038      	beq.n	80038d4 <__swsetup_r+0x84>
 8003862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003866:	b293      	uxth	r3, r2
 8003868:	0718      	lsls	r0, r3, #28
 800386a:	d50c      	bpl.n	8003886 <__swsetup_r+0x36>
 800386c:	6920      	ldr	r0, [r4, #16]
 800386e:	b1a8      	cbz	r0, 800389c <__swsetup_r+0x4c>
 8003870:	f013 0201 	ands.w	r2, r3, #1
 8003874:	d01e      	beq.n	80038b4 <__swsetup_r+0x64>
 8003876:	6963      	ldr	r3, [r4, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	425b      	negs	r3, r3
 800387c:	61a3      	str	r3, [r4, #24]
 800387e:	60a2      	str	r2, [r4, #8]
 8003880:	b1f0      	cbz	r0, 80038c0 <__swsetup_r+0x70>
 8003882:	2000      	movs	r0, #0
 8003884:	bd38      	pop	{r3, r4, r5, pc}
 8003886:	06d9      	lsls	r1, r3, #27
 8003888:	d53c      	bpl.n	8003904 <__swsetup_r+0xb4>
 800388a:	0758      	lsls	r0, r3, #29
 800388c:	d426      	bmi.n	80038dc <__swsetup_r+0x8c>
 800388e:	6920      	ldr	r0, [r4, #16]
 8003890:	f042 0308 	orr.w	r3, r2, #8
 8003894:	81a3      	strh	r3, [r4, #12]
 8003896:	b29b      	uxth	r3, r3
 8003898:	2800      	cmp	r0, #0
 800389a:	d1e9      	bne.n	8003870 <__swsetup_r+0x20>
 800389c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80038a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80038a4:	d0e4      	beq.n	8003870 <__swsetup_r+0x20>
 80038a6:	4628      	mov	r0, r5
 80038a8:	4621      	mov	r1, r4
 80038aa:	f001 fc41 	bl	8005130 <__smakebuf_r>
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	6920      	ldr	r0, [r4, #16]
 80038b2:	e7dd      	b.n	8003870 <__swsetup_r+0x20>
 80038b4:	0799      	lsls	r1, r3, #30
 80038b6:	bf58      	it	pl
 80038b8:	6962      	ldrpl	r2, [r4, #20]
 80038ba:	60a2      	str	r2, [r4, #8]
 80038bc:	2800      	cmp	r0, #0
 80038be:	d1e0      	bne.n	8003882 <__swsetup_r+0x32>
 80038c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c4:	061a      	lsls	r2, r3, #24
 80038c6:	d5dd      	bpl.n	8003884 <__swsetup_r+0x34>
 80038c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038cc:	81a3      	strh	r3, [r4, #12]
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f901 	bl	8004adc <__sinit>
 80038da:	e7c2      	b.n	8003862 <__swsetup_r+0x12>
 80038dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038de:	b151      	cbz	r1, 80038f6 <__swsetup_r+0xa6>
 80038e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80038e4:	4299      	cmp	r1, r3
 80038e6:	d004      	beq.n	80038f2 <__swsetup_r+0xa2>
 80038e8:	4628      	mov	r0, r5
 80038ea:	f001 f94f 	bl	8004b8c <_free_r>
 80038ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	6323      	str	r3, [r4, #48]	; 0x30
 80038f6:	2300      	movs	r3, #0
 80038f8:	6920      	ldr	r0, [r4, #16]
 80038fa:	6063      	str	r3, [r4, #4]
 80038fc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8003900:	6020      	str	r0, [r4, #0]
 8003902:	e7c5      	b.n	8003890 <__swsetup_r+0x40>
 8003904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003908:	2309      	movs	r3, #9
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	81a2      	strh	r2, [r4, #12]
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	20000460 	.word	0x20000460

08003918 <quorem>:
 8003918:	6902      	ldr	r2, [r0, #16]
 800391a:	690b      	ldr	r3, [r1, #16]
 800391c:	4293      	cmp	r3, r2
 800391e:	f300 808d 	bgt.w	8003a3c <quorem+0x124>
 8003922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003926:	f103 38ff 	add.w	r8, r3, #4294967295
 800392a:	f101 0714 	add.w	r7, r1, #20
 800392e:	f100 0b14 	add.w	fp, r0, #20
 8003932:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8003936:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800393a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800393e:	b083      	sub	sp, #12
 8003940:	3201      	adds	r2, #1
 8003942:	fbb3 f9f2 	udiv	r9, r3, r2
 8003946:	eb0b 0304 	add.w	r3, fp, r4
 800394a:	9400      	str	r4, [sp, #0]
 800394c:	eb07 0a04 	add.w	sl, r7, r4
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	f1b9 0f00 	cmp.w	r9, #0
 8003956:	d039      	beq.n	80039cc <quorem+0xb4>
 8003958:	2500      	movs	r5, #0
 800395a:	46bc      	mov	ip, r7
 800395c:	46de      	mov	lr, fp
 800395e:	462b      	mov	r3, r5
 8003960:	f85c 6b04 	ldr.w	r6, [ip], #4
 8003964:	f8de 2000 	ldr.w	r2, [lr]
 8003968:	b2b4      	uxth	r4, r6
 800396a:	fb09 5504 	mla	r5, r9, r4, r5
 800396e:	0c36      	lsrs	r6, r6, #16
 8003970:	0c2c      	lsrs	r4, r5, #16
 8003972:	fb09 4406 	mla	r4, r9, r6, r4
 8003976:	b2ad      	uxth	r5, r5
 8003978:	1b5b      	subs	r3, r3, r5
 800397a:	b2a6      	uxth	r6, r4
 800397c:	fa13 f382 	uxtah	r3, r3, r2
 8003980:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8003984:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8003988:	b29b      	uxth	r3, r3
 800398a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800398e:	45e2      	cmp	sl, ip
 8003990:	f84e 3b04 	str.w	r3, [lr], #4
 8003994:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8003998:	ea4f 4326 	mov.w	r3, r6, asr #16
 800399c:	d2e0      	bcs.n	8003960 <quorem+0x48>
 800399e:	9b00      	ldr	r3, [sp, #0]
 80039a0:	f85b 3003 	ldr.w	r3, [fp, r3]
 80039a4:	b993      	cbnz	r3, 80039cc <quorem+0xb4>
 80039a6:	9c01      	ldr	r4, [sp, #4]
 80039a8:	1f23      	subs	r3, r4, #4
 80039aa:	459b      	cmp	fp, r3
 80039ac:	d20c      	bcs.n	80039c8 <quorem+0xb0>
 80039ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80039b2:	b94b      	cbnz	r3, 80039c8 <quorem+0xb0>
 80039b4:	f1a4 0308 	sub.w	r3, r4, #8
 80039b8:	e002      	b.n	80039c0 <quorem+0xa8>
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	3b04      	subs	r3, #4
 80039be:	b91a      	cbnz	r2, 80039c8 <quorem+0xb0>
 80039c0:	459b      	cmp	fp, r3
 80039c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80039c6:	d3f8      	bcc.n	80039ba <quorem+0xa2>
 80039c8:	f8c0 8010 	str.w	r8, [r0, #16]
 80039cc:	4604      	mov	r4, r0
 80039ce:	f002 f96f 	bl	8005cb0 <__mcmp>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	db2e      	blt.n	8003a34 <quorem+0x11c>
 80039d6:	f109 0901 	add.w	r9, r9, #1
 80039da:	465d      	mov	r5, fp
 80039dc:	2300      	movs	r3, #0
 80039de:	f857 1b04 	ldr.w	r1, [r7], #4
 80039e2:	6828      	ldr	r0, [r5, #0]
 80039e4:	b28a      	uxth	r2, r1
 80039e6:	1a9a      	subs	r2, r3, r2
 80039e8:	0c09      	lsrs	r1, r1, #16
 80039ea:	fa12 f280 	uxtah	r2, r2, r0
 80039ee:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80039f2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80039f6:	b291      	uxth	r1, r2
 80039f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80039fc:	45ba      	cmp	sl, r7
 80039fe:	f845 1b04 	str.w	r1, [r5], #4
 8003a02:	ea4f 4323 	mov.w	r3, r3, asr #16
 8003a06:	d2ea      	bcs.n	80039de <quorem+0xc6>
 8003a08:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8003a0c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8003a10:	b982      	cbnz	r2, 8003a34 <quorem+0x11c>
 8003a12:	1f1a      	subs	r2, r3, #4
 8003a14:	4593      	cmp	fp, r2
 8003a16:	d20b      	bcs.n	8003a30 <quorem+0x118>
 8003a18:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8003a1c:	b942      	cbnz	r2, 8003a30 <quorem+0x118>
 8003a1e:	3b08      	subs	r3, #8
 8003a20:	e002      	b.n	8003a28 <quorem+0x110>
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	3b04      	subs	r3, #4
 8003a26:	b91a      	cbnz	r2, 8003a30 <quorem+0x118>
 8003a28:	459b      	cmp	fp, r3
 8003a2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a2e:	d3f8      	bcc.n	8003a22 <quorem+0x10a>
 8003a30:	f8c4 8010 	str.w	r8, [r4, #16]
 8003a34:	4648      	mov	r0, r9
 8003a36:	b003      	add	sp, #12
 8003a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	4770      	bx	lr

08003a40 <_dtoa_r>:
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a46:	b099      	sub	sp, #100	; 0x64
 8003a48:	4681      	mov	r9, r0
 8003a4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8003a4c:	4692      	mov	sl, r2
 8003a4e:	469b      	mov	fp, r3
 8003a50:	b149      	cbz	r1, 8003a66 <_dtoa_r+0x26>
 8003a52:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a54:	604a      	str	r2, [r1, #4]
 8003a56:	2301      	movs	r3, #1
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
 8003a5c:	f001 ff46 	bl	80058ec <_Bfree>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8003a66:	f1bb 0f00 	cmp.w	fp, #0
 8003a6a:	46d8      	mov	r8, fp
 8003a6c:	db33      	blt.n	8003ad6 <_dtoa_r+0x96>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	4ba3      	ldr	r3, [pc, #652]	; (8003d00 <_dtoa_r+0x2c0>)
 8003a74:	461a      	mov	r2, r3
 8003a76:	ea08 0303 	and.w	r3, r8, r3
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d014      	beq.n	8003aa8 <_dtoa_r+0x68>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2300      	movs	r3, #0
 8003a82:	4650      	mov	r0, sl
 8003a84:	4659      	mov	r1, fp
 8003a86:	f004 fec1 	bl	800880c <__aeabi_dcmpeq>
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	b348      	cbz	r0, 8003ae2 <_dtoa_r+0xa2>
 8003a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a90:	2301      	movs	r3, #1
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80c2 	beq.w	8003c20 <_dtoa_r+0x1e0>
 8003a9c:	4899      	ldr	r0, [pc, #612]	; (8003d04 <_dtoa_r+0x2c4>)
 8003a9e:	6018      	str	r0, [r3, #0]
 8003aa0:	3801      	subs	r0, #1
 8003aa2:	b019      	add	sp, #100	; 0x64
 8003aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003aaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	f1ba 0f00 	cmp.w	sl, #0
 8003ab4:	f000 809f 	beq.w	8003bf6 <_dtoa_r+0x1b6>
 8003ab8:	4893      	ldr	r0, [pc, #588]	; (8003d08 <_dtoa_r+0x2c8>)
 8003aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <_dtoa_r+0x62>
 8003ac0:	78c3      	ldrb	r3, [r0, #3]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80ae 	beq.w	8003c24 <_dtoa_r+0x1e4>
 8003ac8:	f100 0308 	add.w	r3, r0, #8
 8003acc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	b019      	add	sp, #100	; 0x64
 8003ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	46c3      	mov	fp, r8
 8003ae0:	e7c7      	b.n	8003a72 <_dtoa_r+0x32>
 8003ae2:	aa16      	add	r2, sp, #88	; 0x58
 8003ae4:	ab17      	add	r3, sp, #92	; 0x5c
 8003ae6:	9201      	str	r2, [sp, #4]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4652      	mov	r2, sl
 8003aec:	465b      	mov	r3, fp
 8003aee:	4648      	mov	r0, r9
 8003af0:	f002 f98a 	bl	8005e08 <__d2b>
 8003af4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8003af8:	9008      	str	r0, [sp, #32]
 8003afa:	f040 8085 	bne.w	8003c08 <_dtoa_r+0x1c8>
 8003afe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003b00:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003b02:	442c      	add	r4, r5
 8003b04:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	f340 8289 	ble.w	8004020 <_dtoa_r+0x5e0>
 8003b0e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003b12:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8003b16:	fa08 f803 	lsl.w	r8, r8, r3
 8003b1a:	fa2a f000 	lsr.w	r0, sl, r0
 8003b1e:	ea40 0008 	orr.w	r0, r0, r8
 8003b22:	f004 fb95 	bl	8008250 <__aeabi_ui2d>
 8003b26:	2301      	movs	r3, #1
 8003b28:	3c01      	subs	r4, #1
 8003b2a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8003b30:	2200      	movs	r2, #0
 8003b32:	4b76      	ldr	r3, [pc, #472]	; (8003d0c <_dtoa_r+0x2cc>)
 8003b34:	f004 fa4e 	bl	8007fd4 <__aeabi_dsub>
 8003b38:	a36b      	add	r3, pc, #428	; (adr r3, 8003ce8 <_dtoa_r+0x2a8>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f004 fbfd 	bl	800833c <__aeabi_dmul>
 8003b42:	a36b      	add	r3, pc, #428	; (adr r3, 8003cf0 <_dtoa_r+0x2b0>)
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f004 fa46 	bl	8007fd8 <__adddf3>
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	4620      	mov	r0, r4
 8003b50:	460f      	mov	r7, r1
 8003b52:	f004 fb8d 	bl	8008270 <__aeabi_i2d>
 8003b56:	a368      	add	r3, pc, #416	; (adr r3, 8003cf8 <_dtoa_r+0x2b8>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f004 fbee 	bl	800833c <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4630      	mov	r0, r6
 8003b66:	4639      	mov	r1, r7
 8003b68:	f004 fa36 	bl	8007fd8 <__adddf3>
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	460f      	mov	r7, r1
 8003b70:	f004 fe94 	bl	800889c <__aeabi_d2iz>
 8003b74:	2200      	movs	r2, #0
 8003b76:	9004      	str	r0, [sp, #16]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	4639      	mov	r1, r7
 8003b7e:	f004 fe4f 	bl	8008820 <__aeabi_dcmplt>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	f040 8227 	bne.w	8003fd6 <_dtoa_r+0x596>
 8003b88:	9e04      	ldr	r6, [sp, #16]
 8003b8a:	2e16      	cmp	r6, #22
 8003b8c:	f200 8220 	bhi.w	8003fd0 <_dtoa_r+0x590>
 8003b90:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <_dtoa_r+0x2d0>)
 8003b92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b9a:	4652      	mov	r2, sl
 8003b9c:	465b      	mov	r3, fp
 8003b9e:	f004 fe5d 	bl	800885c <__aeabi_dcmpgt>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f000 8241 	beq.w	800402a <_dtoa_r+0x5ea>
 8003ba8:	1e73      	subs	r3, r6, #1
 8003baa:	9304      	str	r3, [sp, #16]
 8003bac:	2300      	movs	r3, #0
 8003bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bb0:	1b2c      	subs	r4, r5, r4
 8003bb2:	f1b4 0801 	subs.w	r8, r4, #1
 8003bb6:	f100 8229 	bmi.w	800400c <_dtoa_r+0x5cc>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9305      	str	r3, [sp, #20]
 8003bbe:	9b04      	ldr	r3, [sp, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f2c0 821a 	blt.w	8003ffa <_dtoa_r+0x5ba>
 8003bc6:	4498      	add	r8, r3
 8003bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9302      	str	r3, [sp, #8]
 8003bce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bd0:	2b09      	cmp	r3, #9
 8003bd2:	d829      	bhi.n	8003c28 <_dtoa_r+0x1e8>
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	f340 8643 	ble.w	8004860 <_dtoa_r+0xe20>
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	9322      	str	r3, [sp, #136]	; 0x88
 8003bde:	2500      	movs	r5, #0
 8003be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003be2:	3b02      	subs	r3, #2
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	f200 8622 	bhi.w	800482e <_dtoa_r+0xdee>
 8003bea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003bee:	032a      	.short	0x032a
 8003bf0:	03350223 	.word	0x03350223
 8003bf4:	044f      	.short	0x044f
 8003bf6:	4b44      	ldr	r3, [pc, #272]	; (8003d08 <_dtoa_r+0x2c8>)
 8003bf8:	4a46      	ldr	r2, [pc, #280]	; (8003d14 <_dtoa_r+0x2d4>)
 8003bfa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	bf14      	ite	ne
 8003c02:	4618      	movne	r0, r3
 8003c04:	4610      	moveq	r0, r2
 8003c06:	e758      	b.n	8003aba <_dtoa_r+0x7a>
 8003c08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003c0c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003c10:	950d      	str	r5, [sp, #52]	; 0x34
 8003c12:	4650      	mov	r0, sl
 8003c14:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003c18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c1c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003c1e:	e787      	b.n	8003b30 <_dtoa_r+0xf0>
 8003c20:	483d      	ldr	r0, [pc, #244]	; (8003d18 <_dtoa_r+0x2d8>)
 8003c22:	e73e      	b.n	8003aa2 <_dtoa_r+0x62>
 8003c24:	1cc3      	adds	r3, r0, #3
 8003c26:	e751      	b.n	8003acc <_dtoa_r+0x8c>
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003c2e:	4648      	mov	r0, r9
 8003c30:	9122      	str	r1, [sp, #136]	; 0x88
 8003c32:	f001 fe35 	bl	80058a0 <_Balloc>
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	9306      	str	r3, [sp, #24]
 8003c3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003c40:	2301      	movs	r3, #1
 8003c42:	9007      	str	r0, [sp, #28]
 8003c44:	9223      	str	r2, [sp, #140]	; 0x8c
 8003c46:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f2c0 80d0 	blt.w	8003df4 <_dtoa_r+0x3b4>
 8003c54:	9a04      	ldr	r2, [sp, #16]
 8003c56:	2a0e      	cmp	r2, #14
 8003c58:	f300 80cc 	bgt.w	8003df4 <_dtoa_r+0x3b4>
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <_dtoa_r+0x2d0>)
 8003c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c62:	ed93 7b00 	vldr	d7, [r3]
 8003c66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c6e:	f2c0 82fe 	blt.w	800426e <_dtoa_r+0x82e>
 8003c72:	4656      	mov	r6, sl
 8003c74:	465f      	mov	r7, fp
 8003c76:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	4652      	mov	r2, sl
 8003c7e:	465b      	mov	r3, fp
 8003c80:	4639      	mov	r1, r7
 8003c82:	f004 fc85 	bl	8008590 <__aeabi_ddiv>
 8003c86:	f004 fe09 	bl	800889c <__aeabi_d2iz>
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	f004 faf0 	bl	8008270 <__aeabi_i2d>
 8003c90:	4652      	mov	r2, sl
 8003c92:	465b      	mov	r3, fp
 8003c94:	f004 fb52 	bl	800833c <__aeabi_dmul>
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f004 f998 	bl	8007fd4 <__aeabi_dsub>
 8003ca4:	9d07      	ldr	r5, [sp, #28]
 8003ca6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003caa:	702b      	strb	r3, [r5, #0]
 8003cac:	9b06      	ldr	r3, [sp, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	460f      	mov	r7, r1
 8003cb4:	f105 0501 	add.w	r5, r5, #1
 8003cb8:	d061      	beq.n	8003d7e <_dtoa_r+0x33e>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <_dtoa_r+0x2dc>)
 8003cbe:	f004 fb3d 	bl	800833c <__aeabi_dmul>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	f004 fd9f 	bl	800880c <__aeabi_dcmpeq>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d17d      	bne.n	8003dce <_dtoa_r+0x38e>
 8003cd2:	f8cd 9014 	str.w	r9, [sp, #20]
 8003cd6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003cda:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003cde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003ce2:	e028      	b.n	8003d36 <_dtoa_r+0x2f6>
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	636f4361 	.word	0x636f4361
 8003cec:	3fd287a7 	.word	0x3fd287a7
 8003cf0:	8b60c8b3 	.word	0x8b60c8b3
 8003cf4:	3fc68a28 	.word	0x3fc68a28
 8003cf8:	509f79fb 	.word	0x509f79fb
 8003cfc:	3fd34413 	.word	0x3fd34413
 8003d00:	7ff00000 	.word	0x7ff00000
 8003d04:	08008d9d 	.word	0x08008d9d
 8003d08:	08008dbc 	.word	0x08008dbc
 8003d0c:	3ff80000 	.word	0x3ff80000
 8003d10:	08008dc0 	.word	0x08008dc0
 8003d14:	08008db0 	.word	0x08008db0
 8003d18:	08008d9c 	.word	0x08008d9c
 8003d1c:	40240000 	.word	0x40240000
 8003d20:	f004 fb0c 	bl	800833c <__aeabi_dmul>
 8003d24:	2200      	movs	r2, #0
 8003d26:	2300      	movs	r3, #0
 8003d28:	4606      	mov	r6, r0
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	f004 fd6e 	bl	800880c <__aeabi_dcmpeq>
 8003d30:	2800      	cmp	r0, #0
 8003d32:	f040 83ae 	bne.w	8004492 <_dtoa_r+0xa52>
 8003d36:	4642      	mov	r2, r8
 8003d38:	464b      	mov	r3, r9
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	4639      	mov	r1, r7
 8003d3e:	f004 fc27 	bl	8008590 <__aeabi_ddiv>
 8003d42:	f004 fdab 	bl	800889c <__aeabi_d2iz>
 8003d46:	4604      	mov	r4, r0
 8003d48:	f004 fa92 	bl	8008270 <__aeabi_i2d>
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	f004 faf4 	bl	800833c <__aeabi_dmul>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4630      	mov	r0, r6
 8003d5a:	4639      	mov	r1, r7
 8003d5c:	f004 f93a 	bl	8007fd4 <__aeabi_dsub>
 8003d60:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003d64:	f805 eb01 	strb.w	lr, [r5], #1
 8003d68:	ebcb 0e05 	rsb	lr, fp, r5
 8003d6c:	45d6      	cmp	lr, sl
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460f      	mov	r7, r1
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	4bae      	ldr	r3, [pc, #696]	; (8004030 <_dtoa_r+0x5f0>)
 8003d78:	d1d2      	bne.n	8003d20 <_dtoa_r+0x2e0>
 8003d7a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003d7e:	4632      	mov	r2, r6
 8003d80:	463b      	mov	r3, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	4639      	mov	r1, r7
 8003d86:	f004 f927 	bl	8007fd8 <__adddf3>
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	460f      	mov	r7, r1
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d96:	f004 fd43 	bl	8008820 <__aeabi_dcmplt>
 8003d9a:	b940      	cbnz	r0, 8003dae <_dtoa_r+0x36e>
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	463b      	mov	r3, r7
 8003da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003da4:	f004 fd32 	bl	800880c <__aeabi_dcmpeq>
 8003da8:	b188      	cbz	r0, 8003dce <_dtoa_r+0x38e>
 8003daa:	07e3      	lsls	r3, r4, #31
 8003dac:	d50f      	bpl.n	8003dce <_dtoa_r+0x38e>
 8003dae:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003db2:	9a07      	ldr	r2, [sp, #28]
 8003db4:	1e6b      	subs	r3, r5, #1
 8003db6:	e004      	b.n	8003dc2 <_dtoa_r+0x382>
 8003db8:	429a      	cmp	r2, r3
 8003dba:	f000 83fc 	beq.w	80045b6 <_dtoa_r+0xb76>
 8003dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dc2:	2c39      	cmp	r4, #57	; 0x39
 8003dc4:	f103 0501 	add.w	r5, r3, #1
 8003dc8:	d0f6      	beq.n	8003db8 <_dtoa_r+0x378>
 8003dca:	3401      	adds	r4, #1
 8003dcc:	701c      	strb	r4, [r3, #0]
 8003dce:	9908      	ldr	r1, [sp, #32]
 8003dd0:	4648      	mov	r0, r9
 8003dd2:	f001 fd8b 	bl	80058ec <_Bfree>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	9b04      	ldr	r3, [sp, #16]
 8003dda:	702a      	strb	r2, [r5, #0]
 8003ddc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003dde:	3301      	adds	r3, #1
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 839b 	beq.w	8004520 <_dtoa_r+0xae0>
 8003dea:	9807      	ldr	r0, [sp, #28]
 8003dec:	601d      	str	r5, [r3, #0]
 8003dee:	b019      	add	sp, #100	; 0x64
 8003df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	f000 810e 	beq.w	8004018 <_dtoa_r+0x5d8>
 8003dfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003dfe:	2a01      	cmp	r2, #1
 8003e00:	f340 8257 	ble.w	80042b2 <_dtoa_r+0x872>
 8003e04:	9b06      	ldr	r3, [sp, #24]
 8003e06:	9a02      	ldr	r2, [sp, #8]
 8003e08:	1e5f      	subs	r7, r3, #1
 8003e0a:	42ba      	cmp	r2, r7
 8003e0c:	f2c0 838b 	blt.w	8004526 <_dtoa_r+0xae6>
 8003e10:	1bd7      	subs	r7, r2, r7
 8003e12:	9b06      	ldr	r3, [sp, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f2c0 8480 	blt.w	800471a <_dtoa_r+0xcda>
 8003e1a:	9d05      	ldr	r5, [sp, #20]
 8003e1c:	9b06      	ldr	r3, [sp, #24]
 8003e1e:	9a05      	ldr	r2, [sp, #20]
 8003e20:	2101      	movs	r1, #1
 8003e22:	441a      	add	r2, r3
 8003e24:	4648      	mov	r0, r9
 8003e26:	9205      	str	r2, [sp, #20]
 8003e28:	4498      	add	r8, r3
 8003e2a:	f001 fdf7 	bl	8005a1c <__i2b>
 8003e2e:	4606      	mov	r6, r0
 8003e30:	b165      	cbz	r5, 8003e4c <_dtoa_r+0x40c>
 8003e32:	f1b8 0f00 	cmp.w	r8, #0
 8003e36:	dd09      	ble.n	8003e4c <_dtoa_r+0x40c>
 8003e38:	4545      	cmp	r5, r8
 8003e3a:	9a05      	ldr	r2, [sp, #20]
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	bfa8      	it	ge
 8003e40:	4643      	movge	r3, r8
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	9205      	str	r2, [sp, #20]
 8003e46:	1aed      	subs	r5, r5, r3
 8003e48:	ebc3 0808 	rsb	r8, r3, r8
 8003e4c:	9b02      	ldr	r3, [sp, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f340 82f5 	ble.w	800443e <_dtoa_r+0x9fe>
 8003e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e56:	2a00      	cmp	r2, #0
 8003e58:	f000 8202 	beq.w	8004260 <_dtoa_r+0x820>
 8003e5c:	2f00      	cmp	r7, #0
 8003e5e:	f000 81ff 	beq.w	8004260 <_dtoa_r+0x820>
 8003e62:	4631      	mov	r1, r6
 8003e64:	463a      	mov	r2, r7
 8003e66:	4648      	mov	r0, r9
 8003e68:	f001 fe7a 	bl	8005b60 <__pow5mult>
 8003e6c:	9a08      	ldr	r2, [sp, #32]
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4606      	mov	r6, r0
 8003e72:	4648      	mov	r0, r9
 8003e74:	f001 fddc 	bl	8005a30 <__multiply>
 8003e78:	9908      	ldr	r1, [sp, #32]
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4648      	mov	r0, r9
 8003e7e:	f001 fd35 	bl	80058ec <_Bfree>
 8003e82:	9b02      	ldr	r3, [sp, #8]
 8003e84:	1bdb      	subs	r3, r3, r7
 8003e86:	9302      	str	r3, [sp, #8]
 8003e88:	f040 81e9 	bne.w	800425e <_dtoa_r+0x81e>
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4648      	mov	r0, r9
 8003e90:	f001 fdc4 	bl	8005a1c <__i2b>
 8003e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e96:	9002      	str	r0, [sp, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8215 	beq.w	80042c8 <_dtoa_r+0x888>
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4648      	mov	r0, r9
 8003ea4:	f001 fe5c 	bl	8005b60 <__pow5mult>
 8003ea8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003eaa:	9002      	str	r0, [sp, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f340 82f3 	ble.w	8004498 <_dtoa_r+0xa58>
 8003eb2:	2700      	movs	r7, #0
 8003eb4:	9a02      	ldr	r2, [sp, #8]
 8003eb6:	6913      	ldr	r3, [r2, #16]
 8003eb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ebc:	6918      	ldr	r0, [r3, #16]
 8003ebe:	f001 fd5f 	bl	8005980 <__hi0bits>
 8003ec2:	f1c0 0020 	rsb	r0, r0, #32
 8003ec6:	4440      	add	r0, r8
 8003ec8:	f010 001f 	ands.w	r0, r0, #31
 8003ecc:	f000 81fa 	beq.w	80042c4 <_dtoa_r+0x884>
 8003ed0:	f1c0 0320 	rsb	r3, r0, #32
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	f340 84bd 	ble.w	8004854 <_dtoa_r+0xe14>
 8003eda:	f1c0 001c 	rsb	r0, r0, #28
 8003ede:	9b05      	ldr	r3, [sp, #20]
 8003ee0:	4403      	add	r3, r0
 8003ee2:	9305      	str	r3, [sp, #20]
 8003ee4:	4405      	add	r5, r0
 8003ee6:	4480      	add	r8, r0
 8003ee8:	9b05      	ldr	r3, [sp, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	dd05      	ble.n	8003efa <_dtoa_r+0x4ba>
 8003eee:	4621      	mov	r1, r4
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4648      	mov	r0, r9
 8003ef4:	f001 fe84 	bl	8005c00 <__lshift>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	f1b8 0f00 	cmp.w	r8, #0
 8003efe:	dd05      	ble.n	8003f0c <_dtoa_r+0x4cc>
 8003f00:	4642      	mov	r2, r8
 8003f02:	9902      	ldr	r1, [sp, #8]
 8003f04:	4648      	mov	r0, r9
 8003f06:	f001 fe7b 	bl	8005c00 <__lshift>
 8003f0a:	9002      	str	r0, [sp, #8]
 8003f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 827a 	bne.w	8004408 <_dtoa_r+0x9c8>
 8003f14:	9b06      	ldr	r3, [sp, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f340 8293 	ble.w	8004442 <_dtoa_r+0xa02>
 8003f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 81f4 	bne.w	800430c <_dtoa_r+0x8cc>
 8003f24:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003f28:	9f06      	ldr	r7, [sp, #24]
 8003f2a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003f2e:	465d      	mov	r5, fp
 8003f30:	e002      	b.n	8003f38 <_dtoa_r+0x4f8>
 8003f32:	f001 fce5 	bl	8005900 <__multadd>
 8003f36:	4604      	mov	r4, r0
 8003f38:	4641      	mov	r1, r8
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7ff fcec 	bl	8003918 <quorem>
 8003f40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003f44:	f805 ab01 	strb.w	sl, [r5], #1
 8003f48:	ebcb 0305 	rsb	r3, fp, r5
 8003f4c:	42bb      	cmp	r3, r7
 8003f4e:	f04f 020a 	mov.w	r2, #10
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	4621      	mov	r1, r4
 8003f58:	4648      	mov	r0, r9
 8003f5a:	dbea      	blt.n	8003f32 <_dtoa_r+0x4f2>
 8003f5c:	9b07      	ldr	r3, [sp, #28]
 8003f5e:	9a06      	ldr	r2, [sp, #24]
 8003f60:	2a01      	cmp	r2, #1
 8003f62:	bfac      	ite	ge
 8003f64:	189b      	addge	r3, r3, r2
 8003f66:	3301      	addlt	r3, #1
 8003f68:	461d      	mov	r5, r3
 8003f6a:	f04f 0b00 	mov.w	fp, #0
 8003f6e:	4621      	mov	r1, r4
 8003f70:	2201      	movs	r2, #1
 8003f72:	4648      	mov	r0, r9
 8003f74:	f001 fe44 	bl	8005c00 <__lshift>
 8003f78:	9902      	ldr	r1, [sp, #8]
 8003f7a:	9008      	str	r0, [sp, #32]
 8003f7c:	f001 fe98 	bl	8005cb0 <__mcmp>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	f340 8305 	ble.w	8004590 <_dtoa_r+0xb50>
 8003f86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003f8a:	9907      	ldr	r1, [sp, #28]
 8003f8c:	1e6b      	subs	r3, r5, #1
 8003f8e:	e004      	b.n	8003f9a <_dtoa_r+0x55a>
 8003f90:	428b      	cmp	r3, r1
 8003f92:	f000 8274 	beq.w	800447e <_dtoa_r+0xa3e>
 8003f96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f9a:	2a39      	cmp	r2, #57	; 0x39
 8003f9c:	f103 0501 	add.w	r5, r3, #1
 8003fa0:	d0f6      	beq.n	8003f90 <_dtoa_r+0x550>
 8003fa2:	3201      	adds	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	9902      	ldr	r1, [sp, #8]
 8003fa8:	4648      	mov	r0, r9
 8003faa:	f001 fc9f 	bl	80058ec <_Bfree>
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	f43f af0d 	beq.w	8003dce <_dtoa_r+0x38e>
 8003fb4:	f1bb 0f00 	cmp.w	fp, #0
 8003fb8:	d005      	beq.n	8003fc6 <_dtoa_r+0x586>
 8003fba:	45b3      	cmp	fp, r6
 8003fbc:	d003      	beq.n	8003fc6 <_dtoa_r+0x586>
 8003fbe:	4659      	mov	r1, fp
 8003fc0:	4648      	mov	r0, r9
 8003fc2:	f001 fc93 	bl	80058ec <_Bfree>
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	4648      	mov	r0, r9
 8003fca:	f001 fc8f 	bl	80058ec <_Bfree>
 8003fce:	e6fe      	b.n	8003dce <_dtoa_r+0x38e>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd4:	e5ec      	b.n	8003bb0 <_dtoa_r+0x170>
 8003fd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f004 f948 	bl	8008270 <__aeabi_i2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	f004 fc10 	bl	800880c <__aeabi_dcmpeq>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	f47f adcb 	bne.w	8003b88 <_dtoa_r+0x148>
 8003ff2:	f108 33ff 	add.w	r3, r8, #4294967295
 8003ff6:	9304      	str	r3, [sp, #16]
 8003ff8:	e5c6      	b.n	8003b88 <_dtoa_r+0x148>
 8003ffa:	9a05      	ldr	r2, [sp, #20]
 8003ffc:	9b04      	ldr	r3, [sp, #16]
 8003ffe:	1ad2      	subs	r2, r2, r3
 8004000:	425b      	negs	r3, r3
 8004002:	9302      	str	r3, [sp, #8]
 8004004:	2300      	movs	r3, #0
 8004006:	9205      	str	r2, [sp, #20]
 8004008:	930a      	str	r3, [sp, #40]	; 0x28
 800400a:	e5e0      	b.n	8003bce <_dtoa_r+0x18e>
 800400c:	f1c8 0300 	rsb	r3, r8, #0
 8004010:	9305      	str	r3, [sp, #20]
 8004012:	f04f 0800 	mov.w	r8, #0
 8004016:	e5d2      	b.n	8003bbe <_dtoa_r+0x17e>
 8004018:	9f02      	ldr	r7, [sp, #8]
 800401a:	9d05      	ldr	r5, [sp, #20]
 800401c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800401e:	e707      	b.n	8003e30 <_dtoa_r+0x3f0>
 8004020:	f1c3 0820 	rsb	r8, r3, #32
 8004024:	fa0a f008 	lsl.w	r0, sl, r8
 8004028:	e57b      	b.n	8003b22 <_dtoa_r+0xe2>
 800402a:	900b      	str	r0, [sp, #44]	; 0x2c
 800402c:	e5c0      	b.n	8003bb0 <_dtoa_r+0x170>
 800402e:	bf00      	nop
 8004030:	40240000 	.word	0x40240000
 8004034:	2300      	movs	r3, #0
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	9b04      	ldr	r3, [sp, #16]
 800403a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800403c:	4413      	add	r3, r2
 800403e:	930c      	str	r3, [sp, #48]	; 0x30
 8004040:	3301      	adds	r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	9306      	str	r3, [sp, #24]
 8004046:	f340 827d 	ble.w	8004544 <_dtoa_r+0xb04>
 800404a:	9c06      	ldr	r4, [sp, #24]
 800404c:	4626      	mov	r6, r4
 800404e:	2100      	movs	r1, #0
 8004050:	2e17      	cmp	r6, #23
 8004052:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8004056:	d90b      	bls.n	8004070 <_dtoa_r+0x630>
 8004058:	2201      	movs	r2, #1
 800405a:	2304      	movs	r3, #4
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	f103 0014 	add.w	r0, r3, #20
 8004062:	42b0      	cmp	r0, r6
 8004064:	4611      	mov	r1, r2
 8004066:	f102 0201 	add.w	r2, r2, #1
 800406a:	d9f7      	bls.n	800405c <_dtoa_r+0x61c>
 800406c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8004070:	4648      	mov	r0, r9
 8004072:	f001 fc15 	bl	80058a0 <_Balloc>
 8004076:	2c0e      	cmp	r4, #14
 8004078:	9007      	str	r0, [sp, #28]
 800407a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800407e:	f63f ade5 	bhi.w	8003c4c <_dtoa_r+0x20c>
 8004082:	2d00      	cmp	r5, #0
 8004084:	f43f ade2 	beq.w	8003c4c <_dtoa_r+0x20c>
 8004088:	9904      	ldr	r1, [sp, #16]
 800408a:	2900      	cmp	r1, #0
 800408c:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8004090:	f340 829a 	ble.w	80045c8 <_dtoa_r+0xb88>
 8004094:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <_dtoa_r+0x898>)
 8004096:	f001 020f 	and.w	r2, r1, #15
 800409a:	110e      	asrs	r6, r1, #4
 800409c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040a0:	06f0      	lsls	r0, r6, #27
 80040a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80040a6:	f140 8246 	bpl.w	8004536 <_dtoa_r+0xaf6>
 80040aa:	4b8c      	ldr	r3, [pc, #560]	; (80042dc <_dtoa_r+0x89c>)
 80040ac:	4650      	mov	r0, sl
 80040ae:	4659      	mov	r1, fp
 80040b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80040b4:	f004 fa6c 	bl	8008590 <__aeabi_ddiv>
 80040b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040bc:	f006 060f 	and.w	r6, r6, #15
 80040c0:	f04f 0a03 	mov.w	sl, #3
 80040c4:	b186      	cbz	r6, 80040e8 <_dtoa_r+0x6a8>
 80040c6:	4f85      	ldr	r7, [pc, #532]	; (80042dc <_dtoa_r+0x89c>)
 80040c8:	07f1      	lsls	r1, r6, #31
 80040ca:	d509      	bpl.n	80040e0 <_dtoa_r+0x6a0>
 80040cc:	4620      	mov	r0, r4
 80040ce:	4629      	mov	r1, r5
 80040d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d4:	f004 f932 	bl	800833c <__aeabi_dmul>
 80040d8:	f10a 0a01 	add.w	sl, sl, #1
 80040dc:	4604      	mov	r4, r0
 80040de:	460d      	mov	r5, r1
 80040e0:	1076      	asrs	r6, r6, #1
 80040e2:	f107 0708 	add.w	r7, r7, #8
 80040e6:	d1ef      	bne.n	80040c8 <_dtoa_r+0x688>
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040f0:	f004 fa4e 	bl	8008590 <__aeabi_ddiv>
 80040f4:	4606      	mov	r6, r0
 80040f6:	460f      	mov	r7, r1
 80040f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040fa:	b143      	cbz	r3, 800410e <_dtoa_r+0x6ce>
 80040fc:	2200      	movs	r2, #0
 80040fe:	4b78      	ldr	r3, [pc, #480]	; (80042e0 <_dtoa_r+0x8a0>)
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f004 fb8c 	bl	8008820 <__aeabi_dcmplt>
 8004108:	2800      	cmp	r0, #0
 800410a:	f040 831a 	bne.w	8004742 <_dtoa_r+0xd02>
 800410e:	4650      	mov	r0, sl
 8004110:	f004 f8ae 	bl	8008270 <__aeabi_i2d>
 8004114:	4632      	mov	r2, r6
 8004116:	463b      	mov	r3, r7
 8004118:	f004 f910 	bl	800833c <__aeabi_dmul>
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <_dtoa_r+0x8a4>)
 800411e:	2200      	movs	r2, #0
 8004120:	f003 ff5a 	bl	8007fd8 <__adddf3>
 8004124:	9b06      	ldr	r3, [sp, #24]
 8004126:	4604      	mov	r4, r0
 8004128:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 81db 	beq.w	80044e8 <_dtoa_r+0xaa8>
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	9314      	str	r3, [sp, #80]	; 0x50
 8004136:	9b06      	ldr	r3, [sp, #24]
 8004138:	9310      	str	r3, [sp, #64]	; 0x40
 800413a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8294 	beq.w	800466a <_dtoa_r+0xc2a>
 8004142:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004144:	4b64      	ldr	r3, [pc, #400]	; (80042d8 <_dtoa_r+0x898>)
 8004146:	4968      	ldr	r1, [pc, #416]	; (80042e8 <_dtoa_r+0x8a8>)
 8004148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800414c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004150:	2000      	movs	r0, #0
 8004152:	f004 fa1d 	bl	8008590 <__aeabi_ddiv>
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	f003 ff3b 	bl	8007fd4 <__aeabi_dsub>
 800415e:	4682      	mov	sl, r0
 8004160:	468b      	mov	fp, r1
 8004162:	4630      	mov	r0, r6
 8004164:	4639      	mov	r1, r7
 8004166:	f004 fb99 	bl	800889c <__aeabi_d2iz>
 800416a:	4604      	mov	r4, r0
 800416c:	f004 f880 	bl	8008270 <__aeabi_i2d>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4630      	mov	r0, r6
 8004176:	4639      	mov	r1, r7
 8004178:	f003 ff2c 	bl	8007fd4 <__aeabi_dsub>
 800417c:	3430      	adds	r4, #48	; 0x30
 800417e:	9d07      	ldr	r5, [sp, #28]
 8004180:	b2e4      	uxtb	r4, r4
 8004182:	4606      	mov	r6, r0
 8004184:	460f      	mov	r7, r1
 8004186:	702c      	strb	r4, [r5, #0]
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4650      	mov	r0, sl
 800418e:	4659      	mov	r1, fp
 8004190:	3501      	adds	r5, #1
 8004192:	f004 fb63 	bl	800885c <__aeabi_dcmpgt>
 8004196:	2800      	cmp	r0, #0
 8004198:	d150      	bne.n	800423c <_dtoa_r+0x7fc>
 800419a:	4632      	mov	r2, r6
 800419c:	463b      	mov	r3, r7
 800419e:	2000      	movs	r0, #0
 80041a0:	494f      	ldr	r1, [pc, #316]	; (80042e0 <_dtoa_r+0x8a0>)
 80041a2:	f003 ff17 	bl	8007fd4 <__aeabi_dsub>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4650      	mov	r0, sl
 80041ac:	4659      	mov	r1, fp
 80041ae:	f004 fb55 	bl	800885c <__aeabi_dcmpgt>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	f040 8308 	bne.w	80047c8 <_dtoa_r+0xd88>
 80041b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041ba:	2a01      	cmp	r2, #1
 80041bc:	f340 81f7 	ble.w	80045ae <_dtoa_r+0xb6e>
 80041c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041c2:	9a07      	ldr	r2, [sp, #28]
 80041c4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80041c8:	4413      	add	r3, r2
 80041ca:	4698      	mov	r8, r3
 80041cc:	e00d      	b.n	80041ea <_dtoa_r+0x7aa>
 80041ce:	2000      	movs	r0, #0
 80041d0:	4943      	ldr	r1, [pc, #268]	; (80042e0 <_dtoa_r+0x8a0>)
 80041d2:	f003 feff 	bl	8007fd4 <__aeabi_dsub>
 80041d6:	4652      	mov	r2, sl
 80041d8:	465b      	mov	r3, fp
 80041da:	f004 fb21 	bl	8008820 <__aeabi_dcmplt>
 80041de:	2800      	cmp	r0, #0
 80041e0:	f040 82f2 	bne.w	80047c8 <_dtoa_r+0xd88>
 80041e4:	4545      	cmp	r5, r8
 80041e6:	f000 81e0 	beq.w	80045aa <_dtoa_r+0xb6a>
 80041ea:	4650      	mov	r0, sl
 80041ec:	4659      	mov	r1, fp
 80041ee:	2200      	movs	r2, #0
 80041f0:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <_dtoa_r+0x8ac>)
 80041f2:	f004 f8a3 	bl	800833c <__aeabi_dmul>
 80041f6:	2200      	movs	r2, #0
 80041f8:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <_dtoa_r+0x8ac>)
 80041fa:	4682      	mov	sl, r0
 80041fc:	468b      	mov	fp, r1
 80041fe:	4630      	mov	r0, r6
 8004200:	4639      	mov	r1, r7
 8004202:	f004 f89b 	bl	800833c <__aeabi_dmul>
 8004206:	460f      	mov	r7, r1
 8004208:	4606      	mov	r6, r0
 800420a:	f004 fb47 	bl	800889c <__aeabi_d2iz>
 800420e:	4604      	mov	r4, r0
 8004210:	f004 f82e 	bl	8008270 <__aeabi_i2d>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4630      	mov	r0, r6
 800421a:	4639      	mov	r1, r7
 800421c:	f003 feda 	bl	8007fd4 <__aeabi_dsub>
 8004220:	3430      	adds	r4, #48	; 0x30
 8004222:	b2e4      	uxtb	r4, r4
 8004224:	4652      	mov	r2, sl
 8004226:	465b      	mov	r3, fp
 8004228:	f805 4b01 	strb.w	r4, [r5], #1
 800422c:	4606      	mov	r6, r0
 800422e:	460f      	mov	r7, r1
 8004230:	f004 faf6 	bl	8008820 <__aeabi_dcmplt>
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	2800      	cmp	r0, #0
 800423a:	d0c8      	beq.n	80041ce <_dtoa_r+0x78e>
 800423c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800423e:	9304      	str	r3, [sp, #16]
 8004240:	e5c5      	b.n	8003dce <_dtoa_r+0x38e>
 8004242:	2300      	movs	r3, #0
 8004244:	9309      	str	r3, [sp, #36]	; 0x24
 8004246:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004248:	2b00      	cmp	r3, #0
 800424a:	f340 8180 	ble.w	800454e <_dtoa_r+0xb0e>
 800424e:	461e      	mov	r6, r3
 8004250:	461c      	mov	r4, r3
 8004252:	930c      	str	r3, [sp, #48]	; 0x30
 8004254:	9306      	str	r3, [sp, #24]
 8004256:	e6fa      	b.n	800404e <_dtoa_r+0x60e>
 8004258:	2301      	movs	r3, #1
 800425a:	9309      	str	r3, [sp, #36]	; 0x24
 800425c:	e7f3      	b.n	8004246 <_dtoa_r+0x806>
 800425e:	9408      	str	r4, [sp, #32]
 8004260:	9a02      	ldr	r2, [sp, #8]
 8004262:	9908      	ldr	r1, [sp, #32]
 8004264:	4648      	mov	r0, r9
 8004266:	f001 fc7b 	bl	8005b60 <__pow5mult>
 800426a:	4604      	mov	r4, r0
 800426c:	e60e      	b.n	8003e8c <_dtoa_r+0x44c>
 800426e:	9b06      	ldr	r3, [sp, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f73f acfe 	bgt.w	8003c72 <_dtoa_r+0x232>
 8004276:	f040 814f 	bne.w	8004518 <_dtoa_r+0xad8>
 800427a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800427e:	2200      	movs	r2, #0
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <_dtoa_r+0x8b0>)
 8004282:	f004 f85b 	bl	800833c <__aeabi_dmul>
 8004286:	465b      	mov	r3, fp
 8004288:	4652      	mov	r2, sl
 800428a:	f004 fadd 	bl	8008848 <__aeabi_dcmpge>
 800428e:	9b06      	ldr	r3, [sp, #24]
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	461e      	mov	r6, r3
 8004294:	2800      	cmp	r0, #0
 8004296:	f000 80ea 	beq.w	800446e <_dtoa_r+0xa2e>
 800429a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800429c:	9d07      	ldr	r5, [sp, #28]
 800429e:	43db      	mvns	r3, r3
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	9902      	ldr	r1, [sp, #8]
 80042a4:	4648      	mov	r0, r9
 80042a6:	f001 fb21 	bl	80058ec <_Bfree>
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	f43f ad8f 	beq.w	8003dce <_dtoa_r+0x38e>
 80042b0:	e689      	b.n	8003fc6 <_dtoa_r+0x586>
 80042b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	f000 8238 	beq.w	800472a <_dtoa_r+0xcea>
 80042ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80042be:	9f02      	ldr	r7, [sp, #8]
 80042c0:	9d05      	ldr	r5, [sp, #20]
 80042c2:	e5ac      	b.n	8003e1e <_dtoa_r+0x3de>
 80042c4:	201c      	movs	r0, #28
 80042c6:	e60a      	b.n	8003ede <_dtoa_r+0x49e>
 80042c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f340 8280 	ble.w	80047d0 <_dtoa_r+0xd90>
 80042d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80042d2:	2001      	movs	r0, #1
 80042d4:	e5f7      	b.n	8003ec6 <_dtoa_r+0x486>
 80042d6:	bf00      	nop
 80042d8:	08008dc0 	.word	0x08008dc0
 80042dc:	08008e88 	.word	0x08008e88
 80042e0:	3ff00000 	.word	0x3ff00000
 80042e4:	401c0000 	.word	0x401c0000
 80042e8:	3fe00000 	.word	0x3fe00000
 80042ec:	40240000 	.word	0x40240000
 80042f0:	40140000 	.word	0x40140000
 80042f4:	4631      	mov	r1, r6
 80042f6:	2300      	movs	r3, #0
 80042f8:	220a      	movs	r2, #10
 80042fa:	4648      	mov	r0, r9
 80042fc:	f001 fb00 	bl	8005900 <__multadd>
 8004300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	4606      	mov	r6, r0
 8004306:	f340 828d 	ble.w	8004824 <_dtoa_r+0xde4>
 800430a:	9306      	str	r3, [sp, #24]
 800430c:	2d00      	cmp	r5, #0
 800430e:	dd05      	ble.n	800431c <_dtoa_r+0x8dc>
 8004310:	4631      	mov	r1, r6
 8004312:	462a      	mov	r2, r5
 8004314:	4648      	mov	r0, r9
 8004316:	f001 fc73 	bl	8005c00 <__lshift>
 800431a:	4606      	mov	r6, r0
 800431c:	2f00      	cmp	r7, #0
 800431e:	f040 817c 	bne.w	800461a <_dtoa_r+0xbda>
 8004322:	46b0      	mov	r8, r6
 8004324:	9b06      	ldr	r3, [sp, #24]
 8004326:	9a07      	ldr	r2, [sp, #28]
 8004328:	3b01      	subs	r3, #1
 800432a:	18d3      	adds	r3, r2, r3
 800432c:	9308      	str	r3, [sp, #32]
 800432e:	f00a 0301 	and.w	r3, sl, #1
 8004332:	9309      	str	r3, [sp, #36]	; 0x24
 8004334:	4617      	mov	r7, r2
 8004336:	f8dd b008 	ldr.w	fp, [sp, #8]
 800433a:	4620      	mov	r0, r4
 800433c:	4659      	mov	r1, fp
 800433e:	f7ff faeb 	bl	8003918 <quorem>
 8004342:	4631      	mov	r1, r6
 8004344:	4605      	mov	r5, r0
 8004346:	4620      	mov	r0, r4
 8004348:	f001 fcb2 	bl	8005cb0 <__mcmp>
 800434c:	4642      	mov	r2, r8
 800434e:	4659      	mov	r1, fp
 8004350:	4682      	mov	sl, r0
 8004352:	4648      	mov	r0, r9
 8004354:	f001 fcce 	bl	8005cf4 <__mdiff>
 8004358:	68c2      	ldr	r2, [r0, #12]
 800435a:	4683      	mov	fp, r0
 800435c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8004360:	2a00      	cmp	r2, #0
 8004362:	d149      	bne.n	80043f8 <_dtoa_r+0x9b8>
 8004364:	4601      	mov	r1, r0
 8004366:	4620      	mov	r0, r4
 8004368:	9306      	str	r3, [sp, #24]
 800436a:	f001 fca1 	bl	8005cb0 <__mcmp>
 800436e:	4659      	mov	r1, fp
 8004370:	9005      	str	r0, [sp, #20]
 8004372:	4648      	mov	r0, r9
 8004374:	f001 faba 	bl	80058ec <_Bfree>
 8004378:	9a05      	ldr	r2, [sp, #20]
 800437a:	9b06      	ldr	r3, [sp, #24]
 800437c:	b92a      	cbnz	r2, 800438a <_dtoa_r+0x94a>
 800437e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004380:	b919      	cbnz	r1, 800438a <_dtoa_r+0x94a>
 8004382:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004384:	2900      	cmp	r1, #0
 8004386:	f000 8235 	beq.w	80047f4 <_dtoa_r+0xdb4>
 800438a:	f1ba 0f00 	cmp.w	sl, #0
 800438e:	f2c0 80e3 	blt.w	8004558 <_dtoa_r+0xb18>
 8004392:	d105      	bne.n	80043a0 <_dtoa_r+0x960>
 8004394:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004396:	b919      	cbnz	r1, 80043a0 <_dtoa_r+0x960>
 8004398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800439a:	2900      	cmp	r1, #0
 800439c:	f000 80dc 	beq.w	8004558 <_dtoa_r+0xb18>
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	f300 814e 	bgt.w	8004642 <_dtoa_r+0xc02>
 80043a6:	9a08      	ldr	r2, [sp, #32]
 80043a8:	703b      	strb	r3, [r7, #0]
 80043aa:	f107 0a01 	add.w	sl, r7, #1
 80043ae:	4297      	cmp	r7, r2
 80043b0:	4655      	mov	r5, sl
 80043b2:	f000 8152 	beq.w	800465a <_dtoa_r+0xc1a>
 80043b6:	4621      	mov	r1, r4
 80043b8:	2300      	movs	r3, #0
 80043ba:	220a      	movs	r2, #10
 80043bc:	4648      	mov	r0, r9
 80043be:	f001 fa9f 	bl	8005900 <__multadd>
 80043c2:	4546      	cmp	r6, r8
 80043c4:	4604      	mov	r4, r0
 80043c6:	4631      	mov	r1, r6
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	f04f 020a 	mov.w	r2, #10
 80043d0:	4648      	mov	r0, r9
 80043d2:	d00b      	beq.n	80043ec <_dtoa_r+0x9ac>
 80043d4:	f001 fa94 	bl	8005900 <__multadd>
 80043d8:	4641      	mov	r1, r8
 80043da:	4606      	mov	r6, r0
 80043dc:	2300      	movs	r3, #0
 80043de:	220a      	movs	r2, #10
 80043e0:	4648      	mov	r0, r9
 80043e2:	f001 fa8d 	bl	8005900 <__multadd>
 80043e6:	4657      	mov	r7, sl
 80043e8:	4680      	mov	r8, r0
 80043ea:	e7a4      	b.n	8004336 <_dtoa_r+0x8f6>
 80043ec:	f001 fa88 	bl	8005900 <__multadd>
 80043f0:	4657      	mov	r7, sl
 80043f2:	4606      	mov	r6, r0
 80043f4:	4680      	mov	r8, r0
 80043f6:	e79e      	b.n	8004336 <_dtoa_r+0x8f6>
 80043f8:	4601      	mov	r1, r0
 80043fa:	4648      	mov	r0, r9
 80043fc:	9305      	str	r3, [sp, #20]
 80043fe:	f001 fa75 	bl	80058ec <_Bfree>
 8004402:	2201      	movs	r2, #1
 8004404:	9b05      	ldr	r3, [sp, #20]
 8004406:	e7c0      	b.n	800438a <_dtoa_r+0x94a>
 8004408:	9902      	ldr	r1, [sp, #8]
 800440a:	4620      	mov	r0, r4
 800440c:	f001 fc50 	bl	8005cb0 <__mcmp>
 8004410:	2800      	cmp	r0, #0
 8004412:	f6bf ad7f 	bge.w	8003f14 <_dtoa_r+0x4d4>
 8004416:	4621      	mov	r1, r4
 8004418:	9c04      	ldr	r4, [sp, #16]
 800441a:	2300      	movs	r3, #0
 800441c:	3c01      	subs	r4, #1
 800441e:	220a      	movs	r2, #10
 8004420:	4648      	mov	r0, r9
 8004422:	9404      	str	r4, [sp, #16]
 8004424:	f001 fa6c 	bl	8005900 <__multadd>
 8004428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442a:	4604      	mov	r4, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	f47f af61 	bne.w	80042f4 <_dtoa_r+0x8b4>
 8004432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004434:	2b00      	cmp	r3, #0
 8004436:	f340 81ed 	ble.w	8004814 <_dtoa_r+0xdd4>
 800443a:	9306      	str	r3, [sp, #24]
 800443c:	e572      	b.n	8003f24 <_dtoa_r+0x4e4>
 800443e:	9c08      	ldr	r4, [sp, #32]
 8004440:	e524      	b.n	8003e8c <_dtoa_r+0x44c>
 8004442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004444:	2b02      	cmp	r3, #2
 8004446:	f77f ad69 	ble.w	8003f1c <_dtoa_r+0x4dc>
 800444a:	9b06      	ldr	r3, [sp, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f040 819d 	bne.w	800478c <_dtoa_r+0xd4c>
 8004452:	9902      	ldr	r1, [sp, #8]
 8004454:	2205      	movs	r2, #5
 8004456:	4648      	mov	r0, r9
 8004458:	f001 fa52 	bl	8005900 <__multadd>
 800445c:	4601      	mov	r1, r0
 800445e:	9002      	str	r0, [sp, #8]
 8004460:	4620      	mov	r0, r4
 8004462:	f001 fc25 	bl	8005cb0 <__mcmp>
 8004466:	2800      	cmp	r0, #0
 8004468:	9408      	str	r4, [sp, #32]
 800446a:	f77f af16 	ble.w	800429a <_dtoa_r+0x85a>
 800446e:	9a04      	ldr	r2, [sp, #16]
 8004470:	9907      	ldr	r1, [sp, #28]
 8004472:	2331      	movs	r3, #49	; 0x31
 8004474:	3201      	adds	r2, #1
 8004476:	9204      	str	r2, [sp, #16]
 8004478:	700b      	strb	r3, [r1, #0]
 800447a:	1c4d      	adds	r5, r1, #1
 800447c:	e711      	b.n	80042a2 <_dtoa_r+0x862>
 800447e:	9a04      	ldr	r2, [sp, #16]
 8004480:	3201      	adds	r2, #1
 8004482:	9204      	str	r2, [sp, #16]
 8004484:	9a07      	ldr	r2, [sp, #28]
 8004486:	2331      	movs	r3, #49	; 0x31
 8004488:	7013      	strb	r3, [r2, #0]
 800448a:	e58c      	b.n	8003fa6 <_dtoa_r+0x566>
 800448c:	2301      	movs	r3, #1
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	e5d2      	b.n	8004038 <_dtoa_r+0x5f8>
 8004492:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004496:	e49a      	b.n	8003dce <_dtoa_r+0x38e>
 8004498:	f1ba 0f00 	cmp.w	sl, #0
 800449c:	f47f ad09 	bne.w	8003eb2 <_dtoa_r+0x472>
 80044a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 813e 	bne.w	8004726 <_dtoa_r+0xce6>
 80044aa:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80044ae:	0d3f      	lsrs	r7, r7, #20
 80044b0:	053f      	lsls	r7, r7, #20
 80044b2:	b12f      	cbz	r7, 80044c0 <_dtoa_r+0xa80>
 80044b4:	9b05      	ldr	r3, [sp, #20]
 80044b6:	3301      	adds	r3, #1
 80044b8:	9305      	str	r3, [sp, #20]
 80044ba:	f108 0801 	add.w	r8, r8, #1
 80044be:	2701      	movs	r7, #1
 80044c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c2:	2001      	movs	r0, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f43f acfe 	beq.w	8003ec6 <_dtoa_r+0x486>
 80044ca:	e4f3      	b.n	8003eb4 <_dtoa_r+0x474>
 80044cc:	4650      	mov	r0, sl
 80044ce:	f003 fecf 	bl	8008270 <__aeabi_i2d>
 80044d2:	4632      	mov	r2, r6
 80044d4:	463b      	mov	r3, r7
 80044d6:	f003 ff31 	bl	800833c <__aeabi_dmul>
 80044da:	2200      	movs	r2, #0
 80044dc:	4bbf      	ldr	r3, [pc, #764]	; (80047dc <_dtoa_r+0xd9c>)
 80044de:	f003 fd7b 	bl	8007fd8 <__adddf3>
 80044e2:	4604      	mov	r4, r0
 80044e4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80044e8:	4630      	mov	r0, r6
 80044ea:	4639      	mov	r1, r7
 80044ec:	2200      	movs	r2, #0
 80044ee:	4bbc      	ldr	r3, [pc, #752]	; (80047e0 <_dtoa_r+0xda0>)
 80044f0:	f003 fd70 	bl	8007fd4 <__aeabi_dsub>
 80044f4:	4622      	mov	r2, r4
 80044f6:	462b      	mov	r3, r5
 80044f8:	4606      	mov	r6, r0
 80044fa:	460f      	mov	r7, r1
 80044fc:	f004 f9ae 	bl	800885c <__aeabi_dcmpgt>
 8004500:	2800      	cmp	r0, #0
 8004502:	f040 80ae 	bne.w	8004662 <_dtoa_r+0xc22>
 8004506:	4622      	mov	r2, r4
 8004508:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800450c:	4630      	mov	r0, r6
 800450e:	4639      	mov	r1, r7
 8004510:	f004 f986 	bl	8008820 <__aeabi_dcmplt>
 8004514:	2800      	cmp	r0, #0
 8004516:	d04a      	beq.n	80045ae <_dtoa_r+0xb6e>
 8004518:	2300      	movs	r3, #0
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	461e      	mov	r6, r3
 800451e:	e6bc      	b.n	800429a <_dtoa_r+0x85a>
 8004520:	9807      	ldr	r0, [sp, #28]
 8004522:	f7ff babe 	b.w	8003aa2 <_dtoa_r+0x62>
 8004526:	9b02      	ldr	r3, [sp, #8]
 8004528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800452a:	9702      	str	r7, [sp, #8]
 800452c:	1afb      	subs	r3, r7, r3
 800452e:	441a      	add	r2, r3
 8004530:	920a      	str	r2, [sp, #40]	; 0x28
 8004532:	2700      	movs	r7, #0
 8004534:	e46d      	b.n	8003e12 <_dtoa_r+0x3d2>
 8004536:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 800453a:	f04f 0a02 	mov.w	sl, #2
 800453e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004542:	e5bf      	b.n	80040c4 <_dtoa_r+0x684>
 8004544:	461c      	mov	r4, r3
 8004546:	2100      	movs	r1, #0
 8004548:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800454c:	e590      	b.n	8004070 <_dtoa_r+0x630>
 800454e:	2401      	movs	r4, #1
 8004550:	9423      	str	r4, [sp, #140]	; 0x8c
 8004552:	940c      	str	r4, [sp, #48]	; 0x30
 8004554:	9406      	str	r4, [sp, #24]
 8004556:	e7f6      	b.n	8004546 <_dtoa_r+0xb06>
 8004558:	2a00      	cmp	r2, #0
 800455a:	469a      	mov	sl, r3
 800455c:	dd11      	ble.n	8004582 <_dtoa_r+0xb42>
 800455e:	4621      	mov	r1, r4
 8004560:	2201      	movs	r2, #1
 8004562:	4648      	mov	r0, r9
 8004564:	f001 fb4c 	bl	8005c00 <__lshift>
 8004568:	9902      	ldr	r1, [sp, #8]
 800456a:	4604      	mov	r4, r0
 800456c:	f001 fba0 	bl	8005cb0 <__mcmp>
 8004570:	2800      	cmp	r0, #0
 8004572:	f340 8148 	ble.w	8004806 <_dtoa_r+0xdc6>
 8004576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800457a:	f000 8109 	beq.w	8004790 <_dtoa_r+0xd50>
 800457e:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8004582:	46b3      	mov	fp, r6
 8004584:	f887 a000 	strb.w	sl, [r7]
 8004588:	1c7d      	adds	r5, r7, #1
 800458a:	4646      	mov	r6, r8
 800458c:	9408      	str	r4, [sp, #32]
 800458e:	e50a      	b.n	8003fa6 <_dtoa_r+0x566>
 8004590:	d104      	bne.n	800459c <_dtoa_r+0xb5c>
 8004592:	f01a 0f01 	tst.w	sl, #1
 8004596:	d001      	beq.n	800459c <_dtoa_r+0xb5c>
 8004598:	e4f5      	b.n	8003f86 <_dtoa_r+0x546>
 800459a:	4615      	mov	r5, r2
 800459c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045a0:	2b30      	cmp	r3, #48	; 0x30
 80045a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80045a6:	d0f8      	beq.n	800459a <_dtoa_r+0xb5a>
 80045a8:	e4fd      	b.n	8003fa6 <_dtoa_r+0x566>
 80045aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80045ae:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 80045b2:	f7ff bb4b 	b.w	8003c4c <_dtoa_r+0x20c>
 80045b6:	9907      	ldr	r1, [sp, #28]
 80045b8:	2230      	movs	r2, #48	; 0x30
 80045ba:	700a      	strb	r2, [r1, #0]
 80045bc:	9a04      	ldr	r2, [sp, #16]
 80045be:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80045c2:	3201      	adds	r2, #1
 80045c4:	9204      	str	r2, [sp, #16]
 80045c6:	e400      	b.n	8003dca <_dtoa_r+0x38a>
 80045c8:	9b04      	ldr	r3, [sp, #16]
 80045ca:	425c      	negs	r4, r3
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	f000 80b3 	beq.w	8004738 <_dtoa_r+0xcf8>
 80045d2:	4b84      	ldr	r3, [pc, #528]	; (80047e4 <_dtoa_r+0xda4>)
 80045d4:	f004 020f 	and.w	r2, r4, #15
 80045d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045e4:	f003 feaa 	bl	800833c <__aeabi_dmul>
 80045e8:	1124      	asrs	r4, r4, #4
 80045ea:	4606      	mov	r6, r0
 80045ec:	460f      	mov	r7, r1
 80045ee:	f000 8116 	beq.w	800481e <_dtoa_r+0xdde>
 80045f2:	4d7d      	ldr	r5, [pc, #500]	; (80047e8 <_dtoa_r+0xda8>)
 80045f4:	f04f 0a02 	mov.w	sl, #2
 80045f8:	07e2      	lsls	r2, r4, #31
 80045fa:	d509      	bpl.n	8004610 <_dtoa_r+0xbd0>
 80045fc:	4630      	mov	r0, r6
 80045fe:	4639      	mov	r1, r7
 8004600:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004604:	f003 fe9a 	bl	800833c <__aeabi_dmul>
 8004608:	f10a 0a01 	add.w	sl, sl, #1
 800460c:	4606      	mov	r6, r0
 800460e:	460f      	mov	r7, r1
 8004610:	1064      	asrs	r4, r4, #1
 8004612:	f105 0508 	add.w	r5, r5, #8
 8004616:	d1ef      	bne.n	80045f8 <_dtoa_r+0xbb8>
 8004618:	e56e      	b.n	80040f8 <_dtoa_r+0x6b8>
 800461a:	6871      	ldr	r1, [r6, #4]
 800461c:	4648      	mov	r0, r9
 800461e:	f001 f93f 	bl	80058a0 <_Balloc>
 8004622:	6933      	ldr	r3, [r6, #16]
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	4605      	mov	r5, r0
 8004628:	0092      	lsls	r2, r2, #2
 800462a:	f106 010c 	add.w	r1, r6, #12
 800462e:	300c      	adds	r0, #12
 8004630:	f7fd fb6e 	bl	8001d10 <memcpy>
 8004634:	4629      	mov	r1, r5
 8004636:	2201      	movs	r2, #1
 8004638:	4648      	mov	r0, r9
 800463a:	f001 fae1 	bl	8005c00 <__lshift>
 800463e:	4680      	mov	r8, r0
 8004640:	e670      	b.n	8004324 <_dtoa_r+0x8e4>
 8004642:	2b39      	cmp	r3, #57	; 0x39
 8004644:	f000 80a4 	beq.w	8004790 <_dtoa_r+0xd50>
 8004648:	f103 0a01 	add.w	sl, r3, #1
 800464c:	46b3      	mov	fp, r6
 800464e:	f887 a000 	strb.w	sl, [r7]
 8004652:	1c7d      	adds	r5, r7, #1
 8004654:	4646      	mov	r6, r8
 8004656:	9408      	str	r4, [sp, #32]
 8004658:	e4a5      	b.n	8003fa6 <_dtoa_r+0x566>
 800465a:	46b3      	mov	fp, r6
 800465c:	469a      	mov	sl, r3
 800465e:	4646      	mov	r6, r8
 8004660:	e485      	b.n	8003f6e <_dtoa_r+0x52e>
 8004662:	2300      	movs	r3, #0
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	461e      	mov	r6, r3
 8004668:	e701      	b.n	800446e <_dtoa_r+0xa2e>
 800466a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800466c:	495d      	ldr	r1, [pc, #372]	; (80047e4 <_dtoa_r+0xda4>)
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004674:	462b      	mov	r3, r5
 8004676:	9215      	str	r2, [sp, #84]	; 0x54
 8004678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800467c:	4622      	mov	r2, r4
 800467e:	f003 fe5d 	bl	800833c <__aeabi_dmul>
 8004682:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004686:	4639      	mov	r1, r7
 8004688:	4630      	mov	r0, r6
 800468a:	f004 f907 	bl	800889c <__aeabi_d2iz>
 800468e:	4604      	mov	r4, r0
 8004690:	f003 fdee 	bl	8008270 <__aeabi_i2d>
 8004694:	460b      	mov	r3, r1
 8004696:	4602      	mov	r2, r0
 8004698:	4639      	mov	r1, r7
 800469a:	4630      	mov	r0, r6
 800469c:	f003 fc9a 	bl	8007fd4 <__aeabi_dsub>
 80046a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046a2:	460f      	mov	r7, r1
 80046a4:	9907      	ldr	r1, [sp, #28]
 80046a6:	3430      	adds	r4, #48	; 0x30
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	4606      	mov	r6, r0
 80046ac:	700c      	strb	r4, [r1, #0]
 80046ae:	f101 0501 	add.w	r5, r1, #1
 80046b2:	d020      	beq.n	80046f6 <_dtoa_r+0xcb6>
 80046b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046b6:	9a07      	ldr	r2, [sp, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	469a      	mov	sl, r3
 80046bc:	46ab      	mov	fp, r5
 80046be:	2200      	movs	r2, #0
 80046c0:	4b4a      	ldr	r3, [pc, #296]	; (80047ec <_dtoa_r+0xdac>)
 80046c2:	4630      	mov	r0, r6
 80046c4:	4639      	mov	r1, r7
 80046c6:	f003 fe39 	bl	800833c <__aeabi_dmul>
 80046ca:	460f      	mov	r7, r1
 80046cc:	4606      	mov	r6, r0
 80046ce:	f004 f8e5 	bl	800889c <__aeabi_d2iz>
 80046d2:	4604      	mov	r4, r0
 80046d4:	f003 fdcc 	bl	8008270 <__aeabi_i2d>
 80046d8:	3430      	adds	r4, #48	; 0x30
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	f003 fc77 	bl	8007fd4 <__aeabi_dsub>
 80046e6:	f80b 4b01 	strb.w	r4, [fp], #1
 80046ea:	45da      	cmp	sl, fp
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	d1e5      	bne.n	80046be <_dtoa_r+0xc7e>
 80046f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046f4:	441d      	add	r5, r3
 80046f6:	2200      	movs	r2, #0
 80046f8:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <_dtoa_r+0xdb0>)
 80046fa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80046fe:	f003 fc6b 	bl	8007fd8 <__adddf3>
 8004702:	4632      	mov	r2, r6
 8004704:	463b      	mov	r3, r7
 8004706:	f004 f88b 	bl	8008820 <__aeabi_dcmplt>
 800470a:	2800      	cmp	r0, #0
 800470c:	d048      	beq.n	80047a0 <_dtoa_r+0xd60>
 800470e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004710:	9304      	str	r3, [sp, #16]
 8004712:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004716:	f7ff bb4c 	b.w	8003db2 <_dtoa_r+0x372>
 800471a:	9b05      	ldr	r3, [sp, #20]
 800471c:	9a06      	ldr	r2, [sp, #24]
 800471e:	1a9d      	subs	r5, r3, r2
 8004720:	2300      	movs	r3, #0
 8004722:	f7ff bb7c 	b.w	8003e1e <_dtoa_r+0x3de>
 8004726:	2700      	movs	r7, #0
 8004728:	e6ca      	b.n	80044c0 <_dtoa_r+0xa80>
 800472a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800472c:	9f02      	ldr	r7, [sp, #8]
 800472e:	9d05      	ldr	r5, [sp, #20]
 8004730:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004734:	f7ff bb73 	b.w	8003e1e <_dtoa_r+0x3de>
 8004738:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800473c:	f04f 0a02 	mov.w	sl, #2
 8004740:	e4da      	b.n	80040f8 <_dtoa_r+0x6b8>
 8004742:	9b06      	ldr	r3, [sp, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f43f aec1 	beq.w	80044cc <_dtoa_r+0xa8c>
 800474a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	f77f af2e 	ble.w	80045ae <_dtoa_r+0xb6e>
 8004752:	2200      	movs	r2, #0
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <_dtoa_r+0xdac>)
 8004756:	4630      	mov	r0, r6
 8004758:	4639      	mov	r1, r7
 800475a:	f003 fdef 	bl	800833c <__aeabi_dmul>
 800475e:	4606      	mov	r6, r0
 8004760:	460f      	mov	r7, r1
 8004762:	f10a 0001 	add.w	r0, sl, #1
 8004766:	f003 fd83 	bl	8008270 <__aeabi_i2d>
 800476a:	4632      	mov	r2, r6
 800476c:	463b      	mov	r3, r7
 800476e:	f003 fde5 	bl	800833c <__aeabi_dmul>
 8004772:	2200      	movs	r2, #0
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <_dtoa_r+0xd9c>)
 8004776:	f003 fc2f 	bl	8007fd8 <__adddf3>
 800477a:	9a04      	ldr	r2, [sp, #16]
 800477c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800477e:	9310      	str	r3, [sp, #64]	; 0x40
 8004780:	3a01      	subs	r2, #1
 8004782:	4604      	mov	r4, r0
 8004784:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004788:	9214      	str	r2, [sp, #80]	; 0x50
 800478a:	e4d6      	b.n	800413a <_dtoa_r+0x6fa>
 800478c:	9408      	str	r4, [sp, #32]
 800478e:	e584      	b.n	800429a <_dtoa_r+0x85a>
 8004790:	2239      	movs	r2, #57	; 0x39
 8004792:	46b3      	mov	fp, r6
 8004794:	9408      	str	r4, [sp, #32]
 8004796:	4646      	mov	r6, r8
 8004798:	703a      	strb	r2, [r7, #0]
 800479a:	1c7d      	adds	r5, r7, #1
 800479c:	f7ff bbf5 	b.w	8003f8a <_dtoa_r+0x54a>
 80047a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80047a4:	2000      	movs	r0, #0
 80047a6:	4912      	ldr	r1, [pc, #72]	; (80047f0 <_dtoa_r+0xdb0>)
 80047a8:	f003 fc14 	bl	8007fd4 <__aeabi_dsub>
 80047ac:	4632      	mov	r2, r6
 80047ae:	463b      	mov	r3, r7
 80047b0:	f004 f854 	bl	800885c <__aeabi_dcmpgt>
 80047b4:	b908      	cbnz	r0, 80047ba <_dtoa_r+0xd7a>
 80047b6:	e6fa      	b.n	80045ae <_dtoa_r+0xb6e>
 80047b8:	4615      	mov	r5, r2
 80047ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047be:	2b30      	cmp	r3, #48	; 0x30
 80047c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80047c4:	d0f8      	beq.n	80047b8 <_dtoa_r+0xd78>
 80047c6:	e539      	b.n	800423c <_dtoa_r+0x7fc>
 80047c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	f7ff baf1 	b.w	8003db2 <_dtoa_r+0x372>
 80047d0:	f1ba 0f00 	cmp.w	sl, #0
 80047d4:	f47f ad7c 	bne.w	80042d0 <_dtoa_r+0x890>
 80047d8:	e662      	b.n	80044a0 <_dtoa_r+0xa60>
 80047da:	bf00      	nop
 80047dc:	401c0000 	.word	0x401c0000
 80047e0:	40140000 	.word	0x40140000
 80047e4:	08008dc0 	.word	0x08008dc0
 80047e8:	08008e88 	.word	0x08008e88
 80047ec:	40240000 	.word	0x40240000
 80047f0:	3fe00000 	.word	0x3fe00000
 80047f4:	2b39      	cmp	r3, #57	; 0x39
 80047f6:	46d3      	mov	fp, sl
 80047f8:	469a      	mov	sl, r3
 80047fa:	d0c9      	beq.n	8004790 <_dtoa_r+0xd50>
 80047fc:	f1bb 0f00 	cmp.w	fp, #0
 8004800:	f73f aebd 	bgt.w	800457e <_dtoa_r+0xb3e>
 8004804:	e6bd      	b.n	8004582 <_dtoa_r+0xb42>
 8004806:	f47f aebc 	bne.w	8004582 <_dtoa_r+0xb42>
 800480a:	f01a 0f01 	tst.w	sl, #1
 800480e:	f43f aeb8 	beq.w	8004582 <_dtoa_r+0xb42>
 8004812:	e6b0      	b.n	8004576 <_dtoa_r+0xb36>
 8004814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004816:	2b02      	cmp	r3, #2
 8004818:	dc25      	bgt.n	8004866 <_dtoa_r+0xe26>
 800481a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800481c:	e60d      	b.n	800443a <_dtoa_r+0x9fa>
 800481e:	f04f 0a02 	mov.w	sl, #2
 8004822:	e469      	b.n	80040f8 <_dtoa_r+0x6b8>
 8004824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004826:	2b02      	cmp	r3, #2
 8004828:	dc1d      	bgt.n	8004866 <_dtoa_r+0xe26>
 800482a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800482c:	e56d      	b.n	800430a <_dtoa_r+0x8ca>
 800482e:	2400      	movs	r4, #0
 8004830:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004834:	4621      	mov	r1, r4
 8004836:	4648      	mov	r0, r9
 8004838:	f001 f832 	bl	80058a0 <_Balloc>
 800483c:	f04f 33ff 	mov.w	r3, #4294967295
 8004840:	9306      	str	r3, [sp, #24]
 8004842:	930c      	str	r3, [sp, #48]	; 0x30
 8004844:	2301      	movs	r3, #1
 8004846:	9007      	str	r0, [sp, #28]
 8004848:	9423      	str	r4, [sp, #140]	; 0x8c
 800484a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	f7ff b9fc 	b.w	8003c4c <_dtoa_r+0x20c>
 8004854:	f43f ab48 	beq.w	8003ee8 <_dtoa_r+0x4a8>
 8004858:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800485c:	f7ff bb3f 	b.w	8003ede <_dtoa_r+0x49e>
 8004860:	2501      	movs	r5, #1
 8004862:	f7ff b9bd 	b.w	8003be0 <_dtoa_r+0x1a0>
 8004866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004868:	9306      	str	r3, [sp, #24]
 800486a:	e5ee      	b.n	800444a <_dtoa_r+0xa0a>

0800486c <__sflush_r>:
 800486c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8004870:	b29a      	uxth	r2, r3
 8004872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004876:	460d      	mov	r5, r1
 8004878:	0711      	lsls	r1, r2, #28
 800487a:	4680      	mov	r8, r0
 800487c:	d43c      	bmi.n	80048f8 <__sflush_r+0x8c>
 800487e:	686a      	ldr	r2, [r5, #4]
 8004880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004884:	2a00      	cmp	r2, #0
 8004886:	81ab      	strh	r3, [r5, #12]
 8004888:	dd73      	ble.n	8004972 <__sflush_r+0x106>
 800488a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800488c:	2c00      	cmp	r4, #0
 800488e:	d04b      	beq.n	8004928 <__sflush_r+0xbc>
 8004890:	b29b      	uxth	r3, r3
 8004892:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004896:	2100      	movs	r1, #0
 8004898:	b292      	uxth	r2, r2
 800489a:	f8d8 6000 	ldr.w	r6, [r8]
 800489e:	f8c8 1000 	str.w	r1, [r8]
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	d069      	beq.n	800497a <__sflush_r+0x10e>
 80048a6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80048a8:	075f      	lsls	r7, r3, #29
 80048aa:	d505      	bpl.n	80048b8 <__sflush_r+0x4c>
 80048ac:	6869      	ldr	r1, [r5, #4]
 80048ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048b0:	1a52      	subs	r2, r2, r1
 80048b2:	b10b      	cbz	r3, 80048b8 <__sflush_r+0x4c>
 80048b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80048b6:	1ad2      	subs	r2, r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	69e9      	ldr	r1, [r5, #28]
 80048bc:	4640      	mov	r0, r8
 80048be:	47a0      	blx	r4
 80048c0:	1c44      	adds	r4, r0, #1
 80048c2:	d03c      	beq.n	800493e <__sflush_r+0xd2>
 80048c4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80048c8:	692a      	ldr	r2, [r5, #16]
 80048ca:	602a      	str	r2, [r5, #0]
 80048cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048d0:	2200      	movs	r2, #0
 80048d2:	81ab      	strh	r3, [r5, #12]
 80048d4:	04db      	lsls	r3, r3, #19
 80048d6:	606a      	str	r2, [r5, #4]
 80048d8:	d449      	bmi.n	800496e <__sflush_r+0x102>
 80048da:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80048dc:	f8c8 6000 	str.w	r6, [r8]
 80048e0:	b311      	cbz	r1, 8004928 <__sflush_r+0xbc>
 80048e2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80048e6:	4299      	cmp	r1, r3
 80048e8:	d002      	beq.n	80048f0 <__sflush_r+0x84>
 80048ea:	4640      	mov	r0, r8
 80048ec:	f000 f94e 	bl	8004b8c <_free_r>
 80048f0:	2000      	movs	r0, #0
 80048f2:	6328      	str	r0, [r5, #48]	; 0x30
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	692e      	ldr	r6, [r5, #16]
 80048fa:	b1ae      	cbz	r6, 8004928 <__sflush_r+0xbc>
 80048fc:	682c      	ldr	r4, [r5, #0]
 80048fe:	602e      	str	r6, [r5, #0]
 8004900:	0790      	lsls	r0, r2, #30
 8004902:	bf0c      	ite	eq
 8004904:	696b      	ldreq	r3, [r5, #20]
 8004906:	2300      	movne	r3, #0
 8004908:	1ba4      	subs	r4, r4, r6
 800490a:	60ab      	str	r3, [r5, #8]
 800490c:	e00a      	b.n	8004924 <__sflush_r+0xb8>
 800490e:	4623      	mov	r3, r4
 8004910:	4632      	mov	r2, r6
 8004912:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8004914:	69e9      	ldr	r1, [r5, #28]
 8004916:	4640      	mov	r0, r8
 8004918:	47b8      	blx	r7
 800491a:	2800      	cmp	r0, #0
 800491c:	eba4 0400 	sub.w	r4, r4, r0
 8004920:	4406      	add	r6, r0
 8004922:	dd04      	ble.n	800492e <__sflush_r+0xc2>
 8004924:	2c00      	cmp	r4, #0
 8004926:	dcf2      	bgt.n	800490e <__sflush_r+0xa2>
 8004928:	2000      	movs	r0, #0
 800492a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492e:	89ab      	ldrh	r3, [r5, #12]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81ab      	strh	r3, [r5, #12]
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800493e:	f8d8 2000 	ldr.w	r2, [r8]
 8004942:	2a1d      	cmp	r2, #29
 8004944:	d8f3      	bhi.n	800492e <__sflush_r+0xc2>
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <__sflush_r+0x144>)
 8004948:	40d3      	lsrs	r3, r2
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	f083 0401 	eor.w	r4, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0eb      	beq.n	800492e <__sflush_r+0xc2>
 8004956:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800495a:	6929      	ldr	r1, [r5, #16]
 800495c:	6029      	str	r1, [r5, #0]
 800495e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004962:	04d9      	lsls	r1, r3, #19
 8004964:	606c      	str	r4, [r5, #4]
 8004966:	81ab      	strh	r3, [r5, #12]
 8004968:	d5b7      	bpl.n	80048da <__sflush_r+0x6e>
 800496a:	2a00      	cmp	r2, #0
 800496c:	d1b5      	bne.n	80048da <__sflush_r+0x6e>
 800496e:	6528      	str	r0, [r5, #80]	; 0x50
 8004970:	e7b3      	b.n	80048da <__sflush_r+0x6e>
 8004972:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004974:	2a00      	cmp	r2, #0
 8004976:	dc88      	bgt.n	800488a <__sflush_r+0x1e>
 8004978:	e7d6      	b.n	8004928 <__sflush_r+0xbc>
 800497a:	2301      	movs	r3, #1
 800497c:	69e9      	ldr	r1, [r5, #28]
 800497e:	4640      	mov	r0, r8
 8004980:	47a0      	blx	r4
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	4602      	mov	r2, r0
 8004986:	d002      	beq.n	800498e <__sflush_r+0x122>
 8004988:	89ab      	ldrh	r3, [r5, #12]
 800498a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800498c:	e78c      	b.n	80048a8 <__sflush_r+0x3c>
 800498e:	f8d8 3000 	ldr.w	r3, [r8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f8      	beq.n	8004988 <__sflush_r+0x11c>
 8004996:	2b1d      	cmp	r3, #29
 8004998:	d001      	beq.n	800499e <__sflush_r+0x132>
 800499a:	2b16      	cmp	r3, #22
 800499c:	d102      	bne.n	80049a4 <__sflush_r+0x138>
 800499e:	f8c8 6000 	str.w	r6, [r8]
 80049a2:	e7c1      	b.n	8004928 <__sflush_r+0xbc>
 80049a4:	89ab      	ldrh	r3, [r5, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81ab      	strh	r3, [r5, #12]
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	20400001 	.word	0x20400001

080049b4 <_fflush_r>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	b082      	sub	sp, #8
 80049ba:	b108      	cbz	r0, 80049c0 <_fflush_r+0xc>
 80049bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049be:	b153      	cbz	r3, 80049d6 <_fflush_r+0x22>
 80049c0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80049c4:	b908      	cbnz	r0, 80049ca <_fflush_r+0x16>
 80049c6:	b002      	add	sp, #8
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	4620      	mov	r0, r4
 80049cc:	b002      	add	sp, #8
 80049ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d2:	f7ff bf4b 	b.w	800486c <__sflush_r>
 80049d6:	9101      	str	r1, [sp, #4]
 80049d8:	f000 f880 	bl	8004adc <__sinit>
 80049dc:	9901      	ldr	r1, [sp, #4]
 80049de:	e7ef      	b.n	80049c0 <_fflush_r+0xc>

080049e0 <_cleanup_r>:
 80049e0:	4901      	ldr	r1, [pc, #4]	; (80049e8 <_cleanup_r+0x8>)
 80049e2:	f000 bb3d 	b.w	8005060 <_fwalk_reent>
 80049e6:	bf00      	nop
 80049e8:	08007b81 	.word	0x08007b81

080049ec <__sinit.part.1>:
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <__sinit.part.1+0xdc>)
 80049f2:	6845      	ldr	r5, [r0, #4]
 80049f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80049f6:	2400      	movs	r4, #0
 80049f8:	4607      	mov	r7, r0
 80049fa:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80049fe:	2304      	movs	r3, #4
 8004a00:	2103      	movs	r1, #3
 8004a02:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8004a06:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8004a0a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8004a0e:	b083      	sub	sp, #12
 8004a10:	602c      	str	r4, [r5, #0]
 8004a12:	606c      	str	r4, [r5, #4]
 8004a14:	60ac      	str	r4, [r5, #8]
 8004a16:	666c      	str	r4, [r5, #100]	; 0x64
 8004a18:	81ec      	strh	r4, [r5, #14]
 8004a1a:	612c      	str	r4, [r5, #16]
 8004a1c:	616c      	str	r4, [r5, #20]
 8004a1e:	61ac      	str	r4, [r5, #24]
 8004a20:	81ab      	strh	r3, [r5, #12]
 8004a22:	4621      	mov	r1, r4
 8004a24:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004a28:	2208      	movs	r2, #8
 8004a2a:	f7fd fa0b 	bl	8001e44 <memset>
 8004a2e:	68be      	ldr	r6, [r7, #8]
 8004a30:	f8df b098 	ldr.w	fp, [pc, #152]	; 8004acc <__sinit.part.1+0xe0>
 8004a34:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004ad0 <__sinit.part.1+0xe4>
 8004a38:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004ad4 <__sinit.part.1+0xe8>
 8004a3c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004ad8 <__sinit.part.1+0xec>
 8004a40:	f8c5 b020 	str.w	fp, [r5, #32]
 8004a44:	2301      	movs	r3, #1
 8004a46:	2209      	movs	r2, #9
 8004a48:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004a4c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004a50:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004a54:	61ed      	str	r5, [r5, #28]
 8004a56:	4621      	mov	r1, r4
 8004a58:	81f3      	strh	r3, [r6, #14]
 8004a5a:	81b2      	strh	r2, [r6, #12]
 8004a5c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8004a60:	6034      	str	r4, [r6, #0]
 8004a62:	6074      	str	r4, [r6, #4]
 8004a64:	60b4      	str	r4, [r6, #8]
 8004a66:	6674      	str	r4, [r6, #100]	; 0x64
 8004a68:	6134      	str	r4, [r6, #16]
 8004a6a:	6174      	str	r4, [r6, #20]
 8004a6c:	61b4      	str	r4, [r6, #24]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	f7fd f9e7 	bl	8001e44 <memset>
 8004a76:	68fd      	ldr	r5, [r7, #12]
 8004a78:	61f6      	str	r6, [r6, #28]
 8004a7a:	2012      	movs	r0, #18
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f8c6 b020 	str.w	fp, [r6, #32]
 8004a82:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8004a86:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8004a8a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8004a8e:	4621      	mov	r1, r4
 8004a90:	81a8      	strh	r0, [r5, #12]
 8004a92:	81ea      	strh	r2, [r5, #14]
 8004a94:	602c      	str	r4, [r5, #0]
 8004a96:	606c      	str	r4, [r5, #4]
 8004a98:	60ac      	str	r4, [r5, #8]
 8004a9a:	666c      	str	r4, [r5, #100]	; 0x64
 8004a9c:	612c      	str	r4, [r5, #16]
 8004a9e:	616c      	str	r4, [r5, #20]
 8004aa0:	61ac      	str	r4, [r5, #24]
 8004aa2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	f7fd f9cc 	bl	8001e44 <memset>
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	61ed      	str	r5, [r5, #28]
 8004ab0:	f8c5 b020 	str.w	fp, [r5, #32]
 8004ab4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004ab8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004abc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac2:	b003      	add	sp, #12
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac8:	080049e1 	.word	0x080049e1
 8004acc:	080062c5 	.word	0x080062c5
 8004ad0:	080062e9 	.word	0x080062e9
 8004ad4:	08006325 	.word	0x08006325
 8004ad8:	08006345 	.word	0x08006345

08004adc <__sinit>:
 8004adc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ade:	b103      	cbz	r3, 8004ae2 <__sinit+0x6>
 8004ae0:	4770      	bx	lr
 8004ae2:	f7ff bf83 	b.w	80049ec <__sinit.part.1>
 8004ae6:	bf00      	nop

08004ae8 <__sfp_lock_acquire>:
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <__sfp_lock_release>:
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <_malloc_trim_r>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	4f23      	ldr	r7, [pc, #140]	; (8004b80 <_malloc_trim_r+0x90>)
 8004af4:	460c      	mov	r4, r1
 8004af6:	4606      	mov	r6, r0
 8004af8:	f000 fece 	bl	8005898 <__malloc_lock>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	685d      	ldr	r5, [r3, #4]
 8004b00:	f025 0503 	bic.w	r5, r5, #3
 8004b04:	1b29      	subs	r1, r5, r4
 8004b06:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004b0a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8004b0e:	f021 010f 	bic.w	r1, r1, #15
 8004b12:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8004b16:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004b1a:	db07      	blt.n	8004b2c <_malloc_trim_r+0x3c>
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f001 fbbe 	bl	80062a0 <_sbrk_r>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	442b      	add	r3, r5
 8004b28:	4298      	cmp	r0, r3
 8004b2a:	d004      	beq.n	8004b36 <_malloc_trim_r+0x46>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 feb5 	bl	800589c <__malloc_unlock>
 8004b32:	2000      	movs	r0, #0
 8004b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b36:	4261      	negs	r1, r4
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f001 fbb1 	bl	80062a0 <_sbrk_r>
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d00d      	beq.n	8004b5e <_malloc_trim_r+0x6e>
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <_malloc_trim_r+0x94>)
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	1b2d      	subs	r5, r5, r4
 8004b4a:	f045 0501 	orr.w	r5, r5, #1
 8004b4e:	4630      	mov	r0, r6
 8004b50:	1b09      	subs	r1, r1, r4
 8004b52:	6055      	str	r5, [r2, #4]
 8004b54:	6019      	str	r1, [r3, #0]
 8004b56:	f000 fea1 	bl	800589c <__malloc_unlock>
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4630      	mov	r0, r6
 8004b62:	f001 fb9d 	bl	80062a0 <_sbrk_r>
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	1a83      	subs	r3, r0, r2
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	ddde      	ble.n	8004b2c <_malloc_trim_r+0x3c>
 8004b6e:	4c06      	ldr	r4, [pc, #24]	; (8004b88 <_malloc_trim_r+0x98>)
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <_malloc_trim_r+0x94>)
 8004b72:	6824      	ldr	r4, [r4, #0]
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	1b00      	subs	r0, r0, r4
 8004b7a:	6053      	str	r3, [r2, #4]
 8004b7c:	6008      	str	r0, [r1, #0]
 8004b7e:	e7d5      	b.n	8004b2c <_malloc_trim_r+0x3c>
 8004b80:	20000464 	.word	0x20000464
 8004b84:	20000a4c 	.word	0x20000a4c
 8004b88:	20000870 	.word	0x20000870

08004b8c <_free_r>:
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	d045      	beq.n	8004c1c <_free_r+0x90>
 8004b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b94:	460d      	mov	r5, r1
 8004b96:	4680      	mov	r8, r0
 8004b98:	f000 fe7e 	bl	8005898 <__malloc_lock>
 8004b9c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8004ba0:	496a      	ldr	r1, [pc, #424]	; (8004d4c <_free_r+0x1c0>)
 8004ba2:	f027 0301 	bic.w	r3, r7, #1
 8004ba6:	f1a5 0408 	sub.w	r4, r5, #8
 8004baa:	18e2      	adds	r2, r4, r3
 8004bac:	688e      	ldr	r6, [r1, #8]
 8004bae:	6850      	ldr	r0, [r2, #4]
 8004bb0:	42b2      	cmp	r2, r6
 8004bb2:	f020 0003 	bic.w	r0, r0, #3
 8004bb6:	d062      	beq.n	8004c7e <_free_r+0xf2>
 8004bb8:	07fe      	lsls	r6, r7, #31
 8004bba:	6050      	str	r0, [r2, #4]
 8004bbc:	d40b      	bmi.n	8004bd6 <_free_r+0x4a>
 8004bbe:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8004bc2:	1be4      	subs	r4, r4, r7
 8004bc4:	f101 0e08 	add.w	lr, r1, #8
 8004bc8:	68a5      	ldr	r5, [r4, #8]
 8004bca:	4575      	cmp	r5, lr
 8004bcc:	443b      	add	r3, r7
 8004bce:	d06f      	beq.n	8004cb0 <_free_r+0x124>
 8004bd0:	68e7      	ldr	r7, [r4, #12]
 8004bd2:	60ef      	str	r7, [r5, #12]
 8004bd4:	60bd      	str	r5, [r7, #8]
 8004bd6:	1815      	adds	r5, r2, r0
 8004bd8:	686d      	ldr	r5, [r5, #4]
 8004bda:	07ed      	lsls	r5, r5, #31
 8004bdc:	d542      	bpl.n	8004c64 <_free_r+0xd8>
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	6062      	str	r2, [r4, #4]
 8004be4:	50e3      	str	r3, [r4, r3]
 8004be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bea:	d218      	bcs.n	8004c1e <_free_r+0x92>
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	684d      	ldr	r5, [r1, #4]
 8004bf2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8004bf6:	60a7      	str	r7, [r4, #8]
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	109b      	asrs	r3, r3, #2
 8004bfc:	fa00 f303 	lsl.w	r3, r0, r3
 8004c00:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8004c04:	431d      	orrs	r5, r3
 8004c06:	3808      	subs	r0, #8
 8004c08:	60e0      	str	r0, [r4, #12]
 8004c0a:	604d      	str	r5, [r1, #4]
 8004c0c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8004c10:	60fc      	str	r4, [r7, #12]
 8004c12:	4640      	mov	r0, r8
 8004c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c18:	f000 be40 	b.w	800589c <__malloc_unlock>
 8004c1c:	4770      	bx	lr
 8004c1e:	0a5a      	lsrs	r2, r3, #9
 8004c20:	2a04      	cmp	r2, #4
 8004c22:	d853      	bhi.n	8004ccc <_free_r+0x140>
 8004c24:	099a      	lsrs	r2, r3, #6
 8004c26:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8004c2a:	007f      	lsls	r7, r7, #1
 8004c2c:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8004c30:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8004c34:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8004c38:	4944      	ldr	r1, [pc, #272]	; (8004d4c <_free_r+0x1c0>)
 8004c3a:	3808      	subs	r0, #8
 8004c3c:	4290      	cmp	r0, r2
 8004c3e:	d04d      	beq.n	8004cdc <_free_r+0x150>
 8004c40:	6851      	ldr	r1, [r2, #4]
 8004c42:	f021 0103 	bic.w	r1, r1, #3
 8004c46:	428b      	cmp	r3, r1
 8004c48:	d202      	bcs.n	8004c50 <_free_r+0xc4>
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	4290      	cmp	r0, r2
 8004c4e:	d1f7      	bne.n	8004c40 <_free_r+0xb4>
 8004c50:	68d0      	ldr	r0, [r2, #12]
 8004c52:	60e0      	str	r0, [r4, #12]
 8004c54:	60a2      	str	r2, [r4, #8]
 8004c56:	6084      	str	r4, [r0, #8]
 8004c58:	60d4      	str	r4, [r2, #12]
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c60:	f000 be1c 	b.w	800589c <__malloc_unlock>
 8004c64:	6895      	ldr	r5, [r2, #8]
 8004c66:	4f3a      	ldr	r7, [pc, #232]	; (8004d50 <_free_r+0x1c4>)
 8004c68:	42bd      	cmp	r5, r7
 8004c6a:	4403      	add	r3, r0
 8004c6c:	d03f      	beq.n	8004cee <_free_r+0x162>
 8004c6e:	68d0      	ldr	r0, [r2, #12]
 8004c70:	60e8      	str	r0, [r5, #12]
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	6085      	str	r5, [r0, #8]
 8004c78:	6062      	str	r2, [r4, #4]
 8004c7a:	50e3      	str	r3, [r4, r3]
 8004c7c:	e7b3      	b.n	8004be6 <_free_r+0x5a>
 8004c7e:	07ff      	lsls	r7, r7, #31
 8004c80:	4403      	add	r3, r0
 8004c82:	d407      	bmi.n	8004c94 <_free_r+0x108>
 8004c84:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8004c88:	1aa4      	subs	r4, r4, r2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	68a0      	ldr	r0, [r4, #8]
 8004c8e:	68e2      	ldr	r2, [r4, #12]
 8004c90:	60c2      	str	r2, [r0, #12]
 8004c92:	6090      	str	r0, [r2, #8]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <_free_r+0x1c8>)
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	f043 0001 	orr.w	r0, r3, #1
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	6060      	str	r0, [r4, #4]
 8004ca0:	608c      	str	r4, [r1, #8]
 8004ca2:	d3b6      	bcc.n	8004c12 <_free_r+0x86>
 8004ca4:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <_free_r+0x1cc>)
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	f7ff ff21 	bl	8004af0 <_malloc_trim_r>
 8004cae:	e7b0      	b.n	8004c12 <_free_r+0x86>
 8004cb0:	1811      	adds	r1, r2, r0
 8004cb2:	6849      	ldr	r1, [r1, #4]
 8004cb4:	07c9      	lsls	r1, r1, #31
 8004cb6:	d444      	bmi.n	8004d42 <_free_r+0x1b6>
 8004cb8:	6891      	ldr	r1, [r2, #8]
 8004cba:	68d2      	ldr	r2, [r2, #12]
 8004cbc:	60ca      	str	r2, [r1, #12]
 8004cbe:	4403      	add	r3, r0
 8004cc0:	f043 0001 	orr.w	r0, r3, #1
 8004cc4:	6091      	str	r1, [r2, #8]
 8004cc6:	6060      	str	r0, [r4, #4]
 8004cc8:	50e3      	str	r3, [r4, r3]
 8004cca:	e7a2      	b.n	8004c12 <_free_r+0x86>
 8004ccc:	2a14      	cmp	r2, #20
 8004cce:	d817      	bhi.n	8004d00 <_free_r+0x174>
 8004cd0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8004cd4:	007f      	lsls	r7, r7, #1
 8004cd6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8004cda:	e7a9      	b.n	8004c30 <_free_r+0xa4>
 8004cdc:	10aa      	asrs	r2, r5, #2
 8004cde:	684b      	ldr	r3, [r1, #4]
 8004ce0:	2501      	movs	r5, #1
 8004ce2:	fa05 f202 	lsl.w	r2, r5, r2
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
 8004cea:	4602      	mov	r2, r0
 8004cec:	e7b1      	b.n	8004c52 <_free_r+0xc6>
 8004cee:	f043 0201 	orr.w	r2, r3, #1
 8004cf2:	614c      	str	r4, [r1, #20]
 8004cf4:	610c      	str	r4, [r1, #16]
 8004cf6:	60e5      	str	r5, [r4, #12]
 8004cf8:	60a5      	str	r5, [r4, #8]
 8004cfa:	6062      	str	r2, [r4, #4]
 8004cfc:	50e3      	str	r3, [r4, r3]
 8004cfe:	e788      	b.n	8004c12 <_free_r+0x86>
 8004d00:	2a54      	cmp	r2, #84	; 0x54
 8004d02:	d806      	bhi.n	8004d12 <_free_r+0x186>
 8004d04:	0b1a      	lsrs	r2, r3, #12
 8004d06:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8004d0a:	007f      	lsls	r7, r7, #1
 8004d0c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8004d10:	e78e      	b.n	8004c30 <_free_r+0xa4>
 8004d12:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004d16:	d806      	bhi.n	8004d26 <_free_r+0x19a>
 8004d18:	0bda      	lsrs	r2, r3, #15
 8004d1a:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8004d1e:	007f      	lsls	r7, r7, #1
 8004d20:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8004d24:	e784      	b.n	8004c30 <_free_r+0xa4>
 8004d26:	f240 5054 	movw	r0, #1364	; 0x554
 8004d2a:	4282      	cmp	r2, r0
 8004d2c:	d806      	bhi.n	8004d3c <_free_r+0x1b0>
 8004d2e:	0c9a      	lsrs	r2, r3, #18
 8004d30:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8004d34:	007f      	lsls	r7, r7, #1
 8004d36:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8004d3a:	e779      	b.n	8004c30 <_free_r+0xa4>
 8004d3c:	27fe      	movs	r7, #254	; 0xfe
 8004d3e:	257e      	movs	r5, #126	; 0x7e
 8004d40:	e776      	b.n	8004c30 <_free_r+0xa4>
 8004d42:	f043 0201 	orr.w	r2, r3, #1
 8004d46:	6062      	str	r2, [r4, #4]
 8004d48:	50e3      	str	r3, [r4, r3]
 8004d4a:	e762      	b.n	8004c12 <_free_r+0x86>
 8004d4c:	20000464 	.word	0x20000464
 8004d50:	2000046c 	.word	0x2000046c
 8004d54:	2000086c 	.word	0x2000086c
 8004d58:	20000a48 	.word	0x20000a48

08004d5c <__sfvwrite_r>:
 8004d5c:	6893      	ldr	r3, [r2, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d076      	beq.n	8004e50 <__sfvwrite_r+0xf4>
 8004d62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d66:	898b      	ldrh	r3, [r1, #12]
 8004d68:	b085      	sub	sp, #20
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	0719      	lsls	r1, r3, #28
 8004d6e:	9001      	str	r0, [sp, #4]
 8004d70:	4616      	mov	r6, r2
 8004d72:	d529      	bpl.n	8004dc8 <__sfvwrite_r+0x6c>
 8004d74:	6922      	ldr	r2, [r4, #16]
 8004d76:	b33a      	cbz	r2, 8004dc8 <__sfvwrite_r+0x6c>
 8004d78:	f003 0802 	and.w	r8, r3, #2
 8004d7c:	fa1f f088 	uxth.w	r0, r8
 8004d80:	6835      	ldr	r5, [r6, #0]
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d02f      	beq.n	8004de6 <__sfvwrite_r+0x8a>
 8004d86:	f04f 0900 	mov.w	r9, #0
 8004d8a:	4fb4      	ldr	r7, [pc, #720]	; (800505c <__sfvwrite_r+0x300>)
 8004d8c:	46c8      	mov	r8, r9
 8004d8e:	46b2      	mov	sl, r6
 8004d90:	45b8      	cmp	r8, r7
 8004d92:	4643      	mov	r3, r8
 8004d94:	464a      	mov	r2, r9
 8004d96:	bf28      	it	cs
 8004d98:	463b      	movcs	r3, r7
 8004d9a:	9801      	ldr	r0, [sp, #4]
 8004d9c:	f1b8 0f00 	cmp.w	r8, #0
 8004da0:	d050      	beq.n	8004e44 <__sfvwrite_r+0xe8>
 8004da2:	69e1      	ldr	r1, [r4, #28]
 8004da4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004da6:	47b0      	blx	r6
 8004da8:	2800      	cmp	r0, #0
 8004daa:	dd71      	ble.n	8004e90 <__sfvwrite_r+0x134>
 8004dac:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004db0:	1a1b      	subs	r3, r3, r0
 8004db2:	4481      	add	r9, r0
 8004db4:	ebc0 0808 	rsb	r8, r0, r8
 8004db8:	f8ca 3008 	str.w	r3, [sl, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e7      	bne.n	8004d90 <__sfvwrite_r+0x34>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	b005      	add	sp, #20
 8004dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc8:	4621      	mov	r1, r4
 8004dca:	9801      	ldr	r0, [sp, #4]
 8004dcc:	f7fe fd40 	bl	8003850 <__swsetup_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f040 813a 	bne.w	800504a <__sfvwrite_r+0x2ee>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	6835      	ldr	r5, [r6, #0]
 8004dda:	f003 0802 	and.w	r8, r3, #2
 8004dde:	fa1f f088 	uxth.w	r0, r8
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d1cf      	bne.n	8004d86 <__sfvwrite_r+0x2a>
 8004de6:	f013 0901 	ands.w	r9, r3, #1
 8004dea:	d15b      	bne.n	8004ea4 <__sfvwrite_r+0x148>
 8004dec:	464f      	mov	r7, r9
 8004dee:	9602      	str	r6, [sp, #8]
 8004df0:	b31f      	cbz	r7, 8004e3a <__sfvwrite_r+0xde>
 8004df2:	059a      	lsls	r2, r3, #22
 8004df4:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8004df8:	d52c      	bpl.n	8004e54 <__sfvwrite_r+0xf8>
 8004dfa:	4547      	cmp	r7, r8
 8004dfc:	46c2      	mov	sl, r8
 8004dfe:	f0c0 80a4 	bcc.w	8004f4a <__sfvwrite_r+0x1ee>
 8004e02:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8004e06:	f040 80b1 	bne.w	8004f6c <__sfvwrite_r+0x210>
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4649      	mov	r1, r9
 8004e10:	f000 fcde 	bl	80057d0 <memmove>
 8004e14:	68a0      	ldr	r0, [r4, #8]
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	ebc8 0000 	rsb	r0, r8, r0
 8004e1c:	4453      	add	r3, sl
 8004e1e:	60a0      	str	r0, [r4, #8]
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	4638      	mov	r0, r7
 8004e24:	9a02      	ldr	r2, [sp, #8]
 8004e26:	6893      	ldr	r3, [r2, #8]
 8004e28:	1a1b      	subs	r3, r3, r0
 8004e2a:	4481      	add	r9, r0
 8004e2c:	1a3f      	subs	r7, r7, r0
 8004e2e:	6093      	str	r3, [r2, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0c5      	beq.n	8004dc0 <__sfvwrite_r+0x64>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	2f00      	cmp	r7, #0
 8004e38:	d1db      	bne.n	8004df2 <__sfvwrite_r+0x96>
 8004e3a:	f8d5 9000 	ldr.w	r9, [r5]
 8004e3e:	686f      	ldr	r7, [r5, #4]
 8004e40:	3508      	adds	r5, #8
 8004e42:	e7d5      	b.n	8004df0 <__sfvwrite_r+0x94>
 8004e44:	f8d5 9000 	ldr.w	r9, [r5]
 8004e48:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8004e4c:	3508      	adds	r5, #8
 8004e4e:	e79f      	b.n	8004d90 <__sfvwrite_r+0x34>
 8004e50:	2000      	movs	r0, #0
 8004e52:	4770      	bx	lr
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	4298      	cmp	r0, r3
 8004e5a:	d803      	bhi.n	8004e64 <__sfvwrite_r+0x108>
 8004e5c:	6961      	ldr	r1, [r4, #20]
 8004e5e:	428f      	cmp	r7, r1
 8004e60:	f080 80b7 	bcs.w	8004fd2 <__sfvwrite_r+0x276>
 8004e64:	45b8      	cmp	r8, r7
 8004e66:	bf28      	it	cs
 8004e68:	46b8      	movcs	r8, r7
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	f000 fcaf 	bl	80057d0 <memmove>
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	ebc8 0303 	rsb	r3, r8, r3
 8004e7a:	4442      	add	r2, r8
 8004e7c:	60a3      	str	r3, [r4, #8]
 8004e7e:	6022      	str	r2, [r4, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d149      	bne.n	8004f18 <__sfvwrite_r+0x1bc>
 8004e84:	4621      	mov	r1, r4
 8004e86:	9801      	ldr	r0, [sp, #4]
 8004e88:	f7ff fd94 	bl	80049b4 <_fflush_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d043      	beq.n	8004f18 <__sfvwrite_r+0x1bc>
 8004e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	b005      	add	sp, #20
 8004ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	9002      	str	r0, [sp, #8]
 8004ea8:	4682      	mov	sl, r0
 8004eaa:	4681      	mov	r9, r0
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	d02a      	beq.n	8004f08 <__sfvwrite_r+0x1ac>
 8004eb2:	9b02      	ldr	r3, [sp, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d04c      	beq.n	8004f52 <__sfvwrite_r+0x1f6>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	6962      	ldr	r2, [r4, #20]
 8004ebe:	45c8      	cmp	r8, r9
 8004ec0:	46c3      	mov	fp, r8
 8004ec2:	bf28      	it	cs
 8004ec4:	46cb      	movcs	fp, r9
 8004ec6:	4298      	cmp	r0, r3
 8004ec8:	465f      	mov	r7, fp
 8004eca:	d904      	bls.n	8004ed6 <__sfvwrite_r+0x17a>
 8004ecc:	68a3      	ldr	r3, [r4, #8]
 8004ece:	4413      	add	r3, r2
 8004ed0:	459b      	cmp	fp, r3
 8004ed2:	f300 8090 	bgt.w	8004ff6 <__sfvwrite_r+0x29a>
 8004ed6:	4593      	cmp	fp, r2
 8004ed8:	db20      	blt.n	8004f1c <__sfvwrite_r+0x1c0>
 8004eda:	4613      	mov	r3, r2
 8004edc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004ede:	69e1      	ldr	r1, [r4, #28]
 8004ee0:	9801      	ldr	r0, [sp, #4]
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	47b8      	blx	r7
 8004ee6:	1e07      	subs	r7, r0, #0
 8004ee8:	ddd2      	ble.n	8004e90 <__sfvwrite_r+0x134>
 8004eea:	ebb8 0807 	subs.w	r8, r8, r7
 8004eee:	d023      	beq.n	8004f38 <__sfvwrite_r+0x1dc>
 8004ef0:	68b3      	ldr	r3, [r6, #8]
 8004ef2:	1bdb      	subs	r3, r3, r7
 8004ef4:	44ba      	add	sl, r7
 8004ef6:	ebc7 0909 	rsb	r9, r7, r9
 8004efa:	60b3      	str	r3, [r6, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f43f af5f 	beq.w	8004dc0 <__sfvwrite_r+0x64>
 8004f02:	f1b9 0f00 	cmp.w	r9, #0
 8004f06:	d1d4      	bne.n	8004eb2 <__sfvwrite_r+0x156>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8d5 a000 	ldr.w	sl, [r5]
 8004f0e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	3508      	adds	r5, #8
 8004f16:	e7c9      	b.n	8004eac <__sfvwrite_r+0x150>
 8004f18:	4640      	mov	r0, r8
 8004f1a:	e783      	b.n	8004e24 <__sfvwrite_r+0xc8>
 8004f1c:	465a      	mov	r2, fp
 8004f1e:	4651      	mov	r1, sl
 8004f20:	f000 fc56 	bl	80057d0 <memmove>
 8004f24:	68a2      	ldr	r2, [r4, #8]
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	ebcb 0202 	rsb	r2, fp, r2
 8004f2c:	445b      	add	r3, fp
 8004f2e:	ebb8 0807 	subs.w	r8, r8, r7
 8004f32:	60a2      	str	r2, [r4, #8]
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	d1db      	bne.n	8004ef0 <__sfvwrite_r+0x194>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	9801      	ldr	r0, [sp, #4]
 8004f3c:	f7ff fd3a 	bl	80049b4 <_fflush_r>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1a5      	bne.n	8004e90 <__sfvwrite_r+0x134>
 8004f44:	f8cd 8008 	str.w	r8, [sp, #8]
 8004f48:	e7d2      	b.n	8004ef0 <__sfvwrite_r+0x194>
 8004f4a:	6820      	ldr	r0, [r4, #0]
 8004f4c:	46b8      	mov	r8, r7
 8004f4e:	46ba      	mov	sl, r7
 8004f50:	e75c      	b.n	8004e0c <__sfvwrite_r+0xb0>
 8004f52:	464a      	mov	r2, r9
 8004f54:	210a      	movs	r1, #10
 8004f56:	4650      	mov	r0, sl
 8004f58:	f000 fbea 	bl	8005730 <memchr>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	d06f      	beq.n	8005040 <__sfvwrite_r+0x2e4>
 8004f60:	3001      	adds	r0, #1
 8004f62:	2301      	movs	r3, #1
 8004f64:	ebca 0800 	rsb	r8, sl, r0
 8004f68:	9302      	str	r3, [sp, #8]
 8004f6a:	e7a5      	b.n	8004eb8 <__sfvwrite_r+0x15c>
 8004f6c:	6962      	ldr	r2, [r4, #20]
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	6921      	ldr	r1, [r4, #16]
 8004f72:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8004f76:	ebc1 0a00 	rsb	sl, r1, r0
 8004f7a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8004f7e:	f10a 0001 	add.w	r0, sl, #1
 8004f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f86:	4438      	add	r0, r7
 8004f88:	4540      	cmp	r0, r8
 8004f8a:	4642      	mov	r2, r8
 8004f8c:	bf84      	itt	hi
 8004f8e:	4680      	movhi	r8, r0
 8004f90:	4642      	movhi	r2, r8
 8004f92:	055b      	lsls	r3, r3, #21
 8004f94:	d542      	bpl.n	800501c <__sfvwrite_r+0x2c0>
 8004f96:	4611      	mov	r1, r2
 8004f98:	9801      	ldr	r0, [sp, #4]
 8004f9a:	f000 f90d 	bl	80051b8 <_malloc_r>
 8004f9e:	4683      	mov	fp, r0
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d055      	beq.n	8005050 <__sfvwrite_r+0x2f4>
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	6921      	ldr	r1, [r4, #16]
 8004fa8:	f7fc feb2 	bl	8001d10 <memcpy>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	ebca 0308 	rsb	r3, sl, r8
 8004fbc:	eb0b 000a 	add.w	r0, fp, sl
 8004fc0:	f8c4 8014 	str.w	r8, [r4, #20]
 8004fc4:	f8c4 b010 	str.w	fp, [r4, #16]
 8004fc8:	6020      	str	r0, [r4, #0]
 8004fca:	60a3      	str	r3, [r4, #8]
 8004fcc:	46b8      	mov	r8, r7
 8004fce:	46ba      	mov	sl, r7
 8004fd0:	e71c      	b.n	8004e0c <__sfvwrite_r+0xb0>
 8004fd2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004fd6:	42bb      	cmp	r3, r7
 8004fd8:	bf28      	it	cs
 8004fda:	463b      	movcs	r3, r7
 8004fdc:	464a      	mov	r2, r9
 8004fde:	fb93 f3f1 	sdiv	r3, r3, r1
 8004fe2:	9801      	ldr	r0, [sp, #4]
 8004fe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	69e1      	ldr	r1, [r4, #28]
 8004fec:	47b0      	blx	r6
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f73f af18 	bgt.w	8004e24 <__sfvwrite_r+0xc8>
 8004ff4:	e74c      	b.n	8004e90 <__sfvwrite_r+0x134>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	9303      	str	r3, [sp, #12]
 8004ffc:	f000 fbe8 	bl	80057d0 <memmove>
 8005000:	6822      	ldr	r2, [r4, #0]
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	9801      	ldr	r0, [sp, #4]
 8005006:	441a      	add	r2, r3
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	4621      	mov	r1, r4
 800500c:	f7ff fcd2 	bl	80049b4 <_fflush_r>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	2800      	cmp	r0, #0
 8005014:	f47f af3c 	bne.w	8004e90 <__sfvwrite_r+0x134>
 8005018:	461f      	mov	r7, r3
 800501a:	e766      	b.n	8004eea <__sfvwrite_r+0x18e>
 800501c:	9801      	ldr	r0, [sp, #4]
 800501e:	f000 ff4f 	bl	8005ec0 <_realloc_r>
 8005022:	4683      	mov	fp, r0
 8005024:	2800      	cmp	r0, #0
 8005026:	d1c7      	bne.n	8004fb8 <__sfvwrite_r+0x25c>
 8005028:	9d01      	ldr	r5, [sp, #4]
 800502a:	6921      	ldr	r1, [r4, #16]
 800502c:	4628      	mov	r0, r5
 800502e:	f7ff fdad 	bl	8004b8c <_free_r>
 8005032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005036:	220c      	movs	r2, #12
 8005038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503c:	602a      	str	r2, [r5, #0]
 800503e:	e729      	b.n	8004e94 <__sfvwrite_r+0x138>
 8005040:	2301      	movs	r3, #1
 8005042:	f109 0801 	add.w	r8, r9, #1
 8005046:	9302      	str	r3, [sp, #8]
 8005048:	e736      	b.n	8004eb8 <__sfvwrite_r+0x15c>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	e6b8      	b.n	8004dc2 <__sfvwrite_r+0x66>
 8005050:	9a01      	ldr	r2, [sp, #4]
 8005052:	230c      	movs	r3, #12
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800505a:	e71b      	b.n	8004e94 <__sfvwrite_r+0x138>
 800505c:	7ffffc00 	.word	0x7ffffc00

08005060 <_fwalk_reent>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8005068:	d01f      	beq.n	80050aa <_fwalk_reent+0x4a>
 800506a:	4688      	mov	r8, r1
 800506c:	4606      	mov	r6, r0
 800506e:	f04f 0900 	mov.w	r9, #0
 8005072:	687d      	ldr	r5, [r7, #4]
 8005074:	68bc      	ldr	r4, [r7, #8]
 8005076:	3d01      	subs	r5, #1
 8005078:	d411      	bmi.n	800509e <_fwalk_reent+0x3e>
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005082:	d908      	bls.n	8005096 <_fwalk_reent+0x36>
 8005084:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005088:	3301      	adds	r3, #1
 800508a:	4621      	mov	r1, r4
 800508c:	4630      	mov	r0, r6
 800508e:	d002      	beq.n	8005096 <_fwalk_reent+0x36>
 8005090:	47c0      	blx	r8
 8005092:	ea49 0900 	orr.w	r9, r9, r0
 8005096:	1c6b      	adds	r3, r5, #1
 8005098:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800509c:	d1ed      	bne.n	800507a <_fwalk_reent+0x1a>
 800509e:	683f      	ldr	r7, [r7, #0]
 80050a0:	2f00      	cmp	r7, #0
 80050a2:	d1e6      	bne.n	8005072 <_fwalk_reent+0x12>
 80050a4:	4648      	mov	r0, r9
 80050a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050aa:	46b9      	mov	r9, r7
 80050ac:	4648      	mov	r0, r9
 80050ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b2:	bf00      	nop

080050b4 <_localeconv_r>:
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <_localeconv_r+0x14>)
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <_localeconv_r+0x18>)
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80050bc:	2800      	cmp	r0, #0
 80050be:	bf08      	it	eq
 80050c0:	4618      	moveq	r0, r3
 80050c2:	30f0      	adds	r0, #240	; 0xf0
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000460 	.word	0x20000460
 80050cc:	20000874 	.word	0x20000874

080050d0 <__swhatbuf_r>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	460d      	mov	r5, r1
 80050d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d8:	2900      	cmp	r1, #0
 80050da:	b090      	sub	sp, #64	; 0x40
 80050dc:	4614      	mov	r4, r2
 80050de:	461e      	mov	r6, r3
 80050e0:	db14      	blt.n	800510c <__swhatbuf_r+0x3c>
 80050e2:	aa01      	add	r2, sp, #4
 80050e4:	f002 fdee 	bl	8007cc4 <_fstat_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	db0f      	blt.n	800510c <__swhatbuf_r+0x3c>
 80050ec:	9a02      	ldr	r2, [sp, #8]
 80050ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 80050f6:	fab2 f282 	clz	r2, r2
 80050fa:	0952      	lsrs	r2, r2, #5
 80050fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005100:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005104:	6032      	str	r2, [r6, #0]
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	b010      	add	sp, #64	; 0x40
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	89a8      	ldrh	r0, [r5, #12]
 800510e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8005112:	b282      	uxth	r2, r0
 8005114:	2000      	movs	r0, #0
 8005116:	6030      	str	r0, [r6, #0]
 8005118:	b11a      	cbz	r2, 8005122 <__swhatbuf_r+0x52>
 800511a:	2340      	movs	r3, #64	; 0x40
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	b010      	add	sp, #64	; 0x40
 8005120:	bd70      	pop	{r4, r5, r6, pc}
 8005122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005126:	4610      	mov	r0, r2
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	b010      	add	sp, #64	; 0x40
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	bf00      	nop

08005130 <__smakebuf_r>:
 8005130:	898a      	ldrh	r2, [r1, #12]
 8005132:	0792      	lsls	r2, r2, #30
 8005134:	460b      	mov	r3, r1
 8005136:	d506      	bpl.n	8005146 <__smakebuf_r+0x16>
 8005138:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800513c:	2101      	movs	r1, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	6159      	str	r1, [r3, #20]
 8005144:	4770      	bx	lr
 8005146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005148:	b083      	sub	sp, #12
 800514a:	ab01      	add	r3, sp, #4
 800514c:	466a      	mov	r2, sp
 800514e:	460c      	mov	r4, r1
 8005150:	4605      	mov	r5, r0
 8005152:	f7ff ffbd 	bl	80050d0 <__swhatbuf_r>
 8005156:	9900      	ldr	r1, [sp, #0]
 8005158:	4606      	mov	r6, r0
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f82c 	bl	80051b8 <_malloc_r>
 8005160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005164:	b1d0      	cbz	r0, 800519c <__smakebuf_r+0x6c>
 8005166:	9a01      	ldr	r2, [sp, #4]
 8005168:	4f12      	ldr	r7, [pc, #72]	; (80051b4 <__smakebuf_r+0x84>)
 800516a:	9900      	ldr	r1, [sp, #0]
 800516c:	63ef      	str	r7, [r5, #60]	; 0x3c
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	81a3      	strh	r3, [r4, #12]
 8005174:	6020      	str	r0, [r4, #0]
 8005176:	6120      	str	r0, [r4, #16]
 8005178:	6161      	str	r1, [r4, #20]
 800517a:	b91a      	cbnz	r2, 8005184 <__smakebuf_r+0x54>
 800517c:	4333      	orrs	r3, r6
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	b003      	add	sp, #12
 8005182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005184:	4628      	mov	r0, r5
 8005186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800518a:	f002 fdaf 	bl	8007cec <_isatty_r>
 800518e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005192:	2800      	cmp	r0, #0
 8005194:	d0f2      	beq.n	800517c <__smakebuf_r+0x4c>
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	e7ef      	b.n	800517c <__smakebuf_r+0x4c>
 800519c:	059a      	lsls	r2, r3, #22
 800519e:	d4ef      	bmi.n	8005180 <__smakebuf_r+0x50>
 80051a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051a4:	f043 0302 	orr.w	r3, r3, #2
 80051a8:	2101      	movs	r1, #1
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	6122      	str	r2, [r4, #16]
 80051b0:	6161      	str	r1, [r4, #20]
 80051b2:	e7e5      	b.n	8005180 <__smakebuf_r+0x50>
 80051b4:	080049e1 	.word	0x080049e1

080051b8 <_malloc_r>:
 80051b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051bc:	f101 050b 	add.w	r5, r1, #11
 80051c0:	2d16      	cmp	r5, #22
 80051c2:	b083      	sub	sp, #12
 80051c4:	4606      	mov	r6, r0
 80051c6:	f240 809f 	bls.w	8005308 <_malloc_r+0x150>
 80051ca:	f035 0507 	bics.w	r5, r5, #7
 80051ce:	f100 80bf 	bmi.w	8005350 <_malloc_r+0x198>
 80051d2:	42a9      	cmp	r1, r5
 80051d4:	f200 80bc 	bhi.w	8005350 <_malloc_r+0x198>
 80051d8:	f000 fb5e 	bl	8005898 <__malloc_lock>
 80051dc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80051e0:	f0c0 829c 	bcc.w	800571c <_malloc_r+0x564>
 80051e4:	0a6b      	lsrs	r3, r5, #9
 80051e6:	f000 80ba 	beq.w	800535e <_malloc_r+0x1a6>
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	f200 8183 	bhi.w	80054f6 <_malloc_r+0x33e>
 80051f0:	09a8      	lsrs	r0, r5, #6
 80051f2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80051f6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80051fa:	3038      	adds	r0, #56	; 0x38
 80051fc:	4fc4      	ldr	r7, [pc, #784]	; (8005510 <_malloc_r+0x358>)
 80051fe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005202:	f1a3 0108 	sub.w	r1, r3, #8
 8005206:	685c      	ldr	r4, [r3, #4]
 8005208:	42a1      	cmp	r1, r4
 800520a:	d107      	bne.n	800521c <_malloc_r+0x64>
 800520c:	e0ac      	b.n	8005368 <_malloc_r+0x1b0>
 800520e:	2a00      	cmp	r2, #0
 8005210:	f280 80ac 	bge.w	800536c <_malloc_r+0x1b4>
 8005214:	68e4      	ldr	r4, [r4, #12]
 8005216:	42a1      	cmp	r1, r4
 8005218:	f000 80a6 	beq.w	8005368 <_malloc_r+0x1b0>
 800521c:	6863      	ldr	r3, [r4, #4]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	1b5a      	subs	r2, r3, r5
 8005224:	2a0f      	cmp	r2, #15
 8005226:	ddf2      	ble.n	800520e <_malloc_r+0x56>
 8005228:	49b9      	ldr	r1, [pc, #740]	; (8005510 <_malloc_r+0x358>)
 800522a:	693c      	ldr	r4, [r7, #16]
 800522c:	f101 0e08 	add.w	lr, r1, #8
 8005230:	4574      	cmp	r4, lr
 8005232:	f000 81b3 	beq.w	800559c <_malloc_r+0x3e4>
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	1b5a      	subs	r2, r3, r5
 800523e:	2a0f      	cmp	r2, #15
 8005240:	f300 8199 	bgt.w	8005576 <_malloc_r+0x3be>
 8005244:	2a00      	cmp	r2, #0
 8005246:	f8c1 e014 	str.w	lr, [r1, #20]
 800524a:	f8c1 e010 	str.w	lr, [r1, #16]
 800524e:	f280 809e 	bge.w	800538e <_malloc_r+0x1d6>
 8005252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005256:	f080 8167 	bcs.w	8005528 <_malloc_r+0x370>
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	f103 0c01 	add.w	ip, r3, #1
 8005260:	2201      	movs	r2, #1
 8005262:	109b      	asrs	r3, r3, #2
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	684a      	ldr	r2, [r1, #4]
 800526a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800526e:	f8c4 8008 	str.w	r8, [r4, #8]
 8005272:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8005276:	431a      	orrs	r2, r3
 8005278:	f1a9 0308 	sub.w	r3, r9, #8
 800527c:	60e3      	str	r3, [r4, #12]
 800527e:	604a      	str	r2, [r1, #4]
 8005280:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8005284:	f8c8 400c 	str.w	r4, [r8, #12]
 8005288:	1083      	asrs	r3, r0, #2
 800528a:	2401      	movs	r4, #1
 800528c:	409c      	lsls	r4, r3
 800528e:	4294      	cmp	r4, r2
 8005290:	f200 808a 	bhi.w	80053a8 <_malloc_r+0x1f0>
 8005294:	4214      	tst	r4, r2
 8005296:	d106      	bne.n	80052a6 <_malloc_r+0xee>
 8005298:	f020 0003 	bic.w	r0, r0, #3
 800529c:	0064      	lsls	r4, r4, #1
 800529e:	4214      	tst	r4, r2
 80052a0:	f100 0004 	add.w	r0, r0, #4
 80052a4:	d0fa      	beq.n	800529c <_malloc_r+0xe4>
 80052a6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80052aa:	46cc      	mov	ip, r9
 80052ac:	4680      	mov	r8, r0
 80052ae:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80052b2:	458c      	cmp	ip, r1
 80052b4:	d107      	bne.n	80052c6 <_malloc_r+0x10e>
 80052b6:	e173      	b.n	80055a0 <_malloc_r+0x3e8>
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	f280 8181 	bge.w	80055c0 <_malloc_r+0x408>
 80052be:	68c9      	ldr	r1, [r1, #12]
 80052c0:	458c      	cmp	ip, r1
 80052c2:	f000 816d 	beq.w	80055a0 <_malloc_r+0x3e8>
 80052c6:	684b      	ldr	r3, [r1, #4]
 80052c8:	f023 0303 	bic.w	r3, r3, #3
 80052cc:	1b5a      	subs	r2, r3, r5
 80052ce:	2a0f      	cmp	r2, #15
 80052d0:	ddf2      	ble.n	80052b8 <_malloc_r+0x100>
 80052d2:	460c      	mov	r4, r1
 80052d4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80052d8:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80052dc:	194b      	adds	r3, r1, r5
 80052de:	f045 0501 	orr.w	r5, r5, #1
 80052e2:	604d      	str	r5, [r1, #4]
 80052e4:	f042 0101 	orr.w	r1, r2, #1
 80052e8:	f8c8 c00c 	str.w	ip, [r8, #12]
 80052ec:	4630      	mov	r0, r6
 80052ee:	f8cc 8008 	str.w	r8, [ip, #8]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	f8c3 e00c 	str.w	lr, [r3, #12]
 80052fa:	f8c3 e008 	str.w	lr, [r3, #8]
 80052fe:	6059      	str	r1, [r3, #4]
 8005300:	509a      	str	r2, [r3, r2]
 8005302:	f000 facb 	bl	800589c <__malloc_unlock>
 8005306:	e01f      	b.n	8005348 <_malloc_r+0x190>
 8005308:	2910      	cmp	r1, #16
 800530a:	d821      	bhi.n	8005350 <_malloc_r+0x198>
 800530c:	f000 fac4 	bl	8005898 <__malloc_lock>
 8005310:	2510      	movs	r5, #16
 8005312:	2306      	movs	r3, #6
 8005314:	2002      	movs	r0, #2
 8005316:	4f7e      	ldr	r7, [pc, #504]	; (8005510 <_malloc_r+0x358>)
 8005318:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800531c:	f1a3 0208 	sub.w	r2, r3, #8
 8005320:	685c      	ldr	r4, [r3, #4]
 8005322:	4294      	cmp	r4, r2
 8005324:	f000 8145 	beq.w	80055b2 <_malloc_r+0x3fa>
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	68e1      	ldr	r1, [r4, #12]
 800532c:	68a5      	ldr	r5, [r4, #8]
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	4423      	add	r3, r4
 8005334:	4630      	mov	r0, r6
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	60e9      	str	r1, [r5, #12]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	608d      	str	r5, [r1, #8]
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	f000 faab 	bl	800589c <__malloc_unlock>
 8005346:	3408      	adds	r4, #8
 8005348:	4620      	mov	r0, r4
 800534a:	b003      	add	sp, #12
 800534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005350:	2400      	movs	r4, #0
 8005352:	230c      	movs	r3, #12
 8005354:	4620      	mov	r0, r4
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	b003      	add	sp, #12
 800535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535e:	2380      	movs	r3, #128	; 0x80
 8005360:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8005364:	203f      	movs	r0, #63	; 0x3f
 8005366:	e749      	b.n	80051fc <_malloc_r+0x44>
 8005368:	4670      	mov	r0, lr
 800536a:	e75d      	b.n	8005228 <_malloc_r+0x70>
 800536c:	4423      	add	r3, r4
 800536e:	68e1      	ldr	r1, [r4, #12]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68a5      	ldr	r5, [r4, #8]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	60e9      	str	r1, [r5, #12]
 800537a:	4630      	mov	r0, r6
 800537c:	608d      	str	r5, [r1, #8]
 800537e:	605a      	str	r2, [r3, #4]
 8005380:	f000 fa8c 	bl	800589c <__malloc_unlock>
 8005384:	3408      	adds	r4, #8
 8005386:	4620      	mov	r0, r4
 8005388:	b003      	add	sp, #12
 800538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538e:	4423      	add	r3, r4
 8005390:	4630      	mov	r0, r6
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	f000 fa7f 	bl	800589c <__malloc_unlock>
 800539e:	3408      	adds	r4, #8
 80053a0:	4620      	mov	r0, r4
 80053a2:	b003      	add	sp, #12
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	68bc      	ldr	r4, [r7, #8]
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	f023 0803 	bic.w	r8, r3, #3
 80053b0:	45a8      	cmp	r8, r5
 80053b2:	d304      	bcc.n	80053be <_malloc_r+0x206>
 80053b4:	ebc5 0308 	rsb	r3, r5, r8
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	f300 808c 	bgt.w	80054d6 <_malloc_r+0x31e>
 80053be:	4b55      	ldr	r3, [pc, #340]	; (8005514 <_malloc_r+0x35c>)
 80053c0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8005524 <_malloc_r+0x36c>
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	f8d9 3000 	ldr.w	r3, [r9]
 80053ca:	3301      	adds	r3, #1
 80053cc:	442a      	add	r2, r5
 80053ce:	eb04 0a08 	add.w	sl, r4, r8
 80053d2:	f000 8160 	beq.w	8005696 <_malloc_r+0x4de>
 80053d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053da:	320f      	adds	r2, #15
 80053dc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80053e0:	f022 020f 	bic.w	r2, r2, #15
 80053e4:	4611      	mov	r1, r2
 80053e6:	4630      	mov	r0, r6
 80053e8:	9201      	str	r2, [sp, #4]
 80053ea:	f000 ff59 	bl	80062a0 <_sbrk_r>
 80053ee:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053f2:	4683      	mov	fp, r0
 80053f4:	9a01      	ldr	r2, [sp, #4]
 80053f6:	f000 8158 	beq.w	80056aa <_malloc_r+0x4f2>
 80053fa:	4582      	cmp	sl, r0
 80053fc:	f200 80fc 	bhi.w	80055f8 <_malloc_r+0x440>
 8005400:	4b45      	ldr	r3, [pc, #276]	; (8005518 <_malloc_r+0x360>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	45da      	cmp	sl, fp
 8005406:	4411      	add	r1, r2
 8005408:	6019      	str	r1, [r3, #0]
 800540a:	f000 8153 	beq.w	80056b4 <_malloc_r+0x4fc>
 800540e:	f8d9 0000 	ldr.w	r0, [r9]
 8005412:	f8df e110 	ldr.w	lr, [pc, #272]	; 8005524 <_malloc_r+0x36c>
 8005416:	3001      	adds	r0, #1
 8005418:	bf1b      	ittet	ne
 800541a:	ebca 0a0b 	rsbne	sl, sl, fp
 800541e:	4451      	addne	r1, sl
 8005420:	f8ce b000 	streq.w	fp, [lr]
 8005424:	6019      	strne	r1, [r3, #0]
 8005426:	f01b 0107 	ands.w	r1, fp, #7
 800542a:	f000 8117 	beq.w	800565c <_malloc_r+0x4a4>
 800542e:	f1c1 0008 	rsb	r0, r1, #8
 8005432:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8005436:	4483      	add	fp, r0
 8005438:	3108      	adds	r1, #8
 800543a:	445a      	add	r2, fp
 800543c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005440:	ebc2 0901 	rsb	r9, r2, r1
 8005444:	4649      	mov	r1, r9
 8005446:	4630      	mov	r0, r6
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	f000 ff29 	bl	80062a0 <_sbrk_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	9b01      	ldr	r3, [sp, #4]
 8005452:	f000 813f 	beq.w	80056d4 <_malloc_r+0x51c>
 8005456:	ebcb 0200 	rsb	r2, fp, r0
 800545a:	444a      	add	r2, r9
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	f8c7 b008 	str.w	fp, [r7, #8]
 8005466:	4449      	add	r1, r9
 8005468:	42bc      	cmp	r4, r7
 800546a:	f8cb 2004 	str.w	r2, [fp, #4]
 800546e:	6019      	str	r1, [r3, #0]
 8005470:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005518 <_malloc_r+0x360>
 8005474:	d016      	beq.n	80054a4 <_malloc_r+0x2ec>
 8005476:	f1b8 0f0f 	cmp.w	r8, #15
 800547a:	f240 80fd 	bls.w	8005678 <_malloc_r+0x4c0>
 800547e:	6862      	ldr	r2, [r4, #4]
 8005480:	f1a8 030c 	sub.w	r3, r8, #12
 8005484:	f023 0307 	bic.w	r3, r3, #7
 8005488:	18e0      	adds	r0, r4, r3
 800548a:	f002 0201 	and.w	r2, r2, #1
 800548e:	f04f 0e05 	mov.w	lr, #5
 8005492:	431a      	orrs	r2, r3
 8005494:	2b0f      	cmp	r3, #15
 8005496:	6062      	str	r2, [r4, #4]
 8005498:	f8c0 e004 	str.w	lr, [r0, #4]
 800549c:	f8c0 e008 	str.w	lr, [r0, #8]
 80054a0:	f200 811c 	bhi.w	80056dc <_malloc_r+0x524>
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <_malloc_r+0x364>)
 80054a6:	68bc      	ldr	r4, [r7, #8]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4291      	cmp	r1, r2
 80054ac:	bf88      	it	hi
 80054ae:	6019      	strhi	r1, [r3, #0]
 80054b0:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <_malloc_r+0x368>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4291      	cmp	r1, r2
 80054b6:	6862      	ldr	r2, [r4, #4]
 80054b8:	bf88      	it	hi
 80054ba:	6019      	strhi	r1, [r3, #0]
 80054bc:	f022 0203 	bic.w	r2, r2, #3
 80054c0:	4295      	cmp	r5, r2
 80054c2:	eba2 0305 	sub.w	r3, r2, r5
 80054c6:	d801      	bhi.n	80054cc <_malloc_r+0x314>
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	dc04      	bgt.n	80054d6 <_malloc_r+0x31e>
 80054cc:	4630      	mov	r0, r6
 80054ce:	f000 f9e5 	bl	800589c <__malloc_unlock>
 80054d2:	2400      	movs	r4, #0
 80054d4:	e738      	b.n	8005348 <_malloc_r+0x190>
 80054d6:	1962      	adds	r2, r4, r5
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	f045 0501 	orr.w	r5, r5, #1
 80054e0:	6065      	str	r5, [r4, #4]
 80054e2:	4630      	mov	r0, r6
 80054e4:	60ba      	str	r2, [r7, #8]
 80054e6:	6053      	str	r3, [r2, #4]
 80054e8:	f000 f9d8 	bl	800589c <__malloc_unlock>
 80054ec:	3408      	adds	r4, #8
 80054ee:	4620      	mov	r0, r4
 80054f0:	b003      	add	sp, #12
 80054f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f6:	2b14      	cmp	r3, #20
 80054f8:	d971      	bls.n	80055de <_malloc_r+0x426>
 80054fa:	2b54      	cmp	r3, #84	; 0x54
 80054fc:	f200 80a4 	bhi.w	8005648 <_malloc_r+0x490>
 8005500:	0b28      	lsrs	r0, r5, #12
 8005502:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8005506:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800550a:	306e      	adds	r0, #110	; 0x6e
 800550c:	e676      	b.n	80051fc <_malloc_r+0x44>
 800550e:	bf00      	nop
 8005510:	20000464 	.word	0x20000464
 8005514:	20000a48 	.word	0x20000a48
 8005518:	20000a4c 	.word	0x20000a4c
 800551c:	20000a44 	.word	0x20000a44
 8005520:	20000a40 	.word	0x20000a40
 8005524:	20000870 	.word	0x20000870
 8005528:	0a5a      	lsrs	r2, r3, #9
 800552a:	2a04      	cmp	r2, #4
 800552c:	d95e      	bls.n	80055ec <_malloc_r+0x434>
 800552e:	2a14      	cmp	r2, #20
 8005530:	f200 80b3 	bhi.w	800569a <_malloc_r+0x4e2>
 8005534:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8005538:	0049      	lsls	r1, r1, #1
 800553a:	325b      	adds	r2, #91	; 0x5b
 800553c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8005540:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005544:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8005724 <_malloc_r+0x56c>
 8005548:	f1ac 0c08 	sub.w	ip, ip, #8
 800554c:	458c      	cmp	ip, r1
 800554e:	f000 8088 	beq.w	8005662 <_malloc_r+0x4aa>
 8005552:	684a      	ldr	r2, [r1, #4]
 8005554:	f022 0203 	bic.w	r2, r2, #3
 8005558:	4293      	cmp	r3, r2
 800555a:	d202      	bcs.n	8005562 <_malloc_r+0x3aa>
 800555c:	6889      	ldr	r1, [r1, #8]
 800555e:	458c      	cmp	ip, r1
 8005560:	d1f7      	bne.n	8005552 <_malloc_r+0x39a>
 8005562:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	f8c4 c00c 	str.w	ip, [r4, #12]
 800556c:	60a1      	str	r1, [r4, #8]
 800556e:	f8cc 4008 	str.w	r4, [ip, #8]
 8005572:	60cc      	str	r4, [r1, #12]
 8005574:	e688      	b.n	8005288 <_malloc_r+0xd0>
 8005576:	1963      	adds	r3, r4, r5
 8005578:	f042 0701 	orr.w	r7, r2, #1
 800557c:	f045 0501 	orr.w	r5, r5, #1
 8005580:	6065      	str	r5, [r4, #4]
 8005582:	4630      	mov	r0, r6
 8005584:	614b      	str	r3, [r1, #20]
 8005586:	610b      	str	r3, [r1, #16]
 8005588:	f8c3 e00c 	str.w	lr, [r3, #12]
 800558c:	f8c3 e008 	str.w	lr, [r3, #8]
 8005590:	605f      	str	r7, [r3, #4]
 8005592:	509a      	str	r2, [r3, r2]
 8005594:	3408      	adds	r4, #8
 8005596:	f000 f981 	bl	800589c <__malloc_unlock>
 800559a:	e6d5      	b.n	8005348 <_malloc_r+0x190>
 800559c:	684a      	ldr	r2, [r1, #4]
 800559e:	e673      	b.n	8005288 <_malloc_r+0xd0>
 80055a0:	f108 0801 	add.w	r8, r8, #1
 80055a4:	f018 0f03 	tst.w	r8, #3
 80055a8:	f10c 0c08 	add.w	ip, ip, #8
 80055ac:	f47f ae7f 	bne.w	80052ae <_malloc_r+0xf6>
 80055b0:	e030      	b.n	8005614 <_malloc_r+0x45c>
 80055b2:	68dc      	ldr	r4, [r3, #12]
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	bf08      	it	eq
 80055b8:	3002      	addeq	r0, #2
 80055ba:	f43f ae35 	beq.w	8005228 <_malloc_r+0x70>
 80055be:	e6b3      	b.n	8005328 <_malloc_r+0x170>
 80055c0:	440b      	add	r3, r1
 80055c2:	460c      	mov	r4, r1
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68c9      	ldr	r1, [r1, #12]
 80055c8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	4630      	mov	r0, r6
 80055d4:	60e9      	str	r1, [r5, #12]
 80055d6:	608d      	str	r5, [r1, #8]
 80055d8:	f000 f960 	bl	800589c <__malloc_unlock>
 80055dc:	e6b4      	b.n	8005348 <_malloc_r+0x190>
 80055de:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80055e2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80055e6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80055ea:	e607      	b.n	80051fc <_malloc_r+0x44>
 80055ec:	099a      	lsrs	r2, r3, #6
 80055ee:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80055f2:	0049      	lsls	r1, r1, #1
 80055f4:	3238      	adds	r2, #56	; 0x38
 80055f6:	e7a1      	b.n	800553c <_malloc_r+0x384>
 80055f8:	42bc      	cmp	r4, r7
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <_malloc_r+0x56c>)
 80055fc:	f43f af00 	beq.w	8005400 <_malloc_r+0x248>
 8005600:	689c      	ldr	r4, [r3, #8]
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	f022 0203 	bic.w	r2, r2, #3
 8005608:	e75a      	b.n	80054c0 <_malloc_r+0x308>
 800560a:	f859 3908 	ldr.w	r3, [r9], #-8
 800560e:	4599      	cmp	r9, r3
 8005610:	f040 8082 	bne.w	8005718 <_malloc_r+0x560>
 8005614:	f010 0f03 	tst.w	r0, #3
 8005618:	f100 30ff 	add.w	r0, r0, #4294967295
 800561c:	d1f5      	bne.n	800560a <_malloc_r+0x452>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ea23 0304 	bic.w	r3, r3, r4
 8005624:	607b      	str	r3, [r7, #4]
 8005626:	0064      	lsls	r4, r4, #1
 8005628:	429c      	cmp	r4, r3
 800562a:	f63f aebd 	bhi.w	80053a8 <_malloc_r+0x1f0>
 800562e:	2c00      	cmp	r4, #0
 8005630:	f43f aeba 	beq.w	80053a8 <_malloc_r+0x1f0>
 8005634:	421c      	tst	r4, r3
 8005636:	4640      	mov	r0, r8
 8005638:	f47f ae35 	bne.w	80052a6 <_malloc_r+0xee>
 800563c:	0064      	lsls	r4, r4, #1
 800563e:	421c      	tst	r4, r3
 8005640:	f100 0004 	add.w	r0, r0, #4
 8005644:	d0fa      	beq.n	800563c <_malloc_r+0x484>
 8005646:	e62e      	b.n	80052a6 <_malloc_r+0xee>
 8005648:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800564c:	d818      	bhi.n	8005680 <_malloc_r+0x4c8>
 800564e:	0be8      	lsrs	r0, r5, #15
 8005650:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8005654:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8005658:	3077      	adds	r0, #119	; 0x77
 800565a:	e5cf      	b.n	80051fc <_malloc_r+0x44>
 800565c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005660:	e6eb      	b.n	800543a <_malloc_r+0x282>
 8005662:	2101      	movs	r1, #1
 8005664:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005668:	1092      	asrs	r2, r2, #2
 800566a:	fa01 f202 	lsl.w	r2, r1, r2
 800566e:	431a      	orrs	r2, r3
 8005670:	f8c8 2004 	str.w	r2, [r8, #4]
 8005674:	4661      	mov	r1, ip
 8005676:	e777      	b.n	8005568 <_malloc_r+0x3b0>
 8005678:	2301      	movs	r3, #1
 800567a:	f8cb 3004 	str.w	r3, [fp, #4]
 800567e:	e725      	b.n	80054cc <_malloc_r+0x314>
 8005680:	f240 5254 	movw	r2, #1364	; 0x554
 8005684:	4293      	cmp	r3, r2
 8005686:	d820      	bhi.n	80056ca <_malloc_r+0x512>
 8005688:	0ca8      	lsrs	r0, r5, #18
 800568a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800568e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8005692:	307c      	adds	r0, #124	; 0x7c
 8005694:	e5b2      	b.n	80051fc <_malloc_r+0x44>
 8005696:	3210      	adds	r2, #16
 8005698:	e6a4      	b.n	80053e4 <_malloc_r+0x22c>
 800569a:	2a54      	cmp	r2, #84	; 0x54
 800569c:	d826      	bhi.n	80056ec <_malloc_r+0x534>
 800569e:	0b1a      	lsrs	r2, r3, #12
 80056a0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80056a4:	0049      	lsls	r1, r1, #1
 80056a6:	326e      	adds	r2, #110	; 0x6e
 80056a8:	e748      	b.n	800553c <_malloc_r+0x384>
 80056aa:	68bc      	ldr	r4, [r7, #8]
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	f022 0203 	bic.w	r2, r2, #3
 80056b2:	e705      	b.n	80054c0 <_malloc_r+0x308>
 80056b4:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80056b8:	2800      	cmp	r0, #0
 80056ba:	f47f aea8 	bne.w	800540e <_malloc_r+0x256>
 80056be:	4442      	add	r2, r8
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	e6ec      	b.n	80054a4 <_malloc_r+0x2ec>
 80056ca:	23fe      	movs	r3, #254	; 0xfe
 80056cc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80056d0:	207e      	movs	r0, #126	; 0x7e
 80056d2:	e593      	b.n	80051fc <_malloc_r+0x44>
 80056d4:	2201      	movs	r2, #1
 80056d6:	f04f 0900 	mov.w	r9, #0
 80056da:	e6c1      	b.n	8005460 <_malloc_r+0x2a8>
 80056dc:	f104 0108 	add.w	r1, r4, #8
 80056e0:	4630      	mov	r0, r6
 80056e2:	f7ff fa53 	bl	8004b8c <_free_r>
 80056e6:	f8d9 1000 	ldr.w	r1, [r9]
 80056ea:	e6db      	b.n	80054a4 <_malloc_r+0x2ec>
 80056ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80056f0:	d805      	bhi.n	80056fe <_malloc_r+0x546>
 80056f2:	0bda      	lsrs	r2, r3, #15
 80056f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80056f8:	0049      	lsls	r1, r1, #1
 80056fa:	3277      	adds	r2, #119	; 0x77
 80056fc:	e71e      	b.n	800553c <_malloc_r+0x384>
 80056fe:	f240 5154 	movw	r1, #1364	; 0x554
 8005702:	428a      	cmp	r2, r1
 8005704:	d805      	bhi.n	8005712 <_malloc_r+0x55a>
 8005706:	0c9a      	lsrs	r2, r3, #18
 8005708:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800570c:	0049      	lsls	r1, r1, #1
 800570e:	327c      	adds	r2, #124	; 0x7c
 8005710:	e714      	b.n	800553c <_malloc_r+0x384>
 8005712:	21fe      	movs	r1, #254	; 0xfe
 8005714:	227e      	movs	r2, #126	; 0x7e
 8005716:	e711      	b.n	800553c <_malloc_r+0x384>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	e784      	b.n	8005626 <_malloc_r+0x46e>
 800571c:	08e8      	lsrs	r0, r5, #3
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	e5f8      	b.n	8005316 <_malloc_r+0x15e>
 8005724:	20000464 	.word	0x20000464
	...

08005730 <memchr>:
 8005730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005734:	2a10      	cmp	r2, #16
 8005736:	db2b      	blt.n	8005790 <memchr+0x60>
 8005738:	f010 0f07 	tst.w	r0, #7
 800573c:	d008      	beq.n	8005750 <memchr+0x20>
 800573e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005742:	3a01      	subs	r2, #1
 8005744:	428b      	cmp	r3, r1
 8005746:	d02d      	beq.n	80057a4 <memchr+0x74>
 8005748:	f010 0f07 	tst.w	r0, #7
 800574c:	b342      	cbz	r2, 80057a0 <memchr+0x70>
 800574e:	d1f6      	bne.n	800573e <memchr+0xe>
 8005750:	b4f0      	push	{r4, r5, r6, r7}
 8005752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800575a:	f022 0407 	bic.w	r4, r2, #7
 800575e:	f07f 0700 	mvns.w	r7, #0
 8005762:	2300      	movs	r3, #0
 8005764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005768:	3c08      	subs	r4, #8
 800576a:	ea85 0501 	eor.w	r5, r5, r1
 800576e:	ea86 0601 	eor.w	r6, r6, r1
 8005772:	fa85 f547 	uadd8	r5, r5, r7
 8005776:	faa3 f587 	sel	r5, r3, r7
 800577a:	fa86 f647 	uadd8	r6, r6, r7
 800577e:	faa5 f687 	sel	r6, r5, r7
 8005782:	b98e      	cbnz	r6, 80057a8 <memchr+0x78>
 8005784:	d1ee      	bne.n	8005764 <memchr+0x34>
 8005786:	bcf0      	pop	{r4, r5, r6, r7}
 8005788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800578c:	f002 0207 	and.w	r2, r2, #7
 8005790:	b132      	cbz	r2, 80057a0 <memchr+0x70>
 8005792:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005796:	3a01      	subs	r2, #1
 8005798:	ea83 0301 	eor.w	r3, r3, r1
 800579c:	b113      	cbz	r3, 80057a4 <memchr+0x74>
 800579e:	d1f8      	bne.n	8005792 <memchr+0x62>
 80057a0:	2000      	movs	r0, #0
 80057a2:	4770      	bx	lr
 80057a4:	3801      	subs	r0, #1
 80057a6:	4770      	bx	lr
 80057a8:	2d00      	cmp	r5, #0
 80057aa:	bf06      	itte	eq
 80057ac:	4635      	moveq	r5, r6
 80057ae:	3803      	subeq	r0, #3
 80057b0:	3807      	subne	r0, #7
 80057b2:	f015 0f01 	tst.w	r5, #1
 80057b6:	d107      	bne.n	80057c8 <memchr+0x98>
 80057b8:	3001      	adds	r0, #1
 80057ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80057be:	bf02      	ittt	eq
 80057c0:	3001      	addeq	r0, #1
 80057c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80057c6:	3001      	addeq	r0, #1
 80057c8:	bcf0      	pop	{r4, r5, r6, r7}
 80057ca:	3801      	subs	r0, #1
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <memmove>:
 80057d0:	4288      	cmp	r0, r1
 80057d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d4:	d90d      	bls.n	80057f2 <memmove+0x22>
 80057d6:	188b      	adds	r3, r1, r2
 80057d8:	4298      	cmp	r0, r3
 80057da:	d20a      	bcs.n	80057f2 <memmove+0x22>
 80057dc:	1881      	adds	r1, r0, r2
 80057de:	2a00      	cmp	r2, #0
 80057e0:	d051      	beq.n	8005886 <memmove+0xb6>
 80057e2:	1a9a      	subs	r2, r3, r2
 80057e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d1f9      	bne.n	80057e4 <memmove+0x14>
 80057f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f2:	2a0f      	cmp	r2, #15
 80057f4:	d948      	bls.n	8005888 <memmove+0xb8>
 80057f6:	ea41 0300 	orr.w	r3, r1, r0
 80057fa:	079b      	lsls	r3, r3, #30
 80057fc:	d146      	bne.n	800588c <memmove+0xbc>
 80057fe:	f100 0410 	add.w	r4, r0, #16
 8005802:	f101 0310 	add.w	r3, r1, #16
 8005806:	4615      	mov	r5, r2
 8005808:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800580c:	f844 6c10 	str.w	r6, [r4, #-16]
 8005810:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8005814:	f844 6c0c 	str.w	r6, [r4, #-12]
 8005818:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800581c:	f844 6c08 	str.w	r6, [r4, #-8]
 8005820:	3d10      	subs	r5, #16
 8005822:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8005826:	f844 6c04 	str.w	r6, [r4, #-4]
 800582a:	2d0f      	cmp	r5, #15
 800582c:	f103 0310 	add.w	r3, r3, #16
 8005830:	f104 0410 	add.w	r4, r4, #16
 8005834:	d8e8      	bhi.n	8005808 <memmove+0x38>
 8005836:	f1a2 0310 	sub.w	r3, r2, #16
 800583a:	f023 030f 	bic.w	r3, r3, #15
 800583e:	f002 0e0f 	and.w	lr, r2, #15
 8005842:	3310      	adds	r3, #16
 8005844:	f1be 0f03 	cmp.w	lr, #3
 8005848:	4419      	add	r1, r3
 800584a:	4403      	add	r3, r0
 800584c:	d921      	bls.n	8005892 <memmove+0xc2>
 800584e:	1f1e      	subs	r6, r3, #4
 8005850:	460d      	mov	r5, r1
 8005852:	4674      	mov	r4, lr
 8005854:	3c04      	subs	r4, #4
 8005856:	f855 7b04 	ldr.w	r7, [r5], #4
 800585a:	f846 7f04 	str.w	r7, [r6, #4]!
 800585e:	2c03      	cmp	r4, #3
 8005860:	d8f8      	bhi.n	8005854 <memmove+0x84>
 8005862:	f1ae 0404 	sub.w	r4, lr, #4
 8005866:	f024 0403 	bic.w	r4, r4, #3
 800586a:	3404      	adds	r4, #4
 800586c:	4423      	add	r3, r4
 800586e:	4421      	add	r1, r4
 8005870:	f002 0203 	and.w	r2, r2, #3
 8005874:	b162      	cbz	r2, 8005890 <memmove+0xc0>
 8005876:	3b01      	subs	r3, #1
 8005878:	440a      	add	r2, r1
 800587a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005882:	428a      	cmp	r2, r1
 8005884:	d1f9      	bne.n	800587a <memmove+0xaa>
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	4603      	mov	r3, r0
 800588a:	e7f3      	b.n	8005874 <memmove+0xa4>
 800588c:	4603      	mov	r3, r0
 800588e:	e7f2      	b.n	8005876 <memmove+0xa6>
 8005890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005892:	4672      	mov	r2, lr
 8005894:	e7ee      	b.n	8005874 <memmove+0xa4>
 8005896:	bf00      	nop

08005898 <__malloc_lock>:
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop

0800589c <__malloc_unlock>:
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <_Balloc>:
 80058a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80058a2:	b570      	push	{r4, r5, r6, lr}
 80058a4:	4605      	mov	r5, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	b14b      	cbz	r3, 80058be <_Balloc+0x1e>
 80058aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80058ae:	b180      	cbz	r0, 80058d2 <_Balloc+0x32>
 80058b0:	6802      	ldr	r2, [r0, #0]
 80058b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80058b6:	2300      	movs	r3, #0
 80058b8:	6103      	str	r3, [r0, #16]
 80058ba:	60c3      	str	r3, [r0, #12]
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	2221      	movs	r2, #33	; 0x21
 80058c0:	2104      	movs	r1, #4
 80058c2:	f002 f91b 	bl	8007afc <_calloc_r>
 80058c6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80058c8:	4603      	mov	r3, r0
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1ed      	bne.n	80058aa <_Balloc+0xa>
 80058ce:	2000      	movs	r0, #0
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
 80058d2:	2101      	movs	r1, #1
 80058d4:	fa01 f604 	lsl.w	r6, r1, r4
 80058d8:	1d72      	adds	r2, r6, #5
 80058da:	4628      	mov	r0, r5
 80058dc:	0092      	lsls	r2, r2, #2
 80058de:	f002 f90d 	bl	8007afc <_calloc_r>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d0f3      	beq.n	80058ce <_Balloc+0x2e>
 80058e6:	6044      	str	r4, [r0, #4]
 80058e8:	6086      	str	r6, [r0, #8]
 80058ea:	e7e4      	b.n	80058b6 <_Balloc+0x16>

080058ec <_Bfree>:
 80058ec:	b131      	cbz	r1, 80058fc <_Bfree+0x10>
 80058ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80058f0:	684a      	ldr	r2, [r1, #4]
 80058f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80058f6:	6008      	str	r0, [r1, #0]
 80058f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <__multadd>:
 8005900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005902:	690c      	ldr	r4, [r1, #16]
 8005904:	b083      	sub	sp, #12
 8005906:	460d      	mov	r5, r1
 8005908:	4606      	mov	r6, r0
 800590a:	f101 0e14 	add.w	lr, r1, #20
 800590e:	2700      	movs	r7, #0
 8005910:	f8de 0000 	ldr.w	r0, [lr]
 8005914:	b281      	uxth	r1, r0
 8005916:	fb02 3101 	mla	r1, r2, r1, r3
 800591a:	0c0b      	lsrs	r3, r1, #16
 800591c:	0c00      	lsrs	r0, r0, #16
 800591e:	fb02 3300 	mla	r3, r2, r0, r3
 8005922:	b289      	uxth	r1, r1
 8005924:	3701      	adds	r7, #1
 8005926:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800592a:	42bc      	cmp	r4, r7
 800592c:	f84e 1b04 	str.w	r1, [lr], #4
 8005930:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005934:	dcec      	bgt.n	8005910 <__multadd+0x10>
 8005936:	b13b      	cbz	r3, 8005948 <__multadd+0x48>
 8005938:	68aa      	ldr	r2, [r5, #8]
 800593a:	4294      	cmp	r4, r2
 800593c:	da07      	bge.n	800594e <__multadd+0x4e>
 800593e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005942:	3401      	adds	r4, #1
 8005944:	6153      	str	r3, [r2, #20]
 8005946:	612c      	str	r4, [r5, #16]
 8005948:	4628      	mov	r0, r5
 800594a:	b003      	add	sp, #12
 800594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594e:	6869      	ldr	r1, [r5, #4]
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	3101      	adds	r1, #1
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff ffa3 	bl	80058a0 <_Balloc>
 800595a:	692a      	ldr	r2, [r5, #16]
 800595c:	3202      	adds	r2, #2
 800595e:	f105 010c 	add.w	r1, r5, #12
 8005962:	4607      	mov	r7, r0
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	300c      	adds	r0, #12
 8005968:	f7fc f9d2 	bl	8001d10 <memcpy>
 800596c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800596e:	6869      	ldr	r1, [r5, #4]
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005976:	6028      	str	r0, [r5, #0]
 8005978:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800597c:	463d      	mov	r5, r7
 800597e:	e7de      	b.n	800593e <__multadd+0x3e>

08005980 <__hi0bits>:
 8005980:	0c03      	lsrs	r3, r0, #16
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	b9b3      	cbnz	r3, 80059b4 <__hi0bits+0x34>
 8005986:	0400      	lsls	r0, r0, #16
 8005988:	2310      	movs	r3, #16
 800598a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800598e:	bf04      	itt	eq
 8005990:	0200      	lsleq	r0, r0, #8
 8005992:	3308      	addeq	r3, #8
 8005994:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005998:	bf04      	itt	eq
 800599a:	0100      	lsleq	r0, r0, #4
 800599c:	3304      	addeq	r3, #4
 800599e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059a2:	bf04      	itt	eq
 80059a4:	0080      	lsleq	r0, r0, #2
 80059a6:	3302      	addeq	r3, #2
 80059a8:	2800      	cmp	r0, #0
 80059aa:	db07      	blt.n	80059bc <__hi0bits+0x3c>
 80059ac:	0042      	lsls	r2, r0, #1
 80059ae:	d403      	bmi.n	80059b8 <__hi0bits+0x38>
 80059b0:	2020      	movs	r0, #32
 80059b2:	4770      	bx	lr
 80059b4:	2300      	movs	r3, #0
 80059b6:	e7e8      	b.n	800598a <__hi0bits+0xa>
 80059b8:	1c58      	adds	r0, r3, #1
 80059ba:	4770      	bx	lr
 80059bc:	4618      	mov	r0, r3
 80059be:	4770      	bx	lr

080059c0 <__lo0bits>:
 80059c0:	6803      	ldr	r3, [r0, #0]
 80059c2:	f013 0207 	ands.w	r2, r3, #7
 80059c6:	d007      	beq.n	80059d8 <__lo0bits+0x18>
 80059c8:	07d9      	lsls	r1, r3, #31
 80059ca:	d420      	bmi.n	8005a0e <__lo0bits+0x4e>
 80059cc:	079a      	lsls	r2, r3, #30
 80059ce:	d420      	bmi.n	8005a12 <__lo0bits+0x52>
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	6003      	str	r3, [r0, #0]
 80059d4:	2002      	movs	r0, #2
 80059d6:	4770      	bx	lr
 80059d8:	b299      	uxth	r1, r3
 80059da:	b909      	cbnz	r1, 80059e0 <__lo0bits+0x20>
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	2210      	movs	r2, #16
 80059e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80059e4:	bf04      	itt	eq
 80059e6:	0a1b      	lsreq	r3, r3, #8
 80059e8:	3208      	addeq	r2, #8
 80059ea:	0719      	lsls	r1, r3, #28
 80059ec:	bf04      	itt	eq
 80059ee:	091b      	lsreq	r3, r3, #4
 80059f0:	3204      	addeq	r2, #4
 80059f2:	0799      	lsls	r1, r3, #30
 80059f4:	bf04      	itt	eq
 80059f6:	089b      	lsreq	r3, r3, #2
 80059f8:	3202      	addeq	r2, #2
 80059fa:	07d9      	lsls	r1, r3, #31
 80059fc:	d404      	bmi.n	8005a08 <__lo0bits+0x48>
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	d101      	bne.n	8005a06 <__lo0bits+0x46>
 8005a02:	2020      	movs	r0, #32
 8005a04:	4770      	bx	lr
 8005a06:	3201      	adds	r2, #1
 8005a08:	6003      	str	r3, [r0, #0]
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4770      	bx	lr
 8005a0e:	2000      	movs	r0, #0
 8005a10:	4770      	bx	lr
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	6003      	str	r3, [r0, #0]
 8005a16:	2001      	movs	r0, #1
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop

08005a1c <__i2b>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	2101      	movs	r1, #1
 8005a22:	f7ff ff3d 	bl	80058a0 <_Balloc>
 8005a26:	2201      	movs	r2, #1
 8005a28:	6144      	str	r4, [r0, #20]
 8005a2a:	6102      	str	r2, [r0, #16]
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop

08005a30 <__multiply>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	690d      	ldr	r5, [r1, #16]
 8005a36:	6917      	ldr	r7, [r2, #16]
 8005a38:	42bd      	cmp	r5, r7
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	4616      	mov	r6, r2
 8005a40:	da04      	bge.n	8005a4c <__multiply+0x1c>
 8005a42:	462a      	mov	r2, r5
 8005a44:	4634      	mov	r4, r6
 8005a46:	463d      	mov	r5, r7
 8005a48:	460e      	mov	r6, r1
 8005a4a:	4617      	mov	r7, r2
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	6861      	ldr	r1, [r4, #4]
 8005a50:	eb05 0807 	add.w	r8, r5, r7
 8005a54:	4598      	cmp	r8, r3
 8005a56:	bfc8      	it	gt
 8005a58:	3101      	addgt	r1, #1
 8005a5a:	f7ff ff21 	bl	80058a0 <_Balloc>
 8005a5e:	f100 0c14 	add.w	ip, r0, #20
 8005a62:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8005a66:	45cc      	cmp	ip, r9
 8005a68:	9000      	str	r0, [sp, #0]
 8005a6a:	d205      	bcs.n	8005a78 <__multiply+0x48>
 8005a6c:	4663      	mov	r3, ip
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f843 1b04 	str.w	r1, [r3], #4
 8005a74:	4599      	cmp	r9, r3
 8005a76:	d8fb      	bhi.n	8005a70 <__multiply+0x40>
 8005a78:	f106 0214 	add.w	r2, r6, #20
 8005a7c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8005a80:	f104 0314 	add.w	r3, r4, #20
 8005a84:	4552      	cmp	r2, sl
 8005a86:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8005a8a:	d254      	bcs.n	8005b36 <__multiply+0x106>
 8005a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a90:	4699      	mov	r9, r3
 8005a92:	f852 3b04 	ldr.w	r3, [r2], #4
 8005a96:	fa1f fb83 	uxth.w	fp, r3
 8005a9a:	f1bb 0f00 	cmp.w	fp, #0
 8005a9e:	d020      	beq.n	8005ae2 <__multiply+0xb2>
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	464f      	mov	r7, r9
 8005aa4:	4666      	mov	r6, ip
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	e000      	b.n	8005aac <__multiply+0x7c>
 8005aaa:	461e      	mov	r6, r3
 8005aac:	f857 4b04 	ldr.w	r4, [r7], #4
 8005ab0:	6830      	ldr	r0, [r6, #0]
 8005ab2:	b2a1      	uxth	r1, r4
 8005ab4:	b283      	uxth	r3, r0
 8005ab6:	fb0b 3101 	mla	r1, fp, r1, r3
 8005aba:	0c24      	lsrs	r4, r4, #16
 8005abc:	0c00      	lsrs	r0, r0, #16
 8005abe:	194b      	adds	r3, r1, r5
 8005ac0:	fb0b 0004 	mla	r0, fp, r4, r0
 8005ac4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005ac8:	b299      	uxth	r1, r3
 8005aca:	4633      	mov	r3, r6
 8005acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ad0:	45be      	cmp	lr, r7
 8005ad2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8005ad6:	f843 1b04 	str.w	r1, [r3], #4
 8005ada:	d8e6      	bhi.n	8005aaa <__multiply+0x7a>
 8005adc:	6075      	str	r5, [r6, #4]
 8005ade:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8005ae2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8005ae6:	d020      	beq.n	8005b2a <__multiply+0xfa>
 8005ae8:	f8dc 3000 	ldr.w	r3, [ip]
 8005aec:	4667      	mov	r7, ip
 8005aee:	4618      	mov	r0, r3
 8005af0:	464d      	mov	r5, r9
 8005af2:	2100      	movs	r1, #0
 8005af4:	e000      	b.n	8005af8 <__multiply+0xc8>
 8005af6:	4637      	mov	r7, r6
 8005af8:	882c      	ldrh	r4, [r5, #0]
 8005afa:	0c00      	lsrs	r0, r0, #16
 8005afc:	fb0b 0004 	mla	r0, fp, r4, r0
 8005b00:	4401      	add	r1, r0
 8005b02:	b29c      	uxth	r4, r3
 8005b04:	463e      	mov	r6, r7
 8005b06:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8005b0a:	f846 3b04 	str.w	r3, [r6], #4
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f855 4b04 	ldr.w	r4, [r5], #4
 8005b14:	b283      	uxth	r3, r0
 8005b16:	0c24      	lsrs	r4, r4, #16
 8005b18:	fb0b 3404 	mla	r4, fp, r4, r3
 8005b1c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8005b20:	45ae      	cmp	lr, r5
 8005b22:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8005b26:	d8e6      	bhi.n	8005af6 <__multiply+0xc6>
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	4592      	cmp	sl, r2
 8005b2c:	f10c 0c04 	add.w	ip, ip, #4
 8005b30:	d8af      	bhi.n	8005a92 <__multiply+0x62>
 8005b32:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005b36:	f1b8 0f00 	cmp.w	r8, #0
 8005b3a:	dd0b      	ble.n	8005b54 <__multiply+0x124>
 8005b3c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005b40:	f1a9 0904 	sub.w	r9, r9, #4
 8005b44:	b11b      	cbz	r3, 8005b4e <__multiply+0x11e>
 8005b46:	e005      	b.n	8005b54 <__multiply+0x124>
 8005b48:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8005b4c:	b913      	cbnz	r3, 8005b54 <__multiply+0x124>
 8005b4e:	f1b8 0801 	subs.w	r8, r8, #1
 8005b52:	d1f9      	bne.n	8005b48 <__multiply+0x118>
 8005b54:	9800      	ldr	r0, [sp, #0]
 8005b56:	f8c0 8010 	str.w	r8, [r0, #16]
 8005b5a:	b003      	add	sp, #12
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b60 <__pow5mult>:
 8005b60:	f012 0303 	ands.w	r3, r2, #3
 8005b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b68:	4614      	mov	r4, r2
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	d12e      	bne.n	8005bcc <__pow5mult+0x6c>
 8005b6e:	460e      	mov	r6, r1
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	d01c      	beq.n	8005bae <__pow5mult+0x4e>
 8005b74:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005b76:	b395      	cbz	r5, 8005bde <__pow5mult+0x7e>
 8005b78:	07e3      	lsls	r3, r4, #31
 8005b7a:	f04f 0800 	mov.w	r8, #0
 8005b7e:	d406      	bmi.n	8005b8e <__pow5mult+0x2e>
 8005b80:	1064      	asrs	r4, r4, #1
 8005b82:	d014      	beq.n	8005bae <__pow5mult+0x4e>
 8005b84:	6828      	ldr	r0, [r5, #0]
 8005b86:	b1a8      	cbz	r0, 8005bb4 <__pow5mult+0x54>
 8005b88:	4605      	mov	r5, r0
 8005b8a:	07e3      	lsls	r3, r4, #31
 8005b8c:	d5f8      	bpl.n	8005b80 <__pow5mult+0x20>
 8005b8e:	462a      	mov	r2, r5
 8005b90:	4631      	mov	r1, r6
 8005b92:	4638      	mov	r0, r7
 8005b94:	f7ff ff4c 	bl	8005a30 <__multiply>
 8005b98:	b1b6      	cbz	r6, 8005bc8 <__pow5mult+0x68>
 8005b9a:	6872      	ldr	r2, [r6, #4]
 8005b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9e:	1064      	asrs	r4, r4, #1
 8005ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ba4:	6031      	str	r1, [r6, #0]
 8005ba6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005baa:	4606      	mov	r6, r0
 8005bac:	d1ea      	bne.n	8005b84 <__pow5mult+0x24>
 8005bae:	4630      	mov	r0, r6
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f7ff ff39 	bl	8005a30 <__multiply>
 8005bbe:	6028      	str	r0, [r5, #0]
 8005bc0:	f8c0 8000 	str.w	r8, [r0]
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	e7e0      	b.n	8005b8a <__pow5mult+0x2a>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	e7d9      	b.n	8005b80 <__pow5mult+0x20>
 8005bcc:	1e5a      	subs	r2, r3, #1
 8005bce:	4d0b      	ldr	r5, [pc, #44]	; (8005bfc <__pow5mult+0x9c>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005bd6:	f7ff fe93 	bl	8005900 <__multadd>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	e7c8      	b.n	8005b70 <__pow5mult+0x10>
 8005bde:	2101      	movs	r1, #1
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff fe5d 	bl	80058a0 <_Balloc>
 8005be6:	f240 2171 	movw	r1, #625	; 0x271
 8005bea:	2201      	movs	r2, #1
 8005bec:	2300      	movs	r3, #0
 8005bee:	6141      	str	r1, [r0, #20]
 8005bf0:	6102      	str	r2, [r0, #16]
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	64b8      	str	r0, [r7, #72]	; 0x48
 8005bf6:	6003      	str	r3, [r0, #0]
 8005bf8:	e7be      	b.n	8005b78 <__pow5mult+0x18>
 8005bfa:	bf00      	nop
 8005bfc:	08008eb0 	.word	0x08008eb0

08005c00 <__lshift>:
 8005c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	4691      	mov	r9, r2
 8005c06:	690a      	ldr	r2, [r1, #16]
 8005c08:	688b      	ldr	r3, [r1, #8]
 8005c0a:	ea4f 1469 	mov.w	r4, r9, asr #5
 8005c0e:	eb04 0802 	add.w	r8, r4, r2
 8005c12:	f108 0501 	add.w	r5, r8, #1
 8005c16:	429d      	cmp	r5, r3
 8005c18:	460e      	mov	r6, r1
 8005c1a:	4682      	mov	sl, r0
 8005c1c:	6849      	ldr	r1, [r1, #4]
 8005c1e:	dd04      	ble.n	8005c2a <__lshift+0x2a>
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	429d      	cmp	r5, r3
 8005c24:	f101 0101 	add.w	r1, r1, #1
 8005c28:	dcfa      	bgt.n	8005c20 <__lshift+0x20>
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	f7ff fe38 	bl	80058a0 <_Balloc>
 8005c30:	2c00      	cmp	r4, #0
 8005c32:	f100 0214 	add.w	r2, r0, #20
 8005c36:	dd38      	ble.n	8005caa <__lshift+0xaa>
 8005c38:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f842 1b04 	str.w	r1, [r2], #4
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d1fb      	bne.n	8005c3e <__lshift+0x3e>
 8005c46:	6934      	ldr	r4, [r6, #16]
 8005c48:	f106 0114 	add.w	r1, r6, #20
 8005c4c:	f019 091f 	ands.w	r9, r9, #31
 8005c50:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8005c54:	d021      	beq.n	8005c9a <__lshift+0x9a>
 8005c56:	f1c9 0220 	rsb	r2, r9, #32
 8005c5a:	2400      	movs	r4, #0
 8005c5c:	680f      	ldr	r7, [r1, #0]
 8005c5e:	fa07 fc09 	lsl.w	ip, r7, r9
 8005c62:	ea4c 0404 	orr.w	r4, ip, r4
 8005c66:	469c      	mov	ip, r3
 8005c68:	f843 4b04 	str.w	r4, [r3], #4
 8005c6c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c70:	458e      	cmp	lr, r1
 8005c72:	fa24 f402 	lsr.w	r4, r4, r2
 8005c76:	d8f1      	bhi.n	8005c5c <__lshift+0x5c>
 8005c78:	f8cc 4004 	str.w	r4, [ip, #4]
 8005c7c:	b10c      	cbz	r4, 8005c82 <__lshift+0x82>
 8005c7e:	f108 0502 	add.w	r5, r8, #2
 8005c82:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8005c86:	6872      	ldr	r2, [r6, #4]
 8005c88:	3d01      	subs	r5, #1
 8005c8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c8e:	6105      	str	r5, [r0, #16]
 8005c90:	6031      	str	r1, [r6, #0]
 8005c92:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9a:	3b04      	subs	r3, #4
 8005c9c:	f851 2b04 	ldr.w	r2, [r1], #4
 8005ca0:	f843 2f04 	str.w	r2, [r3, #4]!
 8005ca4:	458e      	cmp	lr, r1
 8005ca6:	d8f9      	bhi.n	8005c9c <__lshift+0x9c>
 8005ca8:	e7eb      	b.n	8005c82 <__lshift+0x82>
 8005caa:	4613      	mov	r3, r2
 8005cac:	e7cb      	b.n	8005c46 <__lshift+0x46>
 8005cae:	bf00      	nop

08005cb0 <__mcmp>:
 8005cb0:	6902      	ldr	r2, [r0, #16]
 8005cb2:	690b      	ldr	r3, [r1, #16]
 8005cb4:	1ad2      	subs	r2, r2, r3
 8005cb6:	d113      	bne.n	8005ce0 <__mcmp+0x30>
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	3014      	adds	r0, #20
 8005cbc:	3114      	adds	r1, #20
 8005cbe:	4419      	add	r1, r3
 8005cc0:	b410      	push	{r4}
 8005cc2:	4403      	add	r3, r0
 8005cc4:	e001      	b.n	8005cca <__mcmp+0x1a>
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	d20c      	bcs.n	8005ce4 <__mcmp+0x34>
 8005cca:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005cce:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005cd2:	4294      	cmp	r4, r2
 8005cd4:	d0f7      	beq.n	8005cc6 <__mcmp+0x16>
 8005cd6:	d309      	bcc.n	8005cec <__mcmp+0x3c>
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4770      	bx	lr
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e7f3      	b.n	8005cda <__mcmp+0x2a>
 8005cf2:	bf00      	nop

08005cf4 <__mdiff>:
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	690b      	ldr	r3, [r1, #16]
 8005cfa:	460f      	mov	r7, r1
 8005cfc:	6911      	ldr	r1, [r2, #16]
 8005cfe:	1a5b      	subs	r3, r3, r1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	4690      	mov	r8, r2
 8005d04:	d117      	bne.n	8005d36 <__mdiff+0x42>
 8005d06:	0089      	lsls	r1, r1, #2
 8005d08:	f107 0214 	add.w	r2, r7, #20
 8005d0c:	f108 0514 	add.w	r5, r8, #20
 8005d10:	1853      	adds	r3, r2, r1
 8005d12:	4429      	add	r1, r5
 8005d14:	e001      	b.n	8005d1a <__mdiff+0x26>
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d25e      	bcs.n	8005dd8 <__mdiff+0xe4>
 8005d1a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8005d1e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d0f7      	beq.n	8005d16 <__mdiff+0x22>
 8005d26:	d260      	bcs.n	8005dea <__mdiff+0xf6>
 8005d28:	463b      	mov	r3, r7
 8005d2a:	4614      	mov	r4, r2
 8005d2c:	4647      	mov	r7, r8
 8005d2e:	f04f 0901 	mov.w	r9, #1
 8005d32:	4698      	mov	r8, r3
 8005d34:	e006      	b.n	8005d44 <__mdiff+0x50>
 8005d36:	db5d      	blt.n	8005df4 <__mdiff+0x100>
 8005d38:	f107 0514 	add.w	r5, r7, #20
 8005d3c:	f102 0414 	add.w	r4, r2, #20
 8005d40:	f04f 0900 	mov.w	r9, #0
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	f7ff fdab 	bl	80058a0 <_Balloc>
 8005d4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005d4e:	693e      	ldr	r6, [r7, #16]
 8005d50:	f8c0 900c 	str.w	r9, [r0, #12]
 8005d54:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8005d58:	46a6      	mov	lr, r4
 8005d5a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8005d5e:	f100 0414 	add.w	r4, r0, #20
 8005d62:	2300      	movs	r3, #0
 8005d64:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005d68:	f855 8b04 	ldr.w	r8, [r5], #4
 8005d6c:	b28a      	uxth	r2, r1
 8005d6e:	fa13 f388 	uxtah	r3, r3, r8
 8005d72:	0c09      	lsrs	r1, r1, #16
 8005d74:	1a9a      	subs	r2, r3, r2
 8005d76:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8005d7a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d84:	45f4      	cmp	ip, lr
 8005d86:	f844 2b04 	str.w	r2, [r4], #4
 8005d8a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005d8e:	d8e9      	bhi.n	8005d64 <__mdiff+0x70>
 8005d90:	42af      	cmp	r7, r5
 8005d92:	d917      	bls.n	8005dc4 <__mdiff+0xd0>
 8005d94:	46a4      	mov	ip, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	f851 eb04 	ldr.w	lr, [r1], #4
 8005d9c:	fa13 f28e 	uxtah	r2, r3, lr
 8005da0:	1413      	asrs	r3, r2, #16
 8005da2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8005da6:	b292      	uxth	r2, r2
 8005da8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005dac:	428f      	cmp	r7, r1
 8005dae:	f84c 2b04 	str.w	r2, [ip], #4
 8005db2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005db6:	d8ef      	bhi.n	8005d98 <__mdiff+0xa4>
 8005db8:	43ed      	mvns	r5, r5
 8005dba:	443d      	add	r5, r7
 8005dbc:	f025 0503 	bic.w	r5, r5, #3
 8005dc0:	3504      	adds	r5, #4
 8005dc2:	442c      	add	r4, r5
 8005dc4:	3c04      	subs	r4, #4
 8005dc6:	b922      	cbnz	r2, 8005dd2 <__mdiff+0xde>
 8005dc8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005dcc:	3e01      	subs	r6, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0fa      	beq.n	8005dc8 <__mdiff+0xd4>
 8005dd2:	6106      	str	r6, [r0, #16]
 8005dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd8:	2100      	movs	r1, #0
 8005dda:	f7ff fd61 	bl	80058a0 <_Balloc>
 8005dde:	2201      	movs	r2, #1
 8005de0:	2300      	movs	r3, #0
 8005de2:	6102      	str	r2, [r0, #16]
 8005de4:	6143      	str	r3, [r0, #20]
 8005de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dea:	462c      	mov	r4, r5
 8005dec:	f04f 0900 	mov.w	r9, #0
 8005df0:	4615      	mov	r5, r2
 8005df2:	e7a7      	b.n	8005d44 <__mdiff+0x50>
 8005df4:	463b      	mov	r3, r7
 8005df6:	f107 0414 	add.w	r4, r7, #20
 8005dfa:	f108 0514 	add.w	r5, r8, #20
 8005dfe:	4647      	mov	r7, r8
 8005e00:	f04f 0901 	mov.w	r9, #1
 8005e04:	4698      	mov	r8, r3
 8005e06:	e79d      	b.n	8005d44 <__mdiff+0x50>

08005e08 <__d2b>:
 8005e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	2101      	movs	r1, #1
 8005e10:	461c      	mov	r4, r3
 8005e12:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8005e16:	4617      	mov	r7, r2
 8005e18:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005e1a:	f7ff fd41 	bl	80058a0 <_Balloc>
 8005e1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005e22:	4681      	mov	r9, r0
 8005e24:	b10d      	cbz	r5, 8005e2a <__d2b+0x22>
 8005e26:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005e2a:	9401      	str	r4, [sp, #4]
 8005e2c:	b31f      	cbz	r7, 8005e76 <__d2b+0x6e>
 8005e2e:	a802      	add	r0, sp, #8
 8005e30:	f840 7d08 	str.w	r7, [r0, #-8]!
 8005e34:	f7ff fdc4 	bl	80059c0 <__lo0bits>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d135      	bne.n	8005ea8 <__d2b+0xa0>
 8005e3c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8005e40:	f8c9 2014 	str.w	r2, [r9, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	bf0c      	ite	eq
 8005e48:	2101      	moveq	r1, #1
 8005e4a:	2102      	movne	r1, #2
 8005e4c:	f8c9 3018 	str.w	r3, [r9, #24]
 8005e50:	f8c9 1010 	str.w	r1, [r9, #16]
 8005e54:	b9dd      	cbnz	r5, 8005e8e <__d2b+0x86>
 8005e56:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8005e5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e5e:	6030      	str	r0, [r6, #0]
 8005e60:	6918      	ldr	r0, [r3, #16]
 8005e62:	f7ff fd8d 	bl	8005980 <__hi0bits>
 8005e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e6c:	6018      	str	r0, [r3, #0]
 8005e6e:	4648      	mov	r0, r9
 8005e70:	b003      	add	sp, #12
 8005e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e76:	a801      	add	r0, sp, #4
 8005e78:	f7ff fda2 	bl	80059c0 <__lo0bits>
 8005e7c:	9b01      	ldr	r3, [sp, #4]
 8005e7e:	f8c9 3014 	str.w	r3, [r9, #20]
 8005e82:	2101      	movs	r1, #1
 8005e84:	3020      	adds	r0, #32
 8005e86:	f8c9 1010 	str.w	r1, [r9, #16]
 8005e8a:	2d00      	cmp	r5, #0
 8005e8c:	d0e3      	beq.n	8005e56 <__d2b+0x4e>
 8005e8e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8005e92:	eb08 0300 	add.w	r3, r8, r0
 8005e96:	6033      	str	r3, [r6, #0]
 8005e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e9e:	6018      	str	r0, [r3, #0]
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	b003      	add	sp, #12
 8005ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ea8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8005eac:	f1c0 0120 	rsb	r1, r0, #32
 8005eb0:	fa03 f101 	lsl.w	r1, r3, r1
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	40c3      	lsrs	r3, r0
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	f8c9 2014 	str.w	r2, [r9, #20]
 8005ebe:	e7c1      	b.n	8005e44 <__d2b+0x3c>

08005ec0 <_realloc_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	4617      	mov	r7, r2
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	f000 80c1 	beq.w	8006050 <_realloc_r+0x190>
 8005ece:	460e      	mov	r6, r1
 8005ed0:	4681      	mov	r9, r0
 8005ed2:	f107 050b 	add.w	r5, r7, #11
 8005ed6:	f7ff fcdf 	bl	8005898 <__malloc_lock>
 8005eda:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8005ede:	2d16      	cmp	r5, #22
 8005ee0:	f02e 0403 	bic.w	r4, lr, #3
 8005ee4:	f1a6 0808 	sub.w	r8, r6, #8
 8005ee8:	d840      	bhi.n	8005f6c <_realloc_r+0xac>
 8005eea:	2210      	movs	r2, #16
 8005eec:	4615      	mov	r5, r2
 8005eee:	42af      	cmp	r7, r5
 8005ef0:	d841      	bhi.n	8005f76 <_realloc_r+0xb6>
 8005ef2:	4294      	cmp	r4, r2
 8005ef4:	da75      	bge.n	8005fe2 <_realloc_r+0x122>
 8005ef6:	4bc9      	ldr	r3, [pc, #804]	; (800621c <_realloc_r+0x35c>)
 8005ef8:	6899      	ldr	r1, [r3, #8]
 8005efa:	eb08 0004 	add.w	r0, r8, r4
 8005efe:	4288      	cmp	r0, r1
 8005f00:	6841      	ldr	r1, [r0, #4]
 8005f02:	f000 80d9 	beq.w	80060b8 <_realloc_r+0x1f8>
 8005f06:	f021 0301 	bic.w	r3, r1, #1
 8005f0a:	4403      	add	r3, r0
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	07db      	lsls	r3, r3, #31
 8005f10:	d57d      	bpl.n	800600e <_realloc_r+0x14e>
 8005f12:	f01e 0f01 	tst.w	lr, #1
 8005f16:	d035      	beq.n	8005f84 <_realloc_r+0xc4>
 8005f18:	4639      	mov	r1, r7
 8005f1a:	4648      	mov	r0, r9
 8005f1c:	f7ff f94c 	bl	80051b8 <_malloc_r>
 8005f20:	4607      	mov	r7, r0
 8005f22:	b1e0      	cbz	r0, 8005f5e <_realloc_r+0x9e>
 8005f24:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	4443      	add	r3, r8
 8005f2e:	f1a0 0208 	sub.w	r2, r0, #8
 8005f32:	429a      	cmp	r2, r3
 8005f34:	f000 8144 	beq.w	80061c0 <_realloc_r+0x300>
 8005f38:	1f22      	subs	r2, r4, #4
 8005f3a:	2a24      	cmp	r2, #36	; 0x24
 8005f3c:	f200 8131 	bhi.w	80061a2 <_realloc_r+0x2e2>
 8005f40:	2a13      	cmp	r2, #19
 8005f42:	f200 8104 	bhi.w	800614e <_realloc_r+0x28e>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4632      	mov	r2, r6
 8005f4a:	6811      	ldr	r1, [r2, #0]
 8005f4c:	6019      	str	r1, [r3, #0]
 8005f4e:	6851      	ldr	r1, [r2, #4]
 8005f50:	6059      	str	r1, [r3, #4]
 8005f52:	6892      	ldr	r2, [r2, #8]
 8005f54:	609a      	str	r2, [r3, #8]
 8005f56:	4631      	mov	r1, r6
 8005f58:	4648      	mov	r0, r9
 8005f5a:	f7fe fe17 	bl	8004b8c <_free_r>
 8005f5e:	4648      	mov	r0, r9
 8005f60:	f7ff fc9c 	bl	800589c <__malloc_unlock>
 8005f64:	4638      	mov	r0, r7
 8005f66:	b003      	add	sp, #12
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6c:	f025 0507 	bic.w	r5, r5, #7
 8005f70:	2d00      	cmp	r5, #0
 8005f72:	462a      	mov	r2, r5
 8005f74:	dabb      	bge.n	8005eee <_realloc_r+0x2e>
 8005f76:	230c      	movs	r3, #12
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f8c9 3000 	str.w	r3, [r9]
 8005f7e:	b003      	add	sp, #12
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005f88:	ebc3 0a08 	rsb	sl, r3, r8
 8005f8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005f90:	f023 0c03 	bic.w	ip, r3, #3
 8005f94:	eb04 030c 	add.w	r3, r4, ip
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	dbbd      	blt.n	8005f18 <_realloc_r+0x58>
 8005f9c:	4657      	mov	r7, sl
 8005f9e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005fa2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005fa6:	1f22      	subs	r2, r4, #4
 8005fa8:	2a24      	cmp	r2, #36	; 0x24
 8005faa:	60c1      	str	r1, [r0, #12]
 8005fac:	6088      	str	r0, [r1, #8]
 8005fae:	f200 8117 	bhi.w	80061e0 <_realloc_r+0x320>
 8005fb2:	2a13      	cmp	r2, #19
 8005fb4:	f240 8112 	bls.w	80061dc <_realloc_r+0x31c>
 8005fb8:	6831      	ldr	r1, [r6, #0]
 8005fba:	f8ca 1008 	str.w	r1, [sl, #8]
 8005fbe:	6871      	ldr	r1, [r6, #4]
 8005fc0:	f8ca 100c 	str.w	r1, [sl, #12]
 8005fc4:	2a1b      	cmp	r2, #27
 8005fc6:	f200 812b 	bhi.w	8006220 <_realloc_r+0x360>
 8005fca:	3608      	adds	r6, #8
 8005fcc:	f10a 0210 	add.w	r2, sl, #16
 8005fd0:	6831      	ldr	r1, [r6, #0]
 8005fd2:	6011      	str	r1, [r2, #0]
 8005fd4:	6871      	ldr	r1, [r6, #4]
 8005fd6:	6051      	str	r1, [r2, #4]
 8005fd8:	68b1      	ldr	r1, [r6, #8]
 8005fda:	6091      	str	r1, [r2, #8]
 8005fdc:	463e      	mov	r6, r7
 8005fde:	461c      	mov	r4, r3
 8005fe0:	46d0      	mov	r8, sl
 8005fe2:	1b63      	subs	r3, r4, r5
 8005fe4:	2b0f      	cmp	r3, #15
 8005fe6:	d81d      	bhi.n	8006024 <_realloc_r+0x164>
 8005fe8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	4323      	orrs	r3, r4
 8005ff2:	4444      	add	r4, r8
 8005ff4:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	4648      	mov	r0, r9
 8006002:	f7ff fc4b 	bl	800589c <__malloc_unlock>
 8006006:	4630      	mov	r0, r6
 8006008:	b003      	add	sp, #12
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	f021 0103 	bic.w	r1, r1, #3
 8006012:	4421      	add	r1, r4
 8006014:	4291      	cmp	r1, r2
 8006016:	db21      	blt.n	800605c <_realloc_r+0x19c>
 8006018:	68c3      	ldr	r3, [r0, #12]
 800601a:	6882      	ldr	r2, [r0, #8]
 800601c:	460c      	mov	r4, r1
 800601e:	60d3      	str	r3, [r2, #12]
 8006020:	609a      	str	r2, [r3, #8]
 8006022:	e7de      	b.n	8005fe2 <_realloc_r+0x122>
 8006024:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006028:	eb08 0105 	add.w	r1, r8, r5
 800602c:	f002 0201 	and.w	r2, r2, #1
 8006030:	4315      	orrs	r5, r2
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	440b      	add	r3, r1
 8006038:	f8c8 5004 	str.w	r5, [r8, #4]
 800603c:	604a      	str	r2, [r1, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	3108      	adds	r1, #8
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	4648      	mov	r0, r9
 800604a:	f7fe fd9f 	bl	8004b8c <_free_r>
 800604e:	e7d7      	b.n	8006000 <_realloc_r+0x140>
 8006050:	4611      	mov	r1, r2
 8006052:	b003      	add	sp, #12
 8006054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	f7ff b8ae 	b.w	80051b8 <_malloc_r>
 800605c:	f01e 0f01 	tst.w	lr, #1
 8006060:	f47f af5a 	bne.w	8005f18 <_realloc_r+0x58>
 8006064:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006068:	ebc3 0a08 	rsb	sl, r3, r8
 800606c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006070:	f023 0c03 	bic.w	ip, r3, #3
 8006074:	eb01 0e0c 	add.w	lr, r1, ip
 8006078:	4596      	cmp	lr, r2
 800607a:	db8b      	blt.n	8005f94 <_realloc_r+0xd4>
 800607c:	68c3      	ldr	r3, [r0, #12]
 800607e:	6882      	ldr	r2, [r0, #8]
 8006080:	4657      	mov	r7, sl
 8006082:	60d3      	str	r3, [r2, #12]
 8006084:	609a      	str	r2, [r3, #8]
 8006086:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800608a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800608e:	60cb      	str	r3, [r1, #12]
 8006090:	1f22      	subs	r2, r4, #4
 8006092:	2a24      	cmp	r2, #36	; 0x24
 8006094:	6099      	str	r1, [r3, #8]
 8006096:	f200 8099 	bhi.w	80061cc <_realloc_r+0x30c>
 800609a:	2a13      	cmp	r2, #19
 800609c:	d962      	bls.n	8006164 <_realloc_r+0x2a4>
 800609e:	6833      	ldr	r3, [r6, #0]
 80060a0:	f8ca 3008 	str.w	r3, [sl, #8]
 80060a4:	6873      	ldr	r3, [r6, #4]
 80060a6:	f8ca 300c 	str.w	r3, [sl, #12]
 80060aa:	2a1b      	cmp	r2, #27
 80060ac:	f200 80a0 	bhi.w	80061f0 <_realloc_r+0x330>
 80060b0:	3608      	adds	r6, #8
 80060b2:	f10a 0310 	add.w	r3, sl, #16
 80060b6:	e056      	b.n	8006166 <_realloc_r+0x2a6>
 80060b8:	f021 0b03 	bic.w	fp, r1, #3
 80060bc:	44a3      	add	fp, r4
 80060be:	f105 0010 	add.w	r0, r5, #16
 80060c2:	4583      	cmp	fp, r0
 80060c4:	da59      	bge.n	800617a <_realloc_r+0x2ba>
 80060c6:	f01e 0f01 	tst.w	lr, #1
 80060ca:	f47f af25 	bne.w	8005f18 <_realloc_r+0x58>
 80060ce:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80060d2:	ebc1 0a08 	rsb	sl, r1, r8
 80060d6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80060da:	f021 0c03 	bic.w	ip, r1, #3
 80060de:	44e3      	add	fp, ip
 80060e0:	4558      	cmp	r0, fp
 80060e2:	f73f af57 	bgt.w	8005f94 <_realloc_r+0xd4>
 80060e6:	4657      	mov	r7, sl
 80060e8:	f8da 100c 	ldr.w	r1, [sl, #12]
 80060ec:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80060f0:	1f22      	subs	r2, r4, #4
 80060f2:	2a24      	cmp	r2, #36	; 0x24
 80060f4:	60c1      	str	r1, [r0, #12]
 80060f6:	6088      	str	r0, [r1, #8]
 80060f8:	f200 80b4 	bhi.w	8006264 <_realloc_r+0x3a4>
 80060fc:	2a13      	cmp	r2, #19
 80060fe:	f240 80a5 	bls.w	800624c <_realloc_r+0x38c>
 8006102:	6831      	ldr	r1, [r6, #0]
 8006104:	f8ca 1008 	str.w	r1, [sl, #8]
 8006108:	6871      	ldr	r1, [r6, #4]
 800610a:	f8ca 100c 	str.w	r1, [sl, #12]
 800610e:	2a1b      	cmp	r2, #27
 8006110:	f200 80af 	bhi.w	8006272 <_realloc_r+0x3b2>
 8006114:	3608      	adds	r6, #8
 8006116:	f10a 0210 	add.w	r2, sl, #16
 800611a:	6831      	ldr	r1, [r6, #0]
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	6871      	ldr	r1, [r6, #4]
 8006120:	6051      	str	r1, [r2, #4]
 8006122:	68b1      	ldr	r1, [r6, #8]
 8006124:	6091      	str	r1, [r2, #8]
 8006126:	eb0a 0105 	add.w	r1, sl, r5
 800612a:	ebc5 020b 	rsb	r2, r5, fp
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	6099      	str	r1, [r3, #8]
 8006134:	604a      	str	r2, [r1, #4]
 8006136:	f8da 3004 	ldr.w	r3, [sl, #4]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	431d      	orrs	r5, r3
 8006140:	4648      	mov	r0, r9
 8006142:	f8ca 5004 	str.w	r5, [sl, #4]
 8006146:	f7ff fba9 	bl	800589c <__malloc_unlock>
 800614a:	4638      	mov	r0, r7
 800614c:	e75c      	b.n	8006008 <_realloc_r+0x148>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	6003      	str	r3, [r0, #0]
 8006152:	6873      	ldr	r3, [r6, #4]
 8006154:	6043      	str	r3, [r0, #4]
 8006156:	2a1b      	cmp	r2, #27
 8006158:	d827      	bhi.n	80061aa <_realloc_r+0x2ea>
 800615a:	f100 0308 	add.w	r3, r0, #8
 800615e:	f106 0208 	add.w	r2, r6, #8
 8006162:	e6f2      	b.n	8005f4a <_realloc_r+0x8a>
 8006164:	463b      	mov	r3, r7
 8006166:	6832      	ldr	r2, [r6, #0]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	6872      	ldr	r2, [r6, #4]
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	68b2      	ldr	r2, [r6, #8]
 8006170:	609a      	str	r2, [r3, #8]
 8006172:	463e      	mov	r6, r7
 8006174:	4674      	mov	r4, lr
 8006176:	46d0      	mov	r8, sl
 8006178:	e733      	b.n	8005fe2 <_realloc_r+0x122>
 800617a:	eb08 0105 	add.w	r1, r8, r5
 800617e:	ebc5 0b0b 	rsb	fp, r5, fp
 8006182:	f04b 0201 	orr.w	r2, fp, #1
 8006186:	6099      	str	r1, [r3, #8]
 8006188:	604a      	str	r2, [r1, #4]
 800618a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	431d      	orrs	r5, r3
 8006194:	4648      	mov	r0, r9
 8006196:	f846 5c04 	str.w	r5, [r6, #-4]
 800619a:	f7ff fb7f 	bl	800589c <__malloc_unlock>
 800619e:	4630      	mov	r0, r6
 80061a0:	e732      	b.n	8006008 <_realloc_r+0x148>
 80061a2:	4631      	mov	r1, r6
 80061a4:	f7ff fb14 	bl	80057d0 <memmove>
 80061a8:	e6d5      	b.n	8005f56 <_realloc_r+0x96>
 80061aa:	68b3      	ldr	r3, [r6, #8]
 80061ac:	6083      	str	r3, [r0, #8]
 80061ae:	68f3      	ldr	r3, [r6, #12]
 80061b0:	60c3      	str	r3, [r0, #12]
 80061b2:	2a24      	cmp	r2, #36	; 0x24
 80061b4:	d028      	beq.n	8006208 <_realloc_r+0x348>
 80061b6:	f100 0310 	add.w	r3, r0, #16
 80061ba:	f106 0210 	add.w	r2, r6, #16
 80061be:	e6c4      	b.n	8005f4a <_realloc_r+0x8a>
 80061c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80061c4:	f023 0303 	bic.w	r3, r3, #3
 80061c8:	441c      	add	r4, r3
 80061ca:	e70a      	b.n	8005fe2 <_realloc_r+0x122>
 80061cc:	4631      	mov	r1, r6
 80061ce:	4638      	mov	r0, r7
 80061d0:	4674      	mov	r4, lr
 80061d2:	46d0      	mov	r8, sl
 80061d4:	f7ff fafc 	bl	80057d0 <memmove>
 80061d8:	463e      	mov	r6, r7
 80061da:	e702      	b.n	8005fe2 <_realloc_r+0x122>
 80061dc:	463a      	mov	r2, r7
 80061de:	e6f7      	b.n	8005fd0 <_realloc_r+0x110>
 80061e0:	4631      	mov	r1, r6
 80061e2:	4638      	mov	r0, r7
 80061e4:	461c      	mov	r4, r3
 80061e6:	46d0      	mov	r8, sl
 80061e8:	f7ff faf2 	bl	80057d0 <memmove>
 80061ec:	463e      	mov	r6, r7
 80061ee:	e6f8      	b.n	8005fe2 <_realloc_r+0x122>
 80061f0:	68b3      	ldr	r3, [r6, #8]
 80061f2:	f8ca 3010 	str.w	r3, [sl, #16]
 80061f6:	68f3      	ldr	r3, [r6, #12]
 80061f8:	f8ca 3014 	str.w	r3, [sl, #20]
 80061fc:	2a24      	cmp	r2, #36	; 0x24
 80061fe:	d01b      	beq.n	8006238 <_realloc_r+0x378>
 8006200:	3610      	adds	r6, #16
 8006202:	f10a 0318 	add.w	r3, sl, #24
 8006206:	e7ae      	b.n	8006166 <_realloc_r+0x2a6>
 8006208:	6933      	ldr	r3, [r6, #16]
 800620a:	6103      	str	r3, [r0, #16]
 800620c:	6973      	ldr	r3, [r6, #20]
 800620e:	6143      	str	r3, [r0, #20]
 8006210:	f106 0218 	add.w	r2, r6, #24
 8006214:	f100 0318 	add.w	r3, r0, #24
 8006218:	e697      	b.n	8005f4a <_realloc_r+0x8a>
 800621a:	bf00      	nop
 800621c:	20000464 	.word	0x20000464
 8006220:	68b1      	ldr	r1, [r6, #8]
 8006222:	f8ca 1010 	str.w	r1, [sl, #16]
 8006226:	68f1      	ldr	r1, [r6, #12]
 8006228:	f8ca 1014 	str.w	r1, [sl, #20]
 800622c:	2a24      	cmp	r2, #36	; 0x24
 800622e:	d00f      	beq.n	8006250 <_realloc_r+0x390>
 8006230:	3610      	adds	r6, #16
 8006232:	f10a 0218 	add.w	r2, sl, #24
 8006236:	e6cb      	b.n	8005fd0 <_realloc_r+0x110>
 8006238:	6933      	ldr	r3, [r6, #16]
 800623a:	f8ca 3018 	str.w	r3, [sl, #24]
 800623e:	6973      	ldr	r3, [r6, #20]
 8006240:	f8ca 301c 	str.w	r3, [sl, #28]
 8006244:	3618      	adds	r6, #24
 8006246:	f10a 0320 	add.w	r3, sl, #32
 800624a:	e78c      	b.n	8006166 <_realloc_r+0x2a6>
 800624c:	463a      	mov	r2, r7
 800624e:	e764      	b.n	800611a <_realloc_r+0x25a>
 8006250:	6932      	ldr	r2, [r6, #16]
 8006252:	f8ca 2018 	str.w	r2, [sl, #24]
 8006256:	6972      	ldr	r2, [r6, #20]
 8006258:	f8ca 201c 	str.w	r2, [sl, #28]
 800625c:	3618      	adds	r6, #24
 800625e:	f10a 0220 	add.w	r2, sl, #32
 8006262:	e6b5      	b.n	8005fd0 <_realloc_r+0x110>
 8006264:	4631      	mov	r1, r6
 8006266:	4638      	mov	r0, r7
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	f7ff fab1 	bl	80057d0 <memmove>
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	e759      	b.n	8006126 <_realloc_r+0x266>
 8006272:	68b1      	ldr	r1, [r6, #8]
 8006274:	f8ca 1010 	str.w	r1, [sl, #16]
 8006278:	68f1      	ldr	r1, [r6, #12]
 800627a:	f8ca 1014 	str.w	r1, [sl, #20]
 800627e:	2a24      	cmp	r2, #36	; 0x24
 8006280:	d003      	beq.n	800628a <_realloc_r+0x3ca>
 8006282:	3610      	adds	r6, #16
 8006284:	f10a 0218 	add.w	r2, sl, #24
 8006288:	e747      	b.n	800611a <_realloc_r+0x25a>
 800628a:	6932      	ldr	r2, [r6, #16]
 800628c:	f8ca 2018 	str.w	r2, [sl, #24]
 8006290:	6972      	ldr	r2, [r6, #20]
 8006292:	f8ca 201c 	str.w	r2, [sl, #28]
 8006296:	3618      	adds	r6, #24
 8006298:	f10a 0220 	add.w	r2, sl, #32
 800629c:	e73d      	b.n	800611a <_realloc_r+0x25a>
 800629e:	bf00      	nop

080062a0 <_sbrk_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4c07      	ldr	r4, [pc, #28]	; (80062c0 <_sbrk_r+0x20>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4605      	mov	r5, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	f7fa fe3a 	bl	8000f24 <_sbrk>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d000      	beq.n	80062b6 <_sbrk_r+0x16>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0fb      	beq.n	80062b4 <_sbrk_r+0x14>
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20000a74 	.word	0x20000a74

080062c4 <__sread>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	460c      	mov	r4, r1
 80062c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062cc:	f001 fd5a 	bl	8007d84 <_read_r>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	db03      	blt.n	80062dc <__sread+0x18>
 80062d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062d6:	4403      	add	r3, r0
 80062d8:	6523      	str	r3, [r4, #80]	; 0x50
 80062da:	bd10      	pop	{r4, pc}
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	bd10      	pop	{r4, pc}
 80062e6:	bf00      	nop

080062e8 <__swrite>:
 80062e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ec:	4616      	mov	r6, r2
 80062ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062f2:	461f      	mov	r7, r3
 80062f4:	05d3      	lsls	r3, r2, #23
 80062f6:	460c      	mov	r4, r1
 80062f8:	4605      	mov	r5, r0
 80062fa:	d507      	bpl.n	800630c <__swrite+0x24>
 80062fc:	2200      	movs	r2, #0
 80062fe:	2302      	movs	r3, #2
 8006300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006304:	f001 fd12 	bl	8007d2c <_lseek_r>
 8006308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006314:	81a2      	strh	r2, [r4, #12]
 8006316:	463b      	mov	r3, r7
 8006318:	4632      	mov	r2, r6
 800631a:	4628      	mov	r0, r5
 800631c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	f001 bbd6 	b.w	8007ad0 <_write_r>

08006324 <__sseek>:
 8006324:	b510      	push	{r4, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	f001 fcfe 	bl	8007d2c <_lseek_r>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	1c42      	adds	r2, r0, #1
 8006334:	bf0e      	itee	eq
 8006336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800633a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800633e:	6520      	strne	r0, [r4, #80]	; 0x50
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	bd10      	pop	{r4, pc}

08006344 <__sclose>:
 8006344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006348:	f001 bc08 	b.w	8007b5c <_close_r>
 800634c:	0000      	movs	r0, r0
	...

08006350 <_svfprintf_r>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	b0c5      	sub	sp, #276	; 0x114
 8006356:	460c      	mov	r4, r1
 8006358:	9109      	str	r1, [sp, #36]	; 0x24
 800635a:	4615      	mov	r5, r2
 800635c:	930e      	str	r3, [sp, #56]	; 0x38
 800635e:	900a      	str	r0, [sp, #40]	; 0x28
 8006360:	f7fe fea8 	bl	80050b4 <_localeconv_r>
 8006364:	6803      	ldr	r3, [r0, #0]
 8006366:	9317      	str	r3, [sp, #92]	; 0x5c
 8006368:	4618      	mov	r0, r3
 800636a:	f7fb fe09 	bl	8001f80 <strlen>
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	9016      	str	r0, [sp, #88]	; 0x58
 8006372:	061e      	lsls	r6, r3, #24
 8006374:	d503      	bpl.n	800637e <_svfprintf_r+0x2e>
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f001 8133 	beq.w	80075e4 <_svfprintf_r+0x1294>
 800637e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006618 <_svfprintf_r+0x2c8>
 8006382:	2300      	movs	r3, #0
 8006384:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006388:	9312      	str	r3, [sp, #72]	; 0x48
 800638a:	9329      	str	r3, [sp, #164]	; 0xa4
 800638c:	9328      	str	r3, [sp, #160]	; 0xa0
 800638e:	9319      	str	r3, [sp, #100]	; 0x64
 8006390:	930b      	str	r3, [sp, #44]	; 0x2c
 8006392:	f8df a290 	ldr.w	sl, [pc, #656]	; 8006624 <_svfprintf_r+0x2d4>
 8006396:	ab34      	add	r3, sp, #208	; 0xd0
 8006398:	9327      	str	r3, [sp, #156]	; 0x9c
 800639a:	4699      	mov	r9, r3
 800639c:	46a8      	mov	r8, r5
 800639e:	f898 3000 	ldrb.w	r3, [r8]
 80063a2:	4644      	mov	r4, r8
 80063a4:	b1eb      	cbz	r3, 80063e2 <_svfprintf_r+0x92>
 80063a6:	2b25      	cmp	r3, #37	; 0x25
 80063a8:	d102      	bne.n	80063b0 <_svfprintf_r+0x60>
 80063aa:	e01a      	b.n	80063e2 <_svfprintf_r+0x92>
 80063ac:	2b25      	cmp	r3, #37	; 0x25
 80063ae:	d003      	beq.n	80063b8 <_svfprintf_r+0x68>
 80063b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f9      	bne.n	80063ac <_svfprintf_r+0x5c>
 80063b8:	ebc8 0504 	rsb	r5, r8, r4
 80063bc:	b18d      	cbz	r5, 80063e2 <_svfprintf_r+0x92>
 80063be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80063c2:	f8c9 8000 	str.w	r8, [r9]
 80063c6:	3301      	adds	r3, #1
 80063c8:	442a      	add	r2, r5
 80063ca:	2b07      	cmp	r3, #7
 80063cc:	f8c9 5004 	str.w	r5, [r9, #4]
 80063d0:	9229      	str	r2, [sp, #164]	; 0xa4
 80063d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80063d4:	f300 80a6 	bgt.w	8006524 <_svfprintf_r+0x1d4>
 80063d8:	f109 0908 	add.w	r9, r9, #8
 80063dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063de:	442b      	add	r3, r5
 80063e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e2:	7823      	ldrb	r3, [r4, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a6 	beq.w	8006536 <_svfprintf_r+0x1e6>
 80063ea:	2300      	movs	r3, #0
 80063ec:	461a      	mov	r2, r3
 80063ee:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80063f2:	4619      	mov	r1, r3
 80063f4:	930c      	str	r3, [sp, #48]	; 0x30
 80063f6:	9307      	str	r3, [sp, #28]
 80063f8:	f04f 3bff 	mov.w	fp, #4294967295
 80063fc:	7863      	ldrb	r3, [r4, #1]
 80063fe:	f104 0801 	add.w	r8, r4, #1
 8006402:	465d      	mov	r5, fp
 8006404:	f108 0801 	add.w	r8, r8, #1
 8006408:	f1a3 0020 	sub.w	r0, r3, #32
 800640c:	2858      	cmp	r0, #88	; 0x58
 800640e:	f200 8434 	bhi.w	8006c7a <_svfprintf_r+0x92a>
 8006412:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006416:	03a0      	.short	0x03a0
 8006418:	04320432 	.word	0x04320432
 800641c:	043203a8 	.word	0x043203a8
 8006420:	04320432 	.word	0x04320432
 8006424:	04320432 	.word	0x04320432
 8006428:	03af0432 	.word	0x03af0432
 800642c:	043203bd 	.word	0x043203bd
 8006430:	00e2005d 	.word	0x00e2005d
 8006434:	01090432 	.word	0x01090432
 8006438:	01100110 	.word	0x01100110
 800643c:	01100110 	.word	0x01100110
 8006440:	01100110 	.word	0x01100110
 8006444:	01100110 	.word	0x01100110
 8006448:	04320110 	.word	0x04320110
 800644c:	04320432 	.word	0x04320432
 8006450:	04320432 	.word	0x04320432
 8006454:	04320432 	.word	0x04320432
 8006458:	04320432 	.word	0x04320432
 800645c:	01200432 	.word	0x01200432
 8006460:	04320286 	.word	0x04320286
 8006464:	04320286 	.word	0x04320286
 8006468:	04320432 	.word	0x04320432
 800646c:	02d40432 	.word	0x02d40432
 8006470:	04320432 	.word	0x04320432
 8006474:	043202e5 	.word	0x043202e5
 8006478:	04320432 	.word	0x04320432
 800647c:	04320432 	.word	0x04320432
 8006480:	0432030f 	.word	0x0432030f
 8006484:	033d0432 	.word	0x033d0432
 8006488:	04320432 	.word	0x04320432
 800648c:	04320432 	.word	0x04320432
 8006490:	04320432 	.word	0x04320432
 8006494:	04320432 	.word	0x04320432
 8006498:	04320432 	.word	0x04320432
 800649c:	0391037e 	.word	0x0391037e
 80064a0:	02860286 	.word	0x02860286
 80064a4:	03990286 	.word	0x03990286
 80064a8:	04320391 	.word	0x04320391
 80064ac:	04070432 	.word	0x04070432
 80064b0:	04120432 	.word	0x04120432
 80064b4:	006400a3 	.word	0x006400a3
 80064b8:	043203c2 	.word	0x043203c2
 80064bc:	043203c9 	.word	0x043203c9
 80064c0:	043203ea 	.word	0x043203ea
 80064c4:	03f20432 	.word	0x03f20432
 80064c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80064ca:	930e      	str	r3, [sp, #56]	; 0x38
 80064cc:	4240      	negs	r0, r0
 80064ce:	900c      	str	r0, [sp, #48]	; 0x30
 80064d0:	9b07      	ldr	r3, [sp, #28]
 80064d2:	f043 0304 	orr.w	r3, r3, #4
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	f898 3000 	ldrb.w	r3, [r8]
 80064dc:	e792      	b.n	8006404 <_svfprintf_r+0xb4>
 80064de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80064e0:	46ab      	mov	fp, r5
 80064e2:	2100      	movs	r1, #0
 80064e4:	6804      	ldr	r4, [r0, #0]
 80064e6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80064ea:	1d07      	adds	r7, r0, #4
 80064ec:	9807      	ldr	r0, [sp, #28]
 80064ee:	2330      	movs	r3, #48	; 0x30
 80064f0:	2278      	movs	r2, #120	; 0x78
 80064f2:	458b      	cmp	fp, r1
 80064f4:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80064f8:	f04f 0500 	mov.w	r5, #0
 80064fc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8006500:	f040 0302 	orr.w	r3, r0, #2
 8006504:	f2c0 83d6 	blt.w	8006cb4 <_svfprintf_r+0x964>
 8006508:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800650c:	f043 0302 	orr.w	r3, r3, #2
 8006510:	9307      	str	r3, [sp, #28]
 8006512:	ea54 0305 	orrs.w	r3, r4, r5
 8006516:	970e      	str	r7, [sp, #56]	; 0x38
 8006518:	f000 83a2 	beq.w	8006c60 <_svfprintf_r+0x910>
 800651c:	460f      	mov	r7, r1
 800651e:	9211      	str	r2, [sp, #68]	; 0x44
 8006520:	483f      	ldr	r0, [pc, #252]	; (8006620 <_svfprintf_r+0x2d0>)
 8006522:	e2e6      	b.n	8006af2 <_svfprintf_r+0x7a2>
 8006524:	aa27      	add	r2, sp, #156	; 0x9c
 8006526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006528:	980a      	ldr	r0, [sp, #40]	; 0x28
 800652a:	f001 fc41 	bl	8007db0 <__ssprint_r>
 800652e:	b948      	cbnz	r0, 8006544 <_svfprintf_r+0x1f4>
 8006530:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006534:	e752      	b.n	80063dc <_svfprintf_r+0x8c>
 8006536:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006538:	b123      	cbz	r3, 8006544 <_svfprintf_r+0x1f4>
 800653a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800653c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800653e:	aa27      	add	r2, sp, #156	; 0x9c
 8006540:	f001 fc36 	bl	8007db0 <__ssprint_r>
 8006544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006546:	899b      	ldrh	r3, [r3, #12]
 8006548:	f013 0f40 	tst.w	r3, #64	; 0x40
 800654c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800654e:	bf18      	it	ne
 8006550:	f04f 33ff 	movne.w	r3, #4294967295
 8006554:	4618      	mov	r0, r3
 8006556:	b045      	add	sp, #276	; 0x114
 8006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655c:	9311      	str	r3, [sp, #68]	; 0x44
 800655e:	46ab      	mov	fp, r5
 8006560:	2a00      	cmp	r2, #0
 8006562:	f041 823b 	bne.w	80079dc <_svfprintf_r+0x168c>
 8006566:	9a07      	ldr	r2, [sp, #28]
 8006568:	f012 0320 	ands.w	r3, r2, #32
 800656c:	f000 8246 	beq.w	80069fc <_svfprintf_r+0x6ac>
 8006570:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006572:	3707      	adds	r7, #7
 8006574:	f027 0307 	bic.w	r3, r7, #7
 8006578:	2700      	movs	r7, #0
 800657a:	f103 0108 	add.w	r1, r3, #8
 800657e:	45bb      	cmp	fp, r7
 8006580:	910e      	str	r1, [sp, #56]	; 0x38
 8006582:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006586:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800658a:	f2c0 8764 	blt.w	8007456 <_svfprintf_r+0x1106>
 800658e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006592:	9307      	str	r3, [sp, #28]
 8006594:	ea54 0305 	orrs.w	r3, r4, r5
 8006598:	f000 8384 	beq.w	8006ca4 <_svfprintf_r+0x954>
 800659c:	ae34      	add	r6, sp, #208	; 0xd0
 800659e:	08e2      	lsrs	r2, r4, #3
 80065a0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80065a4:	08e9      	lsrs	r1, r5, #3
 80065a6:	f004 0307 	and.w	r3, r4, #7
 80065aa:	460d      	mov	r5, r1
 80065ac:	4614      	mov	r4, r2
 80065ae:	3330      	adds	r3, #48	; 0x30
 80065b0:	ea54 0205 	orrs.w	r2, r4, r5
 80065b4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80065b8:	d1f1      	bne.n	800659e <_svfprintf_r+0x24e>
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	07d1      	lsls	r1, r2, #31
 80065be:	f140 808f 	bpl.w	80066e0 <_svfprintf_r+0x390>
 80065c2:	2b30      	cmp	r3, #48	; 0x30
 80065c4:	f000 808c 	beq.w	80066e0 <_svfprintf_r+0x390>
 80065c8:	2230      	movs	r2, #48	; 0x30
 80065ca:	1e73      	subs	r3, r6, #1
 80065cc:	f806 2c01 	strb.w	r2, [r6, #-1]
 80065d0:	aa34      	add	r2, sp, #208	; 0xd0
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	920d      	str	r2, [sp, #52]	; 0x34
 80065d6:	461e      	mov	r6, r3
 80065d8:	e085      	b.n	80066e6 <_svfprintf_r+0x396>
 80065da:	f898 3000 	ldrb.w	r3, [r8]
 80065de:	2b2a      	cmp	r3, #42	; 0x2a
 80065e0:	f108 0401 	add.w	r4, r8, #1
 80065e4:	f001 81ec 	beq.w	80079c0 <_svfprintf_r+0x1670>
 80065e8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80065ec:	2809      	cmp	r0, #9
 80065ee:	bf98      	it	ls
 80065f0:	2500      	movls	r5, #0
 80065f2:	f201 818e 	bhi.w	8007912 <_svfprintf_r+0x15c2>
 80065f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80065fe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8006602:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006606:	2809      	cmp	r0, #9
 8006608:	d9f5      	bls.n	80065f6 <_svfprintf_r+0x2a6>
 800660a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800660e:	46a0      	mov	r8, r4
 8006610:	e6fa      	b.n	8006408 <_svfprintf_r+0xb8>
 8006612:	bf00      	nop
 8006614:	f3af 8000 	nop.w
	...
 8006620:	08008d80 	.word	0x08008d80
 8006624:	08008ebc 	.word	0x08008ebc
 8006628:	9b07      	ldr	r3, [sp, #28]
 800662a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f898 3000 	ldrb.w	r3, [r8]
 8006634:	e6e6      	b.n	8006404 <_svfprintf_r+0xb4>
 8006636:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800663a:	2300      	movs	r3, #0
 800663c:	461c      	mov	r4, r3
 800663e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006642:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006646:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800664a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800664e:	2809      	cmp	r0, #9
 8006650:	d9f5      	bls.n	800663e <_svfprintf_r+0x2ee>
 8006652:	940c      	str	r4, [sp, #48]	; 0x30
 8006654:	e6d8      	b.n	8006408 <_svfprintf_r+0xb8>
 8006656:	9311      	str	r3, [sp, #68]	; 0x44
 8006658:	46ab      	mov	fp, r5
 800665a:	2a00      	cmp	r2, #0
 800665c:	f041 81cc 	bne.w	80079f8 <_svfprintf_r+0x16a8>
 8006660:	9b07      	ldr	r3, [sp, #28]
 8006662:	f043 0310 	orr.w	r3, r3, #16
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	069c      	lsls	r4, r3, #26
 800666c:	f140 8537 	bpl.w	80070de <_svfprintf_r+0xd8e>
 8006670:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006672:	3707      	adds	r7, #7
 8006674:	f027 0707 	bic.w	r7, r7, #7
 8006678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	910e      	str	r1, [sp, #56]	; 0x38
 8006682:	4614      	mov	r4, r2
 8006684:	461d      	mov	r5, r3
 8006686:	2a00      	cmp	r2, #0
 8006688:	f173 0300 	sbcs.w	r3, r3, #0
 800668c:	f2c0 8562 	blt.w	8007154 <_svfprintf_r+0xe04>
 8006690:	f1bb 0f00 	cmp.w	fp, #0
 8006694:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006698:	f2c0 853f 	blt.w	800711a <_svfprintf_r+0xdca>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	ea54 0305 	orrs.w	r3, r4, r5
 80066a8:	f000 81e8 	beq.w	8006a7c <_svfprintf_r+0x72c>
 80066ac:	2d00      	cmp	r5, #0
 80066ae:	bf08      	it	eq
 80066b0:	2c0a      	cmpeq	r4, #10
 80066b2:	f0c0 81e8 	bcc.w	8006a86 <_svfprintf_r+0x736>
 80066b6:	ae34      	add	r6, sp, #208	; 0xd0
 80066b8:	4620      	mov	r0, r4
 80066ba:	4629      	mov	r1, r5
 80066bc:	220a      	movs	r2, #10
 80066be:	2300      	movs	r3, #0
 80066c0:	f002 f914 	bl	80088ec <__aeabi_uldivmod>
 80066c4:	3230      	adds	r2, #48	; 0x30
 80066c6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80066ca:	4620      	mov	r0, r4
 80066cc:	4629      	mov	r1, r5
 80066ce:	2300      	movs	r3, #0
 80066d0:	220a      	movs	r2, #10
 80066d2:	f002 f90b 	bl	80088ec <__aeabi_uldivmod>
 80066d6:	4604      	mov	r4, r0
 80066d8:	460d      	mov	r5, r1
 80066da:	ea54 0305 	orrs.w	r3, r4, r5
 80066de:	d1eb      	bne.n	80066b8 <_svfprintf_r+0x368>
 80066e0:	ab34      	add	r3, sp, #208	; 0xd0
 80066e2:	1b9b      	subs	r3, r3, r6
 80066e4:	930d      	str	r3, [sp, #52]	; 0x34
 80066e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066e8:	455b      	cmp	r3, fp
 80066ea:	bfb8      	it	lt
 80066ec:	465b      	movlt	r3, fp
 80066ee:	9308      	str	r3, [sp, #32]
 80066f0:	2300      	movs	r3, #0
 80066f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80066f4:	b117      	cbz	r7, 80066fc <_svfprintf_r+0x3ac>
 80066f6:	9b08      	ldr	r3, [sp, #32]
 80066f8:	3301      	adds	r3, #1
 80066fa:	9308      	str	r3, [sp, #32]
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	f013 0302 	ands.w	r3, r3, #2
 8006702:	930f      	str	r3, [sp, #60]	; 0x3c
 8006704:	d002      	beq.n	800670c <_svfprintf_r+0x3bc>
 8006706:	9b08      	ldr	r3, [sp, #32]
 8006708:	3302      	adds	r3, #2
 800670a:	9308      	str	r3, [sp, #32]
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8006712:	9310      	str	r3, [sp, #64]	; 0x40
 8006714:	f040 82db 	bne.w	8006cce <_svfprintf_r+0x97e>
 8006718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800671a:	9a08      	ldr	r2, [sp, #32]
 800671c:	1a9d      	subs	r5, r3, r2
 800671e:	2d00      	cmp	r5, #0
 8006720:	f340 82d5 	ble.w	8006cce <_svfprintf_r+0x97e>
 8006724:	2d10      	cmp	r5, #16
 8006726:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006728:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800672a:	4fa8      	ldr	r7, [pc, #672]	; (80069cc <_svfprintf_r+0x67c>)
 800672c:	dd27      	ble.n	800677e <_svfprintf_r+0x42e>
 800672e:	9618      	str	r6, [sp, #96]	; 0x60
 8006730:	4648      	mov	r0, r9
 8006732:	2410      	movs	r4, #16
 8006734:	46b9      	mov	r9, r7
 8006736:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006738:	462f      	mov	r7, r5
 800673a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800673c:	e004      	b.n	8006748 <_svfprintf_r+0x3f8>
 800673e:	3f10      	subs	r7, #16
 8006740:	2f10      	cmp	r7, #16
 8006742:	f100 0008 	add.w	r0, r0, #8
 8006746:	dd16      	ble.n	8006776 <_svfprintf_r+0x426>
 8006748:	3201      	adds	r2, #1
 800674a:	4ba0      	ldr	r3, [pc, #640]	; (80069cc <_svfprintf_r+0x67c>)
 800674c:	9228      	str	r2, [sp, #160]	; 0xa0
 800674e:	3110      	adds	r1, #16
 8006750:	2a07      	cmp	r2, #7
 8006752:	9129      	str	r1, [sp, #164]	; 0xa4
 8006754:	e880 0018 	stmia.w	r0, {r3, r4}
 8006758:	ddf1      	ble.n	800673e <_svfprintf_r+0x3ee>
 800675a:	aa27      	add	r2, sp, #156	; 0x9c
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	f001 fb26 	bl	8007db0 <__ssprint_r>
 8006764:	2800      	cmp	r0, #0
 8006766:	f47f aeed 	bne.w	8006544 <_svfprintf_r+0x1f4>
 800676a:	3f10      	subs	r7, #16
 800676c:	2f10      	cmp	r7, #16
 800676e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006770:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006772:	a834      	add	r0, sp, #208	; 0xd0
 8006774:	dce8      	bgt.n	8006748 <_svfprintf_r+0x3f8>
 8006776:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006778:	463d      	mov	r5, r7
 800677a:	464f      	mov	r7, r9
 800677c:	4681      	mov	r9, r0
 800677e:	3201      	adds	r2, #1
 8006780:	186c      	adds	r4, r5, r1
 8006782:	2a07      	cmp	r2, #7
 8006784:	9429      	str	r4, [sp, #164]	; 0xa4
 8006786:	9228      	str	r2, [sp, #160]	; 0xa0
 8006788:	f8c9 7000 	str.w	r7, [r9]
 800678c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006790:	f300 842d 	bgt.w	8006fee <_svfprintf_r+0xc9e>
 8006794:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006798:	f109 0908 	add.w	r9, r9, #8
 800679c:	b177      	cbz	r7, 80067bc <_svfprintf_r+0x46c>
 800679e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80067a0:	3301      	adds	r3, #1
 80067a2:	3401      	adds	r4, #1
 80067a4:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80067a8:	2201      	movs	r2, #1
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80067ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80067b0:	e889 0006 	stmia.w	r9, {r1, r2}
 80067b4:	f300 83a5 	bgt.w	8006f02 <_svfprintf_r+0xbb2>
 80067b8:	f109 0908 	add.w	r9, r9, #8
 80067bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067be:	b16b      	cbz	r3, 80067dc <_svfprintf_r+0x48c>
 80067c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80067c2:	3301      	adds	r3, #1
 80067c4:	3402      	adds	r4, #2
 80067c6:	a920      	add	r1, sp, #128	; 0x80
 80067c8:	2202      	movs	r2, #2
 80067ca:	2b07      	cmp	r3, #7
 80067cc:	9429      	str	r4, [sp, #164]	; 0xa4
 80067ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80067d0:	e889 0006 	stmia.w	r9, {r1, r2}
 80067d4:	f300 83a1 	bgt.w	8006f1a <_svfprintf_r+0xbca>
 80067d8:	f109 0908 	add.w	r9, r9, #8
 80067dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067de:	2b80      	cmp	r3, #128	; 0x80
 80067e0:	f000 82e1 	beq.w	8006da6 <_svfprintf_r+0xa56>
 80067e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e6:	ebc3 070b 	rsb	r7, r3, fp
 80067ea:	2f00      	cmp	r7, #0
 80067ec:	dd33      	ble.n	8006856 <_svfprintf_r+0x506>
 80067ee:	4a78      	ldr	r2, [pc, #480]	; (80069d0 <_svfprintf_r+0x680>)
 80067f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80067f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80067f4:	2f10      	cmp	r7, #16
 80067f6:	dd22      	ble.n	800683e <_svfprintf_r+0x4ee>
 80067f8:	4622      	mov	r2, r4
 80067fa:	f04f 0b10 	mov.w	fp, #16
 80067fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006800:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006802:	e004      	b.n	800680e <_svfprintf_r+0x4be>
 8006804:	3f10      	subs	r7, #16
 8006806:	2f10      	cmp	r7, #16
 8006808:	f109 0908 	add.w	r9, r9, #8
 800680c:	dd16      	ble.n	800683c <_svfprintf_r+0x4ec>
 800680e:	3301      	adds	r3, #1
 8006810:	3210      	adds	r2, #16
 8006812:	2b07      	cmp	r3, #7
 8006814:	9229      	str	r2, [sp, #164]	; 0xa4
 8006816:	9328      	str	r3, [sp, #160]	; 0xa0
 8006818:	e889 0c00 	stmia.w	r9, {sl, fp}
 800681c:	ddf2      	ble.n	8006804 <_svfprintf_r+0x4b4>
 800681e:	aa27      	add	r2, sp, #156	; 0x9c
 8006820:	4621      	mov	r1, r4
 8006822:	4628      	mov	r0, r5
 8006824:	f001 fac4 	bl	8007db0 <__ssprint_r>
 8006828:	2800      	cmp	r0, #0
 800682a:	f47f ae8b 	bne.w	8006544 <_svfprintf_r+0x1f4>
 800682e:	3f10      	subs	r7, #16
 8006830:	2f10      	cmp	r7, #16
 8006832:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006836:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800683a:	dce8      	bgt.n	800680e <_svfprintf_r+0x4be>
 800683c:	4614      	mov	r4, r2
 800683e:	3301      	adds	r3, #1
 8006840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006842:	9328      	str	r3, [sp, #160]	; 0xa0
 8006844:	443c      	add	r4, r7
 8006846:	2b07      	cmp	r3, #7
 8006848:	9429      	str	r4, [sp, #164]	; 0xa4
 800684a:	e889 0084 	stmia.w	r9, {r2, r7}
 800684e:	f300 834c 	bgt.w	8006eea <_svfprintf_r+0xb9a>
 8006852:	f109 0908 	add.w	r9, r9, #8
 8006856:	9b07      	ldr	r3, [sp, #28]
 8006858:	05da      	lsls	r2, r3, #23
 800685a:	f100 823a 	bmi.w	8006cd2 <_svfprintf_r+0x982>
 800685e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006860:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006862:	f8c9 6000 	str.w	r6, [r9]
 8006866:	3301      	adds	r3, #1
 8006868:	440c      	add	r4, r1
 800686a:	2b07      	cmp	r3, #7
 800686c:	9429      	str	r4, [sp, #164]	; 0xa4
 800686e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006872:	9328      	str	r3, [sp, #160]	; 0xa0
 8006874:	f300 8323 	bgt.w	8006ebe <_svfprintf_r+0xb6e>
 8006878:	f109 0908 	add.w	r9, r9, #8
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	0759      	lsls	r1, r3, #29
 8006880:	d53f      	bpl.n	8006902 <_svfprintf_r+0x5b2>
 8006882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006884:	9a08      	ldr	r2, [sp, #32]
 8006886:	1a9d      	subs	r5, r3, r2
 8006888:	2d00      	cmp	r5, #0
 800688a:	dd3a      	ble.n	8006902 <_svfprintf_r+0x5b2>
 800688c:	2d10      	cmp	r5, #16
 800688e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006890:	4f4e      	ldr	r7, [pc, #312]	; (80069cc <_svfprintf_r+0x67c>)
 8006892:	dd23      	ble.n	80068dc <_svfprintf_r+0x58c>
 8006894:	4622      	mov	r2, r4
 8006896:	2610      	movs	r6, #16
 8006898:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800689c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800689e:	e004      	b.n	80068aa <_svfprintf_r+0x55a>
 80068a0:	3d10      	subs	r5, #16
 80068a2:	2d10      	cmp	r5, #16
 80068a4:	f109 0908 	add.w	r9, r9, #8
 80068a8:	dd17      	ble.n	80068da <_svfprintf_r+0x58a>
 80068aa:	3301      	adds	r3, #1
 80068ac:	4947      	ldr	r1, [pc, #284]	; (80069cc <_svfprintf_r+0x67c>)
 80068ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80068b0:	3210      	adds	r2, #16
 80068b2:	2b07      	cmp	r3, #7
 80068b4:	9229      	str	r2, [sp, #164]	; 0xa4
 80068b6:	e889 0042 	stmia.w	r9, {r1, r6}
 80068ba:	ddf1      	ble.n	80068a0 <_svfprintf_r+0x550>
 80068bc:	aa27      	add	r2, sp, #156	; 0x9c
 80068be:	4621      	mov	r1, r4
 80068c0:	4658      	mov	r0, fp
 80068c2:	f001 fa75 	bl	8007db0 <__ssprint_r>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f47f ae3c 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80068cc:	3d10      	subs	r5, #16
 80068ce:	2d10      	cmp	r5, #16
 80068d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80068d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80068d4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80068d8:	dce7      	bgt.n	80068aa <_svfprintf_r+0x55a>
 80068da:	4614      	mov	r4, r2
 80068dc:	3301      	adds	r3, #1
 80068de:	442c      	add	r4, r5
 80068e0:	2b07      	cmp	r3, #7
 80068e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80068e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80068e6:	f8c9 7000 	str.w	r7, [r9]
 80068ea:	f8c9 5004 	str.w	r5, [r9, #4]
 80068ee:	dd08      	ble.n	8006902 <_svfprintf_r+0x5b2>
 80068f0:	aa27      	add	r2, sp, #156	; 0x9c
 80068f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068f6:	f001 fa5b 	bl	8007db0 <__ssprint_r>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	f47f ae22 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006900:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006906:	9908      	ldr	r1, [sp, #32]
 8006908:	428a      	cmp	r2, r1
 800690a:	bfac      	ite	ge
 800690c:	189b      	addge	r3, r3, r2
 800690e:	185b      	addlt	r3, r3, r1
 8006910:	930b      	str	r3, [sp, #44]	; 0x2c
 8006912:	2c00      	cmp	r4, #0
 8006914:	f040 82df 	bne.w	8006ed6 <_svfprintf_r+0xb86>
 8006918:	2300      	movs	r3, #0
 800691a:	9328      	str	r3, [sp, #160]	; 0xa0
 800691c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006920:	e53d      	b.n	800639e <_svfprintf_r+0x4e>
 8006922:	9311      	str	r3, [sp, #68]	; 0x44
 8006924:	46ab      	mov	fp, r5
 8006926:	2a00      	cmp	r2, #0
 8006928:	f041 806a 	bne.w	8007a00 <_svfprintf_r+0x16b0>
 800692c:	9b07      	ldr	r3, [sp, #28]
 800692e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006930:	071a      	lsls	r2, r3, #28
 8006932:	f107 0707 	add.w	r7, r7, #7
 8006936:	f140 8576 	bpl.w	8007426 <_svfprintf_r+0x10d6>
 800693a:	f027 0307 	bic.w	r3, r7, #7
 800693e:	ed93 7b00 	vldr	d7, [r3]
 8006942:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006946:	f103 0208 	add.w	r2, r3, #8
 800694a:	920e      	str	r2, [sp, #56]	; 0x38
 800694c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006950:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006954:	911a      	str	r1, [sp, #104]	; 0x68
 8006956:	931b      	str	r3, [sp, #108]	; 0x6c
 8006958:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <_svfprintf_r+0x684>)
 8006966:	f001 ff83 	bl	8008870 <__aeabi_dcmpun>
 800696a:	2800      	cmp	r0, #0
 800696c:	f040 84da 	bne.w	8007324 <_svfprintf_r+0xfd4>
 8006970:	f04f 32ff 	mov.w	r2, #4294967295
 8006974:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <_svfprintf_r+0x684>)
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f001 ff5b 	bl	8008834 <__aeabi_dcmple>
 800697e:	2800      	cmp	r0, #0
 8006980:	f040 84d0 	bne.w	8007324 <_svfprintf_r+0xfd4>
 8006984:	2200      	movs	r2, #0
 8006986:	2300      	movs	r3, #0
 8006988:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800698c:	f001 ff48 	bl	8008820 <__aeabi_dcmplt>
 8006990:	2800      	cmp	r0, #0
 8006992:	f040 875a 	bne.w	800784a <_svfprintf_r+0x14fa>
 8006996:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800699a:	4e0f      	ldr	r6, [pc, #60]	; (80069d8 <_svfprintf_r+0x688>)
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <_svfprintf_r+0x68c>)
 800699e:	9907      	ldr	r1, [sp, #28]
 80069a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069a4:	9107      	str	r1, [sp, #28]
 80069a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069a8:	2203      	movs	r2, #3
 80069aa:	f04f 0b00 	mov.w	fp, #0
 80069ae:	9208      	str	r2, [sp, #32]
 80069b0:	2947      	cmp	r1, #71	; 0x47
 80069b2:	bfd8      	it	le
 80069b4:	461e      	movle	r6, r3
 80069b6:	920d      	str	r2, [sp, #52]	; 0x34
 80069b8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80069bc:	e69a      	b.n	80066f4 <_svfprintf_r+0x3a4>
 80069be:	9b07      	ldr	r3, [sp, #28]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	9307      	str	r3, [sp, #28]
 80069c6:	f898 3000 	ldrb.w	r3, [r8]
 80069ca:	e51b      	b.n	8006404 <_svfprintf_r+0xb4>
 80069cc:	08008ecc 	.word	0x08008ecc
 80069d0:	08008ebc 	.word	0x08008ebc
 80069d4:	7fefffff 	.word	0x7fefffff
 80069d8:	08008d60 	.word	0x08008d60
 80069dc:	08008d5c 	.word	0x08008d5c
 80069e0:	9311      	str	r3, [sp, #68]	; 0x44
 80069e2:	46ab      	mov	fp, r5
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	f041 8017 	bne.w	8007a18 <_svfprintf_r+0x16c8>
 80069ea:	9b07      	ldr	r3, [sp, #28]
 80069ec:	f043 0310 	orr.w	r3, r3, #16
 80069f0:	9307      	str	r3, [sp, #28]
 80069f2:	9a07      	ldr	r2, [sp, #28]
 80069f4:	f012 0320 	ands.w	r3, r2, #32
 80069f8:	f47f adba 	bne.w	8006570 <_svfprintf_r+0x220>
 80069fc:	9907      	ldr	r1, [sp, #28]
 80069fe:	f011 0210 	ands.w	r2, r1, #16
 8006a02:	f000 845b 	beq.w	80072bc <_svfprintf_r+0xf6c>
 8006a06:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006a08:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006a0c:	f1bb 0f00 	cmp.w	fp, #0
 8006a10:	6804      	ldr	r4, [r0, #0]
 8006a12:	f100 0704 	add.w	r7, r0, #4
 8006a16:	f04f 0500 	mov.w	r5, #0
 8006a1a:	f2c0 851b 	blt.w	8007454 <_svfprintf_r+0x1104>
 8006a1e:	460a      	mov	r2, r1
 8006a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a24:	9207      	str	r2, [sp, #28]
 8006a26:	ea54 0205 	orrs.w	r2, r4, r5
 8006a2a:	970e      	str	r7, [sp, #56]	; 0x38
 8006a2c:	f000 813a 	beq.w	8006ca4 <_svfprintf_r+0x954>
 8006a30:	461f      	mov	r7, r3
 8006a32:	e5b3      	b.n	800659c <_svfprintf_r+0x24c>
 8006a34:	9311      	str	r3, [sp, #68]	; 0x44
 8006a36:	46ab      	mov	fp, r5
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	f040 87e9 	bne.w	8007a10 <_svfprintf_r+0x16c0>
 8006a3e:	9b07      	ldr	r3, [sp, #28]
 8006a40:	f043 0310 	orr.w	r3, r3, #16
 8006a44:	9307      	str	r3, [sp, #28]
 8006a46:	9a07      	ldr	r2, [sp, #28]
 8006a48:	f012 0320 	ands.w	r3, r2, #32
 8006a4c:	f000 832c 	beq.w	80070a8 <_svfprintf_r+0xd58>
 8006a50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006a52:	3707      	adds	r7, #7
 8006a54:	f027 0307 	bic.w	r3, r7, #7
 8006a58:	2700      	movs	r7, #0
 8006a5a:	f103 0108 	add.w	r1, r3, #8
 8006a5e:	45bb      	cmp	fp, r7
 8006a60:	910e      	str	r1, [sp, #56]	; 0x38
 8006a62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a66:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006a6a:	f2c0 8356 	blt.w	800711a <_svfprintf_r+0xdca>
 8006a6e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	ea54 0305 	orrs.w	r3, r4, r5
 8006a78:	f47f ae18 	bne.w	80066ac <_svfprintf_r+0x35c>
 8006a7c:	f1bb 0f00 	cmp.w	fp, #0
 8006a80:	f000 80f5 	beq.w	8006c6e <_svfprintf_r+0x91e>
 8006a84:	2400      	movs	r4, #0
 8006a86:	ae44      	add	r6, sp, #272	; 0x110
 8006a88:	3430      	adds	r4, #48	; 0x30
 8006a8a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006a8e:	e627      	b.n	80066e0 <_svfprintf_r+0x390>
 8006a90:	9311      	str	r3, [sp, #68]	; 0x44
 8006a92:	46ab      	mov	fp, r5
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	f040 87b7 	bne.w	8007a08 <_svfprintf_r+0x16b8>
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	48af      	ldr	r0, [pc, #700]	; (8006d5c <_svfprintf_r+0xa0c>)
 8006a9e:	069d      	lsls	r5, r3, #26
 8006aa0:	f140 80b5 	bpl.w	8006c0e <_svfprintf_r+0x8be>
 8006aa4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006aa6:	3707      	adds	r7, #7
 8006aa8:	f027 0307 	bic.w	r3, r7, #7
 8006aac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006ab0:	f103 0208 	add.w	r2, r3, #8
 8006ab4:	920e      	str	r2, [sp, #56]	; 0x38
 8006ab6:	9a07      	ldr	r2, [sp, #28]
 8006ab8:	f012 0701 	ands.w	r7, r2, #1
 8006abc:	f000 8239 	beq.w	8006f32 <_svfprintf_r+0xbe2>
 8006ac0:	ea54 0305 	orrs.w	r3, r4, r5
 8006ac4:	f000 8504 	beq.w	80074d0 <_svfprintf_r+0x1180>
 8006ac8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006acc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8006ad0:	2700      	movs	r7, #0
 8006ad2:	9a07      	ldr	r2, [sp, #28]
 8006ad4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006ad8:	2330      	movs	r3, #48	; 0x30
 8006ada:	45bb      	cmp	fp, r7
 8006adc:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006ae0:	f042 0302 	orr.w	r3, r2, #2
 8006ae4:	f2c0 86b6 	blt.w	8007854 <_svfprintf_r+0x1504>
 8006ae8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	9307      	str	r3, [sp, #28]
 8006af2:	ae34      	add	r6, sp, #208	; 0xd0
 8006af4:	0923      	lsrs	r3, r4, #4
 8006af6:	f004 010f 	and.w	r1, r4, #15
 8006afa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006afe:	092a      	lsrs	r2, r5, #4
 8006b00:	461c      	mov	r4, r3
 8006b02:	4615      	mov	r5, r2
 8006b04:	5c43      	ldrb	r3, [r0, r1]
 8006b06:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006b0a:	ea54 0305 	orrs.w	r3, r4, r5
 8006b0e:	d1f1      	bne.n	8006af4 <_svfprintf_r+0x7a4>
 8006b10:	e5e6      	b.n	80066e0 <_svfprintf_r+0x390>
 8006b12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b14:	9311      	str	r3, [sp, #68]	; 0x44
 8006b16:	680a      	ldr	r2, [r1, #0]
 8006b18:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	460a      	mov	r2, r1
 8006b20:	461f      	mov	r7, r3
 8006b22:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006b26:	3204      	adds	r2, #4
 8006b28:	2301      	movs	r3, #1
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	46bb      	mov	fp, r7
 8006b2e:	9713      	str	r7, [sp, #76]	; 0x4c
 8006b30:	920e      	str	r2, [sp, #56]	; 0x38
 8006b32:	930d      	str	r3, [sp, #52]	; 0x34
 8006b34:	ae2a      	add	r6, sp, #168	; 0xa8
 8006b36:	e5e1      	b.n	80066fc <_svfprintf_r+0x3ac>
 8006b38:	9311      	str	r3, [sp, #68]	; 0x44
 8006b3a:	46ab      	mov	fp, r5
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	f43f ad93 	beq.w	8006668 <_svfprintf_r+0x318>
 8006b42:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006b46:	e58f      	b.n	8006668 <_svfprintf_r+0x318>
 8006b48:	9b07      	ldr	r3, [sp, #28]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	f898 3000 	ldrb.w	r3, [r8]
 8006b54:	e456      	b.n	8006404 <_svfprintf_r+0xb4>
 8006b56:	f898 3000 	ldrb.w	r3, [r8]
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	f47f ac52 	bne.w	8006404 <_svfprintf_r+0xb4>
 8006b60:	2201      	movs	r2, #1
 8006b62:	2120      	movs	r1, #32
 8006b64:	e44e      	b.n	8006404 <_svfprintf_r+0xb4>
 8006b66:	9b07      	ldr	r3, [sp, #28]
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	f898 3000 	ldrb.w	r3, [r8]
 8006b72:	e447      	b.n	8006404 <_svfprintf_r+0xb4>
 8006b74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	930c      	str	r3, [sp, #48]	; 0x30
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	4623      	mov	r3, r4
 8006b80:	f103 0304 	add.w	r3, r3, #4
 8006b84:	f6ff aca0 	blt.w	80064c8 <_svfprintf_r+0x178>
 8006b88:	930e      	str	r3, [sp, #56]	; 0x38
 8006b8a:	f898 3000 	ldrb.w	r3, [r8]
 8006b8e:	e439      	b.n	8006404 <_svfprintf_r+0xb4>
 8006b90:	f898 3000 	ldrb.w	r3, [r8]
 8006b94:	2201      	movs	r2, #1
 8006b96:	212b      	movs	r1, #43	; 0x2b
 8006b98:	e434      	b.n	8006404 <_svfprintf_r+0xb4>
 8006b9a:	9b07      	ldr	r3, [sp, #28]
 8006b9c:	f043 0320 	orr.w	r3, r3, #32
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	f898 3000 	ldrb.w	r3, [r8]
 8006ba6:	e42d      	b.n	8006404 <_svfprintf_r+0xb4>
 8006ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006baa:	9311      	str	r3, [sp, #68]	; 0x44
 8006bac:	6816      	ldr	r6, [r2, #0]
 8006bae:	2400      	movs	r4, #0
 8006bb0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8006bb4:	1d17      	adds	r7, r2, #4
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	f000 8621 	beq.w	80077fe <_svfprintf_r+0x14ae>
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	f2c0 8566 	blt.w	800768e <_svfprintf_r+0x133e>
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7fe fdb2 	bl	8005730 <memchr>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f000 866b 	beq.w	80078a8 <_svfprintf_r+0x1558>
 8006bd2:	1b83      	subs	r3, r0, r6
 8006bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd6:	46a3      	mov	fp, r4
 8006bd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bdc:	970e      	str	r7, [sp, #56]	; 0x38
 8006bde:	9308      	str	r3, [sp, #32]
 8006be0:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006be4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006be8:	e584      	b.n	80066f4 <_svfprintf_r+0x3a4>
 8006bea:	9311      	str	r3, [sp, #68]	; 0x44
 8006bec:	46ab      	mov	fp, r5
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	f43f af29 	beq.w	8006a46 <_svfprintf_r+0x6f6>
 8006bf4:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006bf8:	e725      	b.n	8006a46 <_svfprintf_r+0x6f6>
 8006bfa:	9311      	str	r3, [sp, #68]	; 0x44
 8006bfc:	46ab      	mov	fp, r5
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	f040 8716 	bne.w	8007a30 <_svfprintf_r+0x16e0>
 8006c04:	9b07      	ldr	r3, [sp, #28]
 8006c06:	4856      	ldr	r0, [pc, #344]	; (8006d60 <_svfprintf_r+0xa10>)
 8006c08:	069d      	lsls	r5, r3, #26
 8006c0a:	f53f af4b 	bmi.w	8006aa4 <_svfprintf_r+0x754>
 8006c0e:	9b07      	ldr	r3, [sp, #28]
 8006c10:	06dc      	lsls	r4, r3, #27
 8006c12:	f140 8440 	bpl.w	8007496 <_svfprintf_r+0x1146>
 8006c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c18:	4613      	mov	r3, r2
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	6814      	ldr	r4, [r2, #0]
 8006c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8006c20:	2500      	movs	r5, #0
 8006c22:	e748      	b.n	8006ab6 <_svfprintf_r+0x766>
 8006c24:	f898 3000 	ldrb.w	r3, [r8]
 8006c28:	2b6c      	cmp	r3, #108	; 0x6c
 8006c2a:	f000 84c4 	beq.w	80075b6 <_svfprintf_r+0x1266>
 8006c2e:	9807      	ldr	r0, [sp, #28]
 8006c30:	f040 0010 	orr.w	r0, r0, #16
 8006c34:	9007      	str	r0, [sp, #28]
 8006c36:	f7ff bbe5 	b.w	8006404 <_svfprintf_r+0xb4>
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	f040 86f4 	bne.w	8007a28 <_svfprintf_r+0x16d8>
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	069b      	lsls	r3, r3, #26
 8006c44:	f140 8357 	bpl.w	80072f6 <_svfprintf_r+0xfa6>
 8006c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	17cd      	asrs	r5, r1, #31
 8006c50:	4608      	mov	r0, r1
 8006c52:	3204      	adds	r2, #4
 8006c54:	4629      	mov	r1, r5
 8006c56:	920e      	str	r2, [sp, #56]	; 0x38
 8006c58:	e9c3 0100 	strd	r0, r1, [r3]
 8006c5c:	f7ff bb9f 	b.w	800639e <_svfprintf_r+0x4e>
 8006c60:	483f      	ldr	r0, [pc, #252]	; (8006d60 <_svfprintf_r+0xa10>)
 8006c62:	9211      	str	r2, [sp, #68]	; 0x44
 8006c64:	f1bb 0f00 	cmp.w	fp, #0
 8006c68:	f040 8174 	bne.w	8006f54 <_svfprintf_r+0xc04>
 8006c6c:	465f      	mov	r7, fp
 8006c6e:	f04f 0b00 	mov.w	fp, #0
 8006c72:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006c76:	ae34      	add	r6, sp, #208	; 0xd0
 8006c78:	e535      	b.n	80066e6 <_svfprintf_r+0x396>
 8006c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	f040 86cf 	bne.w	8007a20 <_svfprintf_r+0x16d0>
 8006c82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	f43f ac56 	beq.w	8006536 <_svfprintf_r+0x1e6>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	461f      	mov	r7, r3
 8006c90:	9108      	str	r1, [sp, #32]
 8006c92:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006c96:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006c9a:	469b      	mov	fp, r3
 8006c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c9e:	910d      	str	r1, [sp, #52]	; 0x34
 8006ca0:	ae2a      	add	r6, sp, #168	; 0xa8
 8006ca2:	e52b      	b.n	80066fc <_svfprintf_r+0x3ac>
 8006ca4:	f1bb 0f00 	cmp.w	fp, #0
 8006ca8:	f000 8616 	beq.w	80078d8 <_svfprintf_r+0x1588>
 8006cac:	2700      	movs	r7, #0
 8006cae:	2400      	movs	r4, #0
 8006cb0:	2500      	movs	r5, #0
 8006cb2:	e473      	b.n	800659c <_svfprintf_r+0x24c>
 8006cb4:	482a      	ldr	r0, [pc, #168]	; (8006d60 <_svfprintf_r+0xa10>)
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	9211      	str	r2, [sp, #68]	; 0x44
 8006cba:	ea54 0305 	orrs.w	r3, r4, r5
 8006cbe:	970e      	str	r7, [sp, #56]	; 0x38
 8006cc0:	f04f 0700 	mov.w	r7, #0
 8006cc4:	f47f af15 	bne.w	8006af2 <_svfprintf_r+0x7a2>
 8006cc8:	2400      	movs	r4, #0
 8006cca:	2500      	movs	r5, #0
 8006ccc:	e711      	b.n	8006af2 <_svfprintf_r+0x7a2>
 8006cce:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006cd0:	e564      	b.n	800679c <_svfprintf_r+0x44c>
 8006cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cd4:	2b65      	cmp	r3, #101	; 0x65
 8006cd6:	f340 80aa 	ble.w	8006e2e <_svfprintf_r+0xade>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006ce2:	f001 fd93 	bl	800880c <__aeabi_dcmpeq>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f000 8136 	beq.w	8006f58 <_svfprintf_r+0xc08>
 8006cec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006cee:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <_svfprintf_r+0xa14>)
 8006cf0:	f8c9 2000 	str.w	r2, [r9]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	3401      	adds	r4, #1
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	9429      	str	r4, [sp, #164]	; 0xa4
 8006cfe:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d00:	f8c9 2004 	str.w	r2, [r9, #4]
 8006d04:	f300 83f0 	bgt.w	80074e8 <_svfprintf_r+0x1198>
 8006d08:	f109 0908 	add.w	r9, r9, #8
 8006d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d10:	4293      	cmp	r3, r2
 8006d12:	db03      	blt.n	8006d1c <_svfprintf_r+0x9cc>
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	07db      	lsls	r3, r3, #31
 8006d18:	f57f adb0 	bpl.w	800687c <_svfprintf_r+0x52c>
 8006d1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d1e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d22:	f8c9 2000 	str.w	r2, [r9]
 8006d26:	3301      	adds	r3, #1
 8006d28:	440c      	add	r4, r1
 8006d2a:	2b07      	cmp	r3, #7
 8006d2c:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d2e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006d32:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d34:	f300 8449 	bgt.w	80075ca <_svfprintf_r+0x127a>
 8006d38:	f109 0908 	add.w	r9, r9, #8
 8006d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d3e:	1e5d      	subs	r5, r3, #1
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	f77f ad9b 	ble.w	800687c <_svfprintf_r+0x52c>
 8006d46:	4a08      	ldr	r2, [pc, #32]	; (8006d68 <_svfprintf_r+0xa18>)
 8006d48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d4a:	920f      	str	r2, [sp, #60]	; 0x3c
 8006d4c:	2d10      	cmp	r5, #16
 8006d4e:	f340 81e9 	ble.w	8007124 <_svfprintf_r+0xdd4>
 8006d52:	2610      	movs	r6, #16
 8006d54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006d56:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006d5a:	e00d      	b.n	8006d78 <_svfprintf_r+0xa28>
 8006d5c:	08008d6c 	.word	0x08008d6c
 8006d60:	08008d80 	.word	0x08008d80
 8006d64:	08008d9c 	.word	0x08008d9c
 8006d68:	08008ebc 	.word	0x08008ebc
 8006d6c:	f109 0908 	add.w	r9, r9, #8
 8006d70:	3d10      	subs	r5, #16
 8006d72:	2d10      	cmp	r5, #16
 8006d74:	f340 81d6 	ble.w	8007124 <_svfprintf_r+0xdd4>
 8006d78:	3301      	adds	r3, #1
 8006d7a:	3410      	adds	r4, #16
 8006d7c:	2b07      	cmp	r3, #7
 8006d7e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d80:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d82:	f8c9 a000 	str.w	sl, [r9]
 8006d86:	f8c9 6004 	str.w	r6, [r9, #4]
 8006d8a:	ddef      	ble.n	8006d6c <_svfprintf_r+0xa1c>
 8006d8c:	aa27      	add	r2, sp, #156	; 0x9c
 8006d8e:	4659      	mov	r1, fp
 8006d90:	4638      	mov	r0, r7
 8006d92:	f001 f80d 	bl	8007db0 <__ssprint_r>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f47f abd4 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006d9c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006da0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006da4:	e7e4      	b.n	8006d70 <_svfprintf_r+0xa20>
 8006da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da8:	9a08      	ldr	r2, [sp, #32]
 8006daa:	1a9f      	subs	r7, r3, r2
 8006dac:	2f00      	cmp	r7, #0
 8006dae:	f77f ad19 	ble.w	80067e4 <_svfprintf_r+0x494>
 8006db2:	4abc      	ldr	r2, [pc, #752]	; (80070a4 <_svfprintf_r+0xd54>)
 8006db4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006db6:	920f      	str	r2, [sp, #60]	; 0x3c
 8006db8:	2f10      	cmp	r7, #16
 8006dba:	dd2b      	ble.n	8006e14 <_svfprintf_r+0xac4>
 8006dbc:	464a      	mov	r2, r9
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	46b9      	mov	r9, r7
 8006dc2:	2510      	movs	r5, #16
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dc8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006dca:	e006      	b.n	8006dda <_svfprintf_r+0xa8a>
 8006dcc:	f1a9 0910 	sub.w	r9, r9, #16
 8006dd0:	f1b9 0f10 	cmp.w	r9, #16
 8006dd4:	f102 0208 	add.w	r2, r2, #8
 8006dd8:	dd18      	ble.n	8006e0c <_svfprintf_r+0xabc>
 8006dda:	3301      	adds	r3, #1
 8006ddc:	3110      	adds	r1, #16
 8006dde:	2b07      	cmp	r3, #7
 8006de0:	9129      	str	r1, [sp, #164]	; 0xa4
 8006de2:	9328      	str	r3, [sp, #160]	; 0xa0
 8006de4:	f8c2 a000 	str.w	sl, [r2]
 8006de8:	6055      	str	r5, [r2, #4]
 8006dea:	ddef      	ble.n	8006dcc <_svfprintf_r+0xa7c>
 8006dec:	aa27      	add	r2, sp, #156	; 0x9c
 8006dee:	4631      	mov	r1, r6
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 ffdd 	bl	8007db0 <__ssprint_r>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f47f aba4 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006dfc:	f1a9 0910 	sub.w	r9, r9, #16
 8006e00:	f1b9 0f10 	cmp.w	r9, #16
 8006e04:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006e06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006e08:	aa34      	add	r2, sp, #208	; 0xd0
 8006e0a:	dce6      	bgt.n	8006dda <_svfprintf_r+0xa8a>
 8006e0c:	463e      	mov	r6, r7
 8006e0e:	460c      	mov	r4, r1
 8006e10:	464f      	mov	r7, r9
 8006e12:	4691      	mov	r9, r2
 8006e14:	3301      	adds	r3, #1
 8006e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e18:	9328      	str	r3, [sp, #160]	; 0xa0
 8006e1a:	443c      	add	r4, r7
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006e20:	e889 0084 	stmia.w	r9, {r2, r7}
 8006e24:	f300 823d 	bgt.w	80072a2 <_svfprintf_r+0xf52>
 8006e28:	f109 0908 	add.w	r9, r9, #8
 8006e2c:	e4da      	b.n	80067e4 <_svfprintf_r+0x494>
 8006e2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e30:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	f340 820a 	ble.w	800724c <_svfprintf_r+0xefc>
 8006e38:	3501      	adds	r5, #1
 8006e3a:	3401      	adds	r4, #1
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	2d07      	cmp	r5, #7
 8006e40:	9429      	str	r4, [sp, #164]	; 0xa4
 8006e42:	9528      	str	r5, [sp, #160]	; 0xa0
 8006e44:	f8c9 6000 	str.w	r6, [r9]
 8006e48:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e4c:	f300 820f 	bgt.w	800726e <_svfprintf_r+0xf1e>
 8006e50:	f109 0908 	add.w	r9, r9, #8
 8006e54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e58:	f8c9 3000 	str.w	r3, [r9]
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	4414      	add	r4, r2
 8006e60:	2d07      	cmp	r5, #7
 8006e62:	9429      	str	r4, [sp, #164]	; 0xa4
 8006e64:	9528      	str	r5, [sp, #160]	; 0xa0
 8006e66:	f8c9 2004 	str.w	r2, [r9, #4]
 8006e6a:	f300 820d 	bgt.w	8007288 <_svfprintf_r+0xf38>
 8006e6e:	f109 0908 	add.w	r9, r9, #8
 8006e72:	2300      	movs	r3, #0
 8006e74:	2200      	movs	r2, #0
 8006e76:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006e7a:	f001 fcc7 	bl	800880c <__aeabi_dcmpeq>
 8006e7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e80:	2800      	cmp	r0, #0
 8006e82:	f040 80c3 	bne.w	800700c <_svfprintf_r+0xcbc>
 8006e86:	3b01      	subs	r3, #1
 8006e88:	3501      	adds	r5, #1
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	441c      	add	r4, r3
 8006e8e:	2d07      	cmp	r5, #7
 8006e90:	9528      	str	r5, [sp, #160]	; 0xa0
 8006e92:	9429      	str	r4, [sp, #164]	; 0xa4
 8006e94:	f8c9 6000 	str.w	r6, [r9]
 8006e98:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e9c:	f300 80f5 	bgt.w	800708a <_svfprintf_r+0xd3a>
 8006ea0:	f109 0908 	add.w	r9, r9, #8
 8006ea4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ea6:	f8c9 2004 	str.w	r2, [r9, #4]
 8006eaa:	3501      	adds	r5, #1
 8006eac:	4414      	add	r4, r2
 8006eae:	ab23      	add	r3, sp, #140	; 0x8c
 8006eb0:	2d07      	cmp	r5, #7
 8006eb2:	9429      	str	r4, [sp, #164]	; 0xa4
 8006eb4:	9528      	str	r5, [sp, #160]	; 0xa0
 8006eb6:	f8c9 3000 	str.w	r3, [r9]
 8006eba:	f77f acdd 	ble.w	8006878 <_svfprintf_r+0x528>
 8006ebe:	aa27      	add	r2, sp, #156	; 0x9c
 8006ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ec4:	f000 ff74 	bl	8007db0 <__ssprint_r>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f47f ab3b 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006ece:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ed0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006ed4:	e4d2      	b.n	800687c <_svfprintf_r+0x52c>
 8006ed6:	aa27      	add	r2, sp, #156	; 0x9c
 8006ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006edc:	f000 ff68 	bl	8007db0 <__ssprint_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	f43f ad19 	beq.w	8006918 <_svfprintf_r+0x5c8>
 8006ee6:	f7ff bb2d 	b.w	8006544 <_svfprintf_r+0x1f4>
 8006eea:	aa27      	add	r2, sp, #156	; 0x9c
 8006eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ef0:	f000 ff5e 	bl	8007db0 <__ssprint_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f47f ab25 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006efa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006efc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f00:	e4a9      	b.n	8006856 <_svfprintf_r+0x506>
 8006f02:	aa27      	add	r2, sp, #156	; 0x9c
 8006f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f08:	f000 ff52 	bl	8007db0 <__ssprint_r>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f47f ab19 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006f12:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006f14:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f18:	e450      	b.n	80067bc <_svfprintf_r+0x46c>
 8006f1a:	aa27      	add	r2, sp, #156	; 0x9c
 8006f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f20:	f000 ff46 	bl	8007db0 <__ssprint_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f47f ab0d 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006f2a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006f2c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f30:	e454      	b.n	80067dc <_svfprintf_r+0x48c>
 8006f32:	f1bb 0f00 	cmp.w	fp, #0
 8006f36:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006f3a:	f2c0 82e1 	blt.w	8007500 <_svfprintf_r+0x11b0>
 8006f3e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006f42:	9307      	str	r3, [sp, #28]
 8006f44:	ea54 0305 	orrs.w	r3, r4, r5
 8006f48:	f47f add3 	bne.w	8006af2 <_svfprintf_r+0x7a2>
 8006f4c:	f1bb 0f00 	cmp.w	fp, #0
 8006f50:	f43f ae8c 	beq.w	8006c6c <_svfprintf_r+0x91c>
 8006f54:	2700      	movs	r7, #0
 8006f56:	e6b7      	b.n	8006cc8 <_svfprintf_r+0x978>
 8006f58:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	f340 82d3 	ble.w	8007506 <_svfprintf_r+0x11b6>
 8006f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfa8      	it	ge
 8006f68:	4613      	movge	r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	dd0d      	ble.n	8006f8c <_svfprintf_r+0xc3c>
 8006f70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f72:	f8c9 6000 	str.w	r6, [r9]
 8006f76:	3301      	adds	r3, #1
 8006f78:	442c      	add	r4, r5
 8006f7a:	2b07      	cmp	r3, #7
 8006f7c:	9429      	str	r4, [sp, #164]	; 0xa4
 8006f7e:	f8c9 5004 	str.w	r5, [r9, #4]
 8006f82:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f84:	f300 83ae 	bgt.w	80076e4 <_svfprintf_r+0x1394>
 8006f88:	f109 0908 	add.w	r9, r9, #8
 8006f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	bfa8      	it	ge
 8006f92:	1b5b      	subge	r3, r3, r5
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	461d      	mov	r5, r3
 8006f98:	f340 80f8 	ble.w	800718c <_svfprintf_r+0xe3c>
 8006f9c:	4a41      	ldr	r2, [pc, #260]	; (80070a4 <_svfprintf_r+0xd54>)
 8006f9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006fa0:	920f      	str	r2, [sp, #60]	; 0x3c
 8006fa2:	2d10      	cmp	r5, #16
 8006fa4:	f340 8285 	ble.w	80074b2 <_svfprintf_r+0x1162>
 8006fa8:	4622      	mov	r2, r4
 8006faa:	2710      	movs	r7, #16
 8006fac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006fb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006fb2:	e005      	b.n	8006fc0 <_svfprintf_r+0xc70>
 8006fb4:	f109 0908 	add.w	r9, r9, #8
 8006fb8:	3d10      	subs	r5, #16
 8006fba:	2d10      	cmp	r5, #16
 8006fbc:	f340 8278 	ble.w	80074b0 <_svfprintf_r+0x1160>
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	3210      	adds	r2, #16
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	9229      	str	r2, [sp, #164]	; 0xa4
 8006fc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8006fca:	f8c9 a000 	str.w	sl, [r9]
 8006fce:	f8c9 7004 	str.w	r7, [r9, #4]
 8006fd2:	ddef      	ble.n	8006fb4 <_svfprintf_r+0xc64>
 8006fd4:	aa27      	add	r2, sp, #156	; 0x9c
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4658      	mov	r0, fp
 8006fda:	f000 fee9 	bl	8007db0 <__ssprint_r>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f47f aab0 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006fe4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006fe6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006fe8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006fec:	e7e4      	b.n	8006fb8 <_svfprintf_r+0xc68>
 8006fee:	aa27      	add	r2, sp, #156	; 0x9c
 8006ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ff4:	f000 fedc 	bl	8007db0 <__ssprint_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	f47f aaa3 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8006ffe:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007002:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007004:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007008:	f7ff bbc8 	b.w	800679c <_svfprintf_r+0x44c>
 800700c:	1e5e      	subs	r6, r3, #1
 800700e:	2e00      	cmp	r6, #0
 8007010:	f77f af48 	ble.w	8006ea4 <_svfprintf_r+0xb54>
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <_svfprintf_r+0xd54>)
 8007016:	930f      	str	r3, [sp, #60]	; 0x3c
 8007018:	2e10      	cmp	r6, #16
 800701a:	dd2c      	ble.n	8007076 <_svfprintf_r+0xd26>
 800701c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8007020:	2710      	movs	r7, #16
 8007022:	46b0      	mov	r8, r6
 8007024:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007028:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800702a:	e006      	b.n	800703a <_svfprintf_r+0xcea>
 800702c:	f1a8 0810 	sub.w	r8, r8, #16
 8007030:	f1b8 0f10 	cmp.w	r8, #16
 8007034:	f109 0908 	add.w	r9, r9, #8
 8007038:	dd1a      	ble.n	8007070 <_svfprintf_r+0xd20>
 800703a:	3501      	adds	r5, #1
 800703c:	3410      	adds	r4, #16
 800703e:	2d07      	cmp	r5, #7
 8007040:	9429      	str	r4, [sp, #164]	; 0xa4
 8007042:	9528      	str	r5, [sp, #160]	; 0xa0
 8007044:	f8c9 a000 	str.w	sl, [r9]
 8007048:	f8c9 7004 	str.w	r7, [r9, #4]
 800704c:	ddee      	ble.n	800702c <_svfprintf_r+0xcdc>
 800704e:	aa27      	add	r2, sp, #156	; 0x9c
 8007050:	4631      	mov	r1, r6
 8007052:	4658      	mov	r0, fp
 8007054:	f000 feac 	bl	8007db0 <__ssprint_r>
 8007058:	2800      	cmp	r0, #0
 800705a:	f47f aa73 	bne.w	8006544 <_svfprintf_r+0x1f4>
 800705e:	f1a8 0810 	sub.w	r8, r8, #16
 8007062:	f1b8 0f10 	cmp.w	r8, #16
 8007066:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007068:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800706a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800706e:	dce4      	bgt.n	800703a <_svfprintf_r+0xcea>
 8007070:	4646      	mov	r6, r8
 8007072:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8007076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007078:	3501      	adds	r5, #1
 800707a:	4434      	add	r4, r6
 800707c:	2d07      	cmp	r5, #7
 800707e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007080:	9528      	str	r5, [sp, #160]	; 0xa0
 8007082:	e889 0048 	stmia.w	r9, {r3, r6}
 8007086:	f77f af0b 	ble.w	8006ea0 <_svfprintf_r+0xb50>
 800708a:	aa27      	add	r2, sp, #156	; 0x9c
 800708c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800708e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007090:	f000 fe8e 	bl	8007db0 <__ssprint_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	f47f aa55 	bne.w	8006544 <_svfprintf_r+0x1f4>
 800709a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800709c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800709e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80070a2:	e6ff      	b.n	8006ea4 <_svfprintf_r+0xb54>
 80070a4:	08008ebc 	.word	0x08008ebc
 80070a8:	9907      	ldr	r1, [sp, #28]
 80070aa:	f011 0210 	ands.w	r2, r1, #16
 80070ae:	f000 81d5 	beq.w	800745c <_svfprintf_r+0x110c>
 80070b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80070b4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80070b8:	f1bb 0f00 	cmp.w	fp, #0
 80070bc:	6804      	ldr	r4, [r0, #0]
 80070be:	f100 0704 	add.w	r7, r0, #4
 80070c2:	f04f 0500 	mov.w	r5, #0
 80070c6:	db26      	blt.n	8007116 <_svfprintf_r+0xdc6>
 80070c8:	460a      	mov	r2, r1
 80070ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ce:	9207      	str	r2, [sp, #28]
 80070d0:	ea54 0205 	orrs.w	r2, r4, r5
 80070d4:	970e      	str	r7, [sp, #56]	; 0x38
 80070d6:	461f      	mov	r7, r3
 80070d8:	f47f aae8 	bne.w	80066ac <_svfprintf_r+0x35c>
 80070dc:	e4ce      	b.n	8006a7c <_svfprintf_r+0x72c>
 80070de:	9b07      	ldr	r3, [sp, #28]
 80070e0:	06d8      	lsls	r0, r3, #27
 80070e2:	d42a      	bmi.n	800713a <_svfprintf_r+0xdea>
 80070e4:	9b07      	ldr	r3, [sp, #28]
 80070e6:	0659      	lsls	r1, r3, #25
 80070e8:	d527      	bpl.n	800713a <_svfprintf_r+0xdea>
 80070ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80070ec:	f9b1 4000 	ldrsh.w	r4, [r1]
 80070f0:	3104      	adds	r1, #4
 80070f2:	17e5      	asrs	r5, r4, #31
 80070f4:	4622      	mov	r2, r4
 80070f6:	462b      	mov	r3, r5
 80070f8:	910e      	str	r1, [sp, #56]	; 0x38
 80070fa:	f7ff bac4 	b.w	8006686 <_svfprintf_r+0x336>
 80070fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007100:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8007104:	f1bb 0f00 	cmp.w	fp, #0
 8007108:	680c      	ldr	r4, [r1, #0]
 800710a:	f101 0704 	add.w	r7, r1, #4
 800710e:	f04f 0500 	mov.w	r5, #0
 8007112:	f280 824e 	bge.w	80075b2 <_svfprintf_r+0x1262>
 8007116:	970e      	str	r7, [sp, #56]	; 0x38
 8007118:	461f      	mov	r7, r3
 800711a:	ea54 0305 	orrs.w	r3, r4, r5
 800711e:	f47f aac5 	bne.w	80066ac <_svfprintf_r+0x35c>
 8007122:	e4b0      	b.n	8006a86 <_svfprintf_r+0x736>
 8007124:	3301      	adds	r3, #1
 8007126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007128:	9328      	str	r3, [sp, #160]	; 0xa0
 800712a:	442c      	add	r4, r5
 800712c:	2b07      	cmp	r3, #7
 800712e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007130:	e889 0024 	stmia.w	r9, {r2, r5}
 8007134:	f77f aba0 	ble.w	8006878 <_svfprintf_r+0x528>
 8007138:	e6c1      	b.n	8006ebe <_svfprintf_r+0xb6e>
 800713a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800713c:	6814      	ldr	r4, [r2, #0]
 800713e:	4613      	mov	r3, r2
 8007140:	3304      	adds	r3, #4
 8007142:	17e5      	asrs	r5, r4, #31
 8007144:	4622      	mov	r2, r4
 8007146:	930e      	str	r3, [sp, #56]	; 0x38
 8007148:	2a00      	cmp	r2, #0
 800714a:	462b      	mov	r3, r5
 800714c:	f173 0300 	sbcs.w	r3, r3, #0
 8007150:	f6bf aa9e 	bge.w	8006690 <_svfprintf_r+0x340>
 8007154:	4264      	negs	r4, r4
 8007156:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800715a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800715e:	f1bb 0f00 	cmp.w	fp, #0
 8007162:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007166:	f6ff aaa1 	blt.w	80066ac <_svfprintf_r+0x35c>
 800716a:	9b07      	ldr	r3, [sp, #28]
 800716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007170:	9307      	str	r3, [sp, #28]
 8007172:	f7ff ba9b 	b.w	80066ac <_svfprintf_r+0x35c>
 8007176:	aa27      	add	r2, sp, #156	; 0x9c
 8007178:	9909      	ldr	r1, [sp, #36]	; 0x24
 800717a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800717c:	f000 fe18 	bl	8007db0 <__ssprint_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	f47f a9df 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8007186:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007188:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800718c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800718e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007190:	4432      	add	r2, r6
 8007192:	4617      	mov	r7, r2
 8007194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007196:	4293      	cmp	r3, r2
 8007198:	db47      	blt.n	800722a <_svfprintf_r+0xeda>
 800719a:	9a07      	ldr	r2, [sp, #28]
 800719c:	07d5      	lsls	r5, r2, #31
 800719e:	d444      	bmi.n	800722a <_svfprintf_r+0xeda>
 80071a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80071a2:	440e      	add	r6, r1
 80071a4:	1bf5      	subs	r5, r6, r7
 80071a6:	1acb      	subs	r3, r1, r3
 80071a8:	429d      	cmp	r5, r3
 80071aa:	bfa8      	it	ge
 80071ac:	461d      	movge	r5, r3
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	462e      	mov	r6, r5
 80071b2:	dd0d      	ble.n	80071d0 <_svfprintf_r+0xe80>
 80071b4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80071b6:	f8c9 7000 	str.w	r7, [r9]
 80071ba:	3201      	adds	r2, #1
 80071bc:	442c      	add	r4, r5
 80071be:	2a07      	cmp	r2, #7
 80071c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80071c2:	f8c9 5004 	str.w	r5, [r9, #4]
 80071c6:	9228      	str	r2, [sp, #160]	; 0xa0
 80071c8:	f300 830a 	bgt.w	80077e0 <_svfprintf_r+0x1490>
 80071cc:	f109 0908 	add.w	r9, r9, #8
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	bfac      	ite	ge
 80071d4:	1b9d      	subge	r5, r3, r6
 80071d6:	461d      	movlt	r5, r3
 80071d8:	2d00      	cmp	r5, #0
 80071da:	f77f ab4f 	ble.w	800687c <_svfprintf_r+0x52c>
 80071de:	4abb      	ldr	r2, [pc, #748]	; (80074cc <_svfprintf_r+0x117c>)
 80071e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80071e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80071e4:	2d10      	cmp	r5, #16
 80071e6:	dd9d      	ble.n	8007124 <_svfprintf_r+0xdd4>
 80071e8:	2610      	movs	r6, #16
 80071ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80071ec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80071f0:	e004      	b.n	80071fc <_svfprintf_r+0xeac>
 80071f2:	f109 0908 	add.w	r9, r9, #8
 80071f6:	3d10      	subs	r5, #16
 80071f8:	2d10      	cmp	r5, #16
 80071fa:	dd93      	ble.n	8007124 <_svfprintf_r+0xdd4>
 80071fc:	3301      	adds	r3, #1
 80071fe:	3410      	adds	r4, #16
 8007200:	2b07      	cmp	r3, #7
 8007202:	9429      	str	r4, [sp, #164]	; 0xa4
 8007204:	9328      	str	r3, [sp, #160]	; 0xa0
 8007206:	f8c9 a000 	str.w	sl, [r9]
 800720a:	f8c9 6004 	str.w	r6, [r9, #4]
 800720e:	ddf0      	ble.n	80071f2 <_svfprintf_r+0xea2>
 8007210:	aa27      	add	r2, sp, #156	; 0x9c
 8007212:	4659      	mov	r1, fp
 8007214:	4638      	mov	r0, r7
 8007216:	f000 fdcb 	bl	8007db0 <__ssprint_r>
 800721a:	2800      	cmp	r0, #0
 800721c:	f47f a992 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8007220:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007222:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007224:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007228:	e7e5      	b.n	80071f6 <_svfprintf_r+0xea6>
 800722a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800722c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800722e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007230:	f8c9 1000 	str.w	r1, [r9]
 8007234:	3201      	adds	r2, #1
 8007236:	4404      	add	r4, r0
 8007238:	2a07      	cmp	r2, #7
 800723a:	9429      	str	r4, [sp, #164]	; 0xa4
 800723c:	f8c9 0004 	str.w	r0, [r9, #4]
 8007240:	9228      	str	r2, [sp, #160]	; 0xa0
 8007242:	f300 82b9 	bgt.w	80077b8 <_svfprintf_r+0x1468>
 8007246:	f109 0908 	add.w	r9, r9, #8
 800724a:	e7a9      	b.n	80071a0 <_svfprintf_r+0xe50>
 800724c:	9b07      	ldr	r3, [sp, #28]
 800724e:	07d8      	lsls	r0, r3, #31
 8007250:	f53f adf2 	bmi.w	8006e38 <_svfprintf_r+0xae8>
 8007254:	3501      	adds	r5, #1
 8007256:	3401      	adds	r4, #1
 8007258:	2301      	movs	r3, #1
 800725a:	2d07      	cmp	r5, #7
 800725c:	9429      	str	r4, [sp, #164]	; 0xa4
 800725e:	9528      	str	r5, [sp, #160]	; 0xa0
 8007260:	f8c9 6000 	str.w	r6, [r9]
 8007264:	f8c9 3004 	str.w	r3, [r9, #4]
 8007268:	f77f ae1a 	ble.w	8006ea0 <_svfprintf_r+0xb50>
 800726c:	e70d      	b.n	800708a <_svfprintf_r+0xd3a>
 800726e:	aa27      	add	r2, sp, #156	; 0x9c
 8007270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007272:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007274:	f000 fd9c 	bl	8007db0 <__ssprint_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	f47f a963 	bne.w	8006544 <_svfprintf_r+0x1f4>
 800727e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007280:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8007282:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007286:	e5e5      	b.n	8006e54 <_svfprintf_r+0xb04>
 8007288:	aa27      	add	r2, sp, #156	; 0x9c
 800728a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800728c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800728e:	f000 fd8f 	bl	8007db0 <__ssprint_r>
 8007292:	2800      	cmp	r0, #0
 8007294:	f47f a956 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8007298:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800729a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800729c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80072a0:	e5e7      	b.n	8006e72 <_svfprintf_r+0xb22>
 80072a2:	aa27      	add	r2, sp, #156	; 0x9c
 80072a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072a8:	f000 fd82 	bl	8007db0 <__ssprint_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f47f a949 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80072b2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80072b4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80072b8:	f7ff ba94 	b.w	80067e4 <_svfprintf_r+0x494>
 80072bc:	9907      	ldr	r1, [sp, #28]
 80072be:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80072c2:	f000 80bb 	beq.w	800743c <_svfprintf_r+0x10ec>
 80072c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80072c8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80072cc:	4603      	mov	r3, r0
 80072ce:	f1bb 0f00 	cmp.w	fp, #0
 80072d2:	f103 0304 	add.w	r3, r3, #4
 80072d6:	8804      	ldrh	r4, [r0, #0]
 80072d8:	f04f 0500 	mov.w	r5, #0
 80072dc:	f2c0 81c5 	blt.w	800766a <_svfprintf_r+0x131a>
 80072e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80072e4:	9107      	str	r1, [sp, #28]
 80072e6:	ea54 0105 	orrs.w	r1, r4, r5
 80072ea:	930e      	str	r3, [sp, #56]	; 0x38
 80072ec:	f43f acda 	beq.w	8006ca4 <_svfprintf_r+0x954>
 80072f0:	4617      	mov	r7, r2
 80072f2:	f7ff b953 	b.w	800659c <_svfprintf_r+0x24c>
 80072f6:	9b07      	ldr	r3, [sp, #28]
 80072f8:	06df      	lsls	r7, r3, #27
 80072fa:	d40b      	bmi.n	8007314 <_svfprintf_r+0xfc4>
 80072fc:	9b07      	ldr	r3, [sp, #28]
 80072fe:	065e      	lsls	r6, r3, #25
 8007300:	d508      	bpl.n	8007314 <_svfprintf_r+0xfc4>
 8007302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007304:	6813      	ldr	r3, [r2, #0]
 8007306:	3204      	adds	r2, #4
 8007308:	920e      	str	r2, [sp, #56]	; 0x38
 800730a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	f7ff b845 	b.w	800639e <_svfprintf_r+0x4e>
 8007314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	3204      	adds	r2, #4
 800731a:	920e      	str	r2, [sp, #56]	; 0x38
 800731c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f7ff b83d 	b.w	800639e <_svfprintf_r+0x4e>
 8007324:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	f001 faa0 	bl	8008870 <__aeabi_dcmpun>
 8007330:	2800      	cmp	r0, #0
 8007332:	f040 8305 	bne.w	8007940 <_svfprintf_r+0x15f0>
 8007336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007338:	f1bb 3fff 	cmp.w	fp, #4294967295
 800733c:	f023 0720 	bic.w	r7, r3, #32
 8007340:	f000 826c 	beq.w	800781c <_svfprintf_r+0x14cc>
 8007344:	2f47      	cmp	r7, #71	; 0x47
 8007346:	f000 8187 	beq.w	8007658 <_svfprintf_r+0x1308>
 800734a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800734c:	9a07      	ldr	r2, [sp, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007354:	920f      	str	r2, [sp, #60]	; 0x3c
 8007356:	f2c0 8280 	blt.w	800785a <_svfprintf_r+0x150a>
 800735a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800735e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8007362:	2300      	movs	r3, #0
 8007364:	9308      	str	r3, [sp, #32]
 8007366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007368:	2b66      	cmp	r3, #102	; 0x66
 800736a:	f000 825a 	beq.w	8007822 <_svfprintf_r+0x14d2>
 800736e:	2b46      	cmp	r3, #70	; 0x46
 8007370:	f000 8147 	beq.w	8007602 <_svfprintf_r+0x12b2>
 8007374:	2f45      	cmp	r7, #69	; 0x45
 8007376:	bf0c      	ite	eq
 8007378:	f10b 0501 	addeq.w	r5, fp, #1
 800737c:	465d      	movne	r5, fp
 800737e:	a825      	add	r0, sp, #148	; 0x94
 8007380:	a922      	add	r1, sp, #136	; 0x88
 8007382:	aa21      	add	r2, sp, #132	; 0x84
 8007384:	2302      	movs	r3, #2
 8007386:	9004      	str	r0, [sp, #16]
 8007388:	9202      	str	r2, [sp, #8]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	9501      	str	r5, [sp, #4]
 800738e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007392:	9103      	str	r1, [sp, #12]
 8007394:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007396:	f7fc fb53 	bl	8003a40 <_dtoa_r>
 800739a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800739c:	2b67      	cmp	r3, #103	; 0x67
 800739e:	4606      	mov	r6, r0
 80073a0:	f040 8271 	bne.w	8007886 <_svfprintf_r+0x1536>
 80073a4:	9b07      	ldr	r3, [sp, #28]
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	f140 82bf 	bpl.w	800792a <_svfprintf_r+0x15da>
 80073ac:	1974      	adds	r4, r6, r5
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80073b6:	f001 fa29 	bl	800880c <__aeabi_dcmpeq>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	f040 8190 	bne.w	80076e0 <_svfprintf_r+0x1390>
 80073c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80073c2:	429c      	cmp	r4, r3
 80073c4:	d906      	bls.n	80073d4 <_svfprintf_r+0x1084>
 80073c6:	2130      	movs	r1, #48	; 0x30
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	9225      	str	r2, [sp, #148]	; 0x94
 80073cc:	7019      	strb	r1, [r3, #0]
 80073ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d8f9      	bhi.n	80073c8 <_svfprintf_r+0x1078>
 80073d4:	1b9b      	subs	r3, r3, r6
 80073d6:	2f47      	cmp	r7, #71	; 0x47
 80073d8:	9312      	str	r3, [sp, #72]	; 0x48
 80073da:	f000 817a 	beq.w	80076d2 <_svfprintf_r+0x1382>
 80073de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073e0:	2b65      	cmp	r3, #101	; 0x65
 80073e2:	f340 825f 	ble.w	80078a4 <_svfprintf_r+0x1554>
 80073e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073e8:	2b66      	cmp	r3, #102	; 0x66
 80073ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80073ee:	f000 8266 	beq.w	80078be <_svfprintf_r+0x156e>
 80073f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80073f6:	428a      	cmp	r2, r1
 80073f8:	f2c0 8238 	blt.w	800786c <_svfprintf_r+0x151c>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	07d9      	lsls	r1, r3, #31
 8007400:	f100 8295 	bmi.w	800792e <_svfprintf_r+0x15de>
 8007404:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007408:	920d      	str	r2, [sp, #52]	; 0x34
 800740a:	2267      	movs	r2, #103	; 0x67
 800740c:	9211      	str	r2, [sp, #68]	; 0x44
 800740e:	9a08      	ldr	r2, [sp, #32]
 8007410:	2a00      	cmp	r2, #0
 8007412:	f040 8132 	bne.w	800767a <_svfprintf_r+0x132a>
 8007416:	9308      	str	r3, [sp, #32]
 8007418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741a:	9307      	str	r3, [sp, #28]
 800741c:	4693      	mov	fp, r2
 800741e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007422:	f7ff b967 	b.w	80066f4 <_svfprintf_r+0x3a4>
 8007426:	f027 0707 	bic.w	r7, r7, #7
 800742a:	ed97 7b00 	vldr	d7, [r7]
 800742e:	f107 0308 	add.w	r3, r7, #8
 8007432:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8007436:	930e      	str	r3, [sp, #56]	; 0x38
 8007438:	f7ff ba88 	b.w	800694c <_svfprintf_r+0x5fc>
 800743c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800743e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8007442:	f1bb 0f00 	cmp.w	fp, #0
 8007446:	680c      	ldr	r4, [r1, #0]
 8007448:	f101 0704 	add.w	r7, r1, #4
 800744c:	f04f 0500 	mov.w	r5, #0
 8007450:	f280 80ac 	bge.w	80075ac <_svfprintf_r+0x125c>
 8007454:	970e      	str	r7, [sp, #56]	; 0x38
 8007456:	2700      	movs	r7, #0
 8007458:	f7ff b8a0 	b.w	800659c <_svfprintf_r+0x24c>
 800745c:	9907      	ldr	r1, [sp, #28]
 800745e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8007462:	f43f ae4c 	beq.w	80070fe <_svfprintf_r+0xdae>
 8007466:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007468:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800746c:	4603      	mov	r3, r0
 800746e:	f1bb 0f00 	cmp.w	fp, #0
 8007472:	f103 0304 	add.w	r3, r3, #4
 8007476:	8804      	ldrh	r4, [r0, #0]
 8007478:	f04f 0500 	mov.w	r5, #0
 800747c:	f2c0 80f2 	blt.w	8007664 <_svfprintf_r+0x1314>
 8007480:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007484:	9107      	str	r1, [sp, #28]
 8007486:	ea54 0105 	orrs.w	r1, r4, r5
 800748a:	930e      	str	r3, [sp, #56]	; 0x38
 800748c:	4617      	mov	r7, r2
 800748e:	f47f a90d 	bne.w	80066ac <_svfprintf_r+0x35c>
 8007492:	f7ff baf3 	b.w	8006a7c <_svfprintf_r+0x72c>
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800749a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800749e:	4613      	mov	r3, r2
 80074a0:	f000 80e5 	beq.w	800766e <_svfprintf_r+0x131e>
 80074a4:	3304      	adds	r3, #4
 80074a6:	8814      	ldrh	r4, [r2, #0]
 80074a8:	930e      	str	r3, [sp, #56]	; 0x38
 80074aa:	2500      	movs	r5, #0
 80074ac:	f7ff bb03 	b.w	8006ab6 <_svfprintf_r+0x766>
 80074b0:	4614      	mov	r4, r2
 80074b2:	3301      	adds	r3, #1
 80074b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80074b8:	442c      	add	r4, r5
 80074ba:	2b07      	cmp	r3, #7
 80074bc:	9429      	str	r4, [sp, #164]	; 0xa4
 80074be:	e889 0024 	stmia.w	r9, {r2, r5}
 80074c2:	f73f ae58 	bgt.w	8007176 <_svfprintf_r+0xe26>
 80074c6:	f109 0908 	add.w	r9, r9, #8
 80074ca:	e65f      	b.n	800718c <_svfprintf_r+0xe3c>
 80074cc:	08008ebc 	.word	0x08008ebc
 80074d0:	2700      	movs	r7, #0
 80074d2:	45bb      	cmp	fp, r7
 80074d4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80074d8:	f6ff abf6 	blt.w	8006cc8 <_svfprintf_r+0x978>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074e2:	9307      	str	r3, [sp, #28]
 80074e4:	f7ff bbbe 	b.w	8006c64 <_svfprintf_r+0x914>
 80074e8:	aa27      	add	r2, sp, #156	; 0x9c
 80074ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074ee:	f000 fc5f 	bl	8007db0 <__ssprint_r>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	f47f a826 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80074f8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80074fa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80074fe:	e405      	b.n	8006d0c <_svfprintf_r+0x9bc>
 8007500:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007502:	f7ff bbda 	b.w	8006cba <_svfprintf_r+0x96a>
 8007506:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007508:	4ab2      	ldr	r2, [pc, #712]	; (80077d4 <_svfprintf_r+0x1484>)
 800750a:	f8c9 2000 	str.w	r2, [r9]
 800750e:	3301      	adds	r3, #1
 8007510:	3401      	adds	r4, #1
 8007512:	2201      	movs	r2, #1
 8007514:	2b07      	cmp	r3, #7
 8007516:	9429      	str	r4, [sp, #164]	; 0xa4
 8007518:	9328      	str	r3, [sp, #160]	; 0xa0
 800751a:	f8c9 2004 	str.w	r2, [r9, #4]
 800751e:	f300 808e 	bgt.w	800763e <_svfprintf_r+0x12ee>
 8007522:	f109 0908 	add.w	r9, r9, #8
 8007526:	b92d      	cbnz	r5, 8007534 <_svfprintf_r+0x11e4>
 8007528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800752a:	b91b      	cbnz	r3, 8007534 <_svfprintf_r+0x11e4>
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	07df      	lsls	r7, r3, #31
 8007530:	f57f a9a4 	bpl.w	800687c <_svfprintf_r+0x52c>
 8007534:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007536:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800753a:	f8c9 2000 	str.w	r2, [r9]
 800753e:	3301      	adds	r3, #1
 8007540:	440c      	add	r4, r1
 8007542:	2b07      	cmp	r3, #7
 8007544:	9429      	str	r4, [sp, #164]	; 0xa4
 8007546:	f8c9 1004 	str.w	r1, [r9, #4]
 800754a:	9328      	str	r3, [sp, #160]	; 0xa0
 800754c:	f300 81d3 	bgt.w	80078f6 <_svfprintf_r+0x15a6>
 8007550:	f109 0908 	add.w	r9, r9, #8
 8007554:	426d      	negs	r5, r5
 8007556:	2d00      	cmp	r5, #0
 8007558:	f340 80ad 	ble.w	80076b6 <_svfprintf_r+0x1366>
 800755c:	4a9e      	ldr	r2, [pc, #632]	; (80077d8 <_svfprintf_r+0x1488>)
 800755e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007560:	2d10      	cmp	r5, #16
 8007562:	f340 80cc 	ble.w	80076fe <_svfprintf_r+0x13ae>
 8007566:	4622      	mov	r2, r4
 8007568:	2710      	movs	r7, #16
 800756a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800756e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007570:	e005      	b.n	800757e <_svfprintf_r+0x122e>
 8007572:	f109 0908 	add.w	r9, r9, #8
 8007576:	3d10      	subs	r5, #16
 8007578:	2d10      	cmp	r5, #16
 800757a:	f340 80bf 	ble.w	80076fc <_svfprintf_r+0x13ac>
 800757e:	3301      	adds	r3, #1
 8007580:	3210      	adds	r2, #16
 8007582:	2b07      	cmp	r3, #7
 8007584:	9229      	str	r2, [sp, #164]	; 0xa4
 8007586:	9328      	str	r3, [sp, #160]	; 0xa0
 8007588:	f8c9 a000 	str.w	sl, [r9]
 800758c:	f8c9 7004 	str.w	r7, [r9, #4]
 8007590:	ddef      	ble.n	8007572 <_svfprintf_r+0x1222>
 8007592:	aa27      	add	r2, sp, #156	; 0x9c
 8007594:	4621      	mov	r1, r4
 8007596:	4658      	mov	r0, fp
 8007598:	f000 fc0a 	bl	8007db0 <__ssprint_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	f47e afd1 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80075a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80075a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80075a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80075aa:	e7e4      	b.n	8007576 <_svfprintf_r+0x1226>
 80075ac:	9a07      	ldr	r2, [sp, #28]
 80075ae:	f7ff ba37 	b.w	8006a20 <_svfprintf_r+0x6d0>
 80075b2:	9a07      	ldr	r2, [sp, #28]
 80075b4:	e589      	b.n	80070ca <_svfprintf_r+0xd7a>
 80075b6:	9b07      	ldr	r3, [sp, #28]
 80075b8:	f043 0320 	orr.w	r3, r3, #32
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	f108 0801 	add.w	r8, r8, #1
 80075c2:	f898 3000 	ldrb.w	r3, [r8]
 80075c6:	f7fe bf1d 	b.w	8006404 <_svfprintf_r+0xb4>
 80075ca:	aa27      	add	r2, sp, #156	; 0x9c
 80075cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075d0:	f000 fbee 	bl	8007db0 <__ssprint_r>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f47e afb5 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80075da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80075dc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80075e0:	f7ff bbac 	b.w	8006d3c <_svfprintf_r+0x9ec>
 80075e4:	2140      	movs	r1, #64	; 0x40
 80075e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075e8:	f7fd fde6 	bl	80051b8 <_malloc_r>
 80075ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ee:	6010      	str	r0, [r2, #0]
 80075f0:	6110      	str	r0, [r2, #16]
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f000 81f9 	beq.w	80079ea <_svfprintf_r+0x169a>
 80075f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	6153      	str	r3, [r2, #20]
 80075fe:	f7fe bebe 	b.w	800637e <_svfprintf_r+0x2e>
 8007602:	a825      	add	r0, sp, #148	; 0x94
 8007604:	a922      	add	r1, sp, #136	; 0x88
 8007606:	aa21      	add	r2, sp, #132	; 0x84
 8007608:	2303      	movs	r3, #3
 800760a:	9004      	str	r0, [sp, #16]
 800760c:	9202      	str	r2, [sp, #8]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	f8cd b004 	str.w	fp, [sp, #4]
 8007614:	9103      	str	r1, [sp, #12]
 8007616:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800761a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800761c:	f7fc fa10 	bl	8003a40 <_dtoa_r>
 8007620:	465d      	mov	r5, fp
 8007622:	4606      	mov	r6, r0
 8007624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007626:	2b46      	cmp	r3, #70	; 0x46
 8007628:	eb06 0405 	add.w	r4, r6, r5
 800762c:	f47f aebf 	bne.w	80073ae <_svfprintf_r+0x105e>
 8007630:	7833      	ldrb	r3, [r6, #0]
 8007632:	2b30      	cmp	r3, #48	; 0x30
 8007634:	f000 818a 	beq.w	800794c <_svfprintf_r+0x15fc>
 8007638:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800763a:	442c      	add	r4, r5
 800763c:	e6b7      	b.n	80073ae <_svfprintf_r+0x105e>
 800763e:	aa27      	add	r2, sp, #156	; 0x9c
 8007640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007642:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007644:	f000 fbb4 	bl	8007db0 <__ssprint_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	f47e af7b 	bne.w	8006544 <_svfprintf_r+0x1f4>
 800764e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007650:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007652:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007656:	e766      	b.n	8007526 <_svfprintf_r+0x11d6>
 8007658:	f1bb 0f00 	cmp.w	fp, #0
 800765c:	bf08      	it	eq
 800765e:	f04f 0b01 	moveq.w	fp, #1
 8007662:	e672      	b.n	800734a <_svfprintf_r+0xffa>
 8007664:	930e      	str	r3, [sp, #56]	; 0x38
 8007666:	4617      	mov	r7, r2
 8007668:	e557      	b.n	800711a <_svfprintf_r+0xdca>
 800766a:	930e      	str	r3, [sp, #56]	; 0x38
 800766c:	e6f3      	b.n	8007456 <_svfprintf_r+0x1106>
 800766e:	3304      	adds	r3, #4
 8007670:	6814      	ldr	r4, [r2, #0]
 8007672:	930e      	str	r3, [sp, #56]	; 0x38
 8007674:	2500      	movs	r5, #0
 8007676:	f7ff ba1e 	b.w	8006ab6 <_svfprintf_r+0x766>
 800767a:	272d      	movs	r7, #45	; 0x2d
 800767c:	9308      	str	r3, [sp, #32]
 800767e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007686:	f04f 0b00 	mov.w	fp, #0
 800768a:	f7ff b834 	b.w	80066f6 <_svfprintf_r+0x3a6>
 800768e:	4630      	mov	r0, r6
 8007690:	f7fa fc76 	bl	8001f80 <strlen>
 8007694:	46a3      	mov	fp, r4
 8007696:	4603      	mov	r3, r0
 8007698:	900d      	str	r0, [sp, #52]	; 0x34
 800769a:	f7ff ba9d 	b.w	8006bd8 <_svfprintf_r+0x888>
 800769e:	aa27      	add	r2, sp, #156	; 0x9c
 80076a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076a4:	f000 fb84 	bl	8007db0 <__ssprint_r>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f47e af4b 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80076ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80076b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80076b2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80076b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80076b8:	f8c9 6000 	str.w	r6, [r9]
 80076bc:	3301      	adds	r3, #1
 80076be:	440c      	add	r4, r1
 80076c0:	2b07      	cmp	r3, #7
 80076c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80076c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80076c6:	f8c9 1004 	str.w	r1, [r9, #4]
 80076ca:	f77f a8d5 	ble.w	8006878 <_svfprintf_r+0x528>
 80076ce:	f7ff bbf6 	b.w	8006ebe <_svfprintf_r+0xb6e>
 80076d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d4:	1cdd      	adds	r5, r3, #3
 80076d6:	db1e      	blt.n	8007716 <_svfprintf_r+0x13c6>
 80076d8:	459b      	cmp	fp, r3
 80076da:	db1c      	blt.n	8007716 <_svfprintf_r+0x13c6>
 80076dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80076de:	e688      	b.n	80073f2 <_svfprintf_r+0x10a2>
 80076e0:	4623      	mov	r3, r4
 80076e2:	e677      	b.n	80073d4 <_svfprintf_r+0x1084>
 80076e4:	aa27      	add	r2, sp, #156	; 0x9c
 80076e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076ea:	f000 fb61 	bl	8007db0 <__ssprint_r>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f47e af28 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80076f4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80076f6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80076fa:	e447      	b.n	8006f8c <_svfprintf_r+0xc3c>
 80076fc:	4614      	mov	r4, r2
 80076fe:	3301      	adds	r3, #1
 8007700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007702:	9328      	str	r3, [sp, #160]	; 0xa0
 8007704:	442c      	add	r4, r5
 8007706:	2b07      	cmp	r3, #7
 8007708:	9429      	str	r4, [sp, #164]	; 0xa4
 800770a:	e889 0024 	stmia.w	r9, {r2, r5}
 800770e:	dcc6      	bgt.n	800769e <_svfprintf_r+0x134e>
 8007710:	f109 0908 	add.w	r9, r9, #8
 8007714:	e7cf      	b.n	80076b6 <_svfprintf_r+0x1366>
 8007716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007718:	3a02      	subs	r2, #2
 800771a:	9211      	str	r2, [sp, #68]	; 0x44
 800771c:	3b01      	subs	r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8007724:	9321      	str	r3, [sp, #132]	; 0x84
 8007726:	bfb8      	it	lt
 8007728:	425b      	neglt	r3, r3
 800772a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 800772e:	bfb4      	ite	lt
 8007730:	222d      	movlt	r2, #45	; 0x2d
 8007732:	222b      	movge	r2, #43	; 0x2b
 8007734:	2b09      	cmp	r3, #9
 8007736:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 800773a:	f340 80ee 	ble.w	800791a <_svfprintf_r+0x15ca>
 800773e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8007742:	4604      	mov	r4, r0
 8007744:	4a25      	ldr	r2, [pc, #148]	; (80077dc <_svfprintf_r+0x148c>)
 8007746:	fb82 2103 	smull	r2, r1, r2, r3
 800774a:	17da      	asrs	r2, r3, #31
 800774c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007750:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007754:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007758:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800775c:	2a09      	cmp	r2, #9
 800775e:	4613      	mov	r3, r2
 8007760:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8007764:	dcee      	bgt.n	8007744 <_svfprintf_r+0x13f4>
 8007766:	4621      	mov	r1, r4
 8007768:	3330      	adds	r3, #48	; 0x30
 800776a:	b2da      	uxtb	r2, r3
 800776c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8007770:	4288      	cmp	r0, r1
 8007772:	f240 8137 	bls.w	80079e4 <_svfprintf_r+0x1694>
 8007776:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 800777a:	4623      	mov	r3, r4
 800777c:	e001      	b.n	8007782 <_svfprintf_r+0x1432>
 800777e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007782:	f801 2b01 	strb.w	r2, [r1], #1
 8007786:	4298      	cmp	r0, r3
 8007788:	d1f9      	bne.n	800777e <_svfprintf_r+0x142e>
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	1b1b      	subs	r3, r3, r4
 800778e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8007792:	4413      	add	r3, r2
 8007794:	aa23      	add	r2, sp, #140	; 0x8c
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800779a:	9319      	str	r3, [sp, #100]	; 0x64
 800779c:	2a01      	cmp	r2, #1
 800779e:	4413      	add	r3, r2
 80077a0:	930d      	str	r3, [sp, #52]	; 0x34
 80077a2:	f340 80ea 	ble.w	800797a <_svfprintf_r+0x162a>
 80077a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077aa:	4413      	add	r3, r2
 80077ac:	2200      	movs	r2, #0
 80077ae:	930d      	str	r3, [sp, #52]	; 0x34
 80077b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80077b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077b6:	e62a      	b.n	800740e <_svfprintf_r+0x10be>
 80077b8:	aa27      	add	r2, sp, #156	; 0x9c
 80077ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077be:	f000 faf7 	bl	8007db0 <__ssprint_r>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f47e aebe 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80077c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80077cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80077d0:	e4e6      	b.n	80071a0 <_svfprintf_r+0xe50>
 80077d2:	bf00      	nop
 80077d4:	08008d9c 	.word	0x08008d9c
 80077d8:	08008ebc 	.word	0x08008ebc
 80077dc:	66666667 	.word	0x66666667
 80077e0:	aa27      	add	r2, sp, #156	; 0x9c
 80077e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077e6:	f000 fae3 	bl	8007db0 <__ssprint_r>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f47e aeaa 	bne.w	8006544 <_svfprintf_r+0x1f4>
 80077f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077f4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80077fc:	e4e8      	b.n	80071d0 <_svfprintf_r+0xe80>
 80077fe:	2d06      	cmp	r5, #6
 8007800:	462b      	mov	r3, r5
 8007802:	bf28      	it	cs
 8007804:	2306      	movcs	r3, #6
 8007806:	930d      	str	r3, [sp, #52]	; 0x34
 8007808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800780c:	46b3      	mov	fp, r6
 800780e:	970e      	str	r7, [sp, #56]	; 0x38
 8007810:	9613      	str	r6, [sp, #76]	; 0x4c
 8007812:	4637      	mov	r7, r6
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	4e88      	ldr	r6, [pc, #544]	; (8007a38 <_svfprintf_r+0x16e8>)
 8007818:	f7fe bf6c 	b.w	80066f4 <_svfprintf_r+0x3a4>
 800781c:	f04f 0b06 	mov.w	fp, #6
 8007820:	e593      	b.n	800734a <_svfprintf_r+0xffa>
 8007822:	a825      	add	r0, sp, #148	; 0x94
 8007824:	a922      	add	r1, sp, #136	; 0x88
 8007826:	aa21      	add	r2, sp, #132	; 0x84
 8007828:	2303      	movs	r3, #3
 800782a:	9004      	str	r0, [sp, #16]
 800782c:	9202      	str	r2, [sp, #8]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	f8cd b004 	str.w	fp, [sp, #4]
 8007834:	9103      	str	r1, [sp, #12]
 8007836:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800783a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800783c:	f7fc f900 	bl	8003a40 <_dtoa_r>
 8007840:	465d      	mov	r5, fp
 8007842:	4606      	mov	r6, r0
 8007844:	eb00 040b 	add.w	r4, r0, fp
 8007848:	e6f2      	b.n	8007630 <_svfprintf_r+0x12e0>
 800784a:	272d      	movs	r7, #45	; 0x2d
 800784c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007850:	f7ff b8a3 	b.w	800699a <_svfprintf_r+0x64a>
 8007854:	9307      	str	r3, [sp, #28]
 8007856:	f7ff b94c 	b.w	8006af2 <_svfprintf_r+0x7a2>
 800785a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800785e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007862:	931d      	str	r3, [sp, #116]	; 0x74
 8007864:	232d      	movs	r3, #45	; 0x2d
 8007866:	911c      	str	r1, [sp, #112]	; 0x70
 8007868:	9308      	str	r3, [sp, #32]
 800786a:	e57c      	b.n	8007366 <_svfprintf_r+0x1016>
 800786c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800786e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007870:	4413      	add	r3, r2
 8007872:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007874:	930d      	str	r3, [sp, #52]	; 0x34
 8007876:	2a00      	cmp	r2, #0
 8007878:	f340 8089 	ble.w	800798e <_svfprintf_r+0x163e>
 800787c:	2267      	movs	r2, #103	; 0x67
 800787e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007882:	9211      	str	r2, [sp, #68]	; 0x44
 8007884:	e5c3      	b.n	800740e <_svfprintf_r+0x10be>
 8007886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007888:	2b47      	cmp	r3, #71	; 0x47
 800788a:	f47f ad8f 	bne.w	80073ac <_svfprintf_r+0x105c>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	07db      	lsls	r3, r3, #31
 8007892:	f53f aec7 	bmi.w	8007624 <_svfprintf_r+0x12d4>
 8007896:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007898:	2f47      	cmp	r7, #71	; 0x47
 800789a:	eba3 0306 	sub.w	r3, r3, r6
 800789e:	9312      	str	r3, [sp, #72]	; 0x48
 80078a0:	f43f af17 	beq.w	80076d2 <_svfprintf_r+0x1382>
 80078a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078a6:	e739      	b.n	800771c <_svfprintf_r+0x13cc>
 80078a8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80078ac:	970e      	str	r7, [sp, #56]	; 0x38
 80078ae:	9308      	str	r3, [sp, #32]
 80078b0:	950d      	str	r5, [sp, #52]	; 0x34
 80078b2:	4683      	mov	fp, r0
 80078b4:	9013      	str	r0, [sp, #76]	; 0x4c
 80078b6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80078ba:	f7fe bf1b 	b.w	80066f4 <_svfprintf_r+0x3a4>
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd6d      	ble.n	800799e <_svfprintf_r+0x164e>
 80078c2:	f1bb 0f00 	cmp.w	fp, #0
 80078c6:	d14f      	bne.n	8007968 <_svfprintf_r+0x1618>
 80078c8:	9a07      	ldr	r2, [sp, #28]
 80078ca:	07d4      	lsls	r4, r2, #31
 80078cc:	d44c      	bmi.n	8007968 <_svfprintf_r+0x1618>
 80078ce:	461a      	mov	r2, r3
 80078d0:	920d      	str	r2, [sp, #52]	; 0x34
 80078d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80078d6:	e59a      	b.n	800740e <_svfprintf_r+0x10be>
 80078d8:	9b07      	ldr	r3, [sp, #28]
 80078da:	07db      	lsls	r3, r3, #31
 80078dc:	465f      	mov	r7, fp
 80078de:	d505      	bpl.n	80078ec <_svfprintf_r+0x159c>
 80078e0:	ae44      	add	r6, sp, #272	; 0x110
 80078e2:	2330      	movs	r3, #48	; 0x30
 80078e4:	f806 3d41 	strb.w	r3, [r6, #-65]!
 80078e8:	f7fe befa 	b.w	80066e0 <_svfprintf_r+0x390>
 80078ec:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80078f0:	ae34      	add	r6, sp, #208	; 0xd0
 80078f2:	f7fe bef8 	b.w	80066e6 <_svfprintf_r+0x396>
 80078f6:	aa27      	add	r2, sp, #156	; 0x9c
 80078f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078fc:	f000 fa58 	bl	8007db0 <__ssprint_r>
 8007900:	2800      	cmp	r0, #0
 8007902:	f47e ae1f 	bne.w	8006544 <_svfprintf_r+0x1f4>
 8007906:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007908:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800790a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800790c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007910:	e620      	b.n	8007554 <_svfprintf_r+0x1204>
 8007912:	46a0      	mov	r8, r4
 8007914:	2500      	movs	r5, #0
 8007916:	f7fe bd77 	b.w	8006408 <_svfprintf_r+0xb8>
 800791a:	3330      	adds	r3, #48	; 0x30
 800791c:	2230      	movs	r2, #48	; 0x30
 800791e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8007922:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8007926:	ab24      	add	r3, sp, #144	; 0x90
 8007928:	e734      	b.n	8007794 <_svfprintf_r+0x1444>
 800792a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800792c:	e552      	b.n	80073d4 <_svfprintf_r+0x1084>
 800792e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007932:	4413      	add	r3, r2
 8007934:	2267      	movs	r2, #103	; 0x67
 8007936:	930d      	str	r3, [sp, #52]	; 0x34
 8007938:	9211      	str	r2, [sp, #68]	; 0x44
 800793a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800793e:	e566      	b.n	800740e <_svfprintf_r+0x10be>
 8007940:	4e3e      	ldr	r6, [pc, #248]	; (8007a3c <_svfprintf_r+0x16ec>)
 8007942:	4b3f      	ldr	r3, [pc, #252]	; (8007a40 <_svfprintf_r+0x16f0>)
 8007944:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007948:	f7ff b829 	b.w	800699e <_svfprintf_r+0x64e>
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007954:	f000 ff5a 	bl	800880c <__aeabi_dcmpeq>
 8007958:	2800      	cmp	r0, #0
 800795a:	f47f ae6d 	bne.w	8007638 <_svfprintf_r+0x12e8>
 800795e:	f1c5 0501 	rsb	r5, r5, #1
 8007962:	9521      	str	r5, [sp, #132]	; 0x84
 8007964:	442c      	add	r4, r5
 8007966:	e522      	b.n	80073ae <_svfprintf_r+0x105e>
 8007968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800796a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800796c:	189d      	adds	r5, r3, r2
 800796e:	eb05 030b 	add.w	r3, r5, fp
 8007972:	930d      	str	r3, [sp, #52]	; 0x34
 8007974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007978:	e549      	b.n	800740e <_svfprintf_r+0x10be>
 800797a:	9b07      	ldr	r3, [sp, #28]
 800797c:	f013 0301 	ands.w	r3, r3, #1
 8007980:	f47f af11 	bne.w	80077a6 <_svfprintf_r+0x1456>
 8007984:	9313      	str	r3, [sp, #76]	; 0x4c
 8007986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007988:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800798c:	e53f      	b.n	800740e <_svfprintf_r+0x10be>
 800798e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007992:	f1c3 0301 	rsb	r3, r3, #1
 8007996:	441a      	add	r2, r3
 8007998:	4613      	mov	r3, r2
 800799a:	920d      	str	r2, [sp, #52]	; 0x34
 800799c:	e76e      	b.n	800787c <_svfprintf_r+0x152c>
 800799e:	f1bb 0f00 	cmp.w	fp, #0
 80079a2:	d102      	bne.n	80079aa <_svfprintf_r+0x165a>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	07d8      	lsls	r0, r3, #31
 80079a8:	d507      	bpl.n	80079ba <_svfprintf_r+0x166a>
 80079aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079ac:	1c5d      	adds	r5, r3, #1
 80079ae:	eb05 030b 	add.w	r3, r5, fp
 80079b2:	930d      	str	r3, [sp, #52]	; 0x34
 80079b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80079b8:	e529      	b.n	800740e <_svfprintf_r+0x10be>
 80079ba:	2301      	movs	r3, #1
 80079bc:	930d      	str	r3, [sp, #52]	; 0x34
 80079be:	e526      	b.n	800740e <_svfprintf_r+0x10be>
 80079c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80079c2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079c6:	6805      	ldr	r5, [r0, #0]
 80079c8:	3004      	adds	r0, #4
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	900e      	str	r0, [sp, #56]	; 0x38
 80079ce:	46a0      	mov	r8, r4
 80079d0:	f6be ad18 	bge.w	8006404 <_svfprintf_r+0xb4>
 80079d4:	f04f 35ff 	mov.w	r5, #4294967295
 80079d8:	f7fe bd14 	b.w	8006404 <_svfprintf_r+0xb4>
 80079dc:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80079e0:	f7fe bdc1 	b.w	8006566 <_svfprintf_r+0x216>
 80079e4:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80079e8:	e6d4      	b.n	8007794 <_svfprintf_r+0x1444>
 80079ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ec:	230c      	movs	r3, #12
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	f04f 30ff 	mov.w	r0, #4294967295
 80079f4:	f7fe bdaf 	b.w	8006556 <_svfprintf_r+0x206>
 80079f8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80079fc:	f7fe be30 	b.w	8006660 <_svfprintf_r+0x310>
 8007a00:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a04:	f7fe bf92 	b.w	800692c <_svfprintf_r+0x5dc>
 8007a08:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a0c:	f7ff b845 	b.w	8006a9a <_svfprintf_r+0x74a>
 8007a10:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a14:	f7ff b813 	b.w	8006a3e <_svfprintf_r+0x6ee>
 8007a18:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a1c:	f7fe bfe5 	b.w	80069ea <_svfprintf_r+0x69a>
 8007a20:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a24:	f7ff b92d 	b.w	8006c82 <_svfprintf_r+0x932>
 8007a28:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a2c:	f7ff b908 	b.w	8006c40 <_svfprintf_r+0x8f0>
 8007a30:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007a34:	f7ff b8e6 	b.w	8006c04 <_svfprintf_r+0x8b4>
 8007a38:	08008d94 	.word	0x08008d94
 8007a3c:	08008d68 	.word	0x08008d68
 8007a40:	08008d64 	.word	0x08008d64

08007a44 <__sprint_r.part.0>:
 8007a44:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4a:	049c      	lsls	r4, r3, #18
 8007a4c:	4692      	mov	sl, r2
 8007a4e:	d52c      	bpl.n	8007aaa <__sprint_r.part.0+0x66>
 8007a50:	6893      	ldr	r3, [r2, #8]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	b33b      	cbz	r3, 8007aa6 <__sprint_r.part.0+0x62>
 8007a56:	460f      	mov	r7, r1
 8007a58:	4680      	mov	r8, r0
 8007a5a:	f102 0908 	add.w	r9, r2, #8
 8007a5e:	e919 0060 	ldmdb	r9, {r5, r6}
 8007a62:	08b6      	lsrs	r6, r6, #2
 8007a64:	d017      	beq.n	8007a96 <__sprint_r.part.0+0x52>
 8007a66:	3d04      	subs	r5, #4
 8007a68:	2400      	movs	r4, #0
 8007a6a:	e001      	b.n	8007a70 <__sprint_r.part.0+0x2c>
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d010      	beq.n	8007a92 <__sprint_r.part.0+0x4e>
 8007a70:	463a      	mov	r2, r7
 8007a72:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8007a76:	4640      	mov	r0, r8
 8007a78:	f000 f910 	bl	8007c9c <_fputwc_r>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	f104 0401 	add.w	r4, r4, #1
 8007a82:	d1f3      	bne.n	8007a6c <__sprint_r.part.0+0x28>
 8007a84:	2300      	movs	r3, #0
 8007a86:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a8a:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007a96:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8007a9a:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a9e:	f109 0908 	add.w	r9, r9, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1db      	bne.n	8007a5e <__sprint_r.part.0+0x1a>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e7ec      	b.n	8007a84 <__sprint_r.part.0+0x40>
 8007aaa:	f7fd f957 	bl	8004d5c <__sfvwrite_r>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f8ca 3008 	str.w	r3, [sl, #8]
 8007ab4:	f8ca 3004 	str.w	r3, [sl, #4]
 8007ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007abc <__sprint_r>:
 8007abc:	6893      	ldr	r3, [r2, #8]
 8007abe:	b10b      	cbz	r3, 8007ac4 <__sprint_r+0x8>
 8007ac0:	f7ff bfc0 	b.w	8007a44 <__sprint_r.part.0>
 8007ac4:	b410      	push	{r4}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	6053      	str	r3, [r2, #4]
 8007aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <_write_r>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4c08      	ldr	r4, [pc, #32]	; (8007af8 <_write_r+0x28>)
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4606      	mov	r6, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	4628      	mov	r0, r5
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	f7f8 fe43 	bl	800076c <_write>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d000      	beq.n	8007aec <_write_r+0x1c>
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0fb      	beq.n	8007aea <_write_r+0x1a>
 8007af2:	6033      	str	r3, [r6, #0]
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
 8007af6:	bf00      	nop
 8007af8:	20000a74 	.word	0x20000a74

08007afc <_calloc_r>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	fb02 f101 	mul.w	r1, r2, r1
 8007b02:	f7fd fb59 	bl	80051b8 <_malloc_r>
 8007b06:	4604      	mov	r4, r0
 8007b08:	b1d8      	cbz	r0, 8007b42 <_calloc_r+0x46>
 8007b0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007b0e:	f022 0203 	bic.w	r2, r2, #3
 8007b12:	3a04      	subs	r2, #4
 8007b14:	2a24      	cmp	r2, #36	; 0x24
 8007b16:	d818      	bhi.n	8007b4a <_calloc_r+0x4e>
 8007b18:	2a13      	cmp	r2, #19
 8007b1a:	d914      	bls.n	8007b46 <_calloc_r+0x4a>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2a1b      	cmp	r2, #27
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	6043      	str	r3, [r0, #4]
 8007b24:	d916      	bls.n	8007b54 <_calloc_r+0x58>
 8007b26:	2a24      	cmp	r2, #36	; 0x24
 8007b28:	6083      	str	r3, [r0, #8]
 8007b2a:	60c3      	str	r3, [r0, #12]
 8007b2c:	bf11      	iteee	ne
 8007b2e:	f100 0210 	addne.w	r2, r0, #16
 8007b32:	6103      	streq	r3, [r0, #16]
 8007b34:	6143      	streq	r3, [r0, #20]
 8007b36:	f100 0218 	addeq.w	r2, r0, #24
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	6053      	str	r3, [r2, #4]
 8007b40:	6093      	str	r3, [r2, #8]
 8007b42:	4620      	mov	r0, r4
 8007b44:	bd10      	pop	{r4, pc}
 8007b46:	4602      	mov	r2, r0
 8007b48:	e7f7      	b.n	8007b3a <_calloc_r+0x3e>
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	f7fa f97a 	bl	8001e44 <memset>
 8007b50:	4620      	mov	r0, r4
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	f100 0208 	add.w	r2, r0, #8
 8007b58:	e7ef      	b.n	8007b3a <_calloc_r+0x3e>
 8007b5a:	bf00      	nop

08007b5c <_close_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4c07      	ldr	r4, [pc, #28]	; (8007b7c <_close_r+0x20>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4605      	mov	r5, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	f7f9 f9be 	bl	8000ee8 <_close>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d000      	beq.n	8007b72 <_close_r+0x16>
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0fb      	beq.n	8007b70 <_close_r+0x14>
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000a74 	.word	0x20000a74

08007b80 <_fclose_r>:
 8007b80:	2900      	cmp	r1, #0
 8007b82:	d03d      	beq.n	8007c00 <_fclose_r+0x80>
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4605      	mov	r5, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	b108      	cbz	r0, 8007b90 <_fclose_r+0x10>
 8007b8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007b8e:	b37b      	cbz	r3, 8007bf0 <_fclose_r+0x70>
 8007b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b94:	b90b      	cbnz	r3, 8007b9a <_fclose_r+0x1a>
 8007b96:	2000      	movs	r0, #0
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f7fc fe65 	bl	800486c <__sflush_r>
 8007ba2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	b133      	cbz	r3, 8007bb6 <_fclose_r+0x36>
 8007ba8:	69e1      	ldr	r1, [r4, #28]
 8007baa:	4628      	mov	r0, r5
 8007bac:	4798      	blx	r3
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	bfb8      	it	lt
 8007bb2:	f04f 36ff 	movlt.w	r6, #4294967295
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	061b      	lsls	r3, r3, #24
 8007bba:	d41c      	bmi.n	8007bf6 <_fclose_r+0x76>
 8007bbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007bbe:	b141      	cbz	r1, 8007bd2 <_fclose_r+0x52>
 8007bc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	d002      	beq.n	8007bce <_fclose_r+0x4e>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f7fc ffdf 	bl	8004b8c <_free_r>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6323      	str	r3, [r4, #48]	; 0x30
 8007bd2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007bd4:	b121      	cbz	r1, 8007be0 <_fclose_r+0x60>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f7fc ffd8 	bl	8004b8c <_free_r>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	6463      	str	r3, [r4, #68]	; 0x44
 8007be0:	f7fc ff82 	bl	8004ae8 <__sfp_lock_acquire>
 8007be4:	2300      	movs	r3, #0
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	f7fc ff80 	bl	8004aec <__sfp_lock_release>
 8007bec:	4630      	mov	r0, r6
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	f7fc ff74 	bl	8004adc <__sinit>
 8007bf4:	e7cc      	b.n	8007b90 <_fclose_r+0x10>
 8007bf6:	6921      	ldr	r1, [r4, #16]
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f7fc ffc7 	bl	8004b8c <_free_r>
 8007bfe:	e7dd      	b.n	8007bbc <_fclose_r+0x3c>
 8007c00:	2000      	movs	r0, #0
 8007c02:	4770      	bx	lr

08007c04 <__fputwc>:
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	4614      	mov	r4, r2
 8007c10:	f000 f87e 	bl	8007d10 <__locale_mb_cur_max>
 8007c14:	2801      	cmp	r0, #1
 8007c16:	d033      	beq.n	8007c80 <__fputwc+0x7c>
 8007c18:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007c1c:	464a      	mov	r2, r9
 8007c1e:	a901      	add	r1, sp, #4
 8007c20:	4640      	mov	r0, r8
 8007c22:	f000 f99b 	bl	8007f5c <_wcrtomb_r>
 8007c26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	d021      	beq.n	8007c72 <__fputwc+0x6e>
 8007c2e:	b388      	cbz	r0, 8007c94 <__fputwc+0x90>
 8007c30:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8007c34:	2500      	movs	r5, #0
 8007c36:	e008      	b.n	8007c4a <__fputwc+0x46>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	6022      	str	r2, [r4, #0]
 8007c3e:	701e      	strb	r6, [r3, #0]
 8007c40:	3501      	adds	r5, #1
 8007c42:	4555      	cmp	r5, sl
 8007c44:	d226      	bcs.n	8007c94 <__fputwc+0x90>
 8007c46:	ab01      	add	r3, sp, #4
 8007c48:	5d5e      	ldrb	r6, [r3, r5]
 8007c4a:	68a3      	ldr	r3, [r4, #8]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	60a3      	str	r3, [r4, #8]
 8007c52:	daf1      	bge.n	8007c38 <__fputwc+0x34>
 8007c54:	69a7      	ldr	r7, [r4, #24]
 8007c56:	42bb      	cmp	r3, r7
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	db01      	blt.n	8007c64 <__fputwc+0x60>
 8007c60:	2e0a      	cmp	r6, #10
 8007c62:	d1e9      	bne.n	8007c38 <__fputwc+0x34>
 8007c64:	f000 f924 	bl	8007eb0 <__swbuf_r>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d1e9      	bne.n	8007c40 <__fputwc+0x3c>
 8007c6c:	b002      	add	sp, #8
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	b002      	add	sp, #8
 8007c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c80:	f109 33ff 	add.w	r3, r9, #4294967295
 8007c84:	2bfe      	cmp	r3, #254	; 0xfe
 8007c86:	d8c7      	bhi.n	8007c18 <__fputwc+0x14>
 8007c88:	fa5f f689 	uxtb.w	r6, r9
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	f88d 6004 	strb.w	r6, [sp, #4]
 8007c92:	e7cf      	b.n	8007c34 <__fputwc+0x30>
 8007c94:	4648      	mov	r0, r9
 8007c96:	b002      	add	sp, #8
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007c9c <_fputwc_r>:
 8007c9c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8007ca0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007ca4:	d10b      	bne.n	8007cbe <_fputwc_r+0x22>
 8007ca6:	b410      	push	{r4}
 8007ca8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8007caa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cae:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8007cb2:	6654      	str	r4, [r2, #100]	; 0x64
 8007cb4:	8193      	strh	r3, [r2, #12]
 8007cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cba:	f7ff bfa3 	b.w	8007c04 <__fputwc>
 8007cbe:	f7ff bfa1 	b.w	8007c04 <__fputwc>
 8007cc2:	bf00      	nop

08007cc4 <_fstat_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4c07      	ldr	r4, [pc, #28]	; (8007ce8 <_fstat_r+0x24>)
 8007cca:	4605      	mov	r5, r0
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4618      	mov	r0, r3
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	f7f9 f912 	bl	8000efc <_fstat>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d000      	beq.n	8007cde <_fstat_r+0x1a>
 8007cdc:	bd38      	pop	{r3, r4, r5, pc}
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0fb      	beq.n	8007cdc <_fstat_r+0x18>
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20000a74 	.word	0x20000a74

08007cec <_isatty_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4c07      	ldr	r4, [pc, #28]	; (8007d0c <_isatty_r+0x20>)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	6023      	str	r3, [r4, #0]
 8007cf8:	f7f9 f954 	bl	8000fa4 <_isatty>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d000      	beq.n	8007d02 <_isatty_r+0x16>
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0fb      	beq.n	8007d00 <_isatty_r+0x14>
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20000a74 	.word	0x20000a74

08007d10 <__locale_mb_cur_max>:
 8007d10:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <__locale_mb_cur_max+0x14>)
 8007d12:	4a05      	ldr	r2, [pc, #20]	; (8007d28 <__locale_mb_cur_max+0x18>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf08      	it	eq
 8007d1c:	4613      	moveq	r3, r2
 8007d1e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007d22:	4770      	bx	lr
 8007d24:	20000460 	.word	0x20000460
 8007d28:	20000874 	.word	0x20000874

08007d2c <_lseek_r>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	460d      	mov	r5, r1
 8007d30:	4c08      	ldr	r4, [pc, #32]	; (8007d54 <_lseek_r+0x28>)
 8007d32:	4611      	mov	r1, r2
 8007d34:	4606      	mov	r6, r0
 8007d36:	461a      	mov	r2, r3
 8007d38:	4628      	mov	r0, r5
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	f7f9 f8b7 	bl	8000eb0 <_lseek>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	d000      	beq.n	8007d48 <_lseek_r+0x1c>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0fb      	beq.n	8007d46 <_lseek_r+0x1a>
 8007d4e:	6033      	str	r3, [r6, #0]
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
 8007d52:	bf00      	nop
 8007d54:	20000a74 	.word	0x20000a74

08007d58 <__ascii_mbtowc>:
 8007d58:	b082      	sub	sp, #8
 8007d5a:	b149      	cbz	r1, 8007d70 <__ascii_mbtowc+0x18>
 8007d5c:	b15a      	cbz	r2, 8007d76 <__ascii_mbtowc+0x1e>
 8007d5e:	b16b      	cbz	r3, 8007d7c <__ascii_mbtowc+0x24>
 8007d60:	7813      	ldrb	r3, [r2, #0]
 8007d62:	600b      	str	r3, [r1, #0]
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	1c10      	adds	r0, r2, #0
 8007d68:	bf18      	it	ne
 8007d6a:	2001      	movne	r0, #1
 8007d6c:	b002      	add	sp, #8
 8007d6e:	4770      	bx	lr
 8007d70:	a901      	add	r1, sp, #4
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d1f3      	bne.n	8007d5e <__ascii_mbtowc+0x6>
 8007d76:	4610      	mov	r0, r2
 8007d78:	b002      	add	sp, #8
 8007d7a:	4770      	bx	lr
 8007d7c:	f06f 0001 	mvn.w	r0, #1
 8007d80:	e7f4      	b.n	8007d6c <__ascii_mbtowc+0x14>
 8007d82:	bf00      	nop

08007d84 <_read_r>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	460d      	mov	r5, r1
 8007d88:	4c08      	ldr	r4, [pc, #32]	; (8007dac <_read_r+0x28>)
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4628      	mov	r0, r5
 8007d92:	2300      	movs	r3, #0
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	f7f9 f899 	bl	8000ecc <_read>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d000      	beq.n	8007da0 <_read_r+0x1c>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0fb      	beq.n	8007d9e <_read_r+0x1a>
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	bd70      	pop	{r4, r5, r6, pc}
 8007daa:	bf00      	nop
 8007dac:	20000a74 	.word	0x20000a74

08007db0 <__ssprint_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	6893      	ldr	r3, [r2, #8]
 8007db6:	b083      	sub	sp, #12
 8007db8:	4690      	mov	r8, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d072      	beq.n	8007ea4 <__ssprint_r+0xf4>
 8007dbe:	4683      	mov	fp, r0
 8007dc0:	f04f 0900 	mov.w	r9, #0
 8007dc4:	6816      	ldr	r6, [r2, #0]
 8007dc6:	6808      	ldr	r0, [r1, #0]
 8007dc8:	688b      	ldr	r3, [r1, #8]
 8007dca:	460d      	mov	r5, r1
 8007dcc:	464c      	mov	r4, r9
 8007dce:	2c00      	cmp	r4, #0
 8007dd0:	d045      	beq.n	8007e5e <__ssprint_r+0xae>
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	461f      	mov	r7, r3
 8007dd6:	469a      	mov	sl, r3
 8007dd8:	d346      	bcc.n	8007e68 <__ssprint_r+0xb8>
 8007dda:	89ab      	ldrh	r3, [r5, #12]
 8007ddc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007de0:	d02d      	beq.n	8007e3e <__ssprint_r+0x8e>
 8007de2:	696f      	ldr	r7, [r5, #20]
 8007de4:	6929      	ldr	r1, [r5, #16]
 8007de6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007dea:	ebc1 0a00 	rsb	sl, r1, r0
 8007dee:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8007df2:	1c60      	adds	r0, r4, #1
 8007df4:	107f      	asrs	r7, r7, #1
 8007df6:	4450      	add	r0, sl
 8007df8:	42b8      	cmp	r0, r7
 8007dfa:	463a      	mov	r2, r7
 8007dfc:	bf84      	itt	hi
 8007dfe:	4607      	movhi	r7, r0
 8007e00:	463a      	movhi	r2, r7
 8007e02:	055b      	lsls	r3, r3, #21
 8007e04:	d533      	bpl.n	8007e6e <__ssprint_r+0xbe>
 8007e06:	4611      	mov	r1, r2
 8007e08:	4658      	mov	r0, fp
 8007e0a:	f7fd f9d5 	bl	80051b8 <_malloc_r>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d037      	beq.n	8007e82 <__ssprint_r+0xd2>
 8007e12:	4652      	mov	r2, sl
 8007e14:	6929      	ldr	r1, [r5, #16]
 8007e16:	9001      	str	r0, [sp, #4]
 8007e18:	f7f9 ff7a 	bl	8001d10 <memcpy>
 8007e1c:	89aa      	ldrh	r2, [r5, #12]
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e28:	81aa      	strh	r2, [r5, #12]
 8007e2a:	ebca 0207 	rsb	r2, sl, r7
 8007e2e:	eb03 000a 	add.w	r0, r3, sl
 8007e32:	616f      	str	r7, [r5, #20]
 8007e34:	612b      	str	r3, [r5, #16]
 8007e36:	6028      	str	r0, [r5, #0]
 8007e38:	60aa      	str	r2, [r5, #8]
 8007e3a:	4627      	mov	r7, r4
 8007e3c:	46a2      	mov	sl, r4
 8007e3e:	4652      	mov	r2, sl
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7fd fcc5 	bl	80057d0 <memmove>
 8007e46:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007e4a:	68ab      	ldr	r3, [r5, #8]
 8007e4c:	6828      	ldr	r0, [r5, #0]
 8007e4e:	1bdb      	subs	r3, r3, r7
 8007e50:	4450      	add	r0, sl
 8007e52:	1b14      	subs	r4, r2, r4
 8007e54:	60ab      	str	r3, [r5, #8]
 8007e56:	6028      	str	r0, [r5, #0]
 8007e58:	f8c8 4008 	str.w	r4, [r8, #8]
 8007e5c:	b314      	cbz	r4, 8007ea4 <__ssprint_r+0xf4>
 8007e5e:	f8d6 9000 	ldr.w	r9, [r6]
 8007e62:	6874      	ldr	r4, [r6, #4]
 8007e64:	3608      	adds	r6, #8
 8007e66:	e7b2      	b.n	8007dce <__ssprint_r+0x1e>
 8007e68:	4627      	mov	r7, r4
 8007e6a:	46a2      	mov	sl, r4
 8007e6c:	e7e7      	b.n	8007e3e <__ssprint_r+0x8e>
 8007e6e:	4658      	mov	r0, fp
 8007e70:	f7fe f826 	bl	8005ec0 <_realloc_r>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d1d7      	bne.n	8007e2a <__ssprint_r+0x7a>
 8007e7a:	6929      	ldr	r1, [r5, #16]
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f7fc fe85 	bl	8004b8c <_free_r>
 8007e82:	230c      	movs	r3, #12
 8007e84:	f8cb 3000 	str.w	r3, [fp]
 8007e88:	89ab      	ldrh	r3, [r5, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	81ab      	strh	r3, [r5, #12]
 8007e96:	f8c8 2008 	str.w	r2, [r8, #8]
 8007e9a:	f8c8 2004 	str.w	r2, [r8, #4]
 8007e9e:	b003      	add	sp, #12
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f8c8 0004 	str.w	r0, [r8, #4]
 8007eaa:	b003      	add	sp, #12
 8007eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007eb0 <__swbuf_r>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b110      	cbz	r0, 8007ec0 <__swbuf_r+0x10>
 8007eba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d04a      	beq.n	8007f56 <__swbuf_r+0xa6>
 8007ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ec4:	69a3      	ldr	r3, [r4, #24]
 8007ec6:	60a3      	str	r3, [r4, #8]
 8007ec8:	b291      	uxth	r1, r2
 8007eca:	0708      	lsls	r0, r1, #28
 8007ecc:	d538      	bpl.n	8007f40 <__swbuf_r+0x90>
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d035      	beq.n	8007f40 <__swbuf_r+0x90>
 8007ed4:	0489      	lsls	r1, r1, #18
 8007ed6:	b2ef      	uxtb	r7, r5
 8007ed8:	d515      	bpl.n	8007f06 <__swbuf_r+0x56>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	6961      	ldr	r1, [r4, #20]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	da1c      	bge.n	8007f1e <__swbuf_r+0x6e>
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	68a1      	ldr	r1, [r4, #8]
 8007ee8:	1c50      	adds	r0, r2, #1
 8007eea:	3901      	subs	r1, #1
 8007eec:	60a1      	str	r1, [r4, #8]
 8007eee:	6020      	str	r0, [r4, #0]
 8007ef0:	7015      	strb	r5, [r2, #0]
 8007ef2:	6962      	ldr	r2, [r4, #20]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d01a      	beq.n	8007f2e <__swbuf_r+0x7e>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	07db      	lsls	r3, r3, #31
 8007efc:	d501      	bpl.n	8007f02 <__swbuf_r+0x52>
 8007efe:	2f0a      	cmp	r7, #10
 8007f00:	d015      	beq.n	8007f2e <__swbuf_r+0x7e>
 8007f02:	4638      	mov	r0, r7
 8007f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f06:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f0c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8007f10:	81a2      	strh	r2, [r4, #12]
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	6661      	str	r1, [r4, #100]	; 0x64
 8007f16:	6961      	ldr	r1, [r4, #20]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	428b      	cmp	r3, r1
 8007f1c:	dbe2      	blt.n	8007ee4 <__swbuf_r+0x34>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7fc fd47 	bl	80049b4 <_fflush_r>
 8007f26:	b940      	cbnz	r0, 8007f3a <__swbuf_r+0x8a>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e7db      	b.n	8007ee6 <__swbuf_r+0x36>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7fc fd3f 	bl	80049b4 <_fflush_r>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0e3      	beq.n	8007f02 <__swbuf_r+0x52>
 8007f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f3e:	e7e0      	b.n	8007f02 <__swbuf_r+0x52>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7fb fc84 	bl	8003850 <__swsetup_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d1f6      	bne.n	8007f3a <__swbuf_r+0x8a>
 8007f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	b291      	uxth	r1, r2
 8007f54:	e7be      	b.n	8007ed4 <__swbuf_r+0x24>
 8007f56:	f7fc fdc1 	bl	8004adc <__sinit>
 8007f5a:	e7b1      	b.n	8007ec0 <__swbuf_r+0x10>

08007f5c <_wcrtomb_r>:
 8007f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5e:	4606      	mov	r6, r0
 8007f60:	b085      	sub	sp, #20
 8007f62:	461f      	mov	r7, r3
 8007f64:	b189      	cbz	r1, 8007f8a <_wcrtomb_r+0x2e>
 8007f66:	4c10      	ldr	r4, [pc, #64]	; (8007fa8 <_wcrtomb_r+0x4c>)
 8007f68:	4d10      	ldr	r5, [pc, #64]	; (8007fac <_wcrtomb_r+0x50>)
 8007f6a:	6824      	ldr	r4, [r4, #0]
 8007f6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	bf08      	it	eq
 8007f72:	462c      	moveq	r4, r5
 8007f74:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8007f78:	47a0      	blx	r4
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	d103      	bne.n	8007f86 <_wcrtomb_r+0x2a>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	238a      	movs	r3, #138	; 0x8a
 8007f82:	603a      	str	r2, [r7, #0]
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	b005      	add	sp, #20
 8007f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	4906      	ldr	r1, [pc, #24]	; (8007fa8 <_wcrtomb_r+0x4c>)
 8007f8e:	4a07      	ldr	r2, [pc, #28]	; (8007fac <_wcrtomb_r+0x50>)
 8007f90:	6809      	ldr	r1, [r1, #0]
 8007f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007f94:	2900      	cmp	r1, #0
 8007f96:	bf08      	it	eq
 8007f98:	4611      	moveq	r1, r2
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8007fa0:	a901      	add	r1, sp, #4
 8007fa2:	47a0      	blx	r4
 8007fa4:	e7e9      	b.n	8007f7a <_wcrtomb_r+0x1e>
 8007fa6:	bf00      	nop
 8007fa8:	20000460 	.word	0x20000460
 8007fac:	20000874 	.word	0x20000874

08007fb0 <__ascii_wctomb>:
 8007fb0:	b121      	cbz	r1, 8007fbc <__ascii_wctomb+0xc>
 8007fb2:	2aff      	cmp	r2, #255	; 0xff
 8007fb4:	d804      	bhi.n	8007fc0 <__ascii_wctomb+0x10>
 8007fb6:	700a      	strb	r2, [r1, #0]
 8007fb8:	2001      	movs	r0, #1
 8007fba:	4770      	bx	lr
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4770      	bx	lr
 8007fc0:	238a      	movs	r3, #138	; 0x8a
 8007fc2:	6003      	str	r3, [r0, #0]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop

08007fcc <__aeabi_drsub>:
 8007fcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007fd0:	e002      	b.n	8007fd8 <__adddf3>
 8007fd2:	bf00      	nop

08007fd4 <__aeabi_dsub>:
 8007fd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007fd8 <__adddf3>:
 8007fd8:	b530      	push	{r4, r5, lr}
 8007fda:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007fde:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007fe2:	ea94 0f05 	teq	r4, r5
 8007fe6:	bf08      	it	eq
 8007fe8:	ea90 0f02 	teqeq	r0, r2
 8007fec:	bf1f      	itttt	ne
 8007fee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007ff2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007ff6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ffa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ffe:	f000 80e2 	beq.w	80081c6 <__adddf3+0x1ee>
 8008002:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008006:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800800a:	bfb8      	it	lt
 800800c:	426d      	neglt	r5, r5
 800800e:	dd0c      	ble.n	800802a <__adddf3+0x52>
 8008010:	442c      	add	r4, r5
 8008012:	ea80 0202 	eor.w	r2, r0, r2
 8008016:	ea81 0303 	eor.w	r3, r1, r3
 800801a:	ea82 0000 	eor.w	r0, r2, r0
 800801e:	ea83 0101 	eor.w	r1, r3, r1
 8008022:	ea80 0202 	eor.w	r2, r0, r2
 8008026:	ea81 0303 	eor.w	r3, r1, r3
 800802a:	2d36      	cmp	r5, #54	; 0x36
 800802c:	bf88      	it	hi
 800802e:	bd30      	pophi	{r4, r5, pc}
 8008030:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008034:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008038:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800803c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008040:	d002      	beq.n	8008048 <__adddf3+0x70>
 8008042:	4240      	negs	r0, r0
 8008044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008048:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800804c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008050:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008054:	d002      	beq.n	800805c <__adddf3+0x84>
 8008056:	4252      	negs	r2, r2
 8008058:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800805c:	ea94 0f05 	teq	r4, r5
 8008060:	f000 80a7 	beq.w	80081b2 <__adddf3+0x1da>
 8008064:	f1a4 0401 	sub.w	r4, r4, #1
 8008068:	f1d5 0e20 	rsbs	lr, r5, #32
 800806c:	db0d      	blt.n	800808a <__adddf3+0xb2>
 800806e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008072:	fa22 f205 	lsr.w	r2, r2, r5
 8008076:	1880      	adds	r0, r0, r2
 8008078:	f141 0100 	adc.w	r1, r1, #0
 800807c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008080:	1880      	adds	r0, r0, r2
 8008082:	fa43 f305 	asr.w	r3, r3, r5
 8008086:	4159      	adcs	r1, r3
 8008088:	e00e      	b.n	80080a8 <__adddf3+0xd0>
 800808a:	f1a5 0520 	sub.w	r5, r5, #32
 800808e:	f10e 0e20 	add.w	lr, lr, #32
 8008092:	2a01      	cmp	r2, #1
 8008094:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008098:	bf28      	it	cs
 800809a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800809e:	fa43 f305 	asr.w	r3, r3, r5
 80080a2:	18c0      	adds	r0, r0, r3
 80080a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80080a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80080ac:	d507      	bpl.n	80080be <__adddf3+0xe6>
 80080ae:	f04f 0e00 	mov.w	lr, #0
 80080b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80080b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80080ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80080be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80080c2:	d31b      	bcc.n	80080fc <__adddf3+0x124>
 80080c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80080c8:	d30c      	bcc.n	80080e4 <__adddf3+0x10c>
 80080ca:	0849      	lsrs	r1, r1, #1
 80080cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80080d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80080d4:	f104 0401 	add.w	r4, r4, #1
 80080d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80080dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80080e0:	f080 809a 	bcs.w	8008218 <__adddf3+0x240>
 80080e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80080e8:	bf08      	it	eq
 80080ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80080ee:	f150 0000 	adcs.w	r0, r0, #0
 80080f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80080f6:	ea41 0105 	orr.w	r1, r1, r5
 80080fa:	bd30      	pop	{r4, r5, pc}
 80080fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008100:	4140      	adcs	r0, r0
 8008102:	eb41 0101 	adc.w	r1, r1, r1
 8008106:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800810a:	f1a4 0401 	sub.w	r4, r4, #1
 800810e:	d1e9      	bne.n	80080e4 <__adddf3+0x10c>
 8008110:	f091 0f00 	teq	r1, #0
 8008114:	bf04      	itt	eq
 8008116:	4601      	moveq	r1, r0
 8008118:	2000      	moveq	r0, #0
 800811a:	fab1 f381 	clz	r3, r1
 800811e:	bf08      	it	eq
 8008120:	3320      	addeq	r3, #32
 8008122:	f1a3 030b 	sub.w	r3, r3, #11
 8008126:	f1b3 0220 	subs.w	r2, r3, #32
 800812a:	da0c      	bge.n	8008146 <__adddf3+0x16e>
 800812c:	320c      	adds	r2, #12
 800812e:	dd08      	ble.n	8008142 <__adddf3+0x16a>
 8008130:	f102 0c14 	add.w	ip, r2, #20
 8008134:	f1c2 020c 	rsb	r2, r2, #12
 8008138:	fa01 f00c 	lsl.w	r0, r1, ip
 800813c:	fa21 f102 	lsr.w	r1, r1, r2
 8008140:	e00c      	b.n	800815c <__adddf3+0x184>
 8008142:	f102 0214 	add.w	r2, r2, #20
 8008146:	bfd8      	it	le
 8008148:	f1c2 0c20 	rsble	ip, r2, #32
 800814c:	fa01 f102 	lsl.w	r1, r1, r2
 8008150:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008154:	bfdc      	itt	le
 8008156:	ea41 010c 	orrle.w	r1, r1, ip
 800815a:	4090      	lslle	r0, r2
 800815c:	1ae4      	subs	r4, r4, r3
 800815e:	bfa2      	ittt	ge
 8008160:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008164:	4329      	orrge	r1, r5
 8008166:	bd30      	popge	{r4, r5, pc}
 8008168:	ea6f 0404 	mvn.w	r4, r4
 800816c:	3c1f      	subs	r4, #31
 800816e:	da1c      	bge.n	80081aa <__adddf3+0x1d2>
 8008170:	340c      	adds	r4, #12
 8008172:	dc0e      	bgt.n	8008192 <__adddf3+0x1ba>
 8008174:	f104 0414 	add.w	r4, r4, #20
 8008178:	f1c4 0220 	rsb	r2, r4, #32
 800817c:	fa20 f004 	lsr.w	r0, r0, r4
 8008180:	fa01 f302 	lsl.w	r3, r1, r2
 8008184:	ea40 0003 	orr.w	r0, r0, r3
 8008188:	fa21 f304 	lsr.w	r3, r1, r4
 800818c:	ea45 0103 	orr.w	r1, r5, r3
 8008190:	bd30      	pop	{r4, r5, pc}
 8008192:	f1c4 040c 	rsb	r4, r4, #12
 8008196:	f1c4 0220 	rsb	r2, r4, #32
 800819a:	fa20 f002 	lsr.w	r0, r0, r2
 800819e:	fa01 f304 	lsl.w	r3, r1, r4
 80081a2:	ea40 0003 	orr.w	r0, r0, r3
 80081a6:	4629      	mov	r1, r5
 80081a8:	bd30      	pop	{r4, r5, pc}
 80081aa:	fa21 f004 	lsr.w	r0, r1, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	bd30      	pop	{r4, r5, pc}
 80081b2:	f094 0f00 	teq	r4, #0
 80081b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80081ba:	bf06      	itte	eq
 80081bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80081c0:	3401      	addeq	r4, #1
 80081c2:	3d01      	subne	r5, #1
 80081c4:	e74e      	b.n	8008064 <__adddf3+0x8c>
 80081c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80081ca:	bf18      	it	ne
 80081cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80081d0:	d029      	beq.n	8008226 <__adddf3+0x24e>
 80081d2:	ea94 0f05 	teq	r4, r5
 80081d6:	bf08      	it	eq
 80081d8:	ea90 0f02 	teqeq	r0, r2
 80081dc:	d005      	beq.n	80081ea <__adddf3+0x212>
 80081de:	ea54 0c00 	orrs.w	ip, r4, r0
 80081e2:	bf04      	itt	eq
 80081e4:	4619      	moveq	r1, r3
 80081e6:	4610      	moveq	r0, r2
 80081e8:	bd30      	pop	{r4, r5, pc}
 80081ea:	ea91 0f03 	teq	r1, r3
 80081ee:	bf1e      	ittt	ne
 80081f0:	2100      	movne	r1, #0
 80081f2:	2000      	movne	r0, #0
 80081f4:	bd30      	popne	{r4, r5, pc}
 80081f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80081fa:	d105      	bne.n	8008208 <__adddf3+0x230>
 80081fc:	0040      	lsls	r0, r0, #1
 80081fe:	4149      	adcs	r1, r1
 8008200:	bf28      	it	cs
 8008202:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008206:	bd30      	pop	{r4, r5, pc}
 8008208:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800820c:	bf3c      	itt	cc
 800820e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008212:	bd30      	popcc	{r4, r5, pc}
 8008214:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008218:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800821c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008220:	f04f 0000 	mov.w	r0, #0
 8008224:	bd30      	pop	{r4, r5, pc}
 8008226:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800822a:	bf1a      	itte	ne
 800822c:	4619      	movne	r1, r3
 800822e:	4610      	movne	r0, r2
 8008230:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008234:	bf1c      	itt	ne
 8008236:	460b      	movne	r3, r1
 8008238:	4602      	movne	r2, r0
 800823a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800823e:	bf06      	itte	eq
 8008240:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008244:	ea91 0f03 	teqeq	r1, r3
 8008248:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800824c:	bd30      	pop	{r4, r5, pc}
 800824e:	bf00      	nop

08008250 <__aeabi_ui2d>:
 8008250:	f090 0f00 	teq	r0, #0
 8008254:	bf04      	itt	eq
 8008256:	2100      	moveq	r1, #0
 8008258:	4770      	bxeq	lr
 800825a:	b530      	push	{r4, r5, lr}
 800825c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008260:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008264:	f04f 0500 	mov.w	r5, #0
 8008268:	f04f 0100 	mov.w	r1, #0
 800826c:	e750      	b.n	8008110 <__adddf3+0x138>
 800826e:	bf00      	nop

08008270 <__aeabi_i2d>:
 8008270:	f090 0f00 	teq	r0, #0
 8008274:	bf04      	itt	eq
 8008276:	2100      	moveq	r1, #0
 8008278:	4770      	bxeq	lr
 800827a:	b530      	push	{r4, r5, lr}
 800827c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008280:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008284:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008288:	bf48      	it	mi
 800828a:	4240      	negmi	r0, r0
 800828c:	f04f 0100 	mov.w	r1, #0
 8008290:	e73e      	b.n	8008110 <__adddf3+0x138>
 8008292:	bf00      	nop

08008294 <__aeabi_f2d>:
 8008294:	0042      	lsls	r2, r0, #1
 8008296:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800829a:	ea4f 0131 	mov.w	r1, r1, rrx
 800829e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80082a2:	bf1f      	itttt	ne
 80082a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80082a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80082ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80082b0:	4770      	bxne	lr
 80082b2:	f092 0f00 	teq	r2, #0
 80082b6:	bf14      	ite	ne
 80082b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80082bc:	4770      	bxeq	lr
 80082be:	b530      	push	{r4, r5, lr}
 80082c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80082c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80082c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80082cc:	e720      	b.n	8008110 <__adddf3+0x138>
 80082ce:	bf00      	nop

080082d0 <__aeabi_ul2d>:
 80082d0:	ea50 0201 	orrs.w	r2, r0, r1
 80082d4:	bf08      	it	eq
 80082d6:	4770      	bxeq	lr
 80082d8:	b530      	push	{r4, r5, lr}
 80082da:	f04f 0500 	mov.w	r5, #0
 80082de:	e00a      	b.n	80082f6 <__aeabi_l2d+0x16>

080082e0 <__aeabi_l2d>:
 80082e0:	ea50 0201 	orrs.w	r2, r0, r1
 80082e4:	bf08      	it	eq
 80082e6:	4770      	bxeq	lr
 80082e8:	b530      	push	{r4, r5, lr}
 80082ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80082ee:	d502      	bpl.n	80082f6 <__aeabi_l2d+0x16>
 80082f0:	4240      	negs	r0, r0
 80082f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80082fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80082fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008302:	f43f aedc 	beq.w	80080be <__adddf3+0xe6>
 8008306:	f04f 0203 	mov.w	r2, #3
 800830a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800830e:	bf18      	it	ne
 8008310:	3203      	addne	r2, #3
 8008312:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008316:	bf18      	it	ne
 8008318:	3203      	addne	r2, #3
 800831a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800831e:	f1c2 0320 	rsb	r3, r2, #32
 8008322:	fa00 fc03 	lsl.w	ip, r0, r3
 8008326:	fa20 f002 	lsr.w	r0, r0, r2
 800832a:	fa01 fe03 	lsl.w	lr, r1, r3
 800832e:	ea40 000e 	orr.w	r0, r0, lr
 8008332:	fa21 f102 	lsr.w	r1, r1, r2
 8008336:	4414      	add	r4, r2
 8008338:	e6c1      	b.n	80080be <__adddf3+0xe6>
 800833a:	bf00      	nop

0800833c <__aeabi_dmul>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008342:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008346:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800834a:	bf1d      	ittte	ne
 800834c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008350:	ea94 0f0c 	teqne	r4, ip
 8008354:	ea95 0f0c 	teqne	r5, ip
 8008358:	f000 f8de 	bleq	8008518 <__aeabi_dmul+0x1dc>
 800835c:	442c      	add	r4, r5
 800835e:	ea81 0603 	eor.w	r6, r1, r3
 8008362:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008366:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800836a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800836e:	bf18      	it	ne
 8008370:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800837c:	d038      	beq.n	80083f0 <__aeabi_dmul+0xb4>
 800837e:	fba0 ce02 	umull	ip, lr, r0, r2
 8008382:	f04f 0500 	mov.w	r5, #0
 8008386:	fbe1 e502 	umlal	lr, r5, r1, r2
 800838a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800838e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008392:	f04f 0600 	mov.w	r6, #0
 8008396:	fbe1 5603 	umlal	r5, r6, r1, r3
 800839a:	f09c 0f00 	teq	ip, #0
 800839e:	bf18      	it	ne
 80083a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80083a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80083a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80083ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80083b0:	d204      	bcs.n	80083bc <__aeabi_dmul+0x80>
 80083b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80083b6:	416d      	adcs	r5, r5
 80083b8:	eb46 0606 	adc.w	r6, r6, r6
 80083bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80083c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80083c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80083c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80083cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80083d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80083d4:	bf88      	it	hi
 80083d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80083da:	d81e      	bhi.n	800841a <__aeabi_dmul+0xde>
 80083dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80083e0:	bf08      	it	eq
 80083e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80083e6:	f150 0000 	adcs.w	r0, r0, #0
 80083ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80083f4:	ea46 0101 	orr.w	r1, r6, r1
 80083f8:	ea40 0002 	orr.w	r0, r0, r2
 80083fc:	ea81 0103 	eor.w	r1, r1, r3
 8008400:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008404:	bfc2      	ittt	gt
 8008406:	ebd4 050c 	rsbsgt	r5, r4, ip
 800840a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800840e:	bd70      	popgt	{r4, r5, r6, pc}
 8008410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008414:	f04f 0e00 	mov.w	lr, #0
 8008418:	3c01      	subs	r4, #1
 800841a:	f300 80ab 	bgt.w	8008574 <__aeabi_dmul+0x238>
 800841e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008422:	bfde      	ittt	le
 8008424:	2000      	movle	r0, #0
 8008426:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800842a:	bd70      	pople	{r4, r5, r6, pc}
 800842c:	f1c4 0400 	rsb	r4, r4, #0
 8008430:	3c20      	subs	r4, #32
 8008432:	da35      	bge.n	80084a0 <__aeabi_dmul+0x164>
 8008434:	340c      	adds	r4, #12
 8008436:	dc1b      	bgt.n	8008470 <__aeabi_dmul+0x134>
 8008438:	f104 0414 	add.w	r4, r4, #20
 800843c:	f1c4 0520 	rsb	r5, r4, #32
 8008440:	fa00 f305 	lsl.w	r3, r0, r5
 8008444:	fa20 f004 	lsr.w	r0, r0, r4
 8008448:	fa01 f205 	lsl.w	r2, r1, r5
 800844c:	ea40 0002 	orr.w	r0, r0, r2
 8008450:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008458:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800845c:	fa21 f604 	lsr.w	r6, r1, r4
 8008460:	eb42 0106 	adc.w	r1, r2, r6
 8008464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008468:	bf08      	it	eq
 800846a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	f1c4 040c 	rsb	r4, r4, #12
 8008474:	f1c4 0520 	rsb	r5, r4, #32
 8008478:	fa00 f304 	lsl.w	r3, r0, r4
 800847c:	fa20 f005 	lsr.w	r0, r0, r5
 8008480:	fa01 f204 	lsl.w	r2, r1, r4
 8008484:	ea40 0002 	orr.w	r0, r0, r2
 8008488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800848c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008490:	f141 0100 	adc.w	r1, r1, #0
 8008494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008498:	bf08      	it	eq
 800849a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f1c4 0520 	rsb	r5, r4, #32
 80084a4:	fa00 f205 	lsl.w	r2, r0, r5
 80084a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80084ac:	fa20 f304 	lsr.w	r3, r0, r4
 80084b0:	fa01 f205 	lsl.w	r2, r1, r5
 80084b4:	ea43 0302 	orr.w	r3, r3, r2
 80084b8:	fa21 f004 	lsr.w	r0, r1, r4
 80084bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80084c0:	fa21 f204 	lsr.w	r2, r1, r4
 80084c4:	ea20 0002 	bic.w	r0, r0, r2
 80084c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80084cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80084d0:	bf08      	it	eq
 80084d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	f094 0f00 	teq	r4, #0
 80084dc:	d10f      	bne.n	80084fe <__aeabi_dmul+0x1c2>
 80084de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80084e2:	0040      	lsls	r0, r0, #1
 80084e4:	eb41 0101 	adc.w	r1, r1, r1
 80084e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80084ec:	bf08      	it	eq
 80084ee:	3c01      	subeq	r4, #1
 80084f0:	d0f7      	beq.n	80084e2 <__aeabi_dmul+0x1a6>
 80084f2:	ea41 0106 	orr.w	r1, r1, r6
 80084f6:	f095 0f00 	teq	r5, #0
 80084fa:	bf18      	it	ne
 80084fc:	4770      	bxne	lr
 80084fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008502:	0052      	lsls	r2, r2, #1
 8008504:	eb43 0303 	adc.w	r3, r3, r3
 8008508:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800850c:	bf08      	it	eq
 800850e:	3d01      	subeq	r5, #1
 8008510:	d0f7      	beq.n	8008502 <__aeabi_dmul+0x1c6>
 8008512:	ea43 0306 	orr.w	r3, r3, r6
 8008516:	4770      	bx	lr
 8008518:	ea94 0f0c 	teq	r4, ip
 800851c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008520:	bf18      	it	ne
 8008522:	ea95 0f0c 	teqne	r5, ip
 8008526:	d00c      	beq.n	8008542 <__aeabi_dmul+0x206>
 8008528:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800852c:	bf18      	it	ne
 800852e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008532:	d1d1      	bne.n	80084d8 <__aeabi_dmul+0x19c>
 8008534:	ea81 0103 	eor.w	r1, r1, r3
 8008538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800853c:	f04f 0000 	mov.w	r0, #0
 8008540:	bd70      	pop	{r4, r5, r6, pc}
 8008542:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008546:	bf06      	itte	eq
 8008548:	4610      	moveq	r0, r2
 800854a:	4619      	moveq	r1, r3
 800854c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008550:	d019      	beq.n	8008586 <__aeabi_dmul+0x24a>
 8008552:	ea94 0f0c 	teq	r4, ip
 8008556:	d102      	bne.n	800855e <__aeabi_dmul+0x222>
 8008558:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800855c:	d113      	bne.n	8008586 <__aeabi_dmul+0x24a>
 800855e:	ea95 0f0c 	teq	r5, ip
 8008562:	d105      	bne.n	8008570 <__aeabi_dmul+0x234>
 8008564:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008568:	bf1c      	itt	ne
 800856a:	4610      	movne	r0, r2
 800856c:	4619      	movne	r1, r3
 800856e:	d10a      	bne.n	8008586 <__aeabi_dmul+0x24a>
 8008570:	ea81 0103 	eor.w	r1, r1, r3
 8008574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008578:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800857c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008580:	f04f 0000 	mov.w	r0, #0
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800858a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <__aeabi_ddiv>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800859a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800859e:	bf1d      	ittte	ne
 80085a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80085a4:	ea94 0f0c 	teqne	r4, ip
 80085a8:	ea95 0f0c 	teqne	r5, ip
 80085ac:	f000 f8a7 	bleq	80086fe <__aeabi_ddiv+0x16e>
 80085b0:	eba4 0405 	sub.w	r4, r4, r5
 80085b4:	ea81 0e03 	eor.w	lr, r1, r3
 80085b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80085bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80085c0:	f000 8088 	beq.w	80086d4 <__aeabi_ddiv+0x144>
 80085c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80085c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80085cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80085d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80085d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80085d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80085dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80085e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80085e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80085e8:	429d      	cmp	r5, r3
 80085ea:	bf08      	it	eq
 80085ec:	4296      	cmpeq	r6, r2
 80085ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80085f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80085f6:	d202      	bcs.n	80085fe <__aeabi_ddiv+0x6e>
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80085fe:	1ab6      	subs	r6, r6, r2
 8008600:	eb65 0503 	sbc.w	r5, r5, r3
 8008604:	085b      	lsrs	r3, r3, #1
 8008606:	ea4f 0232 	mov.w	r2, r2, rrx
 800860a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800860e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008612:	ebb6 0e02 	subs.w	lr, r6, r2
 8008616:	eb75 0e03 	sbcs.w	lr, r5, r3
 800861a:	bf22      	ittt	cs
 800861c:	1ab6      	subcs	r6, r6, r2
 800861e:	4675      	movcs	r5, lr
 8008620:	ea40 000c 	orrcs.w	r0, r0, ip
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	ea4f 0232 	mov.w	r2, r2, rrx
 800862a:	ebb6 0e02 	subs.w	lr, r6, r2
 800862e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008632:	bf22      	ittt	cs
 8008634:	1ab6      	subcs	r6, r6, r2
 8008636:	4675      	movcs	r5, lr
 8008638:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800863c:	085b      	lsrs	r3, r3, #1
 800863e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008642:	ebb6 0e02 	subs.w	lr, r6, r2
 8008646:	eb75 0e03 	sbcs.w	lr, r5, r3
 800864a:	bf22      	ittt	cs
 800864c:	1ab6      	subcs	r6, r6, r2
 800864e:	4675      	movcs	r5, lr
 8008650:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	ea4f 0232 	mov.w	r2, r2, rrx
 800865a:	ebb6 0e02 	subs.w	lr, r6, r2
 800865e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008662:	bf22      	ittt	cs
 8008664:	1ab6      	subcs	r6, r6, r2
 8008666:	4675      	movcs	r5, lr
 8008668:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800866c:	ea55 0e06 	orrs.w	lr, r5, r6
 8008670:	d018      	beq.n	80086a4 <__aeabi_ddiv+0x114>
 8008672:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008676:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800867a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800867e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008682:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008686:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800868a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800868e:	d1c0      	bne.n	8008612 <__aeabi_ddiv+0x82>
 8008690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008694:	d10b      	bne.n	80086ae <__aeabi_ddiv+0x11e>
 8008696:	ea41 0100 	orr.w	r1, r1, r0
 800869a:	f04f 0000 	mov.w	r0, #0
 800869e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80086a2:	e7b6      	b.n	8008612 <__aeabi_ddiv+0x82>
 80086a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80086a8:	bf04      	itt	eq
 80086aa:	4301      	orreq	r1, r0
 80086ac:	2000      	moveq	r0, #0
 80086ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80086b2:	bf88      	it	hi
 80086b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80086b8:	f63f aeaf 	bhi.w	800841a <__aeabi_dmul+0xde>
 80086bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80086c0:	bf04      	itt	eq
 80086c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80086c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80086ca:	f150 0000 	adcs.w	r0, r0, #0
 80086ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80086d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80086dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80086e0:	bfc2      	ittt	gt
 80086e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80086e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80086ea:	bd70      	popgt	{r4, r5, r6, pc}
 80086ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086f0:	f04f 0e00 	mov.w	lr, #0
 80086f4:	3c01      	subs	r4, #1
 80086f6:	e690      	b.n	800841a <__aeabi_dmul+0xde>
 80086f8:	ea45 0e06 	orr.w	lr, r5, r6
 80086fc:	e68d      	b.n	800841a <__aeabi_dmul+0xde>
 80086fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008702:	ea94 0f0c 	teq	r4, ip
 8008706:	bf08      	it	eq
 8008708:	ea95 0f0c 	teqeq	r5, ip
 800870c:	f43f af3b 	beq.w	8008586 <__aeabi_dmul+0x24a>
 8008710:	ea94 0f0c 	teq	r4, ip
 8008714:	d10a      	bne.n	800872c <__aeabi_ddiv+0x19c>
 8008716:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800871a:	f47f af34 	bne.w	8008586 <__aeabi_dmul+0x24a>
 800871e:	ea95 0f0c 	teq	r5, ip
 8008722:	f47f af25 	bne.w	8008570 <__aeabi_dmul+0x234>
 8008726:	4610      	mov	r0, r2
 8008728:	4619      	mov	r1, r3
 800872a:	e72c      	b.n	8008586 <__aeabi_dmul+0x24a>
 800872c:	ea95 0f0c 	teq	r5, ip
 8008730:	d106      	bne.n	8008740 <__aeabi_ddiv+0x1b0>
 8008732:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008736:	f43f aefd 	beq.w	8008534 <__aeabi_dmul+0x1f8>
 800873a:	4610      	mov	r0, r2
 800873c:	4619      	mov	r1, r3
 800873e:	e722      	b.n	8008586 <__aeabi_dmul+0x24a>
 8008740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008744:	bf18      	it	ne
 8008746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800874a:	f47f aec5 	bne.w	80084d8 <__aeabi_dmul+0x19c>
 800874e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008752:	f47f af0d 	bne.w	8008570 <__aeabi_dmul+0x234>
 8008756:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800875a:	f47f aeeb 	bne.w	8008534 <__aeabi_dmul+0x1f8>
 800875e:	e712      	b.n	8008586 <__aeabi_dmul+0x24a>

08008760 <__gedf2>:
 8008760:	f04f 3cff 	mov.w	ip, #4294967295
 8008764:	e006      	b.n	8008774 <__cmpdf2+0x4>
 8008766:	bf00      	nop

08008768 <__ledf2>:
 8008768:	f04f 0c01 	mov.w	ip, #1
 800876c:	e002      	b.n	8008774 <__cmpdf2+0x4>
 800876e:	bf00      	nop

08008770 <__cmpdf2>:
 8008770:	f04f 0c01 	mov.w	ip, #1
 8008774:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008778:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800877c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008780:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008784:	bf18      	it	ne
 8008786:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800878a:	d01b      	beq.n	80087c4 <__cmpdf2+0x54>
 800878c:	b001      	add	sp, #4
 800878e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008792:	bf0c      	ite	eq
 8008794:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008798:	ea91 0f03 	teqne	r1, r3
 800879c:	bf02      	ittt	eq
 800879e:	ea90 0f02 	teqeq	r0, r2
 80087a2:	2000      	moveq	r0, #0
 80087a4:	4770      	bxeq	lr
 80087a6:	f110 0f00 	cmn.w	r0, #0
 80087aa:	ea91 0f03 	teq	r1, r3
 80087ae:	bf58      	it	pl
 80087b0:	4299      	cmppl	r1, r3
 80087b2:	bf08      	it	eq
 80087b4:	4290      	cmpeq	r0, r2
 80087b6:	bf2c      	ite	cs
 80087b8:	17d8      	asrcs	r0, r3, #31
 80087ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80087be:	f040 0001 	orr.w	r0, r0, #1
 80087c2:	4770      	bx	lr
 80087c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80087c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80087cc:	d102      	bne.n	80087d4 <__cmpdf2+0x64>
 80087ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80087d2:	d107      	bne.n	80087e4 <__cmpdf2+0x74>
 80087d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80087d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80087dc:	d1d6      	bne.n	800878c <__cmpdf2+0x1c>
 80087de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80087e2:	d0d3      	beq.n	800878c <__cmpdf2+0x1c>
 80087e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop

080087ec <__aeabi_cdrcmple>:
 80087ec:	4684      	mov	ip, r0
 80087ee:	4610      	mov	r0, r2
 80087f0:	4662      	mov	r2, ip
 80087f2:	468c      	mov	ip, r1
 80087f4:	4619      	mov	r1, r3
 80087f6:	4663      	mov	r3, ip
 80087f8:	e000      	b.n	80087fc <__aeabi_cdcmpeq>
 80087fa:	bf00      	nop

080087fc <__aeabi_cdcmpeq>:
 80087fc:	b501      	push	{r0, lr}
 80087fe:	f7ff ffb7 	bl	8008770 <__cmpdf2>
 8008802:	2800      	cmp	r0, #0
 8008804:	bf48      	it	mi
 8008806:	f110 0f00 	cmnmi.w	r0, #0
 800880a:	bd01      	pop	{r0, pc}

0800880c <__aeabi_dcmpeq>:
 800880c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008810:	f7ff fff4 	bl	80087fc <__aeabi_cdcmpeq>
 8008814:	bf0c      	ite	eq
 8008816:	2001      	moveq	r0, #1
 8008818:	2000      	movne	r0, #0
 800881a:	f85d fb08 	ldr.w	pc, [sp], #8
 800881e:	bf00      	nop

08008820 <__aeabi_dcmplt>:
 8008820:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008824:	f7ff ffea 	bl	80087fc <__aeabi_cdcmpeq>
 8008828:	bf34      	ite	cc
 800882a:	2001      	movcc	r0, #1
 800882c:	2000      	movcs	r0, #0
 800882e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008832:	bf00      	nop

08008834 <__aeabi_dcmple>:
 8008834:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008838:	f7ff ffe0 	bl	80087fc <__aeabi_cdcmpeq>
 800883c:	bf94      	ite	ls
 800883e:	2001      	movls	r0, #1
 8008840:	2000      	movhi	r0, #0
 8008842:	f85d fb08 	ldr.w	pc, [sp], #8
 8008846:	bf00      	nop

08008848 <__aeabi_dcmpge>:
 8008848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800884c:	f7ff ffce 	bl	80087ec <__aeabi_cdrcmple>
 8008850:	bf94      	ite	ls
 8008852:	2001      	movls	r0, #1
 8008854:	2000      	movhi	r0, #0
 8008856:	f85d fb08 	ldr.w	pc, [sp], #8
 800885a:	bf00      	nop

0800885c <__aeabi_dcmpgt>:
 800885c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008860:	f7ff ffc4 	bl	80087ec <__aeabi_cdrcmple>
 8008864:	bf34      	ite	cc
 8008866:	2001      	movcc	r0, #1
 8008868:	2000      	movcs	r0, #0
 800886a:	f85d fb08 	ldr.w	pc, [sp], #8
 800886e:	bf00      	nop

08008870 <__aeabi_dcmpun>:
 8008870:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008878:	d102      	bne.n	8008880 <__aeabi_dcmpun+0x10>
 800887a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800887e:	d10a      	bne.n	8008896 <__aeabi_dcmpun+0x26>
 8008880:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008884:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008888:	d102      	bne.n	8008890 <__aeabi_dcmpun+0x20>
 800888a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800888e:	d102      	bne.n	8008896 <__aeabi_dcmpun+0x26>
 8008890:	f04f 0000 	mov.w	r0, #0
 8008894:	4770      	bx	lr
 8008896:	f04f 0001 	mov.w	r0, #1
 800889a:	4770      	bx	lr

0800889c <__aeabi_d2iz>:
 800889c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80088a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80088a4:	d215      	bcs.n	80088d2 <__aeabi_d2iz+0x36>
 80088a6:	d511      	bpl.n	80088cc <__aeabi_d2iz+0x30>
 80088a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80088ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80088b0:	d912      	bls.n	80088d8 <__aeabi_d2iz+0x3c>
 80088b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80088b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80088be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80088c2:	fa23 f002 	lsr.w	r0, r3, r2
 80088c6:	bf18      	it	ne
 80088c8:	4240      	negne	r0, r0
 80088ca:	4770      	bx	lr
 80088cc:	f04f 0000 	mov.w	r0, #0
 80088d0:	4770      	bx	lr
 80088d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80088d6:	d105      	bne.n	80088e4 <__aeabi_d2iz+0x48>
 80088d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80088dc:	bf08      	it	eq
 80088de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80088e2:	4770      	bx	lr
 80088e4:	f04f 0000 	mov.w	r0, #0
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop

080088ec <__aeabi_uldivmod>:
 80088ec:	b953      	cbnz	r3, 8008904 <__aeabi_uldivmod+0x18>
 80088ee:	b94a      	cbnz	r2, 8008904 <__aeabi_uldivmod+0x18>
 80088f0:	2900      	cmp	r1, #0
 80088f2:	bf08      	it	eq
 80088f4:	2800      	cmpeq	r0, #0
 80088f6:	bf1c      	itt	ne
 80088f8:	f04f 31ff 	movne.w	r1, #4294967295
 80088fc:	f04f 30ff 	movne.w	r0, #4294967295
 8008900:	f000 b97e 	b.w	8008c00 <__aeabi_idiv0>
 8008904:	f1ad 0c08 	sub.w	ip, sp, #8
 8008908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800890c:	f000 f806 	bl	800891c <__udivmoddi4>
 8008910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008918:	b004      	add	sp, #16
 800891a:	4770      	bx	lr

0800891c <__udivmoddi4>:
 800891c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	468c      	mov	ip, r1
 8008922:	460e      	mov	r6, r1
 8008924:	4604      	mov	r4, r0
 8008926:	9d08      	ldr	r5, [sp, #32]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d150      	bne.n	80089ce <__udivmoddi4+0xb2>
 800892c:	428a      	cmp	r2, r1
 800892e:	4617      	mov	r7, r2
 8008930:	d96c      	bls.n	8008a0c <__udivmoddi4+0xf0>
 8008932:	fab2 fe82 	clz	lr, r2
 8008936:	f1be 0f00 	cmp.w	lr, #0
 800893a:	d00b      	beq.n	8008954 <__udivmoddi4+0x38>
 800893c:	f1ce 0420 	rsb	r4, lr, #32
 8008940:	fa20 f404 	lsr.w	r4, r0, r4
 8008944:	fa01 f60e 	lsl.w	r6, r1, lr
 8008948:	ea44 0c06 	orr.w	ip, r4, r6
 800894c:	fa02 f70e 	lsl.w	r7, r2, lr
 8008950:	fa00 f40e 	lsl.w	r4, r0, lr
 8008954:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008958:	0c22      	lsrs	r2, r4, #16
 800895a:	fbbc f0f9 	udiv	r0, ip, r9
 800895e:	fa1f f887 	uxth.w	r8, r7
 8008962:	fb09 c610 	mls	r6, r9, r0, ip
 8008966:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800896a:	fb00 f308 	mul.w	r3, r0, r8
 800896e:	42b3      	cmp	r3, r6
 8008970:	d909      	bls.n	8008986 <__udivmoddi4+0x6a>
 8008972:	19f6      	adds	r6, r6, r7
 8008974:	f100 32ff 	add.w	r2, r0, #4294967295
 8008978:	f080 8122 	bcs.w	8008bc0 <__udivmoddi4+0x2a4>
 800897c:	42b3      	cmp	r3, r6
 800897e:	f240 811f 	bls.w	8008bc0 <__udivmoddi4+0x2a4>
 8008982:	3802      	subs	r0, #2
 8008984:	443e      	add	r6, r7
 8008986:	1af6      	subs	r6, r6, r3
 8008988:	b2a2      	uxth	r2, r4
 800898a:	fbb6 f3f9 	udiv	r3, r6, r9
 800898e:	fb09 6613 	mls	r6, r9, r3, r6
 8008992:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008996:	fb03 f808 	mul.w	r8, r3, r8
 800899a:	45a0      	cmp	r8, r4
 800899c:	d909      	bls.n	80089b2 <__udivmoddi4+0x96>
 800899e:	19e4      	adds	r4, r4, r7
 80089a0:	f103 32ff 	add.w	r2, r3, #4294967295
 80089a4:	f080 810a 	bcs.w	8008bbc <__udivmoddi4+0x2a0>
 80089a8:	45a0      	cmp	r8, r4
 80089aa:	f240 8107 	bls.w	8008bbc <__udivmoddi4+0x2a0>
 80089ae:	3b02      	subs	r3, #2
 80089b0:	443c      	add	r4, r7
 80089b2:	ebc8 0404 	rsb	r4, r8, r4
 80089b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80089ba:	2100      	movs	r1, #0
 80089bc:	2d00      	cmp	r5, #0
 80089be:	d062      	beq.n	8008a86 <__udivmoddi4+0x16a>
 80089c0:	fa24 f40e 	lsr.w	r4, r4, lr
 80089c4:	2300      	movs	r3, #0
 80089c6:	602c      	str	r4, [r5, #0]
 80089c8:	606b      	str	r3, [r5, #4]
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	428b      	cmp	r3, r1
 80089d0:	d907      	bls.n	80089e2 <__udivmoddi4+0xc6>
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	d055      	beq.n	8008a82 <__udivmoddi4+0x166>
 80089d6:	2100      	movs	r1, #0
 80089d8:	e885 0041 	stmia.w	r5, {r0, r6}
 80089dc:	4608      	mov	r0, r1
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	fab3 f183 	clz	r1, r3
 80089e6:	2900      	cmp	r1, #0
 80089e8:	f040 8090 	bne.w	8008b0c <__udivmoddi4+0x1f0>
 80089ec:	42b3      	cmp	r3, r6
 80089ee:	d302      	bcc.n	80089f6 <__udivmoddi4+0xda>
 80089f0:	4282      	cmp	r2, r0
 80089f2:	f200 80f8 	bhi.w	8008be6 <__udivmoddi4+0x2ca>
 80089f6:	1a84      	subs	r4, r0, r2
 80089f8:	eb66 0603 	sbc.w	r6, r6, r3
 80089fc:	2001      	movs	r0, #1
 80089fe:	46b4      	mov	ip, r6
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	d040      	beq.n	8008a86 <__udivmoddi4+0x16a>
 8008a04:	e885 1010 	stmia.w	r5, {r4, ip}
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	b912      	cbnz	r2, 8008a14 <__udivmoddi4+0xf8>
 8008a0e:	2701      	movs	r7, #1
 8008a10:	fbb7 f7f2 	udiv	r7, r7, r2
 8008a14:	fab7 fe87 	clz	lr, r7
 8008a18:	f1be 0f00 	cmp.w	lr, #0
 8008a1c:	d135      	bne.n	8008a8a <__udivmoddi4+0x16e>
 8008a1e:	1bf3      	subs	r3, r6, r7
 8008a20:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008a24:	fa1f fc87 	uxth.w	ip, r7
 8008a28:	2101      	movs	r1, #1
 8008a2a:	fbb3 f0f8 	udiv	r0, r3, r8
 8008a2e:	0c22      	lsrs	r2, r4, #16
 8008a30:	fb08 3610 	mls	r6, r8, r0, r3
 8008a34:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008a38:	fb0c f300 	mul.w	r3, ip, r0
 8008a3c:	42b3      	cmp	r3, r6
 8008a3e:	d907      	bls.n	8008a50 <__udivmoddi4+0x134>
 8008a40:	19f6      	adds	r6, r6, r7
 8008a42:	f100 32ff 	add.w	r2, r0, #4294967295
 8008a46:	d202      	bcs.n	8008a4e <__udivmoddi4+0x132>
 8008a48:	42b3      	cmp	r3, r6
 8008a4a:	f200 80ce 	bhi.w	8008bea <__udivmoddi4+0x2ce>
 8008a4e:	4610      	mov	r0, r2
 8008a50:	1af6      	subs	r6, r6, r3
 8008a52:	b2a2      	uxth	r2, r4
 8008a54:	fbb6 f3f8 	udiv	r3, r6, r8
 8008a58:	fb08 6613 	mls	r6, r8, r3, r6
 8008a5c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008a60:	fb0c fc03 	mul.w	ip, ip, r3
 8008a64:	45a4      	cmp	ip, r4
 8008a66:	d907      	bls.n	8008a78 <__udivmoddi4+0x15c>
 8008a68:	19e4      	adds	r4, r4, r7
 8008a6a:	f103 32ff 	add.w	r2, r3, #4294967295
 8008a6e:	d202      	bcs.n	8008a76 <__udivmoddi4+0x15a>
 8008a70:	45a4      	cmp	ip, r4
 8008a72:	f200 80b5 	bhi.w	8008be0 <__udivmoddi4+0x2c4>
 8008a76:	4613      	mov	r3, r2
 8008a78:	ebcc 0404 	rsb	r4, ip, r4
 8008a7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008a80:	e79c      	b.n	80089bc <__udivmoddi4+0xa0>
 8008a82:	4629      	mov	r1, r5
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	f1ce 0120 	rsb	r1, lr, #32
 8008a8e:	fa06 f30e 	lsl.w	r3, r6, lr
 8008a92:	fa07 f70e 	lsl.w	r7, r7, lr
 8008a96:	fa20 f901 	lsr.w	r9, r0, r1
 8008a9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008a9e:	40ce      	lsrs	r6, r1
 8008aa0:	ea49 0903 	orr.w	r9, r9, r3
 8008aa4:	fbb6 faf8 	udiv	sl, r6, r8
 8008aa8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8008aac:	fb08 661a 	mls	r6, r8, sl, r6
 8008ab0:	fa1f fc87 	uxth.w	ip, r7
 8008ab4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8008ab8:	fb0a f20c 	mul.w	r2, sl, ip
 8008abc:	429a      	cmp	r2, r3
 8008abe:	fa00 f40e 	lsl.w	r4, r0, lr
 8008ac2:	d90a      	bls.n	8008ada <__udivmoddi4+0x1be>
 8008ac4:	19db      	adds	r3, r3, r7
 8008ac6:	f10a 31ff 	add.w	r1, sl, #4294967295
 8008aca:	f080 8087 	bcs.w	8008bdc <__udivmoddi4+0x2c0>
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	f240 8084 	bls.w	8008bdc <__udivmoddi4+0x2c0>
 8008ad4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ad8:	443b      	add	r3, r7
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	fa1f f989 	uxth.w	r9, r9
 8008ae0:	fbb3 f1f8 	udiv	r1, r3, r8
 8008ae4:	fb08 3311 	mls	r3, r8, r1, r3
 8008ae8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8008aec:	fb01 f60c 	mul.w	r6, r1, ip
 8008af0:	429e      	cmp	r6, r3
 8008af2:	d907      	bls.n	8008b04 <__udivmoddi4+0x1e8>
 8008af4:	19db      	adds	r3, r3, r7
 8008af6:	f101 32ff 	add.w	r2, r1, #4294967295
 8008afa:	d26b      	bcs.n	8008bd4 <__udivmoddi4+0x2b8>
 8008afc:	429e      	cmp	r6, r3
 8008afe:	d969      	bls.n	8008bd4 <__udivmoddi4+0x2b8>
 8008b00:	3902      	subs	r1, #2
 8008b02:	443b      	add	r3, r7
 8008b04:	1b9b      	subs	r3, r3, r6
 8008b06:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b0a:	e78e      	b.n	8008a2a <__udivmoddi4+0x10e>
 8008b0c:	f1c1 0e20 	rsb	lr, r1, #32
 8008b10:	fa22 f40e 	lsr.w	r4, r2, lr
 8008b14:	408b      	lsls	r3, r1
 8008b16:	4323      	orrs	r3, r4
 8008b18:	fa20 f70e 	lsr.w	r7, r0, lr
 8008b1c:	fa06 f401 	lsl.w	r4, r6, r1
 8008b20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008b24:	fa26 f60e 	lsr.w	r6, r6, lr
 8008b28:	433c      	orrs	r4, r7
 8008b2a:	fbb6 f9fc 	udiv	r9, r6, ip
 8008b2e:	0c27      	lsrs	r7, r4, #16
 8008b30:	fb0c 6619 	mls	r6, ip, r9, r6
 8008b34:	fa1f f883 	uxth.w	r8, r3
 8008b38:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8008b3c:	fb09 f708 	mul.w	r7, r9, r8
 8008b40:	42b7      	cmp	r7, r6
 8008b42:	fa02 f201 	lsl.w	r2, r2, r1
 8008b46:	fa00 fa01 	lsl.w	sl, r0, r1
 8008b4a:	d908      	bls.n	8008b5e <__udivmoddi4+0x242>
 8008b4c:	18f6      	adds	r6, r6, r3
 8008b4e:	f109 30ff 	add.w	r0, r9, #4294967295
 8008b52:	d241      	bcs.n	8008bd8 <__udivmoddi4+0x2bc>
 8008b54:	42b7      	cmp	r7, r6
 8008b56:	d93f      	bls.n	8008bd8 <__udivmoddi4+0x2bc>
 8008b58:	f1a9 0902 	sub.w	r9, r9, #2
 8008b5c:	441e      	add	r6, r3
 8008b5e:	1bf6      	subs	r6, r6, r7
 8008b60:	b2a0      	uxth	r0, r4
 8008b62:	fbb6 f4fc 	udiv	r4, r6, ip
 8008b66:	fb0c 6614 	mls	r6, ip, r4, r6
 8008b6a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8008b6e:	fb04 f808 	mul.w	r8, r4, r8
 8008b72:	45b8      	cmp	r8, r7
 8008b74:	d907      	bls.n	8008b86 <__udivmoddi4+0x26a>
 8008b76:	18ff      	adds	r7, r7, r3
 8008b78:	f104 30ff 	add.w	r0, r4, #4294967295
 8008b7c:	d228      	bcs.n	8008bd0 <__udivmoddi4+0x2b4>
 8008b7e:	45b8      	cmp	r8, r7
 8008b80:	d926      	bls.n	8008bd0 <__udivmoddi4+0x2b4>
 8008b82:	3c02      	subs	r4, #2
 8008b84:	441f      	add	r7, r3
 8008b86:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8008b8a:	ebc8 0707 	rsb	r7, r8, r7
 8008b8e:	fba0 8902 	umull	r8, r9, r0, r2
 8008b92:	454f      	cmp	r7, r9
 8008b94:	4644      	mov	r4, r8
 8008b96:	464e      	mov	r6, r9
 8008b98:	d314      	bcc.n	8008bc4 <__udivmoddi4+0x2a8>
 8008b9a:	d029      	beq.n	8008bf0 <__udivmoddi4+0x2d4>
 8008b9c:	b365      	cbz	r5, 8008bf8 <__udivmoddi4+0x2dc>
 8008b9e:	ebba 0304 	subs.w	r3, sl, r4
 8008ba2:	eb67 0706 	sbc.w	r7, r7, r6
 8008ba6:	fa07 fe0e 	lsl.w	lr, r7, lr
 8008baa:	40cb      	lsrs	r3, r1
 8008bac:	40cf      	lsrs	r7, r1
 8008bae:	ea4e 0303 	orr.w	r3, lr, r3
 8008bb2:	e885 0088 	stmia.w	r5, {r3, r7}
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	e6f8      	b.n	80089b2 <__udivmoddi4+0x96>
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	e6e0      	b.n	8008986 <__udivmoddi4+0x6a>
 8008bc4:	ebb8 0402 	subs.w	r4, r8, r2
 8008bc8:	eb69 0603 	sbc.w	r6, r9, r3
 8008bcc:	3801      	subs	r0, #1
 8008bce:	e7e5      	b.n	8008b9c <__udivmoddi4+0x280>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	e7d8      	b.n	8008b86 <__udivmoddi4+0x26a>
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	e795      	b.n	8008b04 <__udivmoddi4+0x1e8>
 8008bd8:	4681      	mov	r9, r0
 8008bda:	e7c0      	b.n	8008b5e <__udivmoddi4+0x242>
 8008bdc:	468a      	mov	sl, r1
 8008bde:	e77c      	b.n	8008ada <__udivmoddi4+0x1be>
 8008be0:	3b02      	subs	r3, #2
 8008be2:	443c      	add	r4, r7
 8008be4:	e748      	b.n	8008a78 <__udivmoddi4+0x15c>
 8008be6:	4608      	mov	r0, r1
 8008be8:	e70a      	b.n	8008a00 <__udivmoddi4+0xe4>
 8008bea:	3802      	subs	r0, #2
 8008bec:	443e      	add	r6, r7
 8008bee:	e72f      	b.n	8008a50 <__udivmoddi4+0x134>
 8008bf0:	45c2      	cmp	sl, r8
 8008bf2:	d3e7      	bcc.n	8008bc4 <__udivmoddi4+0x2a8>
 8008bf4:	463e      	mov	r6, r7
 8008bf6:	e7d1      	b.n	8008b9c <__udivmoddi4+0x280>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	bf00      	nop

08008c00 <__aeabi_idiv0>:
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20433249 	.word	0x20433249
 8008c08:	74696e49 	.word	0x74696e49
 8008c0c:	6e696620 	.word	0x6e696620
 8008c10:	65687369 	.word	0x65687369
 8008c14:	00000064 	.word	0x00000064
 8008c18:	736d654d 	.word	0x736d654d
 8008c1c:	696e4920 	.word	0x696e4920
 8008c20:	69662074 	.word	0x69662074
 8008c24:	6873696e 	.word	0x6873696e
 8008c28:	00006465 	.word	0x00006465
 8008c2c:	74617453 	.word	0x74617453
 8008c30:	72207375 	.word	0x72207375
 8008c34:	00646165 	.word	0x00646165
 8008c38:	65636361 	.word	0x65636361
 8008c3c:	6f72656c 	.word	0x6f72656c
 8008c40:	6574656d 	.word	0x6574656d
 8008c44:	74732072 	.word	0x74732072
 8008c48:	73757461 	.word	0x73757461
 8008c4c:	6425203a 	.word	0x6425203a
 8008c50:	0000000a 	.word	0x0000000a
 8008c54:	61746144 	.word	0x61746144
 8008c58:	74657220 	.word	0x74657220
 8008c5c:	76656972 	.word	0x76656972
 8008c60:	00006465 	.word	0x00006465
 8008c64:	3a6c5f78 	.word	0x3a6c5f78
 8008c68:	09642520 	.word	0x09642520
 8008c6c:	3a685f78 	.word	0x3a685f78
 8008c70:	0a642520 	.word	0x0a642520
 8008c74:	3a6c5f79 	.word	0x3a6c5f79
 8008c78:	09642520 	.word	0x09642520
 8008c7c:	3a685f79 	.word	0x3a685f79
 8008c80:	0a642520 	.word	0x0a642520
 8008c84:	0000000a 	.word	0x0000000a
 8008c88:	4c525443 	.word	0x4c525443
 8008c8c:	4745525f 	.word	0x4745525f
 8008c90:	61662031 	.word	0x61662031
 8008c94:	64656c69 	.word	0x64656c69
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	736d654d 	.word	0x736d654d
 8008ca0:	696e4920 	.word	0x696e4920
 8008ca4:	454d2074 	.word	0x454d2074
 8008ca8:	435f534d 	.word	0x435f534d
 8008cac:	5f4c5254 	.word	0x5f4c5254
 8008cb0:	31474552 	.word	0x31474552
 8008cb4:	6e696620 	.word	0x6e696620
 8008cb8:	65687369 	.word	0x65687369
 8008cbc:	00000064 	.word	0x00000064
 8008cc0:	736d654d 	.word	0x736d654d
 8008cc4:	696e4920 	.word	0x696e4920
 8008cc8:	454d2074 	.word	0x454d2074
 8008ccc:	435f534d 	.word	0x435f534d
 8008cd0:	5f4c5254 	.word	0x5f4c5254
 8008cd4:	33474552 	.word	0x33474552
 8008cd8:	6e696620 	.word	0x6e696620
 8008cdc:	65687369 	.word	0x65687369
 8008ce0:	00000064 	.word	0x00000064
 8008ce4:	4c525443 	.word	0x4c525443
 8008ce8:	4745525f 	.word	0x4745525f
 8008cec:	61662034 	.word	0x61662034
 8008cf0:	64656c69 	.word	0x64656c69
 8008cf4:	00000000 	.word	0x00000000
 8008cf8:	736d654d 	.word	0x736d654d
 8008cfc:	696e4920 	.word	0x696e4920
 8008d00:	454d2074 	.word	0x454d2074
 8008d04:	435f534d 	.word	0x435f534d
 8008d08:	5f4c5254 	.word	0x5f4c5254
 8008d0c:	34474552 	.word	0x34474552
 8008d10:	6e696620 	.word	0x6e696620
 8008d14:	65687369 	.word	0x65687369
 8008d18:	00000064 	.word	0x00000064
 8008d1c:	54524155 	.word	0x54524155
 8008d20:	203a585f 	.word	0x203a585f
 8008d24:	000a6425 	.word	0x000a6425
 8008d28:	54524155 	.word	0x54524155
 8008d2c:	203a595f 	.word	0x203a595f
 8008d30:	0a0a6425 	.word	0x0a0a6425
 8008d34:	00000000 	.word	0x00000000
 8008d38:	25203a58 	.word	0x25203a58
 8008d3c:	00000a64 	.word	0x00000a64
 8008d40:	25203a59 	.word	0x25203a59
 8008d44:	00000a64 	.word	0x00000a64
 8008d48:	0000000a 	.word	0x0000000a

08008d4c <zeroes.7273>:
 8008d4c:	30303030 30303030 30303030 30303030     0000000000000000
 8008d5c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8008d6c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8008d7c:	00000000 33323130 37363534 62613938     ....0123456789ab
 8008d8c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8008d9c:	00000030                                0...

08008da0 <blanks.7272>:
 8008da0:	20202020 20202020 20202020 20202020                     
 8008db0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

08008dc0 <__mprec_tens>:
 8008dc0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008dd0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8008de0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8008df0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8008e00:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8008e10:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8008e20:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8008e30:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8008e40:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008e50:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008e60:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008e70:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008e80:	79d99db4 44ea7843                       ...yCx.D

08008e88 <__mprec_bigtens>:
 8008e88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008e98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008ea8:	7f73bf3c 75154fdd                       <.s..O.u

08008eb0 <p05.6087>:
 8008eb0:	00000005 00000019 0000007d              ........}...

08008ebc <zeroes.7258>:
 8008ebc:	30303030 30303030 30303030 30303030     0000000000000000

08008ecc <blanks.7257>:
 8008ecc:	20202020 20202020 20202020 20202020                     
 8008edc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

08008eec <_ctype_>:
 8008eec:	20202000 20202020 28282020 20282828     .         ((((( 
 8008efc:	20202020 20202020 20202020 20202020                     
 8008f0c:	10108820 10101010 10101010 10101010      ...............
 8008f1c:	04040410 04040404 10040404 10101010     ................
 8008f2c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8008f3c:	01010101 01010101 01010101 10101010     ................
 8008f4c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8008f5c:	02020202 02020202 02020202 10101010     ................
 8008f6c:	00000020 00000000 00000000 00000000      ...............
	...
