working directory -(git add)> staging area -(git commit)> repository

git branch
	lists the branches available

git branch branch_name
	creates a new branch named according to the branch_name

git branch -d branch_name
	deletes the branch with the given name (only the label, the commits remain but will be unpossible to find if the branch isn't merged before)

git checkout SHA
	To check out repo at the time of the commit.

git checkout -b branch_name
	Stores current checkout state (time in history of commits selected by SHA) to a new branch

git checkout master
	checks out to the master branch

git checkout existing_branch
	checks out to the existing branch

git diff
	Compares staging area and working directory

git diff --staged
	Compares staging area to repository

git diff -u file1 file2		|| git diff -u SHA1 SHA2
	Shows changes between two files or commits, -u is for unified and obligatory

git fetch branch_name
	Updates the local directory with a new branch if multiple changes were made.
	e.g. commit1 followed by commit2 locally, commit3 is made right after commit1 on the remote:
		the local directory would look like this: (commits viewed as branches)
							commit3
				commit1					result followed by merge: commit2&3
							commit2
	git fetch followed by git merge is equivalent to git pull
	e.g git fetch origin; git merge master origin/master == git pull origin master

git log -n<Number>
	shows only the specified number of commits

git log --stat
	Detailed info to different commits

git log --graph --oneline [branch1] [branchn]
	shows commit-history in a oneline-output of the given branches

git merge branch1 [branch2]
	Merges currently checked out branch with the stated branches (e.g. 3 possible), if one of them is the checked out one they will both be merged
	The new commit points to the previously checked out branch
	The order in which branch1 and branch2 are typed in does not matter since the new commit points to the checked out branch

git merge --abort
	Aborts the current merging process and restores the files to the previous state.

git pull remote_name branch_name (e.g.: git pull origin master // git pull from to)
	Pulls the current version of the specified remote to the specified branch

git push remote_name branch_name (e.g.: git push origin master // git push to from)
	Pushes the current version of the specified branch to the specified remote
	
git reset --hard
	Resets changes in staging area and working directory -> they are equal to the repository now
	!!!!!BEFORE make sure which changes will be deleted by running git diff and git diff --staged

git remote
	Outputs information about the available remotes

git remote add origin URL
	Adds a URL as the origin remote

git remote add remote_name URL	(name often upstream -> specifies the original version of a forked repo)
	Adds a URL as a specified remote

git remote -v
	"verbose" (= langatmig), outputs more specific information about the remote such as push and fetch URL
git show SHA
	Shows differences betweend the commit given and the parent commit

Errors:
Should not be doing an octopus
	Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
	HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Mergeconflict:
<<<<<HEAD
	Current code on branch (if merging 2 branches) or to be commited (if syncing with the remote)
|||||| merged common ancestors		("git config --global merge.conflictstyle diff3" needs to be set up to get this output)
	Original version of both modified file
======
	Code on master (or any other specified branch, could also be origin/master after fetching and merging the remote) branch
>>>>>master

Additional information:
Forking:
	Forking "clones" a repository localy on GitHub to the used account. Now full permission is available (not to the original repository but to the copy on the account)

origin/master: (could be seen as branch)
	specifies the master position of the remote called origin, used on the system it will be the master position of the remote at the time of the last pull or fetch (sync in generall)
	visual explanation: https://youtu.be/lA_drnU1TMI

fast forward merging:
	possible if the first commit is an ancestor (= Vorfahre) of the second commit
	pro: no new commit is created