
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	5d 05 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ]...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 c1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c000d64 	.word	0x0c000d64
 800024c:	20000000 	.word	0x20000000
 8000250:	00000008 	.word	0x00000008
 8000254:	0c000d6c 	.word	0x0c000d6c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c000d64 	.word	0x0c000d64
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c000d64 	.word	0x0c000d64
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000008 	.word	0x20000008
 800027c:	00000048 	.word	0x00000048
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08000635 	.word	0x08000635
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08000d15 	.word	0x08000d15
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08000591 	.word	0x08000591

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	60da      	str	r2, [r3, #12]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop

0800031c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000328:	887a      	ldrh	r2, [r7, #2]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop

0800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8000348:	887a      	ldrh	r2, [r7, #2]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	611a      	str	r2, [r3, #16]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <car_pwm_init>:

/******************************************************************************
 * Start of user functions
 *****************************************************************************/
void car_pwm_init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  XMC_CCU4_SetModuleClock(CCU4_MODULE, XMC_CCU4_CLOCK_SCU);
 800037c:	2100      	movs	r1, #0
 800037e:	481f      	ldr	r0, [pc, #124]	; (80003fc <car_pwm_init+0x84>)
 8000380:	f000 fc2c 	bl	8000bdc <XMC_CCU4_SetModuleClock>
  XMC_CCU4_Init(CCU4_MODULE, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8000384:	2100      	movs	r1, #0
 8000386:	481d      	ldr	r0, [pc, #116]	; (80003fc <car_pwm_init+0x84>)
 8000388:	f000 fc08 	bl	8000b9c <XMC_CCU4_Init>
  XMC_CCU4_EnableClock(CCU4_MODULE, 0);
 800038c:	2100      	movs	r1, #0
 800038e:	481b      	ldr	r0, [pc, #108]	; (80003fc <car_pwm_init+0x84>)
 8000390:	f7ff ffa0 	bl	80002d4 <XMC_CCU4_EnableClock>
  XMC_CCU4_EnableClock(CCU4_MODULE, 1);   // Might be an error source for wrong period time
 8000394:	2101      	movs	r1, #1
 8000396:	4819      	ldr	r0, [pc, #100]	; (80003fc <car_pwm_init+0x84>)
 8000398:	f7ff ff9c 	bl	80002d4 <XMC_CCU4_EnableClock>

  XMC_CCU4_StartPrescaler(CCU4_MODULE);
 800039c:	4817      	ldr	r0, [pc, #92]	; (80003fc <car_pwm_init+0x84>)
 800039e:	f7ff ff89 	bl	80002b4 <XMC_CCU4_StartPrescaler>
  XMC_CCU4_SLICE_CompareInit(CCU4_SLICE_0, &g_timer_object);
 80003a2:	4917      	ldr	r1, [pc, #92]	; (8000400 <car_pwm_init+0x88>)
 80003a4:	4817      	ldr	r0, [pc, #92]	; (8000404 <car_pwm_init+0x8c>)
 80003a6:	f000 fc35 	bl	8000c14 <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_CompareInit(CCU4_SLICE_1, &g_timer_object);
 80003aa:	4915      	ldr	r1, [pc, #84]	; (8000400 <car_pwm_init+0x88>)
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <car_pwm_init+0x90>)
 80003ae:	f000 fc31 	bl	8000c14 <XMC_CCU4_SLICE_CompareInit>

  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_SLICE_0, PERIOD_FOR_64_PRESCALING);
 80003b2:	f249 217c 	movw	r1, #37500	; 0x927c
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <car_pwm_init+0x8c>)
 80003b8:	f7ff ffb0 	bl	800031c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_0, IDLE_FOR_64_PRESCALING);
 80003bc:	f640 21fc 	movw	r1, #2812	; 0xafc
 80003c0:	4810      	ldr	r0, [pc, #64]	; (8000404 <car_pwm_init+0x8c>)
 80003c2:	f7ff ffbb 	bl	800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>

  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_SLICE_1, PERIOD_FOR_64_PRESCALING);
 80003c6:	f249 217c 	movw	r1, #37500	; 0x927c
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <car_pwm_init+0x90>)
 80003cc:	f7ff ffa6 	bl	800031c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_1, IDLE_FOR_64_PRESCALING);
 80003d0:	f640 21fc 	movw	r1, #2812	; 0xafc
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <car_pwm_init+0x90>)
 80003d6:	f7ff ffb1 	bl	800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>

  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 80003da:	2101      	movs	r1, #1
 80003dc:	4807      	ldr	r0, [pc, #28]	; (80003fc <car_pwm_init+0x84>)
 80003de:	f7ff ffbd 	bl	800035c <XMC_CCU4_EnableShadowTransfer>
  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
 80003e2:	2110      	movs	r1, #16
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <car_pwm_init+0x84>)
 80003e6:	f7ff ffb9 	bl	800035c <XMC_CCU4_EnableShadowTransfer>

  XMC_CCU4_SLICE_StartTimer(CCU4_SLICE_0);
 80003ea:	4806      	ldr	r0, [pc, #24]	; (8000404 <car_pwm_init+0x8c>)
 80003ec:	f7ff ff88 	bl	8000300 <XMC_CCU4_SLICE_StartTimer>
  XMC_CCU4_SLICE_StartTimer(CCU4_SLICE_1);
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <car_pwm_init+0x90>)
 80003f2:	f7ff ff85 	bl	8000300 <XMC_CCU4_SLICE_StartTimer>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	4000c000 	.word	0x4000c000
 8000400:	20000000 	.word	0x20000000
 8000404:	4000c100 	.word	0x4000c100
 8000408:	4000c200 	.word	0x4000c200

0800040c <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8000410:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <initRetargetSwo+0x7c>)
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <initRetargetSwo+0x7c>)
 8000414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000416:	f023 030c 	bic.w	r3, r3, #12
 800041a:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 800041c:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <initRetargetSwo+0x7c>)
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <initRetargetSwo+0x7c>)
 8000420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000428:	4a18      	ldr	r2, [pc, #96]	; (800048c <initRetargetSwo+0x80>)
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <initRetargetSwo+0x80>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <initRetargetSwo+0x84>)
 8000436:	2277      	movs	r2, #119	; 0x77
 8000438:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <initRetargetSwo+0x84>)
 800043c:	2202      	movs	r2, #2
 800043e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8000442:	4a13      	ldr	r2, [pc, #76]	; (8000490 <initRetargetSwo+0x84>)
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <initRetargetSwo+0x84>)
 8000446:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800044a:	f023 0302 	bic.w	r3, r3, #2
 800044e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 8000452:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000456:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <initRetargetSwo+0x88>)
 8000458:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 800045c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000460:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000464:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 8000470:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000474:	f04f 32ff 	mov.w	r2, #4294967295
 8000478:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	48028200 	.word	0x48028200
 800048c:	e000edf0 	.word	0xe000edf0
 8000490:	e0040000 	.word	0xe0040000
 8000494:	c5acce55 	.word	0xc5acce55

08000498 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80004a6:	f003 0308 	and.w	r3, r3, #8
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	bf14      	ite	ne
 80004ae:	2301      	movne	r3, #1
 80004b0:	2300      	moveq	r3, #0
 80004b2:	b2db      	uxtb	r3, r3
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <USIC0_0_IRQHandler>:
 /**
  * \brief Handles the reception of data via the UART module via interupts
  * \return none
  */
 void USIC0_0_IRQHandler (void)
 {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 	static uint8_t rx_ctr = 0;
 	uint8_t rx_tmp = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

 	/* Read the RX FIFO till it is empty */
 	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ca:	e01f      	b.n	800050c <USIC0_0_IRQHandler+0x4c>
 		rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004cc:	4816      	ldr	r0, [pc, #88]	; (8000528 <USIC0_0_IRQHandler+0x68>)
 80004ce:	f000 fbd9 	bl	8000c84 <XMC_UART_CH_GetReceivedData>
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

 		if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	d011      	beq.n	8000500 <USIC0_0_IRQHandler+0x40>
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <USIC0_0_IRQHandler+0x6c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	f083 0301 	eor.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00a      	beq.n	8000500 <USIC0_0_IRQHandler+0x40>
 			rx_buffer[rx_ctr++] = rx_tmp;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <USIC0_0_IRQHandler+0x70>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	b2d1      	uxtb	r1, r2
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <USIC0_0_IRQHandler+0x70>)
 80004f4:	7011      	strb	r1, [r2, #0]
 80004f6:	4619      	mov	r1, r3
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <USIC0_0_IRQHandler+0x74>)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	5453      	strb	r3, [r2, r1]
 80004fe:	e005      	b.n	800050c <USIC0_0_IRQHandler+0x4c>
 		} else {
 			rx_ctr = 0;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <USIC0_0_IRQHandler+0x70>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
 			str_available = true;
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <USIC0_0_IRQHandler+0x6c>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
 {
 	static uint8_t rx_ctr = 0;
 	uint8_t rx_tmp = 0;

 	/* Read the RX FIFO till it is empty */
 	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <USIC0_0_IRQHandler+0x68>)
 800050e:	f7ff ffc3 	bl	8000498 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000512:	4603      	mov	r3, r0
 8000514:	f083 0301 	eor.w	r3, r3, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1d6      	bne.n	80004cc <USIC0_0_IRQHandler+0xc>
 		} else {
 			rx_ctr = 0;
 			str_available = true;
 		}
 	}
 }
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40030000 	.word	0x40030000
 800052c:	20000009 	.word	0x20000009
 8000530:	20000008 	.word	0x20000008
 8000534:	2000000c 	.word	0x2000000c

08000538 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800054a:	409a      	lsls	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	605a      	str	r2, [r3, #4]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/******************************************************************************
 * Start of user functions
 *****************************************************************************/
void SysTick_Handler (void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  static uint32_t ticks = 0;

  ticks ++;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <SysTick_Handler+0x2c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <SysTick_Handler+0x2c>)
 8000568:	6013      	str	r3, [r2, #0]
  if(ticks >= TICKS_WAIT)
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <SysTick_Handler+0x2c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000572:	d306      	bcc.n	8000582 <SysTick_Handler+0x26>
  {
    XMC_GPIO_ToggleOutput(LED1);
 8000574:	2101      	movs	r1, #1
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <SysTick_Handler+0x30>)
 8000578:	f7ff ffde 	bl	8000538 <XMC_GPIO_ToggleOutput>
    ticks = 0;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <SysTick_Handler+0x2c>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  }
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000004c 	.word	0x2000004c
 800058c:	48028100 	.word	0x48028100

08000590 <main>:



int main (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
  initRetargetSwo();
 8000596:	f7ff ff39 	bl	800040c <initRetargetSwo>
  XMC_GPIO_CONFIG_t led_config;
  led_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	773b      	strb	r3, [r7, #28]
  led_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	623b      	str	r3, [r7, #32]
  led_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80005a4:	2304      	movs	r3, #4
 80005a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  XMC_GPIO_Init(LED1, &led_config);
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	461a      	mov	r2, r3
 80005b0:	2101      	movs	r1, #1
 80005b2:	4810      	ldr	r0, [pc, #64]	; (80005f4 <main+0x64>)
 80005b4:	f000 fa00 	bl	80009b8 <XMC_GPIO_Init>


  XMC_GPIO_CONFIG_t throttle_config;
  throttle_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 80005b8:	2398      	movs	r3, #152	; 0x98
 80005ba:	743b      	strb	r3, [r7, #16]
  throttle_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	617b      	str	r3, [r7, #20]
  throttle_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80005c2:	2304      	movs	r3, #4
 80005c4:	763b      	strb	r3, [r7, #24]
  XMC_GPIO_Init(THROTTLE, &throttle_config);
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	461a      	mov	r2, r3
 80005cc:	2103      	movs	r1, #3
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <main+0x64>)
 80005d0:	f000 f9f2 	bl	80009b8 <XMC_GPIO_Init>

  XMC_GPIO_CONFIG_t steering_config;
  steering_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 80005d4:	2398      	movs	r3, #152	; 0x98
 80005d6:	713b      	strb	r3, [r7, #4]
  steering_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	60bb      	str	r3, [r7, #8]
  steering_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80005de:	2304      	movs	r3, #4
 80005e0:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(STEERING, &steering_config);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	461a      	mov	r2, r3
 80005e6:	2102      	movs	r1, #2
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <main+0x64>)
 80005ea:	f000 f9e5 	bl	80009b8 <XMC_GPIO_Init>
  #if UART_EN
  car_uart_to_pc_init();
  #endif

  #if PWM_EN
  car_pwm_init();
 80005ee:	f7ff fec3 	bl	8000378 <car_pwm_init>
  #endif

  while(1)
  {

  }
 80005f2:	e7fe      	b.n	80005f2 <main+0x62>
 80005f4:	48028100 	.word	0x48028100

080005f8 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e003      	b.n	800061e <delay+0x16>
  {
    __NOP();
 8000616:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	d3f7      	bcc.n	8000616 <delay+0xe>
  {
    __NOP();
  }
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000634:	b598      	push	{r3, r4, r7, lr}
 8000636:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <SystemInit+0x20>)
 800063a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800063e:	4614      	mov	r4, r2
 8000640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000646:	f000 f807 	bl	8000658 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800064a:	f000 f83d 	bl	80006c8 <SystemCoreClockSetup>
}
 800064e:	bf00      	nop
 8000650:	bd98      	pop	{r3, r4, r7, pc}
 8000652:	bf00      	nop
 8000654:	2000ffc4 	.word	0x2000ffc4

08000658 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065e:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <SystemCoreSetup+0x64>)
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <SystemCoreSetup+0x68>)
 8000664:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800066a:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <SystemCoreSetup+0x64>)
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <SystemCoreSetup+0x64>)
 8000670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800067c:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <SystemCoreSetup+0x64>)
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <SystemCoreSetup+0x64>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f023 0308 	bic.w	r3, r3, #8
 8000686:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <SystemCoreSetup+0x6c>)
 800068a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800068e:	3314      	adds	r3, #20
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f023 030f 	bic.w	r3, r3, #15
 800069a:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f043 0303 	orr.w	r3, r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <SystemCoreSetup+0x6c>)
 80006a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006aa:	3314      	adds	r3, #20
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	08000000 	.word	0x08000000
 80006c4:	58001000 	.word	0x58001000

080006c8 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80006cc:	4b75      	ldr	r3, [pc, #468]	; (80008a4 <SystemCoreClockSetup+0x1dc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10c      	bne.n	80006f2 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80006d8:	4a72      	ldr	r2, [pc, #456]	; (80008a4 <SystemCoreClockSetup+0x1dc>)
 80006da:	4b72      	ldr	r3, [pc, #456]	; (80008a4 <SystemCoreClockSetup+0x1dc>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80006e4:	bf00      	nop
 80006e6:	4b6f      	ldr	r3, [pc, #444]	; (80008a4 <SystemCoreClockSetup+0x1dc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80006f2:	4b6d      	ldr	r3, [pc, #436]	; (80008a8 <SystemCoreClockSetup+0x1e0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d009      	beq.n	8000712 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80006fe:	4a6a      	ldr	r2, [pc, #424]	; (80008a8 <SystemCoreClockSetup+0x1e0>)
 8000700:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <SystemCoreClockSetup+0x1e0>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000708:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 800070a:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800070e:	f7ff ff7b 	bl	8000608 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000712:	4a66      	ldr	r2, [pc, #408]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000714:	4b65      	ldr	r3, [pc, #404]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800071c:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 800071e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000722:	f7ff ff71 	bl	8000608 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000726:	4a61      	ldr	r2, [pc, #388]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000728:	4b60      	ldr	r3, [pc, #384]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000730:	f023 0302 	bic.w	r3, r3, #2
 8000734:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000736:	4b5e      	ldr	r3, [pc, #376]	; (80008b0 <SystemCoreClockSetup+0x1e8>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800073e:	2b00      	cmp	r3, #0
 8000740:	d029      	beq.n	8000796 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000742:	4a5b      	ldr	r2, [pc, #364]	; (80008b0 <SystemCoreClockSetup+0x1e8>)
 8000744:	4b5a      	ldr	r3, [pc, #360]	; (80008b0 <SystemCoreClockSetup+0x1e8>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800074c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000750:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000752:	f000 f927 	bl	80009a4 <OSCHP_GetFrequency>
 8000756:	4602      	mov	r2, r0
 8000758:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <SystemCoreClockSetup+0x1ec>)
 800075a:	fba3 2302 	umull	r2, r3, r3, r2
 800075e:	0d1b      	lsrs	r3, r3, #20
 8000760:	3b01      	subs	r3, #1
 8000762:	041b      	lsls	r3, r3, #16
 8000764:	4952      	ldr	r1, [pc, #328]	; (80008b0 <SystemCoreClockSetup+0x1e8>)
 8000766:	4a52      	ldr	r2, [pc, #328]	; (80008b0 <SystemCoreClockSetup+0x1e8>)
 8000768:	6852      	ldr	r2, [r2, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800076e:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000770:	4b4e      	ldr	r3, [pc, #312]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800077a:	4a4c      	ldr	r2, [pc, #304]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800077c:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000784:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000786:	bf00      	nop
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000790:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000794:	d1f8      	bne.n	8000788 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000796:	4a45      	ldr	r2, [pc, #276]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80007a2:	4a42      	ldr	r2, [pc, #264]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007b0:	4a41      	ldr	r2, [pc, #260]	; (80008b8 <SystemCoreClockSetup+0x1f0>)
 80007b2:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80007b4:	4a3d      	ldr	r2, [pc, #244]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007b6:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007be:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80007c0:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007c2:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f023 0310 	bic.w	r3, r3, #16
 80007ca:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80007cc:	4a37      	ldr	r2, [pc, #220]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d6:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80007d8:	bf00      	nop
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f9      	beq.n	80007da <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80007e6:	4a31      	ldr	r2, [pc, #196]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007e8:	4b30      	ldr	r3, [pc, #192]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80007f2:	bf00      	nop
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f9      	bne.n	80007f4 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000800:	4a2e      	ldr	r2, [pc, #184]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080a:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 800082c:	2203      	movs	r2, #3
 800082e:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000830:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800083a:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <SystemCoreClockSetup+0x1f8>)
 8000840:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000842:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000846:	f7ff fedf 	bl	8000608 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800084a:	bf00      	nop
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f9      	beq.n	800084c <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800085a:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <SystemCoreClockSetup+0x1fc>)
 800085c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 800085e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000862:	f7ff fed1 	bl	8000608 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000866:	bf00      	nop
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f9      	beq.n	8000868 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <SystemCoreClockSetup+0x200>)
 8000878:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800087a:	f241 7070 	movw	r0, #6000	; 0x1770
 800087e:	f7ff fec3 	bl	8000608 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000882:	bf00      	nop
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <SystemCoreClockSetup+0x1e4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f9      	beq.n	8000884 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <SystemCoreClockSetup+0x204>)
 8000892:	2205      	movs	r2, #5
 8000894:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <SystemCoreClockSetup+0x1f4>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800089c:	f000 f818 	bl	80008d0 <SystemCoreClockUpdate>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	50004200 	.word	0x50004200
 80008a8:	50004400 	.word	0x50004400
 80008ac:	50004710 	.word	0x50004710
 80008b0:	50004700 	.word	0x50004700
 80008b4:	6b5fca6b 	.word	0x6b5fca6b
 80008b8:	01134f00 	.word	0x01134f00
 80008bc:	50004600 	.word	0x50004600
 80008c0:	01074f00 	.word	0x01074f00
 80008c4:	01044f00 	.word	0x01044f00
 80008c8:	01034f00 	.word	0x01034f00
 80008cc:	50004160 	.word	0x50004160

080008d0 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80008d6:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <SystemCoreClockUpdate+0xc4>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d03e      	beq.n	8000960 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <SystemCoreClockUpdate+0xc8>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <SystemCoreClockUpdate+0xcc>)
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e002      	b.n	80008fa <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80008f4:	f000 f856 	bl	80009a4 <OSCHP_GetFrequency>
 80008f8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <SystemCoreClockUpdate+0xc8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	2b00      	cmp	r3, #0
 8000904:	d020      	beq.n	8000948 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <SystemCoreClockUpdate+0xc8>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800090e:	0e1b      	lsrs	r3, r3, #24
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SystemCoreClockUpdate+0xc8>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <SystemCoreClockUpdate+0xc8>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800092a:	0c1b      	lsrs	r3, r3, #16
 800092c:	3301      	adds	r3, #1
 800092e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00d      	b.n	8000964 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <SystemCoreClockUpdate+0xc8>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000950:	3301      	adds	r3, #1
 8000952:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e001      	b.n	8000964 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <SystemCoreClockUpdate+0xcc>)
 8000962:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <SystemCoreClockUpdate+0xc4>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <SystemCoreClockUpdate+0xc4>)
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	3301      	adds	r3, #1
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	fbb2 f3f3 	udiv	r3, r2, r3
 8000984:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <SystemCoreClockUpdate+0xd0>)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50004600 	.word	0x50004600
 8000998:	50004710 	.word	0x50004710
 800099c:	016e3600 	.word	0x016e3600
 80009a0:	2000ffc0 	.word	0x2000ffc0

080009a4 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <OSCHP_GetFrequency+0x10>)
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	00b71b00 	.word	0x00b71b00

080009b8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	460b      	mov	r3, r1
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80009c6:	7afb      	ldrb	r3, [r7, #11]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3204      	adds	r2, #4
 80009da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	21f8      	movs	r1, #248	; 0xf8
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	ea02 0103 	and.w	r1, r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	1d02      	adds	r2, r0, #4
 80009f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80009fe:	7afb      	ldrb	r3, [r7, #11]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2103      	movs	r1, #3
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <XMC_GPIO_Init+0x13c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d003      	beq.n	8000a20 <XMC_GPIO_Init+0x68>
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4a37      	ldr	r2, [pc, #220]	; (8000af8 <XMC_GPIO_Init+0x140>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d10a      	bne.n	8000a36 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a24:	7afb      	ldrb	r3, [r7, #11]
 8000a26:	2101      	movs	r1, #1
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	401a      	ands	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	661a      	str	r2, [r3, #96]	; 0x60
 8000a34:	e03c      	b.n	8000ab0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	7afb      	ldrb	r3, [r7, #11]
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	7afb      	ldrb	r3, [r7, #11]
 8000a4c:	08db      	lsrs	r3, r3, #3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	461a      	mov	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3210      	adds	r2, #16
 8000a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	2107      	movs	r1, #7
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	ea02 0103 	and.w	r1, r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f100 0210 	add.w	r2, r0, #16
 8000a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	7afb      	ldrb	r3, [r7, #11]
 8000a82:	08db      	lsrs	r3, r3, #3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3210      	adds	r2, #16
 8000a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7a1b      	ldrb	r3, [r3, #8]
 8000a94:	4619      	mov	r1, r3
 8000a96:	7afb      	ldrb	r3, [r7, #11]
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	ea42 0103 	orr.w	r1, r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f100 0210 	add.w	r2, r0, #16
 8000aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000ab0:	7afb      	ldrb	r3, [r7, #11]
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	7afb      	ldrb	r3, [r7, #11]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3204      	adds	r2, #4
 8000ac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	7afb      	ldrb	r3, [r7, #11]
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	ea42 0103 	orr.w	r1, r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	1d02      	adds	r2, r0, #4
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	48028e00 	.word	0x48028e00
 8000af8:	48028f00 	.word	0x48028f00

08000afc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	60da      	str	r2, [r3, #12]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <XMC_CCU4_lDeassertReset+0x50>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d103      	bne.n	8000b34 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000b2c:	2004      	movs	r0, #4
 8000b2e:	f000 f8c3 	bl	8000cb8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000b32:	e016      	b.n	8000b62 <XMC_CCU4_lDeassertReset+0x46>
  if (module == CCU40)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <XMC_CCU4_lDeassertReset+0x54>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d103      	bne.n	8000b44 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 f8bb 	bl	8000cb8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000b42:	e00e      	b.n	8000b62 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <XMC_CCU4_lDeassertReset+0x58>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d103      	bne.n	8000b54 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f000 f8b3 	bl	8000cb8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000b52:	e006      	b.n	8000b62 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <XMC_CCU4_lDeassertReset+0x5c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d102      	bne.n	8000b62 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <XMC_CCU4_lDeassertReset+0x60>)
 8000b5e:	f000 f8ab 	bl	8000cb8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	4000c000 	.word	0x4000c000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	40014000 	.word	0x40014000
 8000b78:	48004000 	.word	0x48004000
 8000b7c:	10000001 	.word	0x10000001

08000b80 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000b88:	2010      	movs	r0, #16
 8000b8a:	f000 f8b3 	bl	8000cf4 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffc4 	bl	8000b1c <XMC_CCU4_lDeassertReset>
#endif
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffe9 	bl	8000b80 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa4 	bl	8000afc <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc0:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	039b      	lsls	r3, r3, #14
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop

08000bdc <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	460b      	mov	r3, r1
 8000be6:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bf4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	051a      	lsls	r2, r3, #20
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	795b      	ldrb	r3, [r3, #5]
 8000c4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	795b      	ldrb	r3, [r3, #5]
 8000c5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <XMC_UART_CH_GetReceivedData>:
    channel->IN[0U] = data;
  }
}

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000c92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9e:	81fb      	strh	r3, [r7, #14]
 8000ca0:	e003      	b.n	8000caa <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000ca8:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8000caa:	89fb      	ldrh	r3, [r7, #14]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0f1b      	lsrs	r3, r3, #28
 8000cc4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ccc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	50004414 	.word	0x50004414

08000cf4 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	6053      	str	r3, [r2, #4]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	50004600 	.word	0x50004600

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4e0f      	ldr	r6, [pc, #60]	; (8000d54 <__libc_init_array+0x40>)
 8000d18:	4d0f      	ldr	r5, [pc, #60]	; (8000d58 <__libc_init_array+0x44>)
 8000d1a:	1b76      	subs	r6, r6, r5
 8000d1c:	10b6      	asrs	r6, r6, #2
 8000d1e:	bf18      	it	ne
 8000d20:	2400      	movne	r4, #0
 8000d22:	d005      	beq.n	8000d30 <__libc_init_array+0x1c>
 8000d24:	3401      	adds	r4, #1
 8000d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2a:	4798      	blx	r3
 8000d2c:	42a6      	cmp	r6, r4
 8000d2e:	d1f9      	bne.n	8000d24 <__libc_init_array+0x10>
 8000d30:	4e0a      	ldr	r6, [pc, #40]	; (8000d5c <__libc_init_array+0x48>)
 8000d32:	4d0b      	ldr	r5, [pc, #44]	; (8000d60 <__libc_init_array+0x4c>)
 8000d34:	1b76      	subs	r6, r6, r5
 8000d36:	f7ff fc5f 	bl	80005f8 <_init>
 8000d3a:	10b6      	asrs	r6, r6, #2
 8000d3c:	bf18      	it	ne
 8000d3e:	2400      	movne	r4, #0
 8000d40:	d006      	beq.n	8000d50 <__libc_init_array+0x3c>
 8000d42:	3401      	adds	r4, #1
 8000d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d48:	4798      	blx	r3
 8000d4a:	42a6      	cmp	r6, r4
 8000d4c:	d1f9      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000008 	.word	0x20000008
