
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	95 09 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 09 08 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0070f8 	.word	0x0c0070f8
 800024c:	20000000 	.word	0x20000000
 8000250:	000009c8 	.word	0x000009c8
 8000254:	0c007ac0 	.word	0x0c007ac0
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0070f8 	.word	0x0c0070f8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0070f8 	.word	0x0c0070f8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009c8 	.word	0x200009c8
 800027c:	00000094 	.word	0x00000094
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08000bb9 	.word	0x08000bb9
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08001631 	.word	0x08001631
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080009c9 	.word	0x080009c9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	60da      	str	r2, [r3, #12]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop

0800031c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000328:	887a      	ldrh	r2, [r7, #2]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop

0800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8000348:	887a      	ldrh	r2, [r7, #2]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	683a      	ldr	r2, [r7, #0]
 800036a:	611a      	str	r2, [r3, #16]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <car_pwm_init>:

/******************************************************************************
 * Start of user functions
 *****************************************************************************/
void car_pwm_init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  XMC_CCU4_SetModuleClock(CCU4_MODULE, XMC_CCU4_CLOCK_SCU);
 800037c:	2100      	movs	r1, #0
 800037e:	481f      	ldr	r0, [pc, #124]	; (80003fc <car_pwm_init+0x84>)
 8000380:	f000 feee 	bl	8001160 <XMC_CCU4_SetModuleClock>
  XMC_CCU4_Init(CCU4_MODULE, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8000384:	2100      	movs	r1, #0
 8000386:	481d      	ldr	r0, [pc, #116]	; (80003fc <car_pwm_init+0x84>)
 8000388:	f000 feca 	bl	8001120 <XMC_CCU4_Init>
  XMC_CCU4_EnableClock(CCU4_MODULE, 0);
 800038c:	2100      	movs	r1, #0
 800038e:	481b      	ldr	r0, [pc, #108]	; (80003fc <car_pwm_init+0x84>)
 8000390:	f7ff ffa0 	bl	80002d4 <XMC_CCU4_EnableClock>
  XMC_CCU4_EnableClock(CCU4_MODULE, 1);   // Might be an error source for wrong period time
 8000394:	2101      	movs	r1, #1
 8000396:	4819      	ldr	r0, [pc, #100]	; (80003fc <car_pwm_init+0x84>)
 8000398:	f7ff ff9c 	bl	80002d4 <XMC_CCU4_EnableClock>

  XMC_CCU4_StartPrescaler(CCU4_MODULE);
 800039c:	4817      	ldr	r0, [pc, #92]	; (80003fc <car_pwm_init+0x84>)
 800039e:	f7ff ff89 	bl	80002b4 <XMC_CCU4_StartPrescaler>
  XMC_CCU4_SLICE_CompareInit(CCU4_SLICE_0, &g_timer_object);
 80003a2:	4917      	ldr	r1, [pc, #92]	; (8000400 <car_pwm_init+0x88>)
 80003a4:	4817      	ldr	r0, [pc, #92]	; (8000404 <car_pwm_init+0x8c>)
 80003a6:	f000 fef7 	bl	8001198 <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_CompareInit(CCU4_SLICE_1, &g_timer_object);
 80003aa:	4915      	ldr	r1, [pc, #84]	; (8000400 <car_pwm_init+0x88>)
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <car_pwm_init+0x90>)
 80003ae:	f000 fef3 	bl	8001198 <XMC_CCU4_SLICE_CompareInit>

  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_SLICE_0, PERIOD_FOR_64_PRESCALING);
 80003b2:	f249 217c 	movw	r1, #37500	; 0x927c
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <car_pwm_init+0x8c>)
 80003b8:	f7ff ffb0 	bl	800031c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_0, IDLE_FOR_64_PRESCALING);
 80003bc:	f640 21fc 	movw	r1, #2812	; 0xafc
 80003c0:	4810      	ldr	r0, [pc, #64]	; (8000404 <car_pwm_init+0x8c>)
 80003c2:	f7ff ffbb 	bl	800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>

  XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_SLICE_1, PERIOD_FOR_64_PRESCALING);
 80003c6:	f249 217c 	movw	r1, #37500	; 0x927c
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <car_pwm_init+0x90>)
 80003cc:	f7ff ffa6 	bl	800031c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_1, IDLE_FOR_64_PRESCALING);
 80003d0:	f640 21fc 	movw	r1, #2812	; 0xafc
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <car_pwm_init+0x90>)
 80003d6:	f7ff ffb1 	bl	800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>

  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 80003da:	2101      	movs	r1, #1
 80003dc:	4807      	ldr	r0, [pc, #28]	; (80003fc <car_pwm_init+0x84>)
 80003de:	f7ff ffbd 	bl	800035c <XMC_CCU4_EnableShadowTransfer>
  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
 80003e2:	2110      	movs	r1, #16
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <car_pwm_init+0x84>)
 80003e6:	f7ff ffb9 	bl	800035c <XMC_CCU4_EnableShadowTransfer>

  XMC_CCU4_SLICE_StartTimer(CCU4_SLICE_0);
 80003ea:	4806      	ldr	r0, [pc, #24]	; (8000404 <car_pwm_init+0x8c>)
 80003ec:	f7ff ff88 	bl	8000300 <XMC_CCU4_SLICE_StartTimer>
  XMC_CCU4_SLICE_StartTimer(CCU4_SLICE_1);
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <car_pwm_init+0x90>)
 80003f2:	f7ff ff85 	bl	8000300 <XMC_CCU4_SLICE_StartTimer>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	4000c000 	.word	0x4000c000
 8000400:	20000018 	.word	0x20000018
 8000404:	4000c100 	.word	0x4000c100
 8000408:	4000c200 	.word	0x4000c200

0800040c <car_set_pwm>:


void car_set_pwm(char *rx_buff)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  long throttle;
  char *end;
  int16_t steering_offset;
  int16_t throttle_offset;

  steering = strtol(rx_buff, &end, 10);
 8000414:	f107 0308 	add.w	r3, r7, #8
 8000418:	220a      	movs	r2, #10
 800041a:	4619      	mov	r1, r3
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f001 fb39 	bl	8001a94 <strtol>
 8000422:	6178      	str	r0, [r7, #20]
  // Needs to be changed
  if(rx_buff == end) {
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	d04d      	beq.n	80004c8 <car_set_pwm+0xbc>
    return;
  }
  rx_buff = end;
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	607b      	str	r3, [r7, #4]
  throttle = strtol(rx_buff, &end, 10);
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	220a      	movs	r2, #10
 8000436:	4619      	mov	r1, r3
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f001 fb2b 	bl	8001a94 <strtol>
 800043e:	6138      	str	r0, [r7, #16]

  #if DEBUG
  printf("steering: %ld\nthrottle: %ld\n", steering, throttle);
 8000440:	693a      	ldr	r2, [r7, #16]
 8000442:	6979      	ldr	r1, [r7, #20]
 8000444:	4822      	ldr	r0, [pc, #136]	; (80004d0 <car_set_pwm+0xc4>)
 8000446:	f001 fa03 	bl	8001850 <printf>
  #endif

  if (steering > MAX_RECEIVE)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000450:	dd02      	ble.n	8000458 <car_set_pwm+0x4c>
  {
    steering = MAX_RECEIVE;
 8000452:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000456:	617b      	str	r3, [r7, #20]
  }
  if (throttle > MAX_RECEIVE)
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800045e:	dd02      	ble.n	8000466 <car_set_pwm+0x5a>
  {
    throttle = MAX_RECEIVE;
 8000460:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000464:	613b      	str	r3, [r7, #16]
  }

  steering_offset = (steering / 17);
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <car_set_pwm+0xc8>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	10d2      	asrs	r2, r2, #3
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	81fb      	strh	r3, [r7, #14]
  throttle_offset = (throttle / 17);
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <car_set_pwm+0xc8>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	10d2      	asrs	r2, r2, #3
 8000480:	17db      	asrs	r3, r3, #31
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	81bb      	strh	r3, [r7, #12]

  #if DEBUG
  printf("st_offset: %d\nth_offset: %d\n", steering_offset, throttle_offset);
 8000486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800048a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800048e:	4619      	mov	r1, r3
 8000490:	4811      	ldr	r0, [pc, #68]	; (80004d8 <car_set_pwm+0xcc>)
 8000492:	f001 f9dd 	bl	8001850 <printf>
  #endif

  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_0, (IDLE_FOR_64_PRESCALING + throttle_offset));
 8000496:	89bb      	ldrh	r3, [r7, #12]
 8000498:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 800049c:	b29b      	uxth	r3, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	480e      	ldr	r0, [pc, #56]	; (80004dc <car_set_pwm+0xd0>)
 80004a2:	f7ff ff4b 	bl	800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_1, (IDLE_FOR_64_PRESCALING + steering_offset));
 80004a6:	89fb      	ldrh	r3, [r7, #14]
 80004a8:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <car_set_pwm+0xd4>)
 80004b2:	f7ff ff43 	bl	800033c <XMC_CCU4_SLICE_SetTimerCompareMatch>

  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 80004b6:	2101      	movs	r1, #1
 80004b8:	480a      	ldr	r0, [pc, #40]	; (80004e4 <car_set_pwm+0xd8>)
 80004ba:	f7ff ff4f 	bl	800035c <XMC_CCU4_EnableShadowTransfer>
  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);
 80004be:	2110      	movs	r1, #16
 80004c0:	4808      	ldr	r0, [pc, #32]	; (80004e4 <car_set_pwm+0xd8>)
 80004c2:	f7ff ff4b 	bl	800035c <XMC_CCU4_EnableShadowTransfer>
 80004c6:	e000      	b.n	80004ca <car_set_pwm+0xbe>
  int16_t throttle_offset;

  steering = strtol(rx_buff, &end, 10);
  // Needs to be changed
  if(rx_buff == end) {
    return;
 80004c8:	bf00      	nop
  XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_SLICE_1, (IDLE_FOR_64_PRESCALING + steering_offset));

  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
  XMC_CCU4_EnableShadowTransfer(CCU4_MODULE, XMC_CCU4_SHADOW_TRANSFER_SLICE_1);

}
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	08006e28 	.word	0x08006e28
 80004d4:	78787879 	.word	0x78787879
 80004d8:	08006e48 	.word	0x08006e48
 80004dc:	4000c100 	.word	0x4000c100
 80004e0:	4000c200 	.word	0x4000c200
 80004e4:	4000c000 	.word	0x4000c000

080004e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d013      	beq.n	8000528 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000508:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00b      	beq.n	8000528 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000510:	e000      	b.n	8000514 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000512:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000514:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f9      	beq.n	8000512 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800051e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 800053c:	4a1d      	ldr	r2, [pc, #116]	; (80005b4 <initRetargetSwo+0x7c>)
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <initRetargetSwo+0x7c>)
 8000540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000542:	f023 030c 	bic.w	r3, r3, #12
 8000546:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8000548:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <initRetargetSwo+0x7c>)
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <initRetargetSwo+0x7c>)
 800054c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000554:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <initRetargetSwo+0x80>)
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <initRetargetSwo+0x80>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055e:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <initRetargetSwo+0x84>)
 8000562:	2277      	movs	r2, #119	; 0x77
 8000564:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <initRetargetSwo+0x84>)
 8000568:	2202      	movs	r2, #2
 800056a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 800056e:	4a13      	ldr	r2, [pc, #76]	; (80005bc <initRetargetSwo+0x84>)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <initRetargetSwo+0x84>)
 8000572:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000576:	f023 0302 	bic.w	r3, r3, #2
 800057a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 800057e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <initRetargetSwo+0x88>)
 8000584:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8000588:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f04f 32ff 	mov.w	r2, #4294967295
 80005a4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	48028200 	.word	0x48028200
 80005b8:	e000edf0 	.word	0xe000edf0
 80005bc:	e0040000 	.word	0xe0040000
 80005c0:	c5acce55 	.word	0xc5acce55

080005c4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	e009      	b.n	80005ea <_write+0x26>
		ITM_SendChar ( (*buf++));
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff82 	bl	80004e8 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3301      	adds	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dbf1      	blt.n	80005d6 <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800060e:	4909      	ldr	r1, [pc, #36]	; (8000634 <__NVIC_EnableIRQ+0x38>)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	095b      	lsrs	r3, r3, #5
 8000616:	79fa      	ldrb	r2, [r7, #7]
 8000618:	f002 021f 	and.w	r2, r2, #31
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	490d      	ldr	r1, [pc, #52]	; (8000684 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4909      	ldr	r1, [pc, #36]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
  }
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
 8000698:	4613      	mov	r3, r2
 800069a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800069c:	78f8      	ldrb	r0, [r7, #3]
 800069e:	78fb      	ldrb	r3, [r7, #3]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	3306      	adds	r3, #6
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80006ae:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80006b0:	431a      	orrs	r2, r3
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	1d83      	adds	r3, r0, #6
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	431a      	orrs	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop

080006f0 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f023 030f 	bic.w	r3, r3, #15
 8000728:	f043 0202 	orr.w	r2, r3, #2
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
 8000748:	4613      	mov	r3, r2
 800074a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 800074c:	78f8      	ldrb	r0, [r7, #3]
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	3306      	adds	r3, #6
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	1d83      	adds	r3, r0, #6
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	440b      	add	r3, r1
 8000766:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000768:	78ba      	ldrb	r2, [r7, #2]
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff8c 	bl	800068c <XMC_USIC_CH_SetInputSource>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <car_uart_to_pc_init>:

 /**
  * \brief Configures the UART module with 9600 baud, 1 stopbit, 8 databits and no parity
  */
 void car_uart_to_pc_init(void)
 {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
 	/* USIC channels initialization */
 	XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000780:	491c      	ldr	r1, [pc, #112]	; (80007f4 <car_uart_to_pc_init+0x78>)
 8000782:	481d      	ldr	r0, [pc, #116]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 8000784:	f000 fd40 	bl	8001208 <XMC_UART_CH_Init>

 	XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000788:	2201      	movs	r2, #1
 800078a:	2100      	movs	r1, #0
 800078c:	481a      	ldr	r0, [pc, #104]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 800078e:	f7ff ffd5 	bl	800073c <XMC_UART_CH_SetInputSource>
 	/* FIFOs initialization for both channels:
 	 *  8 entries for TxFIFO from point 0, LIMIT=1
 	 *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
 	 *                                              been received)
 	 *  */
 	XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 8000792:	2300      	movs	r3, #0
 8000794:	2203      	movs	r2, #3
 8000796:	2100      	movs	r1, #0
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 800079a:	f000 feaf 	bl	80014fc <XMC_USIC_CH_TXFIFO_Configure>
 	XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 800079e:	2300      	movs	r3, #0
 80007a0:	2203      	movs	r2, #3
 80007a2:	2108      	movs	r1, #8
 80007a4:	4814      	ldr	r0, [pc, #80]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 80007a6:	f000 fed1 	bl	800154c <XMC_USIC_CH_RXFIFO_Configure>

 	/* Enabling events for TX FIFO and RX FIFO */
 	XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 80007aa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 80007b0:	f7ff ff8a 	bl	80006c8 <XMC_USIC_CH_RXFIFO_EnableEvent>
 					XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
 					XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

 	/* Connecting the previously enabled events to a Service Request line number */
 	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2110      	movs	r1, #16
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 80007ba:	f000 fef1 	bl	80015a0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
 	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2113      	movs	r1, #19
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 80007c4:	f000 feec 	bl	80015a0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

 	/* Start USIC operation as UART */
 	XMC_UART_CH_Start (XMC_UART0_CH0);
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <car_uart_to_pc_init+0x7c>)
 80007ca:	f7ff ffa5 	bl	8000718 <XMC_UART_CH_Start>

 	/*Initialization of the necessary ports*/
 	XMC_GPIO_Init (UART_TX, &uart_tx);
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <car_uart_to_pc_init+0x80>)
 80007d0:	2105      	movs	r1, #5
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <car_uart_to_pc_init+0x84>)
 80007d4:	f000 fbb2 	bl	8000f3c <XMC_GPIO_Init>
 	XMC_GPIO_Init (UART_RX, &uart_rx);
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <car_uart_to_pc_init+0x88>)
 80007da:	2104      	movs	r1, #4
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <car_uart_to_pc_init+0x84>)
 80007de:	f000 fbad 	bl	8000f3c <XMC_GPIO_Init>

 	/* Configuring priority and enabling NVIC IRQ for the defined service request
 	line number */
 	NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80007e2:	213f      	movs	r1, #63	; 0x3f
 80007e4:	2054      	movs	r0, #84	; 0x54
 80007e6:	f7ff ff27 	bl	8000638 <__NVIC_SetPriority>
 	NVIC_EnableIRQ (USIC0_0_IRQn);
 80007ea:	2054      	movs	r0, #84	; 0x54
 80007ec:	f7ff ff06 	bl	80005fc <__NVIC_EnableIRQ>
 }
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000000c 	.word	0x2000000c
 80007f8:	40030000 	.word	0x40030000
 80007fc:	20000000 	.word	0x20000000
 8000800:	48028100 	.word	0x48028100
 8000804:	20000a0c 	.word	0x20000a0c

08000808 <USIC0_0_IRQHandler>:
 /**
  * \brief Handles the reception of data via the UART module via interupts
  * \return none
  */
 void USIC0_0_IRQHandler (void)
 {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 	static uint8_t rx_ctr = 0;
 	uint8_t rx_tmp = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	71fb      	strb	r3, [r7, #7]

 	/* Read the RX FIFO till it is empty */
 	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000812:	e01f      	b.n	8000854 <USIC0_0_IRQHandler+0x4c>
 		rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <USIC0_0_IRQHandler+0x68>)
 8000816:	f000 fd4f 	bl	80012b8 <XMC_UART_CH_GetReceivedData>
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]

 		if ( (rx_tmp != STRING_LF) && (!str_available)) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b0a      	cmp	r3, #10
 8000822:	d011      	beq.n	8000848 <USIC0_0_IRQHandler+0x40>
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <USIC0_0_IRQHandler+0x6c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <USIC0_0_IRQHandler+0x40>
 			rx_buffer[rx_ctr++] = rx_tmp;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <USIC0_0_IRQHandler+0x70>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	b2d1      	uxtb	r1, r2
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <USIC0_0_IRQHandler+0x70>)
 800083c:	7011      	strb	r1, [r2, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <USIC0_0_IRQHandler+0x74>)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	5453      	strb	r3, [r2, r1]
 8000846:	e005      	b.n	8000854 <USIC0_0_IRQHandler+0x4c>
 		} else {
 			rx_ctr = 0;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <USIC0_0_IRQHandler+0x70>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 			str_available = true;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <USIC0_0_IRQHandler+0x6c>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 {
 	static uint8_t rx_ctr = 0;
 	uint8_t rx_tmp = 0;

 	/* Read the RX FIFO till it is empty */
 	while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <USIC0_0_IRQHandler+0x68>)
 8000856:	f7ff ff4b 	bl	80006f0 <XMC_USIC_CH_RXFIFO_IsEmpty>
 800085a:	4603      	mov	r3, r0
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1d6      	bne.n	8000814 <USIC0_0_IRQHandler+0xc>
 		} else {
 			rx_ctr = 0;
 			str_available = true;
 		}
 	}
 }
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40030000 	.word	0x40030000
 8000874:	200009c9 	.word	0x200009c9
 8000878:	200009c8 	.word	0x200009c8
 800087c:	200009cc 	.word	0x200009cc

08000880 <car_uart_get_string>:
  * \brief Reads a comlete string from the UART interface
  * \param  str the read string
  * \return 0 on success
  */
 uint8_t car_uart_get_string (char *str)
 {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 	if (str == NULL) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <car_uart_get_string+0x12>
 		return ERR_OUT_OF_MEMORY;
 800088e:	2364      	movs	r3, #100	; 0x64
 8000890:	e019      	b.n	80008c6 <car_uart_get_string+0x46>
 	}

 	while (!str_available);
 8000892:	bf00      	nop
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <car_uart_get_string+0x50>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f8      	bne.n	8000894 <car_uart_get_string+0x14>
 	memcpy (str, &rx_buffer, strlen (rx_buffer));
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <car_uart_get_string+0x54>)
 80008a4:	f000 ffec 	bl	8001880 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	4909      	ldr	r1, [pc, #36]	; (80008d4 <car_uart_get_string+0x54>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 fee6 	bl	8001680 <memcpy>
 	memset (&rx_buffer, 0x00, RX_BUFFER_SIZE);
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	2100      	movs	r1, #0
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <car_uart_get_string+0x54>)
 80008ba:	f000 ff7b 	bl	80017b4 <memset>

 	str_available = false;
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <car_uart_get_string+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 	return 0;
 80008c4:	2300      	movs	r3, #0
 }
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200009c9 	.word	0x200009c9
 80008d4:	200009cc 	.word	0x200009cc

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	490d      	ldr	r1, [pc, #52]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	4909      	ldr	r1, [pc, #36]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
  }
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	213f      	movs	r1, #63	; 0x3f
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f7ff ffc2 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000982:	409a      	lsls	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/******************************************************************************
 * Start of user functions
 *****************************************************************************/
void SysTick_Handler (void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  static uint32_t ticks = 0;

  ticks ++;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <SysTick_Handler+0x2c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <SysTick_Handler+0x2c>)
 80009a0:	6013      	str	r3, [r2, #0]
  if(ticks >= TICKS_WAIT)
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <SysTick_Handler+0x2c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009aa:	d306      	bcc.n	80009ba <SysTick_Handler+0x26>
  {
    XMC_GPIO_ToggleOutput(LED1);
 80009ac:	2101      	movs	r1, #1
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <SysTick_Handler+0x30>)
 80009b0:	f7ff ffde 	bl	8000970 <XMC_GPIO_ToggleOutput>
    ticks = 0;
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <SysTick_Handler+0x2c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
  }
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000a18 	.word	0x20000a18
 80009c4:	48028100 	.word	0x48028100

080009c8 <main>:



int main (void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b09a      	sub	sp, #104	; 0x68
 80009cc:	af00      	add	r7, sp, #0

  char rx_buff[RX_BUFFER_SIZE] = {0};
 80009ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d2:	2240      	movs	r2, #64	; 0x40
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 feec 	bl	80017b4 <memset>

  initRetargetSwo();
 80009dc:	f7ff fdac 	bl	8000538 <initRetargetSwo>
  XMC_GPIO_CONFIG_t led_config;
  led_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	773b      	strb	r3, [r7, #28]
  led_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	623b      	str	r3, [r7, #32]
  led_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80009ea:	2304      	movs	r3, #4
 80009ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  XMC_GPIO_Init(LED1, &led_config);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	461a      	mov	r2, r3
 80009f6:	2101      	movs	r1, #1
 80009f8:	481e      	ldr	r0, [pc, #120]	; (8000a74 <main+0xac>)
 80009fa:	f000 fa9f 	bl	8000f3c <XMC_GPIO_Init>


  XMC_GPIO_CONFIG_t throttle_config;
  throttle_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 80009fe:	2398      	movs	r3, #152	; 0x98
 8000a00:	743b      	strb	r3, [r7, #16]
  throttle_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a06:	617b      	str	r3, [r7, #20]
  throttle_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	763b      	strb	r3, [r7, #24]
  XMC_GPIO_Init(THROTTLE, &throttle_config);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	461a      	mov	r2, r3
 8000a12:	2103      	movs	r1, #3
 8000a14:	4817      	ldr	r0, [pc, #92]	; (8000a74 <main+0xac>)
 8000a16:	f000 fa91 	bl	8000f3c <XMC_GPIO_Init>

  XMC_GPIO_CONFIG_t steering_config;
  steering_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8000a1a:	2398      	movs	r3, #152	; 0x98
 8000a1c:	713b      	strb	r3, [r7, #4]
  steering_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a22:	60bb      	str	r3, [r7, #8]
  steering_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8000a24:	2304      	movs	r3, #4
 8000a26:	733b      	strb	r3, [r7, #12]
  XMC_GPIO_Init(STEERING, &steering_config);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4811      	ldr	r0, [pc, #68]	; (8000a74 <main+0xac>)
 8000a30:	f000 fa84 	bl	8000f3c <XMC_GPIO_Init>

  #if UART_EN
  car_uart_to_pc_init();
 8000a34:	f7ff fea2 	bl	800077c <car_uart_to_pc_init>
  #endif

  #if PWM_EN
  car_pwm_init();
 8000a38:	f7ff fc9e 	bl	8000378 <car_pwm_init>
  #endif

  SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <main+0xb0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <main+0xb4>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	099b      	lsrs	r3, r3, #6
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff6f 	bl	800092c <SysTick_Config>

  while(1)
  {
    car_uart_get_string(rx_buff);
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff14 	bl	8000880 <car_uart_get_string>
    car_set_pwm(rx_buff);
 8000a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fcd5 	bl	800040c <car_set_pwm>
    memset(&rx_buff, '\0', RX_BUFFER_SIZE);
 8000a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a66:	2240      	movs	r2, #64	; 0x40
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fea2 	bl	80017b4 <memset>
  }
 8000a70:	e7ed      	b.n	8000a4e <main+0x86>
 8000a72:	bf00      	nop
 8000a74:	48028100 	.word	0x48028100
 8000a78:	2000ffc0 	.word	0x2000ffc0
 8000a7c:	10624dd3 	.word	0x10624dd3

08000a80 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
 return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <_fstat+0x16>
  return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	e001      	b.n	8000ae6 <_fstat+0x1a>
 else
  return -2;
 8000ae2:	f06f 0301 	mvn.w	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000afe:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d108      	bne.n	8000b1a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x6c>)
 8000b18:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <_sbrk+0x64>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8000b2c:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8000b30:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <_sbrk+0x6c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d301      	bcc.n	8000b40 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e003      	b.n	8000b48 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8000b46:	693b      	ldr	r3, [r7, #16]
 }
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	0000f560 	.word	0x0000f560
 8000b58:	20000a1c 	.word	0x20000a1c
 8000b5c:	20000a60 	.word	0x20000a60
 8000b60:	20000a20 	.word	0x20000a20

08000b64 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e003      	b.n	8000ba2 <delay+0x16>
  {
    __NOP();
 8000b9a:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3f7      	bcc.n	8000b9a <delay+0xe>
  {
    __NOP();
  }
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000bb8:	b598      	push	{r3, r4, r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bc2:	4614      	mov	r4, r2
 8000bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000bca:	f000 f807 	bl	8000bdc <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000bce:	f000 f83d 	bl	8000c4c <SystemCoreClockSetup>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd98      	pop	{r3, r4, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000ffc4 	.word	0x2000ffc4

08000bdc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be2:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <SystemCoreSetup+0x64>)
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <SystemCoreSetup+0x68>)
 8000be8:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bea:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000bee:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <SystemCoreSetup+0x64>)
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <SystemCoreSetup+0x64>)
 8000bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000c00:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <SystemCoreSetup+0x64>)
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <SystemCoreSetup+0x64>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f023 0308 	bic.w	r3, r3, #8
 8000c0a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <SystemCoreSetup+0x6c>)
 8000c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c12:	3314      	adds	r3, #20
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f023 030f 	bic.w	r3, r3, #15
 8000c1e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f043 0303 	orr.w	r3, r3, #3
 8000c26:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <SystemCoreSetup+0x6c>)
 8000c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c2e:	3314      	adds	r3, #20
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	08000000 	.word	0x08000000
 8000c48:	58001000 	.word	0x58001000

08000c4c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000c50:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <SystemCoreClockSetup+0x1dc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10c      	bne.n	8000c76 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000c5c:	4a72      	ldr	r2, [pc, #456]	; (8000e28 <SystemCoreClockSetup+0x1dc>)
 8000c5e:	4b72      	ldr	r3, [pc, #456]	; (8000e28 <SystemCoreClockSetup+0x1dc>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000c68:	bf00      	nop
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <SystemCoreClockSetup+0x1dc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f9      	beq.n	8000c6a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000c76:	4b6d      	ldr	r3, [pc, #436]	; (8000e2c <SystemCoreClockSetup+0x1e0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d009      	beq.n	8000c96 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000c82:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <SystemCoreClockSetup+0x1e0>)
 8000c84:	4b69      	ldr	r3, [pc, #420]	; (8000e2c <SystemCoreClockSetup+0x1e0>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8c:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8000c8e:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000c92:	f7ff ff7b 	bl	8000b8c <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000c96:	4a66      	ldr	r2, [pc, #408]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000c98:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ca0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000ca2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000ca6:	f7ff ff71 	bl	8000b8c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000caa:	4a61      	ldr	r2, [pc, #388]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000cac:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb4:	f023 0302 	bic.w	r3, r3, #2
 8000cb8:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000cba:	4b5e      	ldr	r3, [pc, #376]	; (8000e34 <SystemCoreClockSetup+0x1e8>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d029      	beq.n	8000d1a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000cc6:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <SystemCoreClockSetup+0x1e8>)
 8000cc8:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <SystemCoreClockSetup+0x1e8>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000cd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cd4:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000cd6:	f000 f927 	bl	8000f28 <OSCHP_GetFrequency>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <SystemCoreClockSetup+0x1ec>)
 8000cde:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce2:	0d1b      	lsrs	r3, r3, #20
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	041b      	lsls	r3, r3, #16
 8000ce8:	4952      	ldr	r1, [pc, #328]	; (8000e34 <SystemCoreClockSetup+0x1e8>)
 8000cea:	4a52      	ldr	r2, [pc, #328]	; (8000e34 <SystemCoreClockSetup+0x1e8>)
 8000cec:	6852      	ldr	r2, [r2, #4]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000cf2:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000cfe:	4a4c      	ldr	r2, [pc, #304]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d00:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000d08:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000d0a:	bf00      	nop
 8000d0c:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000d14:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000d18:	d1f8      	bne.n	8000d0c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d26:	4a42      	ldr	r2, [pc, #264]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f043 0310 	orr.w	r3, r3, #16
 8000d30:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d34:	4a41      	ldr	r2, [pc, #260]	; (8000e3c <SystemCoreClockSetup+0x1f0>)
 8000d36:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d38:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d44:	4a3a      	ldr	r2, [pc, #232]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f023 0310 	bic.w	r3, r3, #16
 8000d4e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000d50:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d5c:	bf00      	nop
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d76:	bf00      	nop
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f9      	bne.n	8000d78 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000d84:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000d9c:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000db0:	2203      	movs	r2, #3
 8000db2:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dbe:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <SystemCoreClockSetup+0x1f8>)
 8000dc4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000dc6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dca:	f7ff fedf 	bl	8000b8c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000dce:	bf00      	nop
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f9      	beq.n	8000dd0 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000dde:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <SystemCoreClockSetup+0x1fc>)
 8000de0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000de2:	f241 1094 	movw	r0, #4500	; 0x1194
 8000de6:	f7ff fed1 	bl	8000b8c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000dea:	bf00      	nop
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f9      	beq.n	8000dec <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <SystemCoreClockSetup+0x200>)
 8000dfc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000dfe:	f241 7070 	movw	r0, #6000	; 0x1770
 8000e02:	f7ff fec3 	bl	8000b8c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000e06:	bf00      	nop
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <SystemCoreClockSetup+0x1e4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f9      	beq.n	8000e08 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <SystemCoreClockSetup+0x204>)
 8000e16:	2205      	movs	r2, #5
 8000e18:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <SystemCoreClockSetup+0x1f4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000e20:	f000 f818 	bl	8000e54 <SystemCoreClockUpdate>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	50004200 	.word	0x50004200
 8000e2c:	50004400 	.word	0x50004400
 8000e30:	50004710 	.word	0x50004710
 8000e34:	50004700 	.word	0x50004700
 8000e38:	6b5fca6b 	.word	0x6b5fca6b
 8000e3c:	01134f00 	.word	0x01134f00
 8000e40:	50004600 	.word	0x50004600
 8000e44:	01074f00 	.word	0x01074f00
 8000e48:	01044f00 	.word	0x01044f00
 8000e4c:	01034f00 	.word	0x01034f00
 8000e50:	50004160 	.word	0x50004160

08000e54 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <SystemCoreClockUpdate+0xc4>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03e      	beq.n	8000ee4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <SystemCoreClockUpdate+0xc8>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <SystemCoreClockUpdate+0xcc>)
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	e002      	b.n	8000e7e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000e78:	f000 f856 	bl	8000f28 <OSCHP_GetFrequency>
 8000e7c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <SystemCoreClockUpdate+0xc8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d020      	beq.n	8000ecc <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <SystemCoreClockUpdate+0xc8>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000e92:	0e1b      	lsrs	r3, r3, #24
 8000e94:	3301      	adds	r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <SystemCoreClockUpdate+0xc8>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <SystemCoreClockUpdate+0xc8>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000eae:	0c1b      	lsrs	r3, r3, #16
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	e00d      	b.n	8000ee8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <SystemCoreClockUpdate+0xc8>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e001      	b.n	8000ee8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SystemCoreClockUpdate+0xcc>)
 8000ee6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <SystemCoreClockUpdate+0xc4>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <SystemCoreClockUpdate+0xc4>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	3301      	adds	r3, #1
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <SystemCoreClockUpdate+0xd0>)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	50004600 	.word	0x50004600
 8000f1c:	50004710 	.word	0x50004710
 8000f20:	016e3600 	.word	0x016e3600
 8000f24:	2000ffc0 	.word	0x2000ffc0

08000f28 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <OSCHP_GetFrequency+0x10>)
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	00b71b00 	.word	0x00b71b00

08000f3c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	460b      	mov	r3, r1
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000f4a:	7afb      	ldrb	r3, [r7, #11]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3204      	adds	r2, #4
 8000f5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	21f8      	movs	r1, #248	; 0xf8
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	ea02 0103 	and.w	r1, r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1d02      	adds	r2, r0, #4
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000f82:	7afb      	ldrb	r3, [r7, #11]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4a38      	ldr	r2, [pc, #224]	; (8001078 <XMC_GPIO_Init+0x13c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d003      	beq.n	8000fa4 <XMC_GPIO_Init+0x68>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4a37      	ldr	r2, [pc, #220]	; (800107c <XMC_GPIO_Init+0x140>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d10a      	bne.n	8000fba <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	661a      	str	r2, [r3, #96]	; 0x60
 8000fb8:	e03c      	b.n	8001034 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000fc6:	7afb      	ldrb	r3, [r7, #11]
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3210      	adds	r2, #16
 8000fda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fde:	7afb      	ldrb	r3, [r7, #11]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	2107      	movs	r1, #7
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	ea02 0103 	and.w	r1, r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f100 0210 	add.w	r2, r0, #16
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	08db      	lsrs	r3, r3, #3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3210      	adds	r2, #16
 8001010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	4619      	mov	r1, r3
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	ea42 0103 	orr.w	r1, r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f100 0210 	add.w	r2, r0, #16
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3204      	adds	r2, #4
 8001048:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	ea42 0103 	orr.w	r1, r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1d02      	adds	r2, r0, #4
 8001066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	48028e00 	.word	0x48028e00
 800107c:	48028f00 	.word	0x48028f00

08001080 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <XMC_CCU4_lDeassertReset+0x50>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d103      	bne.n	80010b8 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80010b0:	2004      	movs	r0, #4
 80010b2:	f000 f927 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80010b6:	e016      	b.n	80010e6 <XMC_CCU4_lDeassertReset+0x46>
  if (module == CCU40)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <XMC_CCU4_lDeassertReset+0x54>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d103      	bne.n	80010c8 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80010c0:	2008      	movs	r0, #8
 80010c2:	f000 f91f 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80010c6:	e00e      	b.n	80010e6 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <XMC_CCU4_lDeassertReset+0x58>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d103      	bne.n	80010d8 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80010d0:	2010      	movs	r0, #16
 80010d2:	f000 f917 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80010d6:	e006      	b.n	80010e6 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <XMC_CCU4_lDeassertReset+0x5c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d102      	bne.n	80010e6 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <XMC_CCU4_lDeassertReset+0x60>)
 80010e2:	f000 f90f 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	4000c000 	.word	0x4000c000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	40014000 	.word	0x40014000
 80010fc:	48004000 	.word	0x48004000
 8001100:	10000001 	.word	0x10000001

08001104 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800110c:	2010      	movs	r0, #16
 800110e:	f000 f927 	bl	8001360 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffc4 	bl	80010a0 <XMC_CCU4_lDeassertReset>
#endif
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ffe9 	bl	8001104 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa4 	bl	8001080 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001144:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	039b      	lsls	r3, r3, #14
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop

08001160 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001178:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	795b      	ldrb	r3, [r3, #5]
 80011ae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	051a      	lsls	r2, r3, #20
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	791b      	ldrb	r3, [r3, #4]
 80011be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	795b      	ldrb	r3, [r3, #5]
 80011ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	795b      	ldrb	r3, [r3, #5]
 80011de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop

08001208 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001212:	2310      	movs	r3, #16
 8001214:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f8b2 	bl	8001380 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	79db      	ldrb	r3, [r3, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	79db      	ldrb	r3, [r3, #7]
 8001228:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f8f2 	bl	800141c <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	799b      	ldrb	r3, [r3, #6]
 800123c:	3b01      	subs	r3, #1
 800123e:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	085b      	lsrs	r3, r3, #1
 8001244:	3301      	adds	r3, #1
 8001246:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001248:	4313      	orrs	r3, r2
 800124a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	061b      	lsls	r3, r3, #24
 800125e:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	795b      	ldrb	r3, [r3, #5]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	795b      	ldrb	r3, [r3, #5]
 8001276:	3b01      	subs	r3, #1
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
 8001280:	e008      	b.n	8001294 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	791b      	ldrb	r3, [r3, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800129a:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	891b      	ldrh	r3, [r3, #8]
 80012a8:	461a      	mov	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop

080012b8 <XMC_UART_CH_GetReceivedData>:
    channel->IN[0U] = data;
  }
}

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80012c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	81fb      	strh	r3, [r7, #14]
 80012d4:	e003      	b.n	80012de <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80012dc:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80012de:	89fb      	ldrh	r3, [r7, #14]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000ffc0 	.word	0x2000ffc0

08001304 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0f1b      	lsrs	r3, r3, #28
 8001310:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001318:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	461a      	mov	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001328:	4413      	add	r3, r2
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	50004414 	.word	0x50004414

08001340 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001344:	f7ff ffd2 	bl	80012ec <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001348:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	50004600 	.word	0x50004600

08001360 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	6053      	str	r3, [r2, #4]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	50004600 	.word	0x50004600

08001380 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <XMC_USIC_CH_Enable+0x78>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <XMC_USIC_CH_Enable+0x18>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <XMC_USIC_CH_Enable+0x7c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d103      	bne.n	80013a0 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001398:	4819      	ldr	r0, [pc, #100]	; (8001400 <XMC_USIC_CH_Enable+0x80>)
 800139a:	f000 f91f 	bl	80015dc <XMC_USIC_Enable>
 800139e:	e016      	b.n	80013ce <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <XMC_USIC_CH_Enable+0x84>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d003      	beq.n	80013b0 <XMC_USIC_CH_Enable+0x30>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <XMC_USIC_CH_Enable+0x88>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d103      	bne.n	80013b8 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <XMC_USIC_CH_Enable+0x8c>)
 80013b2:	f000 f913 	bl	80015dc <XMC_USIC_Enable>
 80013b6:	e00a      	b.n	80013ce <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <XMC_USIC_CH_Enable+0x90>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d003      	beq.n	80013c8 <XMC_USIC_CH_Enable+0x48>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <XMC_USIC_CH_Enable+0x94>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d102      	bne.n	80013ce <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80013c8:	4813      	ldr	r0, [pc, #76]	; (8001418 <XMC_USIC_CH_Enable+0x98>)
 80013ca:	f000 f907 	bl	80015dc <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2203      	movs	r2, #3
 80013d2:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80013d4:	bf00      	nop
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f9      	beq.n	80013d6 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f023 020f 	bic.w	r2, r3, #15
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40030000 	.word	0x40030000
 80013fc:	40030200 	.word	0x40030200
 8001400:	40030008 	.word	0x40030008
 8001404:	48020000 	.word	0x48020000
 8001408:	48020200 	.word	0x48020200
 800140c:	48020008 	.word	0x48020008
 8001410:	48024000 	.word	0x48024000
 8001414:	48024200 	.word	0x48024200
 8001418:	48024008 	.word	0x48024008

0800141c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b63      	cmp	r3, #99	; 0x63
 800142c:	d958      	bls.n	80014e0 <XMC_USIC_CH_SetBaudrate+0xc4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d055      	beq.n	80014e0 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001434:	f7ff ff84 	bl	8001340 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001438:	4602      	mov	r2, r0
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800143c:	fba3 2302 	umull	r2, r3, r3, r2
 8001440:	095b      	lsrs	r3, r3, #5
 8001442:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	095b      	lsrs	r3, r3, #5
 800144e:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001450:	2301      	movs	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001454:	2301      	movs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001458:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800145c:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800145e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
 8001464:	e022      	b.n	80014ac <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800146a:	fb02 f203 	mul.w	r2, r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	0a9b      	lsrs	r3, r3, #10
 8001480:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001488:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001490:	d209      	bcs.n	80014a6 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	429a      	cmp	r2, r3
 8001498:	d205      	bcs.n	80014a6 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80014a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80014a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a8:	3b01      	subs	r3, #1
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1d9      	bne.n	8001466 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80014c2:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	3a01      	subs	r2, #1
 80014c8:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80014ca:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	3b01      	subs	r3, #1
 80014d0:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80014d2:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80014de:	e002      	b.n	80014e6 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80014e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3738      	adds	r7, #56	; 0x38
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	51eb851f 	.word	0x51eb851f
 80014f8:	fc0080ef 	.word	0xfc0080ef

080014fc <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001512:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001524:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	0211      	lsls	r1, r2, #8
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001532:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001534:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	f8ffc0c0 	.word	0xf8ffc0c0

0800154c <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001562:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001574:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	0211      	lsls	r1, r2, #8
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001582:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001584:	4313      	orrs	r3, r2
 8001586:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	efffc0c0 	.word	0xefffc0c0

080015a0 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	460b      	mov	r3, r1
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	2107      	movs	r1, #7
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015c8:	431a      	orrs	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <XMC_USIC_Enable+0x40>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d104      	bne.n	80015f6 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80015ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015f0:	f7ff fe88 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80015f4:	e00e      	b.n	8001614 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <XMC_USIC_Enable+0x44>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d103      	bne.n	8001606 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80015fe:	4809      	ldr	r0, [pc, #36]	; (8001624 <XMC_USIC_Enable+0x48>)
 8001600:	f7ff fe80 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001604:	e006      	b.n	8001614 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <XMC_USIC_Enable+0x4c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d102      	bne.n	8001614 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <XMC_USIC_Enable+0x50>)
 8001610:	f7ff fe78 	bl	8001304 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40030008 	.word	0x40030008
 8001620:	48020008 	.word	0x48020008
 8001624:	10000080 	.word	0x10000080
 8001628:	48024008 	.word	0x48024008
 800162c:	10000100 	.word	0x10000100

08001630 <__libc_init_array>:
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	4e0f      	ldr	r6, [pc, #60]	; (8001670 <__libc_init_array+0x40>)
 8001634:	4d0f      	ldr	r5, [pc, #60]	; (8001674 <__libc_init_array+0x44>)
 8001636:	1b76      	subs	r6, r6, r5
 8001638:	10b6      	asrs	r6, r6, #2
 800163a:	bf18      	it	ne
 800163c:	2400      	movne	r4, #0
 800163e:	d005      	beq.n	800164c <__libc_init_array+0x1c>
 8001640:	3401      	adds	r4, #1
 8001642:	f855 3b04 	ldr.w	r3, [r5], #4
 8001646:	4798      	blx	r3
 8001648:	42a6      	cmp	r6, r4
 800164a:	d1f9      	bne.n	8001640 <__libc_init_array+0x10>
 800164c:	4e0a      	ldr	r6, [pc, #40]	; (8001678 <__libc_init_array+0x48>)
 800164e:	4d0b      	ldr	r5, [pc, #44]	; (800167c <__libc_init_array+0x4c>)
 8001650:	1b76      	subs	r6, r6, r5
 8001652:	f7ff fa87 	bl	8000b64 <_init>
 8001656:	10b6      	asrs	r6, r6, #2
 8001658:	bf18      	it	ne
 800165a:	2400      	movne	r4, #0
 800165c:	d006      	beq.n	800166c <__libc_init_array+0x3c>
 800165e:	3401      	adds	r4, #1
 8001660:	f855 3b04 	ldr.w	r3, [r5], #4
 8001664:	4798      	blx	r3
 8001666:	42a6      	cmp	r6, r4
 8001668:	d1f9      	bne.n	800165e <__libc_init_array+0x2e>
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	bd70      	pop	{r4, r5, r6, pc}
 800166e:	bf00      	nop
 8001670:	200009c8 	.word	0x200009c8
 8001674:	200009c8 	.word	0x200009c8
 8001678:	200009c8 	.word	0x200009c8
 800167c:	200009c8 	.word	0x200009c8

08001680 <memcpy>:
 8001680:	4684      	mov	ip, r0
 8001682:	ea41 0300 	orr.w	r3, r1, r0
 8001686:	f013 0303 	ands.w	r3, r3, #3
 800168a:	d16d      	bne.n	8001768 <memcpy+0xe8>
 800168c:	3a40      	subs	r2, #64	; 0x40
 800168e:	d341      	bcc.n	8001714 <memcpy+0x94>
 8001690:	f851 3b04 	ldr.w	r3, [r1], #4
 8001694:	f840 3b04 	str.w	r3, [r0], #4
 8001698:	f851 3b04 	ldr.w	r3, [r1], #4
 800169c:	f840 3b04 	str.w	r3, [r0], #4
 80016a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016a4:	f840 3b04 	str.w	r3, [r0], #4
 80016a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016ac:	f840 3b04 	str.w	r3, [r0], #4
 80016b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016b4:	f840 3b04 	str.w	r3, [r0], #4
 80016b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016bc:	f840 3b04 	str.w	r3, [r0], #4
 80016c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016c4:	f840 3b04 	str.w	r3, [r0], #4
 80016c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016cc:	f840 3b04 	str.w	r3, [r0], #4
 80016d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016d4:	f840 3b04 	str.w	r3, [r0], #4
 80016d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016e4:	f840 3b04 	str.w	r3, [r0], #4
 80016e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016ec:	f840 3b04 	str.w	r3, [r0], #4
 80016f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016f4:	f840 3b04 	str.w	r3, [r0], #4
 80016f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016fc:	f840 3b04 	str.w	r3, [r0], #4
 8001700:	f851 3b04 	ldr.w	r3, [r1], #4
 8001704:	f840 3b04 	str.w	r3, [r0], #4
 8001708:	f851 3b04 	ldr.w	r3, [r1], #4
 800170c:	f840 3b04 	str.w	r3, [r0], #4
 8001710:	3a40      	subs	r2, #64	; 0x40
 8001712:	d2bd      	bcs.n	8001690 <memcpy+0x10>
 8001714:	3230      	adds	r2, #48	; 0x30
 8001716:	d311      	bcc.n	800173c <memcpy+0xbc>
 8001718:	f851 3b04 	ldr.w	r3, [r1], #4
 800171c:	f840 3b04 	str.w	r3, [r0], #4
 8001720:	f851 3b04 	ldr.w	r3, [r1], #4
 8001724:	f840 3b04 	str.w	r3, [r0], #4
 8001728:	f851 3b04 	ldr.w	r3, [r1], #4
 800172c:	f840 3b04 	str.w	r3, [r0], #4
 8001730:	f851 3b04 	ldr.w	r3, [r1], #4
 8001734:	f840 3b04 	str.w	r3, [r0], #4
 8001738:	3a10      	subs	r2, #16
 800173a:	d2ed      	bcs.n	8001718 <memcpy+0x98>
 800173c:	320c      	adds	r2, #12
 800173e:	d305      	bcc.n	800174c <memcpy+0xcc>
 8001740:	f851 3b04 	ldr.w	r3, [r1], #4
 8001744:	f840 3b04 	str.w	r3, [r0], #4
 8001748:	3a04      	subs	r2, #4
 800174a:	d2f9      	bcs.n	8001740 <memcpy+0xc0>
 800174c:	3204      	adds	r2, #4
 800174e:	d008      	beq.n	8001762 <memcpy+0xe2>
 8001750:	07d2      	lsls	r2, r2, #31
 8001752:	bf1c      	itt	ne
 8001754:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001758:	f800 3b01 	strbne.w	r3, [r0], #1
 800175c:	d301      	bcc.n	8001762 <memcpy+0xe2>
 800175e:	880b      	ldrh	r3, [r1, #0]
 8001760:	8003      	strh	r3, [r0, #0]
 8001762:	4660      	mov	r0, ip
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2a08      	cmp	r2, #8
 800176a:	d313      	bcc.n	8001794 <memcpy+0x114>
 800176c:	078b      	lsls	r3, r1, #30
 800176e:	d08d      	beq.n	800168c <memcpy+0xc>
 8001770:	f010 0303 	ands.w	r3, r0, #3
 8001774:	d08a      	beq.n	800168c <memcpy+0xc>
 8001776:	f1c3 0304 	rsb	r3, r3, #4
 800177a:	1ad2      	subs	r2, r2, r3
 800177c:	07db      	lsls	r3, r3, #31
 800177e:	bf1c      	itt	ne
 8001780:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001784:	f800 3b01 	strbne.w	r3, [r0], #1
 8001788:	d380      	bcc.n	800168c <memcpy+0xc>
 800178a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800178e:	f820 3b02 	strh.w	r3, [r0], #2
 8001792:	e77b      	b.n	800168c <memcpy+0xc>
 8001794:	3a04      	subs	r2, #4
 8001796:	d3d9      	bcc.n	800174c <memcpy+0xcc>
 8001798:	3a01      	subs	r2, #1
 800179a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800179e:	f800 3b01 	strb.w	r3, [r0], #1
 80017a2:	d2f9      	bcs.n	8001798 <memcpy+0x118>
 80017a4:	780b      	ldrb	r3, [r1, #0]
 80017a6:	7003      	strb	r3, [r0, #0]
 80017a8:	784b      	ldrb	r3, [r1, #1]
 80017aa:	7043      	strb	r3, [r0, #1]
 80017ac:	788b      	ldrb	r3, [r1, #2]
 80017ae:	7083      	strb	r3, [r0, #2]
 80017b0:	4660      	mov	r0, ip
 80017b2:	4770      	bx	lr

080017b4 <memset>:
 80017b4:	b470      	push	{r4, r5, r6}
 80017b6:	0784      	lsls	r4, r0, #30
 80017b8:	d046      	beq.n	8001848 <memset+0x94>
 80017ba:	1e54      	subs	r4, r2, #1
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d041      	beq.n	8001844 <memset+0x90>
 80017c0:	b2cd      	uxtb	r5, r1
 80017c2:	4603      	mov	r3, r0
 80017c4:	e002      	b.n	80017cc <memset+0x18>
 80017c6:	1e62      	subs	r2, r4, #1
 80017c8:	b3e4      	cbz	r4, 8001844 <memset+0x90>
 80017ca:	4614      	mov	r4, r2
 80017cc:	f803 5b01 	strb.w	r5, [r3], #1
 80017d0:	079a      	lsls	r2, r3, #30
 80017d2:	d1f8      	bne.n	80017c6 <memset+0x12>
 80017d4:	2c03      	cmp	r4, #3
 80017d6:	d92e      	bls.n	8001836 <memset+0x82>
 80017d8:	b2cd      	uxtb	r5, r1
 80017da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80017de:	2c0f      	cmp	r4, #15
 80017e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80017e4:	d919      	bls.n	800181a <memset+0x66>
 80017e6:	f103 0210 	add.w	r2, r3, #16
 80017ea:	4626      	mov	r6, r4
 80017ec:	3e10      	subs	r6, #16
 80017ee:	2e0f      	cmp	r6, #15
 80017f0:	f842 5c10 	str.w	r5, [r2, #-16]
 80017f4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80017f8:	f842 5c08 	str.w	r5, [r2, #-8]
 80017fc:	f842 5c04 	str.w	r5, [r2, #-4]
 8001800:	f102 0210 	add.w	r2, r2, #16
 8001804:	d8f2      	bhi.n	80017ec <memset+0x38>
 8001806:	f1a4 0210 	sub.w	r2, r4, #16
 800180a:	f022 020f 	bic.w	r2, r2, #15
 800180e:	f004 040f 	and.w	r4, r4, #15
 8001812:	3210      	adds	r2, #16
 8001814:	2c03      	cmp	r4, #3
 8001816:	4413      	add	r3, r2
 8001818:	d90d      	bls.n	8001836 <memset+0x82>
 800181a:	461e      	mov	r6, r3
 800181c:	4622      	mov	r2, r4
 800181e:	3a04      	subs	r2, #4
 8001820:	2a03      	cmp	r2, #3
 8001822:	f846 5b04 	str.w	r5, [r6], #4
 8001826:	d8fa      	bhi.n	800181e <memset+0x6a>
 8001828:	1f22      	subs	r2, r4, #4
 800182a:	f022 0203 	bic.w	r2, r2, #3
 800182e:	3204      	adds	r2, #4
 8001830:	4413      	add	r3, r2
 8001832:	f004 0403 	and.w	r4, r4, #3
 8001836:	b12c      	cbz	r4, 8001844 <memset+0x90>
 8001838:	b2c9      	uxtb	r1, r1
 800183a:	441c      	add	r4, r3
 800183c:	f803 1b01 	strb.w	r1, [r3], #1
 8001840:	42a3      	cmp	r3, r4
 8001842:	d1fb      	bne.n	800183c <memset+0x88>
 8001844:	bc70      	pop	{r4, r5, r6}
 8001846:	4770      	bx	lr
 8001848:	4614      	mov	r4, r2
 800184a:	4603      	mov	r3, r0
 800184c:	e7c2      	b.n	80017d4 <memset+0x20>
 800184e:	bf00      	nop

08001850 <printf>:
 8001850:	b40f      	push	{r0, r1, r2, r3}
 8001852:	b500      	push	{lr}
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <printf+0x24>)
 8001856:	b083      	sub	sp, #12
 8001858:	ab04      	add	r3, sp, #16
 800185a:	6808      	ldr	r0, [r1, #0]
 800185c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001860:	6881      	ldr	r1, [r0, #8]
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	f000 f92c 	bl	8001ac0 <_vfprintf_r>
 8001868:	b003      	add	sp, #12
 800186a:	f85d eb04 	ldr.w	lr, [sp], #4
 800186e:	b004      	add	sp, #16
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000448 	.word	0x20000448
	...

08001880 <strlen>:
 8001880:	f890 f000 	pld	[r0]
 8001884:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001888:	f020 0107 	bic.w	r1, r0, #7
 800188c:	f06f 0c00 	mvn.w	ip, #0
 8001890:	f010 0407 	ands.w	r4, r0, #7
 8001894:	f891 f020 	pld	[r1, #32]
 8001898:	f040 8049 	bne.w	800192e <strlen+0xae>
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	f06f 0007 	mvn.w	r0, #7
 80018a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80018a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80018ac:	f100 0008 	add.w	r0, r0, #8
 80018b0:	fa82 f24c 	uadd8	r2, r2, ip
 80018b4:	faa4 f28c 	sel	r2, r4, ip
 80018b8:	fa83 f34c 	uadd8	r3, r3, ip
 80018bc:	faa2 f38c 	sel	r3, r2, ip
 80018c0:	bb4b      	cbnz	r3, 8001916 <strlen+0x96>
 80018c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80018c6:	fa82 f24c 	uadd8	r2, r2, ip
 80018ca:	f100 0008 	add.w	r0, r0, #8
 80018ce:	faa4 f28c 	sel	r2, r4, ip
 80018d2:	fa83 f34c 	uadd8	r3, r3, ip
 80018d6:	faa2 f38c 	sel	r3, r2, ip
 80018da:	b9e3      	cbnz	r3, 8001916 <strlen+0x96>
 80018dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80018e0:	fa82 f24c 	uadd8	r2, r2, ip
 80018e4:	f100 0008 	add.w	r0, r0, #8
 80018e8:	faa4 f28c 	sel	r2, r4, ip
 80018ec:	fa83 f34c 	uadd8	r3, r3, ip
 80018f0:	faa2 f38c 	sel	r3, r2, ip
 80018f4:	b97b      	cbnz	r3, 8001916 <strlen+0x96>
 80018f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80018fa:	f101 0120 	add.w	r1, r1, #32
 80018fe:	fa82 f24c 	uadd8	r2, r2, ip
 8001902:	f100 0008 	add.w	r0, r0, #8
 8001906:	faa4 f28c 	sel	r2, r4, ip
 800190a:	fa83 f34c 	uadd8	r3, r3, ip
 800190e:	faa2 f38c 	sel	r3, r2, ip
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0c6      	beq.n	80018a4 <strlen+0x24>
 8001916:	2a00      	cmp	r2, #0
 8001918:	bf04      	itt	eq
 800191a:	3004      	addeq	r0, #4
 800191c:	461a      	moveq	r2, r3
 800191e:	ba12      	rev	r2, r2
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8001928:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800192c:	4770      	bx	lr
 800192e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001932:	f004 0503 	and.w	r5, r4, #3
 8001936:	f1c4 0000 	rsb	r0, r4, #0
 800193a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800193e:	f014 0f04 	tst.w	r4, #4
 8001942:	f891 f040 	pld	[r1, #64]	; 0x40
 8001946:	fa0c f505 	lsl.w	r5, ip, r5
 800194a:	ea62 0205 	orn	r2, r2, r5
 800194e:	bf1c      	itt	ne
 8001950:	ea63 0305 	ornne	r3, r3, r5
 8001954:	4662      	movne	r2, ip
 8001956:	f04f 0400 	mov.w	r4, #0
 800195a:	e7a9      	b.n	80018b0 <strlen+0x30>

0800195c <_strtol_l.isra.0>:
 800195c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001960:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8001964:	460f      	mov	r7, r1
 8001966:	4680      	mov	r8, r0
 8001968:	4616      	mov	r6, r2
 800196a:	461d      	mov	r5, r3
 800196c:	468b      	mov	fp, r1
 800196e:	e000      	b.n	8001972 <_strtol_l.isra.0+0x16>
 8001970:	46a3      	mov	fp, r4
 8001972:	465c      	mov	r4, fp
 8001974:	4648      	mov	r0, r9
 8001976:	f814 ab01 	ldrb.w	sl, [r4], #1
 800197a:	f002 ff33 	bl	80047e4 <__locale_ctype_ptr_l>
 800197e:	4450      	add	r0, sl
 8001980:	7841      	ldrb	r1, [r0, #1]
 8001982:	f001 0108 	and.w	r1, r1, #8
 8001986:	f001 0cff 	and.w	ip, r1, #255	; 0xff
 800198a:	2900      	cmp	r1, #0
 800198c:	d1f0      	bne.n	8001970 <_strtol_l.isra.0+0x14>
 800198e:	4652      	mov	r2, sl
 8001990:	2a2d      	cmp	r2, #45	; 0x2d
 8001992:	d061      	beq.n	8001a58 <_strtol_l.isra.0+0xfc>
 8001994:	2a2b      	cmp	r2, #43	; 0x2b
 8001996:	bf04      	itt	eq
 8001998:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
 800199c:	f10b 0402 	addeq.w	r4, fp, #2
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	d043      	beq.n	8001a2c <_strtol_l.isra.0+0xd0>
 80019a4:	2d10      	cmp	r5, #16
 80019a6:	d065      	beq.n	8001a74 <_strtol_l.isra.0+0x118>
 80019a8:	46a9      	mov	r9, r5
 80019aa:	f1bc 0f00 	cmp.w	ip, #0
 80019ae:	bf0c      	ite	eq
 80019b0:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
 80019b4:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
 80019b8:	2100      	movs	r1, #0
 80019ba:	fbba fef9 	udiv	lr, sl, r9
 80019be:	4608      	mov	r0, r1
 80019c0:	fb09 aa1e 	mls	sl, r9, lr, sl
 80019c4:	e005      	b.n	80019d2 <_strtol_l.isra.0+0x76>
 80019c6:	d029      	beq.n	8001a1c <_strtol_l.isra.0+0xc0>
 80019c8:	fb09 3000 	mla	r0, r9, r0, r3
 80019cc:	2101      	movs	r1, #1
 80019ce:	f814 2b01 	ldrb.w	r2, [r4], #1
 80019d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d905      	bls.n	80019e6 <_strtol_l.isra.0+0x8a>
 80019da:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80019de:	2b19      	cmp	r3, #25
 80019e0:	d80a      	bhi.n	80019f8 <_strtol_l.isra.0+0x9c>
 80019e2:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
 80019e6:	429d      	cmp	r5, r3
 80019e8:	dd0e      	ble.n	8001a08 <_strtol_l.isra.0+0xac>
 80019ea:	1c4a      	adds	r2, r1, #1
 80019ec:	d0ef      	beq.n	80019ce <_strtol_l.isra.0+0x72>
 80019ee:	4586      	cmp	lr, r0
 80019f0:	d2e9      	bcs.n	80019c6 <_strtol_l.isra.0+0x6a>
 80019f2:	f04f 31ff 	mov.w	r1, #4294967295
 80019f6:	e7ea      	b.n	80019ce <_strtol_l.isra.0+0x72>
 80019f8:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80019fc:	2b19      	cmp	r3, #25
 80019fe:	d803      	bhi.n	8001a08 <_strtol_l.isra.0+0xac>
 8001a00:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
 8001a04:	429d      	cmp	r5, r3
 8001a06:	dcf0      	bgt.n	80019ea <_strtol_l.isra.0+0x8e>
 8001a08:	1c4b      	adds	r3, r1, #1
 8001a0a:	d015      	beq.n	8001a38 <_strtol_l.isra.0+0xdc>
 8001a0c:	f1bc 0f00 	cmp.w	ip, #0
 8001a10:	d110      	bne.n	8001a34 <_strtol_l.isra.0+0xd8>
 8001a12:	b14e      	cbz	r6, 8001a28 <_strtol_l.isra.0+0xcc>
 8001a14:	b9e1      	cbnz	r1, 8001a50 <_strtol_l.isra.0+0xf4>
 8001a16:	6037      	str	r7, [r6, #0]
 8001a18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a1c:	459a      	cmp	sl, r3
 8001a1e:	dad3      	bge.n	80019c8 <_strtol_l.isra.0+0x6c>
 8001a20:	4670      	mov	r0, lr
 8001a22:	f04f 31ff 	mov.w	r1, #4294967295
 8001a26:	e7d2      	b.n	80019ce <_strtol_l.isra.0+0x72>
 8001a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a2c:	2a30      	cmp	r2, #48	; 0x30
 8001a2e:	d01a      	beq.n	8001a66 <_strtol_l.isra.0+0x10a>
 8001a30:	250a      	movs	r5, #10
 8001a32:	e7b9      	b.n	80019a8 <_strtol_l.isra.0+0x4c>
 8001a34:	4240      	negs	r0, r0
 8001a36:	e7ec      	b.n	8001a12 <_strtol_l.isra.0+0xb6>
 8001a38:	f1bc 0f00 	cmp.w	ip, #0
 8001a3c:	f04f 0322 	mov.w	r3, #34	; 0x22
 8001a40:	bf0c      	ite	eq
 8001a42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001a46:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8001a4a:	f8c8 3000 	str.w	r3, [r8]
 8001a4e:	b1f6      	cbz	r6, 8001a8e <_strtol_l.isra.0+0x132>
 8001a50:	1e67      	subs	r7, r4, #1
 8001a52:	6037      	str	r7, [r6, #0]
 8001a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a58:	f10b 0402 	add.w	r4, fp, #2
 8001a5c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8001a60:	f04f 0c01 	mov.w	ip, #1
 8001a64:	e79c      	b.n	80019a0 <_strtol_l.isra.0+0x44>
 8001a66:	7823      	ldrb	r3, [r4, #0]
 8001a68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001a6c:	2b58      	cmp	r3, #88	; 0x58
 8001a6e:	d008      	beq.n	8001a82 <_strtol_l.isra.0+0x126>
 8001a70:	2508      	movs	r5, #8
 8001a72:	e799      	b.n	80019a8 <_strtol_l.isra.0+0x4c>
 8001a74:	2a30      	cmp	r2, #48	; 0x30
 8001a76:	d197      	bne.n	80019a8 <_strtol_l.isra.0+0x4c>
 8001a78:	7823      	ldrb	r3, [r4, #0]
 8001a7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001a7e:	2b58      	cmp	r3, #88	; 0x58
 8001a80:	d192      	bne.n	80019a8 <_strtol_l.isra.0+0x4c>
 8001a82:	f04f 0910 	mov.w	r9, #16
 8001a86:	7862      	ldrb	r2, [r4, #1]
 8001a88:	464d      	mov	r5, r9
 8001a8a:	3402      	adds	r4, #2
 8001a8c:	e78d      	b.n	80019aa <_strtol_l.isra.0+0x4e>
 8001a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop

08001a94 <strtol>:
 8001a94:	b530      	push	{r4, r5, lr}
 8001a96:	4c08      	ldr	r4, [pc, #32]	; (8001ab8 <strtol+0x24>)
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <strtol+0x28>)
 8001a9a:	6825      	ldr	r5, [r4, #0]
 8001a9c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	2c00      	cmp	r4, #0
 8001aa2:	bf08      	it	eq
 8001aa4:	461c      	moveq	r4, r3
 8001aa6:	9400      	str	r4, [sp, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	460a      	mov	r2, r1
 8001aac:	4601      	mov	r1, r0
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f7ff ff54 	bl	800195c <_strtol_l.isra.0>
 8001ab4:	b003      	add	sp, #12
 8001ab6:	bd30      	pop	{r4, r5, pc}
 8001ab8:	20000448 	.word	0x20000448
 8001abc:	2000044c 	.word	0x2000044c

08001ac0 <_vfprintf_r>:
 8001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac4:	b0c5      	sub	sp, #276	; 0x114
 8001ac6:	461c      	mov	r4, r3
 8001ac8:	9108      	str	r1, [sp, #32]
 8001aca:	4616      	mov	r6, r2
 8001acc:	4605      	mov	r5, r0
 8001ace:	900a      	str	r0, [sp, #40]	; 0x28
 8001ad0:	f002 fe8c 	bl	80047ec <_localeconv_r>
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	9317      	str	r3, [sp, #92]	; 0x5c
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fed1 	bl	8001880 <strlen>
 8001ade:	940e      	str	r4, [sp, #56]	; 0x38
 8001ae0:	9016      	str	r0, [sp, #88]	; 0x58
 8001ae2:	b11d      	cbz	r5, 8001aec <_vfprintf_r+0x2c>
 8001ae4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8123 	beq.w	8001d32 <_vfprintf_r+0x272>
 8001aec:	9808      	ldr	r0, [sp, #32]
 8001aee:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8001af2:	b293      	uxth	r3, r2
 8001af4:	0499      	lsls	r1, r3, #18
 8001af6:	d407      	bmi.n	8001b08 <_vfprintf_r+0x48>
 8001af8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001afa:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8001afe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001b02:	8183      	strh	r3, [r0, #12]
 8001b04:	6641      	str	r1, [r0, #100]	; 0x64
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	071a      	lsls	r2, r3, #28
 8001b0a:	f140 80dd 	bpl.w	8001cc8 <_vfprintf_r+0x208>
 8001b0e:	9a08      	ldr	r2, [sp, #32]
 8001b10:	6912      	ldr	r2, [r2, #16]
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	f000 80d8 	beq.w	8001cc8 <_vfprintf_r+0x208>
 8001b18:	f003 031a 	and.w	r3, r3, #26
 8001b1c:	2b0a      	cmp	r3, #10
 8001b1e:	f000 80e1 	beq.w	8001ce4 <_vfprintf_r+0x224>
 8001b22:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8001d40 <_vfprintf_r+0x280>
 8001b26:	2300      	movs	r3, #0
 8001b28:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001b2c:	9312      	str	r3, [sp, #72]	; 0x48
 8001b2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b30:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b32:	9319      	str	r3, [sp, #100]	; 0x64
 8001b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b36:	f8df a214 	ldr.w	sl, [pc, #532]	; 8001d4c <_vfprintf_r+0x28c>
 8001b3a:	ab34      	add	r3, sp, #208	; 0xd0
 8001b3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b3e:	4699      	mov	r9, r3
 8001b40:	46b0      	mov	r8, r6
 8001b42:	f898 3000 	ldrb.w	r3, [r8]
 8001b46:	4644      	mov	r4, r8
 8001b48:	b1eb      	cbz	r3, 8001b86 <_vfprintf_r+0xc6>
 8001b4a:	2b25      	cmp	r3, #37	; 0x25
 8001b4c:	d102      	bne.n	8001b54 <_vfprintf_r+0x94>
 8001b4e:	e01a      	b.n	8001b86 <_vfprintf_r+0xc6>
 8001b50:	2b25      	cmp	r3, #37	; 0x25
 8001b52:	d003      	beq.n	8001b5c <_vfprintf_r+0x9c>
 8001b54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <_vfprintf_r+0x90>
 8001b5c:	ebc8 0504 	rsb	r5, r8, r4
 8001b60:	b18d      	cbz	r5, 8001b86 <_vfprintf_r+0xc6>
 8001b62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001b64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001b66:	f8c9 8000 	str.w	r8, [r9]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	442a      	add	r2, r5
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	f8c9 5004 	str.w	r5, [r9, #4]
 8001b74:	9229      	str	r2, [sp, #164]	; 0xa4
 8001b76:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b78:	f300 80c2 	bgt.w	8001d00 <_vfprintf_r+0x240>
 8001b7c:	f109 0908 	add.w	r9, r9, #8
 8001b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b82:	442b      	add	r3, r5
 8001b84:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b86:	7823      	ldrb	r3, [r4, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80c2 	beq.w	8001d12 <_vfprintf_r+0x252>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	461a      	mov	r2, r3
 8001b92:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8001b96:	4619      	mov	r1, r3
 8001b98:	930c      	str	r3, [sp, #48]	; 0x30
 8001b9a:	9307      	str	r3, [sp, #28]
 8001b9c:	f04f 3bff 	mov.w	fp, #4294967295
 8001ba0:	7863      	ldrb	r3, [r4, #1]
 8001ba2:	f104 0801 	add.w	r8, r4, #1
 8001ba6:	465d      	mov	r5, fp
 8001ba8:	f108 0801 	add.w	r8, r8, #1
 8001bac:	f1a3 0020 	sub.w	r0, r3, #32
 8001bb0:	2858      	cmp	r0, #88	; 0x58
 8001bb2:	f200 8459 	bhi.w	8002468 <_vfprintf_r+0x9a8>
 8001bb6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001bba:	040f      	.short	0x040f
 8001bbc:	04570457 	.word	0x04570457
 8001bc0:	04570418 	.word	0x04570418
 8001bc4:	04570457 	.word	0x04570457
 8001bc8:	04570457 	.word	0x04570457
 8001bcc:	03620457 	.word	0x03620457
 8001bd0:	04570449 	.word	0x04570449
 8001bd4:	0109005d 	.word	0x0109005d
 8001bd8:	01250457 	.word	0x01250457
 8001bdc:	03700370 	.word	0x03700370
 8001be0:	03700370 	.word	0x03700370
 8001be4:	03700370 	.word	0x03700370
 8001be8:	03700370 	.word	0x03700370
 8001bec:	04570370 	.word	0x04570370
 8001bf0:	04570457 	.word	0x04570457
 8001bf4:	04570457 	.word	0x04570457
 8001bf8:	04570457 	.word	0x04570457
 8001bfc:	04570457 	.word	0x04570457
 8001c00:	03800457 	.word	0x03800457
 8001c04:	0457039d 	.word	0x0457039d
 8001c08:	0457039d 	.word	0x0457039d
 8001c0c:	04570457 	.word	0x04570457
 8001c10:	03eb0457 	.word	0x03eb0457
 8001c14:	04570457 	.word	0x04570457
 8001c18:	0457012c 	.word	0x0457012c
 8001c1c:	04570457 	.word	0x04570457
 8001c20:	04570457 	.word	0x04570457
 8001c24:	04570155 	.word	0x04570155
 8001c28:	02b40457 	.word	0x02b40457
 8001c2c:	04570457 	.word	0x04570457
 8001c30:	04570457 	.word	0x04570457
 8001c34:	04570457 	.word	0x04570457
 8001c38:	04570457 	.word	0x04570457
 8001c3c:	04570457 	.word	0x04570457
 8001c40:	030f02f5 	.word	0x030f02f5
 8001c44:	039d039d 	.word	0x039d039d
 8001c48:	033f039d 	.word	0x033f039d
 8001c4c:	0457030f 	.word	0x0457030f
 8001c50:	03460457 	.word	0x03460457
 8001c54:	03500457 	.word	0x03500457
 8001c58:	006400cb 	.word	0x006400cb
 8001c5c:	04570420 	.word	0x04570420
 8001c60:	04570428 	.word	0x04570428
 8001c64:	045703f2 	.word	0x045703f2
 8001c68:	03fa0457 	.word	0x03fa0457
 8001c6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001c6e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c70:	4240      	negs	r0, r0
 8001c72:	900c      	str	r0, [sp, #48]	; 0x30
 8001c74:	9b07      	ldr	r3, [sp, #28]
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	9307      	str	r3, [sp, #28]
 8001c7c:	f898 3000 	ldrb.w	r3, [r8]
 8001c80:	e792      	b.n	8001ba8 <_vfprintf_r+0xe8>
 8001c82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001c84:	46ab      	mov	fp, r5
 8001c86:	2100      	movs	r1, #0
 8001c88:	6804      	ldr	r4, [r0, #0]
 8001c8a:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8001c8e:	1d07      	adds	r7, r0, #4
 8001c90:	9807      	ldr	r0, [sp, #28]
 8001c92:	2330      	movs	r3, #48	; 0x30
 8001c94:	2278      	movs	r2, #120	; 0x78
 8001c96:	458b      	cmp	fp, r1
 8001c98:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8001c9c:	f04f 0500 	mov.w	r5, #0
 8001ca0:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8001ca4:	f040 0302 	orr.w	r3, r0, #2
 8001ca8:	f2c0 83fb 	blt.w	80024a2 <_vfprintf_r+0x9e2>
 8001cac:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	9307      	str	r3, [sp, #28]
 8001cb6:	ea54 0305 	orrs.w	r3, r4, r5
 8001cba:	970e      	str	r7, [sp, #56]	; 0x38
 8001cbc:	f000 83cc 	beq.w	8002458 <_vfprintf_r+0x998>
 8001cc0:	460f      	mov	r7, r1
 8001cc2:	9211      	str	r2, [sp, #68]	; 0x44
 8001cc4:	4820      	ldr	r0, [pc, #128]	; (8001d48 <_vfprintf_r+0x288>)
 8001cc6:	e25d      	b.n	8002184 <_vfprintf_r+0x6c4>
 8001cc8:	9908      	ldr	r1, [sp, #32]
 8001cca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001ccc:	f001 faca 	bl	8003264 <__swsetup_r>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	f041 803f 	bne.w	8002d54 <_vfprintf_r+0x1294>
 8001cd6:	9b08      	ldr	r3, [sp, #32]
 8001cd8:	899b      	ldrh	r3, [r3, #12]
 8001cda:	f003 031a 	and.w	r3, r3, #26
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	f47f af1f 	bne.w	8001b22 <_vfprintf_r+0x62>
 8001ce4:	9908      	ldr	r1, [sp, #32]
 8001ce6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f6ff af19 	blt.w	8001b22 <_vfprintf_r+0x62>
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001cf6:	f001 fa7f 	bl	80031f8 <__sbprintf>
 8001cfa:	b045      	add	sp, #276	; 0x114
 8001cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d00:	aa27      	add	r2, sp, #156	; 0x9c
 8001d02:	9908      	ldr	r1, [sp, #32]
 8001d04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001d06:	f003 fcb9 	bl	800567c <__sprint_r>
 8001d0a:	b948      	cbnz	r0, 8001d20 <_vfprintf_r+0x260>
 8001d0c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8001d10:	e736      	b.n	8001b80 <_vfprintf_r+0xc0>
 8001d12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001d14:	b123      	cbz	r3, 8001d20 <_vfprintf_r+0x260>
 8001d16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001d18:	9908      	ldr	r1, [sp, #32]
 8001d1a:	aa27      	add	r2, sp, #156	; 0x9c
 8001d1c:	f003 fcae 	bl	800567c <__sprint_r>
 8001d20:	9b08      	ldr	r3, [sp, #32]
 8001d22:	899b      	ldrh	r3, [r3, #12]
 8001d24:	0659      	lsls	r1, r3, #25
 8001d26:	f101 8015 	bmi.w	8002d54 <_vfprintf_r+0x1294>
 8001d2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d2c:	b045      	add	sp, #276	; 0x114
 8001d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001d34:	f002 fbde 	bl	80044f4 <__sinit>
 8001d38:	e6d8      	b.n	8001aec <_vfprintf_r+0x2c>
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
	...
 8001d48:	08006e9c 	.word	0x08006e9c
 8001d4c:	08006e68 	.word	0x08006e68
 8001d50:	9311      	str	r3, [sp, #68]	; 0x44
 8001d52:	46ab      	mov	fp, r5
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	f041 8232 	bne.w	80031be <_vfprintf_r+0x16fe>
 8001d5a:	9a07      	ldr	r2, [sp, #28]
 8001d5c:	f012 0320 	ands.w	r3, r2, #32
 8001d60:	d064      	beq.n	8001e2c <_vfprintf_r+0x36c>
 8001d62:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001d64:	3707      	adds	r7, #7
 8001d66:	f027 0307 	bic.w	r3, r7, #7
 8001d6a:	2700      	movs	r7, #0
 8001d6c:	f103 0108 	add.w	r1, r3, #8
 8001d70:	45bb      	cmp	fp, r7
 8001d72:	910e      	str	r1, [sp, #56]	; 0x38
 8001d74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d78:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8001d7c:	f2c0 86ba 	blt.w	8002af4 <_vfprintf_r+0x1034>
 8001d80:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001d84:	9307      	str	r3, [sp, #28]
 8001d86:	ea54 0305 	orrs.w	r3, r4, r5
 8001d8a:	f000 8382 	beq.w	8002492 <_vfprintf_r+0x9d2>
 8001d8e:	ae34      	add	r6, sp, #208	; 0xd0
 8001d90:	08e2      	lsrs	r2, r4, #3
 8001d92:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8001d96:	08e9      	lsrs	r1, r5, #3
 8001d98:	f004 0307 	and.w	r3, r4, #7
 8001d9c:	460d      	mov	r5, r1
 8001d9e:	4614      	mov	r4, r2
 8001da0:	3330      	adds	r3, #48	; 0x30
 8001da2:	ea54 0205 	orrs.w	r2, r4, r5
 8001da6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8001daa:	d1f1      	bne.n	8001d90 <_vfprintf_r+0x2d0>
 8001dac:	9a07      	ldr	r2, [sp, #28]
 8001dae:	07d2      	lsls	r2, r2, #31
 8001db0:	f140 8096 	bpl.w	8001ee0 <_vfprintf_r+0x420>
 8001db4:	2b30      	cmp	r3, #48	; 0x30
 8001db6:	f000 8093 	beq.w	8001ee0 <_vfprintf_r+0x420>
 8001dba:	2230      	movs	r2, #48	; 0x30
 8001dbc:	1e73      	subs	r3, r6, #1
 8001dbe:	f806 2c01 	strb.w	r2, [r6, #-1]
 8001dc2:	aa34      	add	r2, sp, #208	; 0xd0
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	920d      	str	r2, [sp, #52]	; 0x34
 8001dc8:	461e      	mov	r6, r3
 8001dca:	e08c      	b.n	8001ee6 <_vfprintf_r+0x426>
 8001dcc:	f898 3000 	ldrb.w	r3, [r8]
 8001dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8001dd2:	f108 0401 	add.w	r4, r8, #1
 8001dd6:	f001 81d0 	beq.w	800317a <_vfprintf_r+0x16ba>
 8001dda:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001dde:	2809      	cmp	r0, #9
 8001de0:	bf98      	it	ls
 8001de2:	2500      	movls	r5, #0
 8001de4:	f201 816c 	bhi.w	80030c0 <_vfprintf_r+0x1600>
 8001de8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001dec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001df0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8001df4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8001df8:	2809      	cmp	r0, #9
 8001dfa:	d9f5      	bls.n	8001de8 <_vfprintf_r+0x328>
 8001dfc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8001e00:	46a0      	mov	r8, r4
 8001e02:	e6d3      	b.n	8001bac <_vfprintf_r+0xec>
 8001e04:	9b07      	ldr	r3, [sp, #28]
 8001e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0a:	9307      	str	r3, [sp, #28]
 8001e0c:	f898 3000 	ldrb.w	r3, [r8]
 8001e10:	e6ca      	b.n	8001ba8 <_vfprintf_r+0xe8>
 8001e12:	9311      	str	r3, [sp, #68]	; 0x44
 8001e14:	46ab      	mov	fp, r5
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	f041 81d9 	bne.w	80031ce <_vfprintf_r+0x170e>
 8001e1c:	9b07      	ldr	r3, [sp, #28]
 8001e1e:	f043 0310 	orr.w	r3, r3, #16
 8001e22:	9307      	str	r3, [sp, #28]
 8001e24:	9a07      	ldr	r2, [sp, #28]
 8001e26:	f012 0320 	ands.w	r3, r2, #32
 8001e2a:	d19a      	bne.n	8001d62 <_vfprintf_r+0x2a2>
 8001e2c:	9907      	ldr	r1, [sp, #28]
 8001e2e:	f011 0210 	ands.w	r2, r1, #16
 8001e32:	f000 8634 	beq.w	8002a9e <_vfprintf_r+0xfde>
 8001e36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001e38:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8001e3c:	f1bb 0f00 	cmp.w	fp, #0
 8001e40:	6804      	ldr	r4, [r0, #0]
 8001e42:	f100 0704 	add.w	r7, r0, #4
 8001e46:	f04f 0500 	mov.w	r5, #0
 8001e4a:	f2c0 8652 	blt.w	8002af2 <_vfprintf_r+0x1032>
 8001e4e:	460a      	mov	r2, r1
 8001e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e54:	9207      	str	r2, [sp, #28]
 8001e56:	ea54 0205 	orrs.w	r2, r4, r5
 8001e5a:	970e      	str	r7, [sp, #56]	; 0x38
 8001e5c:	f000 8319 	beq.w	8002492 <_vfprintf_r+0x9d2>
 8001e60:	461f      	mov	r7, r3
 8001e62:	e794      	b.n	8001d8e <_vfprintf_r+0x2ce>
 8001e64:	9311      	str	r3, [sp, #68]	; 0x44
 8001e66:	46ab      	mov	fp, r5
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	f041 81a0 	bne.w	80031ae <_vfprintf_r+0x16ee>
 8001e6e:	9b07      	ldr	r3, [sp, #28]
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	9307      	str	r3, [sp, #28]
 8001e76:	9a07      	ldr	r2, [sp, #28]
 8001e78:	f012 0320 	ands.w	r3, r2, #32
 8001e7c:	f000 84fa 	beq.w	8002874 <_vfprintf_r+0xdb4>
 8001e80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001e82:	3707      	adds	r7, #7
 8001e84:	f027 0307 	bic.w	r3, r7, #7
 8001e88:	2700      	movs	r7, #0
 8001e8a:	f103 0108 	add.w	r1, r3, #8
 8001e8e:	45bb      	cmp	fp, r7
 8001e90:	910e      	str	r1, [sp, #56]	; 0x38
 8001e92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e96:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8001e9a:	f2c0 8523 	blt.w	80028e4 <_vfprintf_r+0xe24>
 8001e9e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8001ea2:	9307      	str	r3, [sp, #28]
 8001ea4:	ea54 0305 	orrs.w	r3, r4, r5
 8001ea8:	f000 81bc 	beq.w	8002224 <_vfprintf_r+0x764>
 8001eac:	2d00      	cmp	r5, #0
 8001eae:	bf08      	it	eq
 8001eb0:	2c0a      	cmpeq	r4, #10
 8001eb2:	f0c0 851b 	bcc.w	80028ec <_vfprintf_r+0xe2c>
 8001eb6:	ae34      	add	r6, sp, #208	; 0xd0
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f004 fe26 	bl	8006b10 <__aeabi_uldivmod>
 8001ec4:	3230      	adds	r2, #48	; 0x30
 8001ec6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8001eca:	4620      	mov	r0, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	2300      	movs	r3, #0
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	f004 fe1d 	bl	8006b10 <__aeabi_uldivmod>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	460d      	mov	r5, r1
 8001eda:	ea54 0305 	orrs.w	r3, r4, r5
 8001ede:	d1eb      	bne.n	8001eb8 <_vfprintf_r+0x3f8>
 8001ee0:	ab34      	add	r3, sp, #208	; 0xd0
 8001ee2:	1b9b      	subs	r3, r3, r6
 8001ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8001ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ee8:	455b      	cmp	r3, fp
 8001eea:	bfb8      	it	lt
 8001eec:	465b      	movlt	r3, fp
 8001eee:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9313      	str	r3, [sp, #76]	; 0x4c
 8001ef4:	b117      	cbz	r7, 8001efc <_vfprintf_r+0x43c>
 8001ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ef8:	3301      	adds	r3, #1
 8001efa:	9309      	str	r3, [sp, #36]	; 0x24
 8001efc:	9b07      	ldr	r3, [sp, #28]
 8001efe:	f013 0302 	ands.w	r3, r3, #2
 8001f02:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f04:	d002      	beq.n	8001f0c <_vfprintf_r+0x44c>
 8001f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f08:	3302      	adds	r3, #2
 8001f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f0c:	9b07      	ldr	r3, [sp, #28]
 8001f0e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8001f12:	9310      	str	r3, [sp, #64]	; 0x40
 8001f14:	f040 82d2 	bne.w	80024bc <_vfprintf_r+0x9fc>
 8001f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f1c:	1a9d      	subs	r5, r3, r2
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	f340 82cc 	ble.w	80024bc <_vfprintf_r+0x9fc>
 8001f24:	2d10      	cmp	r5, #16
 8001f26:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8001f28:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001f2a:	4fa8      	ldr	r7, [pc, #672]	; (80021cc <_vfprintf_r+0x70c>)
 8001f2c:	dd27      	ble.n	8001f7e <_vfprintf_r+0x4be>
 8001f2e:	9618      	str	r6, [sp, #96]	; 0x60
 8001f30:	4648      	mov	r0, r9
 8001f32:	2410      	movs	r4, #16
 8001f34:	46b9      	mov	r9, r7
 8001f36:	9e08      	ldr	r6, [sp, #32]
 8001f38:	462f      	mov	r7, r5
 8001f3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001f3c:	e004      	b.n	8001f48 <_vfprintf_r+0x488>
 8001f3e:	3f10      	subs	r7, #16
 8001f40:	2f10      	cmp	r7, #16
 8001f42:	f100 0008 	add.w	r0, r0, #8
 8001f46:	dd16      	ble.n	8001f76 <_vfprintf_r+0x4b6>
 8001f48:	3201      	adds	r2, #1
 8001f4a:	4ba0      	ldr	r3, [pc, #640]	; (80021cc <_vfprintf_r+0x70c>)
 8001f4c:	9228      	str	r2, [sp, #160]	; 0xa0
 8001f4e:	3110      	adds	r1, #16
 8001f50:	2a07      	cmp	r2, #7
 8001f52:	9129      	str	r1, [sp, #164]	; 0xa4
 8001f54:	e880 0018 	stmia.w	r0, {r3, r4}
 8001f58:	ddf1      	ble.n	8001f3e <_vfprintf_r+0x47e>
 8001f5a:	aa27      	add	r2, sp, #156	; 0x9c
 8001f5c:	4631      	mov	r1, r6
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f003 fb8c 	bl	800567c <__sprint_r>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	f47f aedb 	bne.w	8001d20 <_vfprintf_r+0x260>
 8001f6a:	3f10      	subs	r7, #16
 8001f6c:	2f10      	cmp	r7, #16
 8001f6e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8001f70:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001f72:	a834      	add	r0, sp, #208	; 0xd0
 8001f74:	dce8      	bgt.n	8001f48 <_vfprintf_r+0x488>
 8001f76:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8001f78:	463d      	mov	r5, r7
 8001f7a:	464f      	mov	r7, r9
 8001f7c:	4681      	mov	r9, r0
 8001f7e:	3201      	adds	r2, #1
 8001f80:	186c      	adds	r4, r5, r1
 8001f82:	2a07      	cmp	r2, #7
 8001f84:	9429      	str	r4, [sp, #164]	; 0xa4
 8001f86:	9228      	str	r2, [sp, #160]	; 0xa0
 8001f88:	f8c9 7000 	str.w	r7, [r9]
 8001f8c:	f8c9 5004 	str.w	r5, [r9, #4]
 8001f90:	f300 8428 	bgt.w	80027e4 <_vfprintf_r+0xd24>
 8001f94:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8001f98:	f109 0908 	add.w	r9, r9, #8
 8001f9c:	b177      	cbz	r7, 8001fbc <_vfprintf_r+0x4fc>
 8001f9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	3401      	adds	r4, #1
 8001fa4:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2b07      	cmp	r3, #7
 8001fac:	9429      	str	r4, [sp, #164]	; 0xa4
 8001fae:	9328      	str	r3, [sp, #160]	; 0xa0
 8001fb0:	e889 0006 	stmia.w	r9, {r1, r2}
 8001fb4:	f300 83a0 	bgt.w	80026f8 <_vfprintf_r+0xc38>
 8001fb8:	f109 0908 	add.w	r9, r9, #8
 8001fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001fbe:	b16b      	cbz	r3, 8001fdc <_vfprintf_r+0x51c>
 8001fc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	3402      	adds	r4, #2
 8001fc6:	a920      	add	r1, sp, #128	; 0x80
 8001fc8:	2202      	movs	r2, #2
 8001fca:	2b07      	cmp	r3, #7
 8001fcc:	9429      	str	r4, [sp, #164]	; 0xa4
 8001fce:	9328      	str	r3, [sp, #160]	; 0xa0
 8001fd0:	e889 0006 	stmia.w	r9, {r1, r2}
 8001fd4:	f300 839c 	bgt.w	8002710 <_vfprintf_r+0xc50>
 8001fd8:	f109 0908 	add.w	r9, r9, #8
 8001fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001fde:	2b80      	cmp	r3, #128	; 0x80
 8001fe0:	f000 82d0 	beq.w	8002584 <_vfprintf_r+0xac4>
 8001fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fe6:	ebc3 070b 	rsb	r7, r3, fp
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	dd33      	ble.n	8002056 <_vfprintf_r+0x596>
 8001fee:	4a78      	ldr	r2, [pc, #480]	; (80021d0 <_vfprintf_r+0x710>)
 8001ff0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001ff2:	920f      	str	r2, [sp, #60]	; 0x3c
 8001ff4:	2f10      	cmp	r7, #16
 8001ff6:	dd22      	ble.n	800203e <_vfprintf_r+0x57e>
 8001ff8:	4622      	mov	r2, r4
 8001ffa:	f04f 0b10 	mov.w	fp, #16
 8001ffe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002000:	9c08      	ldr	r4, [sp, #32]
 8002002:	e004      	b.n	800200e <_vfprintf_r+0x54e>
 8002004:	3f10      	subs	r7, #16
 8002006:	2f10      	cmp	r7, #16
 8002008:	f109 0908 	add.w	r9, r9, #8
 800200c:	dd16      	ble.n	800203c <_vfprintf_r+0x57c>
 800200e:	3301      	adds	r3, #1
 8002010:	3210      	adds	r2, #16
 8002012:	2b07      	cmp	r3, #7
 8002014:	9229      	str	r2, [sp, #164]	; 0xa4
 8002016:	9328      	str	r3, [sp, #160]	; 0xa0
 8002018:	e889 0c00 	stmia.w	r9, {sl, fp}
 800201c:	ddf2      	ble.n	8002004 <_vfprintf_r+0x544>
 800201e:	aa27      	add	r2, sp, #156	; 0x9c
 8002020:	4621      	mov	r1, r4
 8002022:	4628      	mov	r0, r5
 8002024:	f003 fb2a 	bl	800567c <__sprint_r>
 8002028:	2800      	cmp	r0, #0
 800202a:	f47f ae79 	bne.w	8001d20 <_vfprintf_r+0x260>
 800202e:	3f10      	subs	r7, #16
 8002030:	2f10      	cmp	r7, #16
 8002032:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002034:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002036:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800203a:	dce8      	bgt.n	800200e <_vfprintf_r+0x54e>
 800203c:	4614      	mov	r4, r2
 800203e:	3301      	adds	r3, #1
 8002040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002042:	9328      	str	r3, [sp, #160]	; 0xa0
 8002044:	443c      	add	r4, r7
 8002046:	2b07      	cmp	r3, #7
 8002048:	9429      	str	r4, [sp, #164]	; 0xa4
 800204a:	e889 0084 	stmia.w	r9, {r2, r7}
 800204e:	f300 8347 	bgt.w	80026e0 <_vfprintf_r+0xc20>
 8002052:	f109 0908 	add.w	r9, r9, #8
 8002056:	9b07      	ldr	r3, [sp, #28]
 8002058:	05dd      	lsls	r5, r3, #23
 800205a:	f100 8231 	bmi.w	80024c0 <_vfprintf_r+0xa00>
 800205e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002060:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002062:	f8c9 6000 	str.w	r6, [r9]
 8002066:	3301      	adds	r3, #1
 8002068:	440c      	add	r4, r1
 800206a:	2b07      	cmp	r3, #7
 800206c:	9429      	str	r4, [sp, #164]	; 0xa4
 800206e:	f8c9 1004 	str.w	r1, [r9, #4]
 8002072:	9328      	str	r3, [sp, #160]	; 0xa0
 8002074:	f300 831e 	bgt.w	80026b4 <_vfprintf_r+0xbf4>
 8002078:	f109 0908 	add.w	r9, r9, #8
 800207c:	9b07      	ldr	r3, [sp, #28]
 800207e:	0758      	lsls	r0, r3, #29
 8002080:	d53f      	bpl.n	8002102 <_vfprintf_r+0x642>
 8002082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002086:	1a9d      	subs	r5, r3, r2
 8002088:	2d00      	cmp	r5, #0
 800208a:	dd3a      	ble.n	8002102 <_vfprintf_r+0x642>
 800208c:	2d10      	cmp	r5, #16
 800208e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002090:	4f4e      	ldr	r7, [pc, #312]	; (80021cc <_vfprintf_r+0x70c>)
 8002092:	dd23      	ble.n	80020dc <_vfprintf_r+0x61c>
 8002094:	4622      	mov	r2, r4
 8002096:	2610      	movs	r6, #16
 8002098:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800209c:	9c08      	ldr	r4, [sp, #32]
 800209e:	e004      	b.n	80020aa <_vfprintf_r+0x5ea>
 80020a0:	3d10      	subs	r5, #16
 80020a2:	2d10      	cmp	r5, #16
 80020a4:	f109 0908 	add.w	r9, r9, #8
 80020a8:	dd17      	ble.n	80020da <_vfprintf_r+0x61a>
 80020aa:	3301      	adds	r3, #1
 80020ac:	4947      	ldr	r1, [pc, #284]	; (80021cc <_vfprintf_r+0x70c>)
 80020ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80020b0:	3210      	adds	r2, #16
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	9229      	str	r2, [sp, #164]	; 0xa4
 80020b6:	e889 0042 	stmia.w	r9, {r1, r6}
 80020ba:	ddf1      	ble.n	80020a0 <_vfprintf_r+0x5e0>
 80020bc:	aa27      	add	r2, sp, #156	; 0x9c
 80020be:	4621      	mov	r1, r4
 80020c0:	4658      	mov	r0, fp
 80020c2:	f003 fadb 	bl	800567c <__sprint_r>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	f47f ae2a 	bne.w	8001d20 <_vfprintf_r+0x260>
 80020cc:	3d10      	subs	r5, #16
 80020ce:	2d10      	cmp	r5, #16
 80020d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80020d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80020d4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80020d8:	dce7      	bgt.n	80020aa <_vfprintf_r+0x5ea>
 80020da:	4614      	mov	r4, r2
 80020dc:	3301      	adds	r3, #1
 80020de:	442c      	add	r4, r5
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80020e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80020e6:	f8c9 7000 	str.w	r7, [r9]
 80020ea:	f8c9 5004 	str.w	r5, [r9, #4]
 80020ee:	dd08      	ble.n	8002102 <_vfprintf_r+0x642>
 80020f0:	aa27      	add	r2, sp, #156	; 0x9c
 80020f2:	9908      	ldr	r1, [sp, #32]
 80020f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80020f6:	f003 fac1 	bl	800567c <__sprint_r>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	f47f ae10 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002100:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002108:	428a      	cmp	r2, r1
 800210a:	bfac      	ite	ge
 800210c:	189b      	addge	r3, r3, r2
 800210e:	185b      	addlt	r3, r3, r1
 8002110:	930b      	str	r3, [sp, #44]	; 0x2c
 8002112:	2c00      	cmp	r4, #0
 8002114:	f040 82da 	bne.w	80026cc <_vfprintf_r+0xc0c>
 8002118:	2300      	movs	r3, #0
 800211a:	9328      	str	r3, [sp, #160]	; 0xa0
 800211c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002120:	e50f      	b.n	8001b42 <_vfprintf_r+0x82>
 8002122:	9311      	str	r3, [sp, #68]	; 0x44
 8002124:	46ab      	mov	fp, r5
 8002126:	2a00      	cmp	r2, #0
 8002128:	f041 803d 	bne.w	80031a6 <_vfprintf_r+0x16e6>
 800212c:	9b07      	ldr	r3, [sp, #28]
 800212e:	4829      	ldr	r0, [pc, #164]	; (80021d4 <_vfprintf_r+0x714>)
 8002130:	069c      	lsls	r4, r3, #26
 8002132:	f140 8146 	bpl.w	80023c2 <_vfprintf_r+0x902>
 8002136:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002138:	3707      	adds	r7, #7
 800213a:	f027 0307 	bic.w	r3, r7, #7
 800213e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002142:	f103 0208 	add.w	r2, r3, #8
 8002146:	920e      	str	r2, [sp, #56]	; 0x38
 8002148:	9a07      	ldr	r2, [sp, #28]
 800214a:	f012 0701 	ands.w	r7, r2, #1
 800214e:	f000 82eb 	beq.w	8002728 <_vfprintf_r+0xc68>
 8002152:	ea54 0305 	orrs.w	r3, r4, r5
 8002156:	f000 8582 	beq.w	8002c5e <_vfprintf_r+0x119e>
 800215a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800215e:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002162:	2700      	movs	r7, #0
 8002164:	9a07      	ldr	r2, [sp, #28]
 8002166:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800216a:	2330      	movs	r3, #48	; 0x30
 800216c:	45bb      	cmp	fp, r7
 800216e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002172:	f042 0302 	orr.w	r3, r2, #2
 8002176:	f2c0 873b 	blt.w	8002ff0 <_vfprintf_r+0x1530>
 800217a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	9307      	str	r3, [sp, #28]
 8002184:	ae34      	add	r6, sp, #208	; 0xd0
 8002186:	0923      	lsrs	r3, r4, #4
 8002188:	f004 010f 	and.w	r1, r4, #15
 800218c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8002190:	092a      	lsrs	r2, r5, #4
 8002192:	461c      	mov	r4, r3
 8002194:	4615      	mov	r5, r2
 8002196:	5c43      	ldrb	r3, [r0, r1]
 8002198:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800219c:	ea54 0305 	orrs.w	r3, r4, r5
 80021a0:	d1f1      	bne.n	8002186 <_vfprintf_r+0x6c6>
 80021a2:	e69d      	b.n	8001ee0 <_vfprintf_r+0x420>
 80021a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80021a6:	9311      	str	r3, [sp, #68]	; 0x44
 80021a8:	680a      	ldr	r2, [r1, #0]
 80021aa:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80021ae:	2300      	movs	r3, #0
 80021b0:	460a      	mov	r2, r1
 80021b2:	461f      	mov	r7, r3
 80021b4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80021b8:	3204      	adds	r2, #4
 80021ba:	2301      	movs	r3, #1
 80021bc:	9309      	str	r3, [sp, #36]	; 0x24
 80021be:	46bb      	mov	fp, r7
 80021c0:	9713      	str	r7, [sp, #76]	; 0x4c
 80021c2:	920e      	str	r2, [sp, #56]	; 0x38
 80021c4:	930d      	str	r3, [sp, #52]	; 0x34
 80021c6:	ae2a      	add	r6, sp, #168	; 0xa8
 80021c8:	e698      	b.n	8001efc <_vfprintf_r+0x43c>
 80021ca:	bf00      	nop
 80021cc:	08006ebc 	.word	0x08006ebc
 80021d0:	08006e68 	.word	0x08006e68
 80021d4:	08006e88 	.word	0x08006e88
 80021d8:	9311      	str	r3, [sp, #68]	; 0x44
 80021da:	46ab      	mov	fp, r5
 80021dc:	2a00      	cmp	r2, #0
 80021de:	f040 87ea 	bne.w	80031b6 <_vfprintf_r+0x16f6>
 80021e2:	9b07      	ldr	r3, [sp, #28]
 80021e4:	069b      	lsls	r3, r3, #26
 80021e6:	d574      	bpl.n	80022d2 <_vfprintf_r+0x812>
 80021e8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80021ea:	3707      	adds	r7, #7
 80021ec:	f027 0707 	bic.w	r7, r7, #7
 80021f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f4:	f107 0108 	add.w	r1, r7, #8
 80021f8:	910e      	str	r1, [sp, #56]	; 0x38
 80021fa:	4614      	mov	r4, r2
 80021fc:	461d      	mov	r5, r3
 80021fe:	2a00      	cmp	r2, #0
 8002200:	f173 0300 	sbcs.w	r3, r3, #0
 8002204:	f2c0 843a 	blt.w	8002a7c <_vfprintf_r+0xfbc>
 8002208:	f1bb 0f00 	cmp.w	fp, #0
 800220c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002210:	f2c0 8368 	blt.w	80028e4 <_vfprintf_r+0xe24>
 8002214:	9b07      	ldr	r3, [sp, #28]
 8002216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221a:	9307      	str	r3, [sp, #28]
 800221c:	ea54 0305 	orrs.w	r3, r4, r5
 8002220:	f47f ae44 	bne.w	8001eac <_vfprintf_r+0x3ec>
 8002224:	f1bb 0f00 	cmp.w	fp, #0
 8002228:	f040 8408 	bne.w	8002a3c <_vfprintf_r+0xf7c>
 800222c:	f04f 0b00 	mov.w	fp, #0
 8002230:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8002234:	ae34      	add	r6, sp, #208	; 0xd0
 8002236:	e656      	b.n	8001ee6 <_vfprintf_r+0x426>
 8002238:	9b07      	ldr	r3, [sp, #28]
 800223a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223e:	9307      	str	r3, [sp, #28]
 8002240:	f898 3000 	ldrb.w	r3, [r8]
 8002244:	e4b0      	b.n	8001ba8 <_vfprintf_r+0xe8>
 8002246:	f898 3000 	ldrb.w	r3, [r8]
 800224a:	2b6c      	cmp	r3, #108	; 0x6c
 800224c:	f000 85d5 	beq.w	8002dfa <_vfprintf_r+0x133a>
 8002250:	9807      	ldr	r0, [sp, #28]
 8002252:	f040 0010 	orr.w	r0, r0, #16
 8002256:	9007      	str	r0, [sp, #28]
 8002258:	e4a6      	b.n	8001ba8 <_vfprintf_r+0xe8>
 800225a:	2a00      	cmp	r2, #0
 800225c:	f040 879f 	bne.w	800319e <_vfprintf_r+0x16de>
 8002260:	9b07      	ldr	r3, [sp, #28]
 8002262:	069f      	lsls	r7, r3, #26
 8002264:	f140 84e4 	bpl.w	8002c30 <_vfprintf_r+0x1170>
 8002268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800226a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	17cd      	asrs	r5, r1, #31
 8002270:	4608      	mov	r0, r1
 8002272:	3204      	adds	r2, #4
 8002274:	4629      	mov	r1, r5
 8002276:	920e      	str	r2, [sp, #56]	; 0x38
 8002278:	e9c3 0100 	strd	r0, r1, [r3]
 800227c:	e461      	b.n	8001b42 <_vfprintf_r+0x82>
 800227e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	930c      	str	r3, [sp, #48]	; 0x30
 8002284:	4618      	mov	r0, r3
 8002286:	2800      	cmp	r0, #0
 8002288:	4623      	mov	r3, r4
 800228a:	f103 0304 	add.w	r3, r3, #4
 800228e:	f6ff aced 	blt.w	8001c6c <_vfprintf_r+0x1ac>
 8002292:	930e      	str	r3, [sp, #56]	; 0x38
 8002294:	f898 3000 	ldrb.w	r3, [r8]
 8002298:	e486      	b.n	8001ba8 <_vfprintf_r+0xe8>
 800229a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800229e:	2300      	movs	r3, #0
 80022a0:	461c      	mov	r4, r3
 80022a2:	f818 3b01 	ldrb.w	r3, [r8], #1
 80022a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80022aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80022ae:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80022b2:	2809      	cmp	r0, #9
 80022b4:	d9f5      	bls.n	80022a2 <_vfprintf_r+0x7e2>
 80022b6:	940c      	str	r4, [sp, #48]	; 0x30
 80022b8:	e478      	b.n	8001bac <_vfprintf_r+0xec>
 80022ba:	9311      	str	r3, [sp, #68]	; 0x44
 80022bc:	46ab      	mov	fp, r5
 80022be:	2a00      	cmp	r2, #0
 80022c0:	f040 8769 	bne.w	8003196 <_vfprintf_r+0x16d6>
 80022c4:	9b07      	ldr	r3, [sp, #28]
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	9307      	str	r3, [sp, #28]
 80022cc:	9b07      	ldr	r3, [sp, #28]
 80022ce:	069b      	lsls	r3, r3, #26
 80022d0:	d48a      	bmi.n	80021e8 <_vfprintf_r+0x728>
 80022d2:	9b07      	ldr	r3, [sp, #28]
 80022d4:	06df      	lsls	r7, r3, #27
 80022d6:	f100 8294 	bmi.w	8002802 <_vfprintf_r+0xd42>
 80022da:	9b07      	ldr	r3, [sp, #28]
 80022dc:	065e      	lsls	r6, r3, #25
 80022de:	f140 8290 	bpl.w	8002802 <_vfprintf_r+0xd42>
 80022e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80022e4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80022e8:	3104      	adds	r1, #4
 80022ea:	17e5      	asrs	r5, r4, #31
 80022ec:	4622      	mov	r2, r4
 80022ee:	462b      	mov	r3, r5
 80022f0:	910e      	str	r1, [sp, #56]	; 0x38
 80022f2:	e784      	b.n	80021fe <_vfprintf_r+0x73e>
 80022f4:	9311      	str	r3, [sp, #68]	; 0x44
 80022f6:	46ab      	mov	fp, r5
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	f040 8770 	bne.w	80031de <_vfprintf_r+0x171e>
 80022fe:	9b07      	ldr	r3, [sp, #28]
 8002300:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002302:	071d      	lsls	r5, r3, #28
 8002304:	f107 0707 	add.w	r7, r7, #7
 8002308:	f140 8487 	bpl.w	8002c1a <_vfprintf_r+0x115a>
 800230c:	f027 0307 	bic.w	r3, r7, #7
 8002310:	ed93 7b00 	vldr	d7, [r3]
 8002314:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002318:	f103 0208 	add.w	r2, r3, #8
 800231c:	920e      	str	r2, [sp, #56]	; 0x38
 800231e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8002322:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8002326:	911a      	str	r1, [sp, #104]	; 0x68
 8002328:	931b      	str	r3, [sp, #108]	; 0x6c
 800232a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	4bb5      	ldr	r3, [pc, #724]	; (800260c <_vfprintf_r+0xb4c>)
 8002338:	f004 fbac 	bl	8006a94 <__aeabi_dcmpun>
 800233c:	2800      	cmp	r0, #0
 800233e:	f040 83eb 	bne.w	8002b18 <_vfprintf_r+0x1058>
 8002342:	f04f 32ff 	mov.w	r2, #4294967295
 8002346:	4bb1      	ldr	r3, [pc, #708]	; (800260c <_vfprintf_r+0xb4c>)
 8002348:	4620      	mov	r0, r4
 800234a:	4629      	mov	r1, r5
 800234c:	f004 fb84 	bl	8006a58 <__aeabi_dcmple>
 8002350:	2800      	cmp	r0, #0
 8002352:	f040 83e1 	bne.w	8002b18 <_vfprintf_r+0x1058>
 8002356:	2200      	movs	r2, #0
 8002358:	2300      	movs	r3, #0
 800235a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800235e:	f004 fb71 	bl	8006a44 <__aeabi_dcmplt>
 8002362:	2800      	cmp	r0, #0
 8002364:	f040 864a 	bne.w	8002ffc <_vfprintf_r+0x153c>
 8002368:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800236c:	4ea8      	ldr	r6, [pc, #672]	; (8002610 <_vfprintf_r+0xb50>)
 800236e:	4ba9      	ldr	r3, [pc, #676]	; (8002614 <_vfprintf_r+0xb54>)
 8002370:	9907      	ldr	r1, [sp, #28]
 8002372:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002376:	9107      	str	r1, [sp, #28]
 8002378:	9911      	ldr	r1, [sp, #68]	; 0x44
 800237a:	2203      	movs	r2, #3
 800237c:	f04f 0b00 	mov.w	fp, #0
 8002380:	9209      	str	r2, [sp, #36]	; 0x24
 8002382:	2947      	cmp	r1, #71	; 0x47
 8002384:	bfd8      	it	le
 8002386:	461e      	movle	r6, r3
 8002388:	920d      	str	r2, [sp, #52]	; 0x34
 800238a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800238e:	e5b1      	b.n	8001ef4 <_vfprintf_r+0x434>
 8002390:	9b07      	ldr	r3, [sp, #28]
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	9307      	str	r3, [sp, #28]
 8002398:	f898 3000 	ldrb.w	r3, [r8]
 800239c:	e404      	b.n	8001ba8 <_vfprintf_r+0xe8>
 800239e:	9311      	str	r3, [sp, #68]	; 0x44
 80023a0:	46ab      	mov	fp, r5
 80023a2:	2a00      	cmp	r2, #0
 80023a4:	f43f ad67 	beq.w	8001e76 <_vfprintf_r+0x3b6>
 80023a8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80023ac:	e563      	b.n	8001e76 <_vfprintf_r+0x3b6>
 80023ae:	9311      	str	r3, [sp, #68]	; 0x44
 80023b0:	46ab      	mov	fp, r5
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	f040 870f 	bne.w	80031d6 <_vfprintf_r+0x1716>
 80023b8:	9b07      	ldr	r3, [sp, #28]
 80023ba:	4897      	ldr	r0, [pc, #604]	; (8002618 <_vfprintf_r+0xb58>)
 80023bc:	069c      	lsls	r4, r3, #26
 80023be:	f53f aeba 	bmi.w	8002136 <_vfprintf_r+0x676>
 80023c2:	9b07      	ldr	r3, [sp, #28]
 80023c4:	06d9      	lsls	r1, r3, #27
 80023c6:	f140 8398 	bpl.w	8002afa <_vfprintf_r+0x103a>
 80023ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023cc:	4613      	mov	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	6814      	ldr	r4, [r2, #0]
 80023d2:	930e      	str	r3, [sp, #56]	; 0x38
 80023d4:	2500      	movs	r5, #0
 80023d6:	e6b7      	b.n	8002148 <_vfprintf_r+0x688>
 80023d8:	f898 3000 	ldrb.w	r3, [r8]
 80023dc:	2900      	cmp	r1, #0
 80023de:	f47f abe3 	bne.w	8001ba8 <_vfprintf_r+0xe8>
 80023e2:	2201      	movs	r2, #1
 80023e4:	2120      	movs	r1, #32
 80023e6:	f7ff bbdf 	b.w	8001ba8 <_vfprintf_r+0xe8>
 80023ea:	9b07      	ldr	r3, [sp, #28]
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	9307      	str	r3, [sp, #28]
 80023f2:	f898 3000 	ldrb.w	r3, [r8]
 80023f6:	f7ff bbd7 	b.w	8001ba8 <_vfprintf_r+0xe8>
 80023fa:	9b07      	ldr	r3, [sp, #28]
 80023fc:	f043 0320 	orr.w	r3, r3, #32
 8002400:	9307      	str	r3, [sp, #28]
 8002402:	f898 3000 	ldrb.w	r3, [r8]
 8002406:	f7ff bbcf 	b.w	8001ba8 <_vfprintf_r+0xe8>
 800240a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800240c:	9311      	str	r3, [sp, #68]	; 0x44
 800240e:	6816      	ldr	r6, [r2, #0]
 8002410:	2400      	movs	r4, #0
 8002412:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8002416:	1d17      	adds	r7, r2, #4
 8002418:	2e00      	cmp	r6, #0
 800241a:	f000 85b7 	beq.w	8002f8c <_vfprintf_r+0x14cc>
 800241e:	2d00      	cmp	r5, #0
 8002420:	f2c0 8502 	blt.w	8002e28 <_vfprintf_r+0x1368>
 8002424:	462a      	mov	r2, r5
 8002426:	4621      	mov	r1, r4
 8002428:	4630      	mov	r0, r6
 800242a:	f002 fd31 	bl	8004e90 <memchr>
 800242e:	2800      	cmp	r0, #0
 8002430:	f000 861c 	beq.w	800306c <_vfprintf_r+0x15ac>
 8002434:	1b83      	subs	r3, r0, r6
 8002436:	930d      	str	r3, [sp, #52]	; 0x34
 8002438:	46a3      	mov	fp, r4
 800243a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800243e:	970e      	str	r7, [sp, #56]	; 0x38
 8002440:	9309      	str	r3, [sp, #36]	; 0x24
 8002442:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8002446:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800244a:	e553      	b.n	8001ef4 <_vfprintf_r+0x434>
 800244c:	f898 3000 	ldrb.w	r3, [r8]
 8002450:	2201      	movs	r2, #1
 8002452:	212b      	movs	r1, #43	; 0x2b
 8002454:	f7ff bba8 	b.w	8001ba8 <_vfprintf_r+0xe8>
 8002458:	486f      	ldr	r0, [pc, #444]	; (8002618 <_vfprintf_r+0xb58>)
 800245a:	9211      	str	r2, [sp, #68]	; 0x44
 800245c:	f1bb 0f00 	cmp.w	fp, #0
 8002460:	f040 8173 	bne.w	800274a <_vfprintf_r+0xc8a>
 8002464:	465f      	mov	r7, fp
 8002466:	e6e1      	b.n	800222c <_vfprintf_r+0x76c>
 8002468:	9311      	str	r3, [sp, #68]	; 0x44
 800246a:	2a00      	cmp	r2, #0
 800246c:	f040 86ab 	bne.w	80031c6 <_vfprintf_r+0x1706>
 8002470:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002472:	2a00      	cmp	r2, #0
 8002474:	f43f ac4d 	beq.w	8001d12 <_vfprintf_r+0x252>
 8002478:	2300      	movs	r3, #0
 800247a:	2101      	movs	r1, #1
 800247c:	461f      	mov	r7, r3
 800247e:	9109      	str	r1, [sp, #36]	; 0x24
 8002480:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8002484:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002488:	469b      	mov	fp, r3
 800248a:	9313      	str	r3, [sp, #76]	; 0x4c
 800248c:	910d      	str	r1, [sp, #52]	; 0x34
 800248e:	ae2a      	add	r6, sp, #168	; 0xa8
 8002490:	e534      	b.n	8001efc <_vfprintf_r+0x43c>
 8002492:	f1bb 0f00 	cmp.w	fp, #0
 8002496:	f000 85da 	beq.w	800304e <_vfprintf_r+0x158e>
 800249a:	2700      	movs	r7, #0
 800249c:	2400      	movs	r4, #0
 800249e:	2500      	movs	r5, #0
 80024a0:	e475      	b.n	8001d8e <_vfprintf_r+0x2ce>
 80024a2:	485d      	ldr	r0, [pc, #372]	; (8002618 <_vfprintf_r+0xb58>)
 80024a4:	9307      	str	r3, [sp, #28]
 80024a6:	9211      	str	r2, [sp, #68]	; 0x44
 80024a8:	ea54 0305 	orrs.w	r3, r4, r5
 80024ac:	970e      	str	r7, [sp, #56]	; 0x38
 80024ae:	f04f 0700 	mov.w	r7, #0
 80024b2:	f47f ae67 	bne.w	8002184 <_vfprintf_r+0x6c4>
 80024b6:	2400      	movs	r4, #0
 80024b8:	2500      	movs	r5, #0
 80024ba:	e663      	b.n	8002184 <_vfprintf_r+0x6c4>
 80024bc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80024be:	e56d      	b.n	8001f9c <_vfprintf_r+0x4dc>
 80024c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024c2:	2b65      	cmp	r3, #101	; 0x65
 80024c4:	f340 80ae 	ble.w	8002624 <_vfprintf_r+0xb64>
 80024c8:	2200      	movs	r2, #0
 80024ca:	2300      	movs	r3, #0
 80024cc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80024d0:	f004 faae 	bl	8006a30 <__aeabi_dcmpeq>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	f000 813a 	beq.w	800274e <_vfprintf_r+0xc8e>
 80024da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80024dc:	4a4f      	ldr	r2, [pc, #316]	; (800261c <_vfprintf_r+0xb5c>)
 80024de:	f8c9 2000 	str.w	r2, [r9]
 80024e2:	3301      	adds	r3, #1
 80024e4:	3401      	adds	r4, #1
 80024e6:	2201      	movs	r2, #1
 80024e8:	2b07      	cmp	r3, #7
 80024ea:	9429      	str	r4, [sp, #164]	; 0xa4
 80024ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80024ee:	f8c9 2004 	str.w	r2, [r9, #4]
 80024f2:	f300 83ce 	bgt.w	8002c92 <_vfprintf_r+0x11d2>
 80024f6:	f109 0908 	add.w	r9, r9, #8
 80024fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80024fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80024fe:	4293      	cmp	r3, r2
 8002500:	db03      	blt.n	800250a <_vfprintf_r+0xa4a>
 8002502:	9b07      	ldr	r3, [sp, #28]
 8002504:	07d8      	lsls	r0, r3, #31
 8002506:	f57f adb9 	bpl.w	800207c <_vfprintf_r+0x5bc>
 800250a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800250c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800250e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002510:	f8c9 2000 	str.w	r2, [r9]
 8002514:	3301      	adds	r3, #1
 8002516:	440c      	add	r4, r1
 8002518:	2b07      	cmp	r3, #7
 800251a:	9429      	str	r4, [sp, #164]	; 0xa4
 800251c:	f8c9 1004 	str.w	r1, [r9, #4]
 8002520:	9328      	str	r3, [sp, #160]	; 0xa0
 8002522:	f300 8474 	bgt.w	8002e0e <_vfprintf_r+0x134e>
 8002526:	f109 0908 	add.w	r9, r9, #8
 800252a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800252c:	1e5d      	subs	r5, r3, #1
 800252e:	2d00      	cmp	r5, #0
 8002530:	f77f ada4 	ble.w	800207c <_vfprintf_r+0x5bc>
 8002534:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <_vfprintf_r+0xb60>)
 8002536:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002538:	920f      	str	r2, [sp, #60]	; 0x3c
 800253a:	2d10      	cmp	r5, #16
 800253c:	f340 81b4 	ble.w	80028a8 <_vfprintf_r+0xde8>
 8002540:	2610      	movs	r6, #16
 8002542:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002544:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002548:	e005      	b.n	8002556 <_vfprintf_r+0xa96>
 800254a:	f109 0908 	add.w	r9, r9, #8
 800254e:	3d10      	subs	r5, #16
 8002550:	2d10      	cmp	r5, #16
 8002552:	f340 81a9 	ble.w	80028a8 <_vfprintf_r+0xde8>
 8002556:	3301      	adds	r3, #1
 8002558:	3410      	adds	r4, #16
 800255a:	2b07      	cmp	r3, #7
 800255c:	9429      	str	r4, [sp, #164]	; 0xa4
 800255e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002560:	f8c9 a000 	str.w	sl, [r9]
 8002564:	f8c9 6004 	str.w	r6, [r9, #4]
 8002568:	ddef      	ble.n	800254a <_vfprintf_r+0xa8a>
 800256a:	aa27      	add	r2, sp, #156	; 0x9c
 800256c:	4659      	mov	r1, fp
 800256e:	4638      	mov	r0, r7
 8002570:	f003 f884 	bl	800567c <__sprint_r>
 8002574:	2800      	cmp	r0, #0
 8002576:	f47f abd3 	bne.w	8001d20 <_vfprintf_r+0x260>
 800257a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800257c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800257e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002582:	e7e4      	b.n	800254e <_vfprintf_r+0xa8e>
 8002584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002588:	1a9f      	subs	r7, r3, r2
 800258a:	2f00      	cmp	r7, #0
 800258c:	f77f ad2a 	ble.w	8001fe4 <_vfprintf_r+0x524>
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <_vfprintf_r+0xb60>)
 8002592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002594:	920f      	str	r2, [sp, #60]	; 0x3c
 8002596:	2f10      	cmp	r7, #16
 8002598:	dd2b      	ble.n	80025f2 <_vfprintf_r+0xb32>
 800259a:	464a      	mov	r2, r9
 800259c:	4621      	mov	r1, r4
 800259e:	46b9      	mov	r9, r7
 80025a0:	2510      	movs	r5, #16
 80025a2:	4637      	mov	r7, r6
 80025a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80025a6:	9e08      	ldr	r6, [sp, #32]
 80025a8:	e006      	b.n	80025b8 <_vfprintf_r+0xaf8>
 80025aa:	f1a9 0910 	sub.w	r9, r9, #16
 80025ae:	f1b9 0f10 	cmp.w	r9, #16
 80025b2:	f102 0208 	add.w	r2, r2, #8
 80025b6:	dd18      	ble.n	80025ea <_vfprintf_r+0xb2a>
 80025b8:	3301      	adds	r3, #1
 80025ba:	3110      	adds	r1, #16
 80025bc:	2b07      	cmp	r3, #7
 80025be:	9129      	str	r1, [sp, #164]	; 0xa4
 80025c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80025c2:	f8c2 a000 	str.w	sl, [r2]
 80025c6:	6055      	str	r5, [r2, #4]
 80025c8:	ddef      	ble.n	80025aa <_vfprintf_r+0xaea>
 80025ca:	aa27      	add	r2, sp, #156	; 0x9c
 80025cc:	4631      	mov	r1, r6
 80025ce:	4620      	mov	r0, r4
 80025d0:	f003 f854 	bl	800567c <__sprint_r>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	f47f aba3 	bne.w	8001d20 <_vfprintf_r+0x260>
 80025da:	f1a9 0910 	sub.w	r9, r9, #16
 80025de:	f1b9 0f10 	cmp.w	r9, #16
 80025e2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80025e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80025e6:	aa34      	add	r2, sp, #208	; 0xd0
 80025e8:	dce6      	bgt.n	80025b8 <_vfprintf_r+0xaf8>
 80025ea:	463e      	mov	r6, r7
 80025ec:	460c      	mov	r4, r1
 80025ee:	464f      	mov	r7, r9
 80025f0:	4691      	mov	r9, r2
 80025f2:	3301      	adds	r3, #1
 80025f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80025f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80025f8:	443c      	add	r4, r7
 80025fa:	2b07      	cmp	r3, #7
 80025fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80025fe:	e889 0084 	stmia.w	r9, {r2, r7}
 8002602:	f300 822b 	bgt.w	8002a5c <_vfprintf_r+0xf9c>
 8002606:	f109 0908 	add.w	r9, r9, #8
 800260a:	e4eb      	b.n	8001fe4 <_vfprintf_r+0x524>
 800260c:	7fefffff 	.word	0x7fefffff
 8002610:	08006e7c 	.word	0x08006e7c
 8002614:	08006e78 	.word	0x08006e78
 8002618:	08006e9c 	.word	0x08006e9c
 800261c:	08006eb8 	.word	0x08006eb8
 8002620:	08006e68 	.word	0x08006e68
 8002624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002626:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002628:	2b01      	cmp	r3, #1
 800262a:	f340 81d0 	ble.w	80029ce <_vfprintf_r+0xf0e>
 800262e:	3501      	adds	r5, #1
 8002630:	3401      	adds	r4, #1
 8002632:	2301      	movs	r3, #1
 8002634:	2d07      	cmp	r5, #7
 8002636:	9429      	str	r4, [sp, #164]	; 0xa4
 8002638:	9528      	str	r5, [sp, #160]	; 0xa0
 800263a:	f8c9 6000 	str.w	r6, [r9]
 800263e:	f8c9 3004 	str.w	r3, [r9, #4]
 8002642:	f300 81e1 	bgt.w	8002a08 <_vfprintf_r+0xf48>
 8002646:	f109 0908 	add.w	r9, r9, #8
 800264a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800264c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800264e:	f8c9 3000 	str.w	r3, [r9]
 8002652:	3501      	adds	r5, #1
 8002654:	4414      	add	r4, r2
 8002656:	2d07      	cmp	r5, #7
 8002658:	9429      	str	r4, [sp, #164]	; 0xa4
 800265a:	9528      	str	r5, [sp, #160]	; 0xa0
 800265c:	f8c9 2004 	str.w	r2, [r9, #4]
 8002660:	f300 81df 	bgt.w	8002a22 <_vfprintf_r+0xf62>
 8002664:	f109 0908 	add.w	r9, r9, #8
 8002668:	2300      	movs	r3, #0
 800266a:	2200      	movs	r2, #0
 800266c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002670:	f004 f9de 	bl	8006a30 <__aeabi_dcmpeq>
 8002674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002676:	2800      	cmp	r0, #0
 8002678:	f040 80cc 	bne.w	8002814 <_vfprintf_r+0xd54>
 800267c:	3b01      	subs	r3, #1
 800267e:	3501      	adds	r5, #1
 8002680:	3601      	adds	r6, #1
 8002682:	441c      	add	r4, r3
 8002684:	2d07      	cmp	r5, #7
 8002686:	9528      	str	r5, [sp, #160]	; 0xa0
 8002688:	9429      	str	r4, [sp, #164]	; 0xa4
 800268a:	f8c9 6000 	str.w	r6, [r9]
 800268e:	f8c9 3004 	str.w	r3, [r9, #4]
 8002692:	f300 81ac 	bgt.w	80029ee <_vfprintf_r+0xf2e>
 8002696:	f109 0908 	add.w	r9, r9, #8
 800269a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800269c:	f8c9 2004 	str.w	r2, [r9, #4]
 80026a0:	3501      	adds	r5, #1
 80026a2:	4414      	add	r4, r2
 80026a4:	ab23      	add	r3, sp, #140	; 0x8c
 80026a6:	2d07      	cmp	r5, #7
 80026a8:	9429      	str	r4, [sp, #164]	; 0xa4
 80026aa:	9528      	str	r5, [sp, #160]	; 0xa0
 80026ac:	f8c9 3000 	str.w	r3, [r9]
 80026b0:	f77f ace2 	ble.w	8002078 <_vfprintf_r+0x5b8>
 80026b4:	aa27      	add	r2, sp, #156	; 0x9c
 80026b6:	9908      	ldr	r1, [sp, #32]
 80026b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80026ba:	f002 ffdf 	bl	800567c <__sprint_r>
 80026be:	2800      	cmp	r0, #0
 80026c0:	f47f ab2e 	bne.w	8001d20 <_vfprintf_r+0x260>
 80026c4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80026c6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80026ca:	e4d7      	b.n	800207c <_vfprintf_r+0x5bc>
 80026cc:	aa27      	add	r2, sp, #156	; 0x9c
 80026ce:	9908      	ldr	r1, [sp, #32]
 80026d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80026d2:	f002 ffd3 	bl	800567c <__sprint_r>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	f43f ad1e 	beq.w	8002118 <_vfprintf_r+0x658>
 80026dc:	f7ff bb20 	b.w	8001d20 <_vfprintf_r+0x260>
 80026e0:	aa27      	add	r2, sp, #156	; 0x9c
 80026e2:	9908      	ldr	r1, [sp, #32]
 80026e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80026e6:	f002 ffc9 	bl	800567c <__sprint_r>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	f47f ab18 	bne.w	8001d20 <_vfprintf_r+0x260>
 80026f0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80026f2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80026f6:	e4ae      	b.n	8002056 <_vfprintf_r+0x596>
 80026f8:	aa27      	add	r2, sp, #156	; 0x9c
 80026fa:	9908      	ldr	r1, [sp, #32]
 80026fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80026fe:	f002 ffbd 	bl	800567c <__sprint_r>
 8002702:	2800      	cmp	r0, #0
 8002704:	f47f ab0c 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002708:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800270a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800270e:	e455      	b.n	8001fbc <_vfprintf_r+0x4fc>
 8002710:	aa27      	add	r2, sp, #156	; 0x9c
 8002712:	9908      	ldr	r1, [sp, #32]
 8002714:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002716:	f002 ffb1 	bl	800567c <__sprint_r>
 800271a:	2800      	cmp	r0, #0
 800271c:	f47f ab00 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002720:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002722:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002726:	e459      	b.n	8001fdc <_vfprintf_r+0x51c>
 8002728:	f1bb 0f00 	cmp.w	fp, #0
 800272c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002730:	f2c0 830d 	blt.w	8002d4e <_vfprintf_r+0x128e>
 8002734:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002738:	9307      	str	r3, [sp, #28]
 800273a:	ea54 0305 	orrs.w	r3, r4, r5
 800273e:	f47f ad21 	bne.w	8002184 <_vfprintf_r+0x6c4>
 8002742:	f1bb 0f00 	cmp.w	fp, #0
 8002746:	f43f ae8d 	beq.w	8002464 <_vfprintf_r+0x9a4>
 800274a:	2700      	movs	r7, #0
 800274c:	e6b3      	b.n	80024b6 <_vfprintf_r+0x9f6>
 800274e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002750:	2d00      	cmp	r5, #0
 8002752:	f340 82aa 	ble.w	8002caa <_vfprintf_r+0x11ea>
 8002756:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800275a:	4293      	cmp	r3, r2
 800275c:	bfa8      	it	ge
 800275e:	4613      	movge	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	461d      	mov	r5, r3
 8002764:	dd0d      	ble.n	8002782 <_vfprintf_r+0xcc2>
 8002766:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002768:	f8c9 6000 	str.w	r6, [r9]
 800276c:	3301      	adds	r3, #1
 800276e:	442c      	add	r4, r5
 8002770:	2b07      	cmp	r3, #7
 8002772:	9429      	str	r4, [sp, #164]	; 0xa4
 8002774:	f8c9 5004 	str.w	r5, [r9, #4]
 8002778:	9328      	str	r3, [sp, #160]	; 0xa0
 800277a:	f300 8387 	bgt.w	8002e8c <_vfprintf_r+0x13cc>
 800277e:	f109 0908 	add.w	r9, r9, #8
 8002782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002784:	2d00      	cmp	r5, #0
 8002786:	bfa8      	it	ge
 8002788:	1b5b      	subge	r3, r3, r5
 800278a:	2b00      	cmp	r3, #0
 800278c:	461d      	mov	r5, r3
 800278e:	f340 80be 	ble.w	800290e <_vfprintf_r+0xe4e>
 8002792:	4ab9      	ldr	r2, [pc, #740]	; (8002a78 <_vfprintf_r+0xfb8>)
 8002794:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002796:	920f      	str	r2, [sp, #60]	; 0x3c
 8002798:	2d10      	cmp	r5, #16
 800279a:	f340 826d 	ble.w	8002c78 <_vfprintf_r+0x11b8>
 800279e:	4622      	mov	r2, r4
 80027a0:	2710      	movs	r7, #16
 80027a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80027a6:	9c08      	ldr	r4, [sp, #32]
 80027a8:	e005      	b.n	80027b6 <_vfprintf_r+0xcf6>
 80027aa:	f109 0908 	add.w	r9, r9, #8
 80027ae:	3d10      	subs	r5, #16
 80027b0:	2d10      	cmp	r5, #16
 80027b2:	f340 8260 	ble.w	8002c76 <_vfprintf_r+0x11b6>
 80027b6:	3301      	adds	r3, #1
 80027b8:	3210      	adds	r2, #16
 80027ba:	2b07      	cmp	r3, #7
 80027bc:	9229      	str	r2, [sp, #164]	; 0xa4
 80027be:	9328      	str	r3, [sp, #160]	; 0xa0
 80027c0:	f8c9 a000 	str.w	sl, [r9]
 80027c4:	f8c9 7004 	str.w	r7, [r9, #4]
 80027c8:	ddef      	ble.n	80027aa <_vfprintf_r+0xcea>
 80027ca:	aa27      	add	r2, sp, #156	; 0x9c
 80027cc:	4621      	mov	r1, r4
 80027ce:	4658      	mov	r0, fp
 80027d0:	f002 ff54 	bl	800567c <__sprint_r>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	f47f aaa3 	bne.w	8001d20 <_vfprintf_r+0x260>
 80027da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80027dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80027de:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80027e2:	e7e4      	b.n	80027ae <_vfprintf_r+0xcee>
 80027e4:	aa27      	add	r2, sp, #156	; 0x9c
 80027e6:	9908      	ldr	r1, [sp, #32]
 80027e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80027ea:	f002 ff47 	bl	800567c <__sprint_r>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	f47f aa96 	bne.w	8001d20 <_vfprintf_r+0x260>
 80027f4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80027f8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80027fa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80027fe:	f7ff bbcd 	b.w	8001f9c <_vfprintf_r+0x4dc>
 8002802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002804:	6814      	ldr	r4, [r2, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	17e5      	asrs	r5, r4, #31
 800280c:	930e      	str	r3, [sp, #56]	; 0x38
 800280e:	4622      	mov	r2, r4
 8002810:	462b      	mov	r3, r5
 8002812:	e4f4      	b.n	80021fe <_vfprintf_r+0x73e>
 8002814:	1e5e      	subs	r6, r3, #1
 8002816:	2e00      	cmp	r6, #0
 8002818:	f77f af3f 	ble.w	800269a <_vfprintf_r+0xbda>
 800281c:	4b96      	ldr	r3, [pc, #600]	; (8002a78 <_vfprintf_r+0xfb8>)
 800281e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002820:	2e10      	cmp	r6, #16
 8002822:	f340 8110 	ble.w	8002a46 <_vfprintf_r+0xf86>
 8002826:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800282a:	2710      	movs	r7, #16
 800282c:	46b0      	mov	r8, r6
 800282e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002832:	9e08      	ldr	r6, [sp, #32]
 8002834:	e007      	b.n	8002846 <_vfprintf_r+0xd86>
 8002836:	f109 0908 	add.w	r9, r9, #8
 800283a:	f1a8 0810 	sub.w	r8, r8, #16
 800283e:	f1b8 0f10 	cmp.w	r8, #16
 8002842:	f340 80fd 	ble.w	8002a40 <_vfprintf_r+0xf80>
 8002846:	3501      	adds	r5, #1
 8002848:	3410      	adds	r4, #16
 800284a:	2d07      	cmp	r5, #7
 800284c:	9429      	str	r4, [sp, #164]	; 0xa4
 800284e:	9528      	str	r5, [sp, #160]	; 0xa0
 8002850:	f8c9 a000 	str.w	sl, [r9]
 8002854:	f8c9 7004 	str.w	r7, [r9, #4]
 8002858:	dded      	ble.n	8002836 <_vfprintf_r+0xd76>
 800285a:	aa27      	add	r2, sp, #156	; 0x9c
 800285c:	4631      	mov	r1, r6
 800285e:	4658      	mov	r0, fp
 8002860:	f002 ff0c 	bl	800567c <__sprint_r>
 8002864:	2800      	cmp	r0, #0
 8002866:	f47f aa5b 	bne.w	8001d20 <_vfprintf_r+0x260>
 800286a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800286c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800286e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002872:	e7e2      	b.n	800283a <_vfprintf_r+0xd7a>
 8002874:	9907      	ldr	r1, [sp, #28]
 8002876:	f011 0210 	ands.w	r2, r1, #16
 800287a:	d020      	beq.n	80028be <_vfprintf_r+0xdfe>
 800287c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800287e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002882:	f1bb 0f00 	cmp.w	fp, #0
 8002886:	6804      	ldr	r4, [r0, #0]
 8002888:	f100 0704 	add.w	r7, r0, #4
 800288c:	f04f 0500 	mov.w	r5, #0
 8002890:	db26      	blt.n	80028e0 <_vfprintf_r+0xe20>
 8002892:	460a      	mov	r2, r1
 8002894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002898:	9207      	str	r2, [sp, #28]
 800289a:	ea54 0205 	orrs.w	r2, r4, r5
 800289e:	970e      	str	r7, [sp, #56]	; 0x38
 80028a0:	461f      	mov	r7, r3
 80028a2:	f47f ab03 	bne.w	8001eac <_vfprintf_r+0x3ec>
 80028a6:	e4bd      	b.n	8002224 <_vfprintf_r+0x764>
 80028a8:	3301      	adds	r3, #1
 80028aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80028ac:	9328      	str	r3, [sp, #160]	; 0xa0
 80028ae:	442c      	add	r4, r5
 80028b0:	2b07      	cmp	r3, #7
 80028b2:	9429      	str	r4, [sp, #164]	; 0xa4
 80028b4:	e889 0024 	stmia.w	r9, {r2, r5}
 80028b8:	f77f abde 	ble.w	8002078 <_vfprintf_r+0x5b8>
 80028bc:	e6fa      	b.n	80026b4 <_vfprintf_r+0xbf4>
 80028be:	9907      	ldr	r1, [sp, #28]
 80028c0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80028c4:	f040 824a 	bne.w	8002d5c <_vfprintf_r+0x129c>
 80028c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80028ca:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80028ce:	f1bb 0f00 	cmp.w	fp, #0
 80028d2:	680c      	ldr	r4, [r1, #0]
 80028d4:	f101 0704 	add.w	r7, r1, #4
 80028d8:	f04f 0500 	mov.w	r5, #0
 80028dc:	f280 811a 	bge.w	8002b14 <_vfprintf_r+0x1054>
 80028e0:	970e      	str	r7, [sp, #56]	; 0x38
 80028e2:	461f      	mov	r7, r3
 80028e4:	ea54 0305 	orrs.w	r3, r4, r5
 80028e8:	f47f aae0 	bne.w	8001eac <_vfprintf_r+0x3ec>
 80028ec:	ae44      	add	r6, sp, #272	; 0x110
 80028ee:	3430      	adds	r4, #48	; 0x30
 80028f0:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80028f4:	f7ff baf4 	b.w	8001ee0 <_vfprintf_r+0x420>
 80028f8:	aa27      	add	r2, sp, #156	; 0x9c
 80028fa:	9908      	ldr	r1, [sp, #32]
 80028fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80028fe:	f002 febd 	bl	800567c <__sprint_r>
 8002902:	2800      	cmp	r0, #0
 8002904:	f47f aa0c 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002908:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800290a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800290e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002912:	4432      	add	r2, r6
 8002914:	4617      	mov	r7, r2
 8002916:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002918:	4293      	cmp	r3, r2
 800291a:	db47      	blt.n	80029ac <_vfprintf_r+0xeec>
 800291c:	9a07      	ldr	r2, [sp, #28]
 800291e:	07d2      	lsls	r2, r2, #31
 8002920:	d444      	bmi.n	80029ac <_vfprintf_r+0xeec>
 8002922:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002924:	440e      	add	r6, r1
 8002926:	1bf5      	subs	r5, r6, r7
 8002928:	1acb      	subs	r3, r1, r3
 800292a:	429d      	cmp	r5, r3
 800292c:	bfa8      	it	ge
 800292e:	461d      	movge	r5, r3
 8002930:	2d00      	cmp	r5, #0
 8002932:	462e      	mov	r6, r5
 8002934:	dd0d      	ble.n	8002952 <_vfprintf_r+0xe92>
 8002936:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002938:	f8c9 7000 	str.w	r7, [r9]
 800293c:	3201      	adds	r2, #1
 800293e:	442c      	add	r4, r5
 8002940:	2a07      	cmp	r2, #7
 8002942:	9429      	str	r4, [sp, #164]	; 0xa4
 8002944:	f8c9 5004 	str.w	r5, [r9, #4]
 8002948:	9228      	str	r2, [sp, #160]	; 0xa0
 800294a:	f300 832e 	bgt.w	8002faa <_vfprintf_r+0x14ea>
 800294e:	f109 0908 	add.w	r9, r9, #8
 8002952:	2e00      	cmp	r6, #0
 8002954:	bfac      	ite	ge
 8002956:	1b9d      	subge	r5, r3, r6
 8002958:	461d      	movlt	r5, r3
 800295a:	2d00      	cmp	r5, #0
 800295c:	f77f ab8e 	ble.w	800207c <_vfprintf_r+0x5bc>
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <_vfprintf_r+0xfb8>)
 8002962:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002964:	920f      	str	r2, [sp, #60]	; 0x3c
 8002966:	2d10      	cmp	r5, #16
 8002968:	dd9e      	ble.n	80028a8 <_vfprintf_r+0xde8>
 800296a:	2610      	movs	r6, #16
 800296c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800296e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002972:	e004      	b.n	800297e <_vfprintf_r+0xebe>
 8002974:	f109 0908 	add.w	r9, r9, #8
 8002978:	3d10      	subs	r5, #16
 800297a:	2d10      	cmp	r5, #16
 800297c:	dd94      	ble.n	80028a8 <_vfprintf_r+0xde8>
 800297e:	3301      	adds	r3, #1
 8002980:	3410      	adds	r4, #16
 8002982:	2b07      	cmp	r3, #7
 8002984:	9429      	str	r4, [sp, #164]	; 0xa4
 8002986:	9328      	str	r3, [sp, #160]	; 0xa0
 8002988:	f8c9 a000 	str.w	sl, [r9]
 800298c:	f8c9 6004 	str.w	r6, [r9, #4]
 8002990:	ddf0      	ble.n	8002974 <_vfprintf_r+0xeb4>
 8002992:	aa27      	add	r2, sp, #156	; 0x9c
 8002994:	4659      	mov	r1, fp
 8002996:	4638      	mov	r0, r7
 8002998:	f002 fe70 	bl	800567c <__sprint_r>
 800299c:	2800      	cmp	r0, #0
 800299e:	f47f a9bf 	bne.w	8001d20 <_vfprintf_r+0x260>
 80029a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80029a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80029a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80029aa:	e7e5      	b.n	8002978 <_vfprintf_r+0xeb8>
 80029ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80029ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 80029b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80029b2:	f8c9 1000 	str.w	r1, [r9]
 80029b6:	3201      	adds	r2, #1
 80029b8:	4404      	add	r4, r0
 80029ba:	2a07      	cmp	r2, #7
 80029bc:	9429      	str	r4, [sp, #164]	; 0xa4
 80029be:	f8c9 0004 	str.w	r0, [r9, #4]
 80029c2:	9228      	str	r2, [sp, #160]	; 0xa0
 80029c4:	f300 82cf 	bgt.w	8002f66 <_vfprintf_r+0x14a6>
 80029c8:	f109 0908 	add.w	r9, r9, #8
 80029cc:	e7a9      	b.n	8002922 <_vfprintf_r+0xe62>
 80029ce:	9b07      	ldr	r3, [sp, #28]
 80029d0:	07df      	lsls	r7, r3, #31
 80029d2:	f53f ae2c 	bmi.w	800262e <_vfprintf_r+0xb6e>
 80029d6:	3501      	adds	r5, #1
 80029d8:	3401      	adds	r4, #1
 80029da:	2301      	movs	r3, #1
 80029dc:	2d07      	cmp	r5, #7
 80029de:	9429      	str	r4, [sp, #164]	; 0xa4
 80029e0:	9528      	str	r5, [sp, #160]	; 0xa0
 80029e2:	f8c9 6000 	str.w	r6, [r9]
 80029e6:	f8c9 3004 	str.w	r3, [r9, #4]
 80029ea:	f77f ae54 	ble.w	8002696 <_vfprintf_r+0xbd6>
 80029ee:	aa27      	add	r2, sp, #156	; 0x9c
 80029f0:	9908      	ldr	r1, [sp, #32]
 80029f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80029f4:	f002 fe42 	bl	800567c <__sprint_r>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f47f a991 	bne.w	8001d20 <_vfprintf_r+0x260>
 80029fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a00:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002a02:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a06:	e648      	b.n	800269a <_vfprintf_r+0xbda>
 8002a08:	aa27      	add	r2, sp, #156	; 0x9c
 8002a0a:	9908      	ldr	r1, [sp, #32]
 8002a0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a0e:	f002 fe35 	bl	800567c <__sprint_r>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	f47f a984 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002a18:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a1a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002a1c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a20:	e613      	b.n	800264a <_vfprintf_r+0xb8a>
 8002a22:	aa27      	add	r2, sp, #156	; 0x9c
 8002a24:	9908      	ldr	r1, [sp, #32]
 8002a26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a28:	f002 fe28 	bl	800567c <__sprint_r>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	f47f a977 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002a32:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a34:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002a36:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a3a:	e615      	b.n	8002668 <_vfprintf_r+0xba8>
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	e755      	b.n	80028ec <_vfprintf_r+0xe2c>
 8002a40:	4646      	mov	r6, r8
 8002a42:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8002a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a48:	3501      	adds	r5, #1
 8002a4a:	4434      	add	r4, r6
 8002a4c:	2d07      	cmp	r5, #7
 8002a4e:	9429      	str	r4, [sp, #164]	; 0xa4
 8002a50:	9528      	str	r5, [sp, #160]	; 0xa0
 8002a52:	e889 0048 	stmia.w	r9, {r3, r6}
 8002a56:	f77f ae1e 	ble.w	8002696 <_vfprintf_r+0xbd6>
 8002a5a:	e7c8      	b.n	80029ee <_vfprintf_r+0xf2e>
 8002a5c:	aa27      	add	r2, sp, #156	; 0x9c
 8002a5e:	9908      	ldr	r1, [sp, #32]
 8002a60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a62:	f002 fe0b 	bl	800567c <__sprint_r>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f47f a95a 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002a6c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a6e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a72:	f7ff bab7 	b.w	8001fe4 <_vfprintf_r+0x524>
 8002a76:	bf00      	nop
 8002a78:	08006e68 	.word	0x08006e68
 8002a7c:	4264      	negs	r4, r4
 8002a7e:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8002a82:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8002a86:	f1bb 0f00 	cmp.w	fp, #0
 8002a8a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002a8e:	f6ff aa0d 	blt.w	8001eac <_vfprintf_r+0x3ec>
 8002a92:	9b07      	ldr	r3, [sp, #28]
 8002a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a98:	9307      	str	r3, [sp, #28]
 8002a9a:	f7ff ba07 	b.w	8001eac <_vfprintf_r+0x3ec>
 8002a9e:	9907      	ldr	r1, [sp, #28]
 8002aa0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8002aa4:	d017      	beq.n	8002ad6 <_vfprintf_r+0x1016>
 8002aa6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002aa8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002aac:	4603      	mov	r3, r0
 8002aae:	f1bb 0f00 	cmp.w	fp, #0
 8002ab2:	f103 0304 	add.w	r3, r3, #4
 8002ab6:	8804      	ldrh	r4, [r0, #0]
 8002ab8:	f04f 0500 	mov.w	r5, #0
 8002abc:	f2c0 831b 	blt.w	80030f6 <_vfprintf_r+0x1636>
 8002ac0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002ac4:	9107      	str	r1, [sp, #28]
 8002ac6:	ea54 0105 	orrs.w	r1, r4, r5
 8002aca:	930e      	str	r3, [sp, #56]	; 0x38
 8002acc:	f43f ace1 	beq.w	8002492 <_vfprintf_r+0x9d2>
 8002ad0:	4617      	mov	r7, r2
 8002ad2:	f7ff b95c 	b.w	8001d8e <_vfprintf_r+0x2ce>
 8002ad6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ad8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002adc:	f1bb 0f00 	cmp.w	fp, #0
 8002ae0:	680c      	ldr	r4, [r1, #0]
 8002ae2:	f101 0704 	add.w	r7, r1, #4
 8002ae6:	f04f 0500 	mov.w	r5, #0
 8002aea:	db02      	blt.n	8002af2 <_vfprintf_r+0x1032>
 8002aec:	9a07      	ldr	r2, [sp, #28]
 8002aee:	f7ff b9af 	b.w	8001e50 <_vfprintf_r+0x390>
 8002af2:	970e      	str	r7, [sp, #56]	; 0x38
 8002af4:	2700      	movs	r7, #0
 8002af6:	f7ff b94a 	b.w	8001d8e <_vfprintf_r+0x2ce>
 8002afa:	9b07      	ldr	r3, [sp, #28]
 8002afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002afe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b02:	4613      	mov	r3, r2
 8002b04:	f000 8142 	beq.w	8002d8c <_vfprintf_r+0x12cc>
 8002b08:	3304      	adds	r3, #4
 8002b0a:	8814      	ldrh	r4, [r2, #0]
 8002b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8002b0e:	2500      	movs	r5, #0
 8002b10:	f7ff bb1a 	b.w	8002148 <_vfprintf_r+0x688>
 8002b14:	9a07      	ldr	r2, [sp, #28]
 8002b16:	e6bd      	b.n	8002894 <_vfprintf_r+0xdd4>
 8002b18:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	f003 ffb8 	bl	8006a94 <__aeabi_dcmpun>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	f040 82e8 	bne.w	80030fa <_vfprintf_r+0x163a>
 8002b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b2c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002b30:	f023 0720 	bic.w	r7, r3, #32
 8002b34:	f000 825f 	beq.w	8002ff6 <_vfprintf_r+0x1536>
 8002b38:	2f47      	cmp	r7, #71	; 0x47
 8002b3a:	f000 8158 	beq.w	8002dee <_vfprintf_r+0x132e>
 8002b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002b40:	9a07      	ldr	r2, [sp, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b48:	920f      	str	r2, [sp, #60]	; 0x3c
 8002b4a:	f2c0 825c 	blt.w	8003006 <_vfprintf_r+0x1546>
 8002b4e:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8002b52:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002b56:	2300      	movs	r3, #0
 8002b58:	9309      	str	r3, [sp, #36]	; 0x24
 8002b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b5c:	2b66      	cmp	r3, #102	; 0x66
 8002b5e:	f000 8233 	beq.w	8002fc8 <_vfprintf_r+0x1508>
 8002b62:	2b46      	cmp	r3, #70	; 0x46
 8002b64:	f000 8125 	beq.w	8002db2 <_vfprintf_r+0x12f2>
 8002b68:	2f45      	cmp	r7, #69	; 0x45
 8002b6a:	bf0c      	ite	eq
 8002b6c:	f10b 0501 	addeq.w	r5, fp, #1
 8002b70:	465d      	movne	r5, fp
 8002b72:	a825      	add	r0, sp, #148	; 0x94
 8002b74:	a922      	add	r1, sp, #136	; 0x88
 8002b76:	aa21      	add	r2, sp, #132	; 0x84
 8002b78:	2302      	movs	r3, #2
 8002b7a:	9004      	str	r0, [sp, #16]
 8002b7c:	9202      	str	r2, [sp, #8]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	9501      	str	r5, [sp, #4]
 8002b82:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8002b86:	9103      	str	r1, [sp, #12]
 8002b88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b8a:	f000 fc65 	bl	8003458 <_dtoa_r>
 8002b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b90:	2b67      	cmp	r3, #103	; 0x67
 8002b92:	4606      	mov	r6, r0
 8002b94:	f040 8275 	bne.w	8003082 <_vfprintf_r+0x15c2>
 8002b98:	9b07      	ldr	r3, [sp, #28]
 8002b9a:	07da      	lsls	r2, r3, #31
 8002b9c:	f140 8294 	bpl.w	80030c8 <_vfprintf_r+0x1608>
 8002ba0:	1974      	adds	r4, r6, r5
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8002baa:	f003 ff41 	bl	8006a30 <__aeabi_dcmpeq>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	f040 8178 	bne.w	8002ea4 <_vfprintf_r+0x13e4>
 8002bb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	d906      	bls.n	8002bc8 <_vfprintf_r+0x1108>
 8002bba:	2130      	movs	r1, #48	; 0x30
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	9225      	str	r2, [sp, #148]	; 0x94
 8002bc0:	7019      	strb	r1, [r3, #0]
 8002bc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002bc4:	429c      	cmp	r4, r3
 8002bc6:	d8f9      	bhi.n	8002bbc <_vfprintf_r+0x10fc>
 8002bc8:	1b9b      	subs	r3, r3, r6
 8002bca:	2f47      	cmp	r7, #71	; 0x47
 8002bcc:	9312      	str	r3, [sp, #72]	; 0x48
 8002bce:	f000 8156 	beq.w	8002e7e <_vfprintf_r+0x13be>
 8002bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bd4:	2b65      	cmp	r3, #101	; 0x65
 8002bd6:	f340 8263 	ble.w	80030a0 <_vfprintf_r+0x15e0>
 8002bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bdc:	2b66      	cmp	r3, #102	; 0x66
 8002bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002be0:	9313      	str	r3, [sp, #76]	; 0x4c
 8002be2:	f000 8226 	beq.w	8003032 <_vfprintf_r+0x1572>
 8002be6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002be8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002bea:	428a      	cmp	r2, r1
 8002bec:	f2c0 8214 	blt.w	8003018 <_vfprintf_r+0x1558>
 8002bf0:	9b07      	ldr	r3, [sp, #28]
 8002bf2:	07db      	lsls	r3, r3, #31
 8002bf4:	f100 826a 	bmi.w	80030cc <_vfprintf_r+0x160c>
 8002bf8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002bfc:	920d      	str	r2, [sp, #52]	; 0x34
 8002bfe:	2267      	movs	r2, #103	; 0x67
 8002c00:	9211      	str	r2, [sp, #68]	; 0x44
 8002c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	f040 8117 	bne.w	8002e38 <_vfprintf_r+0x1378>
 8002c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c0e:	9307      	str	r3, [sp, #28]
 8002c10:	4693      	mov	fp, r2
 8002c12:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002c16:	f7ff b96d 	b.w	8001ef4 <_vfprintf_r+0x434>
 8002c1a:	f027 0707 	bic.w	r7, r7, #7
 8002c1e:	ed97 7b00 	vldr	d7, [r7]
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8002c2c:	f7ff bb77 	b.w	800231e <_vfprintf_r+0x85e>
 8002c30:	9b07      	ldr	r3, [sp, #28]
 8002c32:	06de      	lsls	r6, r3, #27
 8002c34:	d40b      	bmi.n	8002c4e <_vfprintf_r+0x118e>
 8002c36:	9b07      	ldr	r3, [sp, #28]
 8002c38:	065d      	lsls	r5, r3, #25
 8002c3a:	d508      	bpl.n	8002c4e <_vfprintf_r+0x118e>
 8002c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	3204      	adds	r2, #4
 8002c42:	920e      	str	r2, [sp, #56]	; 0x38
 8002c44:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	f7fe bf7a 	b.w	8001b42 <_vfprintf_r+0x82>
 8002c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	3204      	adds	r2, #4
 8002c54:	920e      	str	r2, [sp, #56]	; 0x38
 8002c56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f7fe bf72 	b.w	8001b42 <_vfprintf_r+0x82>
 8002c5e:	2700      	movs	r7, #0
 8002c60:	45bb      	cmp	fp, r7
 8002c62:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002c66:	f6ff ac26 	blt.w	80024b6 <_vfprintf_r+0x9f6>
 8002c6a:	9b07      	ldr	r3, [sp, #28]
 8002c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c70:	9307      	str	r3, [sp, #28]
 8002c72:	f7ff bbf3 	b.w	800245c <_vfprintf_r+0x99c>
 8002c76:	4614      	mov	r4, r2
 8002c78:	3301      	adds	r3, #1
 8002c7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002c7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c7e:	442c      	add	r4, r5
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c84:	e889 0024 	stmia.w	r9, {r2, r5}
 8002c88:	f73f ae36 	bgt.w	80028f8 <_vfprintf_r+0xe38>
 8002c8c:	f109 0908 	add.w	r9, r9, #8
 8002c90:	e63d      	b.n	800290e <_vfprintf_r+0xe4e>
 8002c92:	aa27      	add	r2, sp, #156	; 0x9c
 8002c94:	9908      	ldr	r1, [sp, #32]
 8002c96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c98:	f002 fcf0 	bl	800567c <__sprint_r>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	f47f a83f 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002ca2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002ca4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002ca8:	e427      	b.n	80024fa <_vfprintf_r+0xa3a>
 8002caa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002cac:	4ab4      	ldr	r2, [pc, #720]	; (8002f80 <_vfprintf_r+0x14c0>)
 8002cae:	f8c9 2000 	str.w	r2, [r9]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	3401      	adds	r4, #1
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	9429      	str	r4, [sp, #164]	; 0xa4
 8002cbc:	9328      	str	r3, [sp, #160]	; 0xa0
 8002cbe:	f8c9 2004 	str.w	r2, [r9, #4]
 8002cc2:	dc69      	bgt.n	8002d98 <_vfprintf_r+0x12d8>
 8002cc4:	f109 0908 	add.w	r9, r9, #8
 8002cc8:	b92d      	cbnz	r5, 8002cd6 <_vfprintf_r+0x1216>
 8002cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ccc:	b91b      	cbnz	r3, 8002cd6 <_vfprintf_r+0x1216>
 8002cce:	9b07      	ldr	r3, [sp, #28]
 8002cd0:	07d9      	lsls	r1, r3, #31
 8002cd2:	f57f a9d3 	bpl.w	800207c <_vfprintf_r+0x5bc>
 8002cd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002cd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002cda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002cdc:	f8c9 2000 	str.w	r2, [r9]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	440c      	add	r4, r1
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	9429      	str	r4, [sp, #164]	; 0xa4
 8002ce8:	f8c9 1004 	str.w	r1, [r9, #4]
 8002cec:	9328      	str	r3, [sp, #160]	; 0xa0
 8002cee:	f300 81d9 	bgt.w	80030a4 <_vfprintf_r+0x15e4>
 8002cf2:	f109 0908 	add.w	r9, r9, #8
 8002cf6:	426d      	negs	r5, r5
 8002cf8:	2d00      	cmp	r5, #0
 8002cfa:	f340 80b3 	ble.w	8002e64 <_vfprintf_r+0x13a4>
 8002cfe:	4aa1      	ldr	r2, [pc, #644]	; (8002f84 <_vfprintf_r+0x14c4>)
 8002d00:	920f      	str	r2, [sp, #60]	; 0x3c
 8002d02:	2d10      	cmp	r5, #16
 8002d04:	f340 8122 	ble.w	8002f4c <_vfprintf_r+0x148c>
 8002d08:	4622      	mov	r2, r4
 8002d0a:	2710      	movs	r7, #16
 8002d0c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002d10:	9c08      	ldr	r4, [sp, #32]
 8002d12:	e005      	b.n	8002d20 <_vfprintf_r+0x1260>
 8002d14:	f109 0908 	add.w	r9, r9, #8
 8002d18:	3d10      	subs	r5, #16
 8002d1a:	2d10      	cmp	r5, #16
 8002d1c:	f340 8115 	ble.w	8002f4a <_vfprintf_r+0x148a>
 8002d20:	3301      	adds	r3, #1
 8002d22:	3210      	adds	r2, #16
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	9229      	str	r2, [sp, #164]	; 0xa4
 8002d28:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d2a:	f8c9 a000 	str.w	sl, [r9]
 8002d2e:	f8c9 7004 	str.w	r7, [r9, #4]
 8002d32:	ddef      	ble.n	8002d14 <_vfprintf_r+0x1254>
 8002d34:	aa27      	add	r2, sp, #156	; 0x9c
 8002d36:	4621      	mov	r1, r4
 8002d38:	4658      	mov	r0, fp
 8002d3a:	f002 fc9f 	bl	800567c <__sprint_r>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	f47e afee 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002d44:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002d46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d48:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d4c:	e7e4      	b.n	8002d18 <_vfprintf_r+0x1258>
 8002d4e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002d50:	f7ff bbaa 	b.w	80024a8 <_vfprintf_r+0x9e8>
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	f7fe bfe8 	b.w	8001d2c <_vfprintf_r+0x26c>
 8002d5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002d5e:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8002d62:	4603      	mov	r3, r0
 8002d64:	f1bb 0f00 	cmp.w	fp, #0
 8002d68:	f103 0304 	add.w	r3, r3, #4
 8002d6c:	8804      	ldrh	r4, [r0, #0]
 8002d6e:	f04f 0500 	mov.w	r5, #0
 8002d72:	f2c0 81b4 	blt.w	80030de <_vfprintf_r+0x161e>
 8002d76:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002d7a:	9107      	str	r1, [sp, #28]
 8002d7c:	ea54 0105 	orrs.w	r1, r4, r5
 8002d80:	930e      	str	r3, [sp, #56]	; 0x38
 8002d82:	4617      	mov	r7, r2
 8002d84:	f47f a892 	bne.w	8001eac <_vfprintf_r+0x3ec>
 8002d88:	f7ff ba4c 	b.w	8002224 <_vfprintf_r+0x764>
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	6814      	ldr	r4, [r2, #0]
 8002d90:	930e      	str	r3, [sp, #56]	; 0x38
 8002d92:	2500      	movs	r5, #0
 8002d94:	f7ff b9d8 	b.w	8002148 <_vfprintf_r+0x688>
 8002d98:	aa27      	add	r2, sp, #156	; 0x9c
 8002d9a:	9908      	ldr	r1, [sp, #32]
 8002d9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d9e:	f002 fc6d 	bl	800567c <__sprint_r>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	f47e afbc 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002da8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002daa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002dac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002db0:	e78a      	b.n	8002cc8 <_vfprintf_r+0x1208>
 8002db2:	a825      	add	r0, sp, #148	; 0x94
 8002db4:	a922      	add	r1, sp, #136	; 0x88
 8002db6:	aa21      	add	r2, sp, #132	; 0x84
 8002db8:	2303      	movs	r3, #3
 8002dba:	9004      	str	r0, [sp, #16]
 8002dbc:	9202      	str	r2, [sp, #8]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f8cd b004 	str.w	fp, [sp, #4]
 8002dc4:	9103      	str	r1, [sp, #12]
 8002dc6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8002dca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002dcc:	f000 fb44 	bl	8003458 <_dtoa_r>
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002dd6:	2b46      	cmp	r3, #70	; 0x46
 8002dd8:	eb06 0405 	add.w	r4, r6, r5
 8002ddc:	f47f aee1 	bne.w	8002ba2 <_vfprintf_r+0x10e2>
 8002de0:	7833      	ldrb	r3, [r6, #0]
 8002de2:	2b30      	cmp	r3, #48	; 0x30
 8002de4:	f000 8198 	beq.w	8003118 <_vfprintf_r+0x1658>
 8002de8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002dea:	442c      	add	r4, r5
 8002dec:	e6d9      	b.n	8002ba2 <_vfprintf_r+0x10e2>
 8002dee:	f1bb 0f00 	cmp.w	fp, #0
 8002df2:	bf08      	it	eq
 8002df4:	f04f 0b01 	moveq.w	fp, #1
 8002df8:	e6a1      	b.n	8002b3e <_vfprintf_r+0x107e>
 8002dfa:	9b07      	ldr	r3, [sp, #28]
 8002dfc:	f043 0320 	orr.w	r3, r3, #32
 8002e00:	9307      	str	r3, [sp, #28]
 8002e02:	f108 0801 	add.w	r8, r8, #1
 8002e06:	f898 3000 	ldrb.w	r3, [r8]
 8002e0a:	f7fe becd 	b.w	8001ba8 <_vfprintf_r+0xe8>
 8002e0e:	aa27      	add	r2, sp, #156	; 0x9c
 8002e10:	9908      	ldr	r1, [sp, #32]
 8002e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e14:	f002 fc32 	bl	800567c <__sprint_r>
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	f47e af81 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002e1e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002e20:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002e24:	f7ff bb81 	b.w	800252a <_vfprintf_r+0xa6a>
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f7fe fd29 	bl	8001880 <strlen>
 8002e2e:	46a3      	mov	fp, r4
 8002e30:	4603      	mov	r3, r0
 8002e32:	900d      	str	r0, [sp, #52]	; 0x34
 8002e34:	f7ff bb01 	b.w	800243a <_vfprintf_r+0x97a>
 8002e38:	272d      	movs	r7, #45	; 0x2d
 8002e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e3e:	9307      	str	r3, [sp, #28]
 8002e40:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002e44:	f04f 0b00 	mov.w	fp, #0
 8002e48:	f7ff b855 	b.w	8001ef6 <_vfprintf_r+0x436>
 8002e4c:	aa27      	add	r2, sp, #156	; 0x9c
 8002e4e:	9908      	ldr	r1, [sp, #32]
 8002e50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e52:	f002 fc13 	bl	800567c <__sprint_r>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	f47e af62 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002e5c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002e5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e60:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002e64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002e66:	f8c9 6000 	str.w	r6, [r9]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	440c      	add	r4, r1
 8002e6e:	2b07      	cmp	r3, #7
 8002e70:	9429      	str	r4, [sp, #164]	; 0xa4
 8002e72:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e74:	f8c9 1004 	str.w	r1, [r9, #4]
 8002e78:	f77f a8fe 	ble.w	8002078 <_vfprintf_r+0x5b8>
 8002e7c:	e41a      	b.n	80026b4 <_vfprintf_r+0xbf4>
 8002e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e80:	1cd8      	adds	r0, r3, #3
 8002e82:	db11      	blt.n	8002ea8 <_vfprintf_r+0x13e8>
 8002e84:	459b      	cmp	fp, r3
 8002e86:	db0f      	blt.n	8002ea8 <_vfprintf_r+0x13e8>
 8002e88:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e8a:	e6ac      	b.n	8002be6 <_vfprintf_r+0x1126>
 8002e8c:	aa27      	add	r2, sp, #156	; 0x9c
 8002e8e:	9908      	ldr	r1, [sp, #32]
 8002e90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e92:	f002 fbf3 	bl	800567c <__sprint_r>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	f47e af42 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002e9c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002e9e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002ea2:	e46e      	b.n	8002782 <_vfprintf_r+0xcc2>
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	e68f      	b.n	8002bc8 <_vfprintf_r+0x1108>
 8002ea8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002eaa:	3a02      	subs	r2, #2
 8002eac:	9211      	str	r2, [sp, #68]	; 0x44
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8002eb6:	9321      	str	r3, [sp, #132]	; 0x84
 8002eb8:	bfb8      	it	lt
 8002eba:	425b      	neglt	r3, r3
 8002ebc:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8002ec0:	bfb4      	ite	lt
 8002ec2:	222d      	movlt	r2, #45	; 0x2d
 8002ec4:	222b      	movge	r2, #43	; 0x2b
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8002ecc:	f340 810b 	ble.w	80030e6 <_vfprintf_r+0x1626>
 8002ed0:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <_vfprintf_r+0x14c8>)
 8002ed8:	fb82 2103 	smull	r2, r1, r2, r3
 8002edc:	17da      	asrs	r2, r3, #31
 8002ede:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8002ee2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002ee6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8002eea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002eee:	2a09      	cmp	r2, #9
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8002ef6:	dcee      	bgt.n	8002ed6 <_vfprintf_r+0x1416>
 8002ef8:	4621      	mov	r1, r4
 8002efa:	3330      	adds	r3, #48	; 0x30
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8002f02:	4288      	cmp	r0, r1
 8002f04:	f240 816f 	bls.w	80031e6 <_vfprintf_r+0x1726>
 8002f08:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	e001      	b.n	8002f14 <_vfprintf_r+0x1454>
 8002f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f14:	f801 2b01 	strb.w	r2, [r1], #1
 8002f18:	4298      	cmp	r0, r3
 8002f1a:	d1f9      	bne.n	8002f10 <_vfprintf_r+0x1450>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	1b1b      	subs	r3, r3, r4
 8002f20:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8002f24:	4413      	add	r3, r2
 8002f26:	aa23      	add	r2, sp, #140	; 0x8c
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002f2c:	9319      	str	r3, [sp, #100]	; 0x64
 8002f2e:	2a01      	cmp	r2, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	930d      	str	r3, [sp, #52]	; 0x34
 8002f34:	f340 80fe 	ble.w	8003134 <_vfprintf_r+0x1674>
 8002f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002f3c:	4413      	add	r3, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	930d      	str	r3, [sp, #52]	; 0x34
 8002f42:	9213      	str	r2, [sp, #76]	; 0x4c
 8002f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002f48:	e65b      	b.n	8002c02 <_vfprintf_r+0x1142>
 8002f4a:	4614      	mov	r4, r2
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f50:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f52:	442c      	add	r4, r5
 8002f54:	2b07      	cmp	r3, #7
 8002f56:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f58:	e889 0024 	stmia.w	r9, {r2, r5}
 8002f5c:	f73f af76 	bgt.w	8002e4c <_vfprintf_r+0x138c>
 8002f60:	f109 0908 	add.w	r9, r9, #8
 8002f64:	e77e      	b.n	8002e64 <_vfprintf_r+0x13a4>
 8002f66:	aa27      	add	r2, sp, #156	; 0x9c
 8002f68:	9908      	ldr	r1, [sp, #32]
 8002f6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002f6c:	f002 fb86 	bl	800567c <__sprint_r>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f47e aed5 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f78:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002f7a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002f7e:	e4d0      	b.n	8002922 <_vfprintf_r+0xe62>
 8002f80:	08006eb8 	.word	0x08006eb8
 8002f84:	08006e68 	.word	0x08006e68
 8002f88:	66666667 	.word	0x66666667
 8002f8c:	2d06      	cmp	r5, #6
 8002f8e:	462b      	mov	r3, r5
 8002f90:	bf28      	it	cs
 8002f92:	2306      	movcs	r3, #6
 8002f94:	930d      	str	r3, [sp, #52]	; 0x34
 8002f96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002f9a:	46b3      	mov	fp, r6
 8002f9c:	970e      	str	r7, [sp, #56]	; 0x38
 8002f9e:	9613      	str	r6, [sp, #76]	; 0x4c
 8002fa0:	4637      	mov	r7, r6
 8002fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa4:	4e91      	ldr	r6, [pc, #580]	; (80031ec <_vfprintf_r+0x172c>)
 8002fa6:	f7fe bfa5 	b.w	8001ef4 <_vfprintf_r+0x434>
 8002faa:	aa27      	add	r2, sp, #156	; 0x9c
 8002fac:	9908      	ldr	r1, [sp, #32]
 8002fae:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fb0:	f002 fb64 	bl	800567c <__sprint_r>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	f47e aeb3 	bne.w	8001d20 <_vfprintf_r+0x260>
 8002fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fbe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002fc6:	e4c4      	b.n	8002952 <_vfprintf_r+0xe92>
 8002fc8:	a825      	add	r0, sp, #148	; 0x94
 8002fca:	a922      	add	r1, sp, #136	; 0x88
 8002fcc:	aa21      	add	r2, sp, #132	; 0x84
 8002fce:	2303      	movs	r3, #3
 8002fd0:	9004      	str	r0, [sp, #16]
 8002fd2:	9202      	str	r2, [sp, #8]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	f8cd b004 	str.w	fp, [sp, #4]
 8002fda:	9103      	str	r1, [sp, #12]
 8002fdc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8002fe0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fe2:	f000 fa39 	bl	8003458 <_dtoa_r>
 8002fe6:	465d      	mov	r5, fp
 8002fe8:	4606      	mov	r6, r0
 8002fea:	eb00 040b 	add.w	r4, r0, fp
 8002fee:	e6f7      	b.n	8002de0 <_vfprintf_r+0x1320>
 8002ff0:	9307      	str	r3, [sp, #28]
 8002ff2:	f7ff b8c7 	b.w	8002184 <_vfprintf_r+0x6c4>
 8002ff6:	f04f 0b06 	mov.w	fp, #6
 8002ffa:	e5a0      	b.n	8002b3e <_vfprintf_r+0x107e>
 8002ffc:	272d      	movs	r7, #45	; 0x2d
 8002ffe:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003002:	f7ff b9b3 	b.w	800236c <_vfprintf_r+0x8ac>
 8003006:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800300a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800300e:	931d      	str	r3, [sp, #116]	; 0x74
 8003010:	232d      	movs	r3, #45	; 0x2d
 8003012:	911c      	str	r1, [sp, #112]	; 0x70
 8003014:	9309      	str	r3, [sp, #36]	; 0x24
 8003016:	e5a0      	b.n	8002b5a <_vfprintf_r+0x109a>
 8003018:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800301a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800301c:	4413      	add	r3, r2
 800301e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003020:	930d      	str	r3, [sp, #52]	; 0x34
 8003022:	2a00      	cmp	r2, #0
 8003024:	f340 8090 	ble.w	8003148 <_vfprintf_r+0x1688>
 8003028:	2267      	movs	r2, #103	; 0x67
 800302a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800302e:	9211      	str	r2, [sp, #68]	; 0x44
 8003030:	e5e7      	b.n	8002c02 <_vfprintf_r+0x1142>
 8003032:	2b00      	cmp	r3, #0
 8003034:	f340 8090 	ble.w	8003158 <_vfprintf_r+0x1698>
 8003038:	f1bb 0f00 	cmp.w	fp, #0
 800303c:	d163      	bne.n	8003106 <_vfprintf_r+0x1646>
 800303e:	9a07      	ldr	r2, [sp, #28]
 8003040:	07d1      	lsls	r1, r2, #31
 8003042:	d460      	bmi.n	8003106 <_vfprintf_r+0x1646>
 8003044:	461a      	mov	r2, r3
 8003046:	920d      	str	r2, [sp, #52]	; 0x34
 8003048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800304c:	e5d9      	b.n	8002c02 <_vfprintf_r+0x1142>
 800304e:	9b07      	ldr	r3, [sp, #28]
 8003050:	07db      	lsls	r3, r3, #31
 8003052:	465f      	mov	r7, fp
 8003054:	d505      	bpl.n	8003062 <_vfprintf_r+0x15a2>
 8003056:	ae44      	add	r6, sp, #272	; 0x110
 8003058:	2330      	movs	r3, #48	; 0x30
 800305a:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800305e:	f7fe bf3f 	b.w	8001ee0 <_vfprintf_r+0x420>
 8003062:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003066:	ae34      	add	r6, sp, #208	; 0xd0
 8003068:	f7fe bf3d 	b.w	8001ee6 <_vfprintf_r+0x426>
 800306c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003070:	970e      	str	r7, [sp, #56]	; 0x38
 8003072:	9309      	str	r3, [sp, #36]	; 0x24
 8003074:	950d      	str	r5, [sp, #52]	; 0x34
 8003076:	4683      	mov	fp, r0
 8003078:	9013      	str	r0, [sp, #76]	; 0x4c
 800307a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800307e:	f7fe bf39 	b.w	8001ef4 <_vfprintf_r+0x434>
 8003082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003084:	2b47      	cmp	r3, #71	; 0x47
 8003086:	f47f ad8b 	bne.w	8002ba0 <_vfprintf_r+0x10e0>
 800308a:	9b07      	ldr	r3, [sp, #28]
 800308c:	07dc      	lsls	r4, r3, #31
 800308e:	f53f aea1 	bmi.w	8002dd4 <_vfprintf_r+0x1314>
 8003092:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003094:	2f47      	cmp	r7, #71	; 0x47
 8003096:	eba3 0306 	sub.w	r3, r3, r6
 800309a:	9312      	str	r3, [sp, #72]	; 0x48
 800309c:	f43f aeef 	beq.w	8002e7e <_vfprintf_r+0x13be>
 80030a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030a2:	e704      	b.n	8002eae <_vfprintf_r+0x13ee>
 80030a4:	aa27      	add	r2, sp, #156	; 0x9c
 80030a6:	9908      	ldr	r1, [sp, #32]
 80030a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80030aa:	f002 fae7 	bl	800567c <__sprint_r>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	f47e ae36 	bne.w	8001d20 <_vfprintf_r+0x260>
 80030b4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80030b6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80030b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80030ba:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80030be:	e61a      	b.n	8002cf6 <_vfprintf_r+0x1236>
 80030c0:	46a0      	mov	r8, r4
 80030c2:	2500      	movs	r5, #0
 80030c4:	f7fe bd72 	b.w	8001bac <_vfprintf_r+0xec>
 80030c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80030ca:	e57d      	b.n	8002bc8 <_vfprintf_r+0x1108>
 80030cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80030ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030d0:	4413      	add	r3, r2
 80030d2:	2267      	movs	r2, #103	; 0x67
 80030d4:	930d      	str	r3, [sp, #52]	; 0x34
 80030d6:	9211      	str	r2, [sp, #68]	; 0x44
 80030d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80030dc:	e591      	b.n	8002c02 <_vfprintf_r+0x1142>
 80030de:	930e      	str	r3, [sp, #56]	; 0x38
 80030e0:	4617      	mov	r7, r2
 80030e2:	f7ff bbff 	b.w	80028e4 <_vfprintf_r+0xe24>
 80030e6:	3330      	adds	r3, #48	; 0x30
 80030e8:	2230      	movs	r2, #48	; 0x30
 80030ea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80030ee:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80030f2:	ab24      	add	r3, sp, #144	; 0x90
 80030f4:	e717      	b.n	8002f26 <_vfprintf_r+0x1466>
 80030f6:	930e      	str	r3, [sp, #56]	; 0x38
 80030f8:	e4fc      	b.n	8002af4 <_vfprintf_r+0x1034>
 80030fa:	4e3d      	ldr	r6, [pc, #244]	; (80031f0 <_vfprintf_r+0x1730>)
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <_vfprintf_r+0x1734>)
 80030fe:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003102:	f7ff b935 	b.w	8002370 <_vfprintf_r+0x8b0>
 8003106:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003108:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800310a:	189d      	adds	r5, r3, r2
 800310c:	eb05 030b 	add.w	r3, r5, fp
 8003110:	930d      	str	r3, [sp, #52]	; 0x34
 8003112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003116:	e574      	b.n	8002c02 <_vfprintf_r+0x1142>
 8003118:	2200      	movs	r2, #0
 800311a:	2300      	movs	r3, #0
 800311c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003120:	f003 fc86 	bl	8006a30 <__aeabi_dcmpeq>
 8003124:	2800      	cmp	r0, #0
 8003126:	f47f ae5f 	bne.w	8002de8 <_vfprintf_r+0x1328>
 800312a:	f1c5 0501 	rsb	r5, r5, #1
 800312e:	9521      	str	r5, [sp, #132]	; 0x84
 8003130:	442c      	add	r4, r5
 8003132:	e536      	b.n	8002ba2 <_vfprintf_r+0x10e2>
 8003134:	9b07      	ldr	r3, [sp, #28]
 8003136:	f013 0301 	ands.w	r3, r3, #1
 800313a:	f47f aefd 	bne.w	8002f38 <_vfprintf_r+0x1478>
 800313e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003142:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003146:	e55c      	b.n	8002c02 <_vfprintf_r+0x1142>
 8003148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800314a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800314c:	f1c3 0301 	rsb	r3, r3, #1
 8003150:	441a      	add	r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	920d      	str	r2, [sp, #52]	; 0x34
 8003156:	e767      	b.n	8003028 <_vfprintf_r+0x1568>
 8003158:	f1bb 0f00 	cmp.w	fp, #0
 800315c:	d102      	bne.n	8003164 <_vfprintf_r+0x16a4>
 800315e:	9b07      	ldr	r3, [sp, #28]
 8003160:	07da      	lsls	r2, r3, #31
 8003162:	d507      	bpl.n	8003174 <_vfprintf_r+0x16b4>
 8003164:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003166:	1c5d      	adds	r5, r3, #1
 8003168:	eb05 030b 	add.w	r3, r5, fp
 800316c:	930d      	str	r3, [sp, #52]	; 0x34
 800316e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003172:	e546      	b.n	8002c02 <_vfprintf_r+0x1142>
 8003174:	2301      	movs	r3, #1
 8003176:	930d      	str	r3, [sp, #52]	; 0x34
 8003178:	e543      	b.n	8002c02 <_vfprintf_r+0x1142>
 800317a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800317c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003180:	6805      	ldr	r5, [r0, #0]
 8003182:	3004      	adds	r0, #4
 8003184:	2d00      	cmp	r5, #0
 8003186:	900e      	str	r0, [sp, #56]	; 0x38
 8003188:	46a0      	mov	r8, r4
 800318a:	f6be ad0d 	bge.w	8001ba8 <_vfprintf_r+0xe8>
 800318e:	f04f 35ff 	mov.w	r5, #4294967295
 8003192:	f7fe bd09 	b.w	8001ba8 <_vfprintf_r+0xe8>
 8003196:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800319a:	f7ff b893 	b.w	80022c4 <_vfprintf_r+0x804>
 800319e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031a2:	f7ff b85d 	b.w	8002260 <_vfprintf_r+0x7a0>
 80031a6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031aa:	f7fe bfbf 	b.w	800212c <_vfprintf_r+0x66c>
 80031ae:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031b2:	f7fe be5c 	b.w	8001e6e <_vfprintf_r+0x3ae>
 80031b6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031ba:	f7ff b812 	b.w	80021e2 <_vfprintf_r+0x722>
 80031be:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031c2:	f7fe bdca 	b.w	8001d5a <_vfprintf_r+0x29a>
 80031c6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031ca:	f7ff b951 	b.w	8002470 <_vfprintf_r+0x9b0>
 80031ce:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031d2:	f7fe be23 	b.w	8001e1c <_vfprintf_r+0x35c>
 80031d6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031da:	f7ff b8ed 	b.w	80023b8 <_vfprintf_r+0x8f8>
 80031de:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80031e2:	f7ff b88c 	b.w	80022fe <_vfprintf_r+0x83e>
 80031e6:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80031ea:	e69c      	b.n	8002f26 <_vfprintf_r+0x1466>
 80031ec:	08006eb0 	.word	0x08006eb0
 80031f0:	08006e84 	.word	0x08006e84
 80031f4:	08006e80 	.word	0x08006e80

080031f8 <__sbprintf>:
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	460c      	mov	r4, r1
 80031fc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003200:	8989      	ldrh	r1, [r1, #12]
 8003202:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003204:	89e5      	ldrh	r5, [r4, #14]
 8003206:	9619      	str	r6, [sp, #100]	; 0x64
 8003208:	f021 0102 	bic.w	r1, r1, #2
 800320c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800320e:	f8ad 500e 	strh.w	r5, [sp, #14]
 8003212:	2500      	movs	r5, #0
 8003214:	69e7      	ldr	r7, [r4, #28]
 8003216:	f8ad 100c 	strh.w	r1, [sp, #12]
 800321a:	9609      	str	r6, [sp, #36]	; 0x24
 800321c:	9506      	str	r5, [sp, #24]
 800321e:	ae1a      	add	r6, sp, #104	; 0x68
 8003220:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003224:	4669      	mov	r1, sp
 8003226:	9600      	str	r6, [sp, #0]
 8003228:	9604      	str	r6, [sp, #16]
 800322a:	9502      	str	r5, [sp, #8]
 800322c:	9505      	str	r5, [sp, #20]
 800322e:	9707      	str	r7, [sp, #28]
 8003230:	4606      	mov	r6, r0
 8003232:	f7fe fc45 	bl	8001ac0 <_vfprintf_r>
 8003236:	1e05      	subs	r5, r0, #0
 8003238:	db07      	blt.n	800324a <__sbprintf+0x52>
 800323a:	4630      	mov	r0, r6
 800323c:	4669      	mov	r1, sp
 800323e:	f001 f8c5 	bl	80043cc <_fflush_r>
 8003242:	2800      	cmp	r0, #0
 8003244:	bf18      	it	ne
 8003246:	f04f 35ff 	movne.w	r5, #4294967295
 800324a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800324e:	065b      	lsls	r3, r3, #25
 8003250:	d503      	bpl.n	800325a <__sbprintf+0x62>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	4628      	mov	r0, r5
 800325c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	bf00      	nop

08003264 <__swsetup_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <__swsetup_r+0xc4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4605      	mov	r5, r0
 800326c:	460c      	mov	r4, r1
 800326e:	b113      	cbz	r3, 8003276 <__swsetup_r+0x12>
 8003270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003272:	2a00      	cmp	r2, #0
 8003274:	d038      	beq.n	80032e8 <__swsetup_r+0x84>
 8003276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800327a:	b293      	uxth	r3, r2
 800327c:	0718      	lsls	r0, r3, #28
 800327e:	d50c      	bpl.n	800329a <__swsetup_r+0x36>
 8003280:	6920      	ldr	r0, [r4, #16]
 8003282:	b1a8      	cbz	r0, 80032b0 <__swsetup_r+0x4c>
 8003284:	f013 0201 	ands.w	r2, r3, #1
 8003288:	d01e      	beq.n	80032c8 <__swsetup_r+0x64>
 800328a:	6963      	ldr	r3, [r4, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	425b      	negs	r3, r3
 8003290:	61a3      	str	r3, [r4, #24]
 8003292:	60a2      	str	r2, [r4, #8]
 8003294:	b1f0      	cbz	r0, 80032d4 <__swsetup_r+0x70>
 8003296:	2000      	movs	r0, #0
 8003298:	bd38      	pop	{r3, r4, r5, pc}
 800329a:	06d9      	lsls	r1, r3, #27
 800329c:	d53c      	bpl.n	8003318 <__swsetup_r+0xb4>
 800329e:	0758      	lsls	r0, r3, #29
 80032a0:	d426      	bmi.n	80032f0 <__swsetup_r+0x8c>
 80032a2:	6920      	ldr	r0, [r4, #16]
 80032a4:	f042 0308 	orr.w	r3, r2, #8
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d1e9      	bne.n	8003284 <__swsetup_r+0x20>
 80032b0:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80032b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80032b8:	d0e4      	beq.n	8003284 <__swsetup_r+0x20>
 80032ba:	4628      	mov	r0, r5
 80032bc:	4621      	mov	r1, r4
 80032be:	f001 fad3 	bl	8004868 <__smakebuf_r>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	6920      	ldr	r0, [r4, #16]
 80032c6:	e7dd      	b.n	8003284 <__swsetup_r+0x20>
 80032c8:	0799      	lsls	r1, r3, #30
 80032ca:	bf58      	it	pl
 80032cc:	6962      	ldrpl	r2, [r4, #20]
 80032ce:	60a2      	str	r2, [r4, #8]
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d1e0      	bne.n	8003296 <__swsetup_r+0x32>
 80032d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d8:	061a      	lsls	r2, r3, #24
 80032da:	d5dd      	bpl.n	8003298 <__swsetup_r+0x34>
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f903 	bl	80044f4 <__sinit>
 80032ee:	e7c2      	b.n	8003276 <__swsetup_r+0x12>
 80032f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80032f2:	b151      	cbz	r1, 800330a <__swsetup_r+0xa6>
 80032f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80032f8:	4299      	cmp	r1, r3
 80032fa:	d004      	beq.n	8003306 <__swsetup_r+0xa2>
 80032fc:	4628      	mov	r0, r5
 80032fe:	f001 f951 	bl	80045a4 <_free_r>
 8003302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003306:	2300      	movs	r3, #0
 8003308:	6323      	str	r3, [r4, #48]	; 0x30
 800330a:	2300      	movs	r3, #0
 800330c:	6920      	ldr	r0, [r4, #16]
 800330e:	6063      	str	r3, [r4, #4]
 8003310:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8003314:	6020      	str	r0, [r4, #0]
 8003316:	e7c5      	b.n	80032a4 <__swsetup_r+0x40>
 8003318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331c:	2309      	movs	r3, #9
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	81a2      	strh	r2, [r4, #12]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	20000448 	.word	0x20000448

0800332c <quorem>:
 800332c:	6902      	ldr	r2, [r0, #16]
 800332e:	690b      	ldr	r3, [r1, #16]
 8003330:	4293      	cmp	r3, r2
 8003332:	f300 808d 	bgt.w	8003450 <quorem+0x124>
 8003336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333a:	f103 38ff 	add.w	r8, r3, #4294967295
 800333e:	f101 0714 	add.w	r7, r1, #20
 8003342:	f100 0b14 	add.w	fp, r0, #20
 8003346:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800334a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800334e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8003352:	b083      	sub	sp, #12
 8003354:	3201      	adds	r2, #1
 8003356:	fbb3 f9f2 	udiv	r9, r3, r2
 800335a:	eb0b 0304 	add.w	r3, fp, r4
 800335e:	9400      	str	r4, [sp, #0]
 8003360:	eb07 0a04 	add.w	sl, r7, r4
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	f1b9 0f00 	cmp.w	r9, #0
 800336a:	d039      	beq.n	80033e0 <quorem+0xb4>
 800336c:	2500      	movs	r5, #0
 800336e:	46bc      	mov	ip, r7
 8003370:	46de      	mov	lr, fp
 8003372:	462b      	mov	r3, r5
 8003374:	f85c 6b04 	ldr.w	r6, [ip], #4
 8003378:	f8de 2000 	ldr.w	r2, [lr]
 800337c:	b2b4      	uxth	r4, r6
 800337e:	fb09 5504 	mla	r5, r9, r4, r5
 8003382:	0c36      	lsrs	r6, r6, #16
 8003384:	0c2c      	lsrs	r4, r5, #16
 8003386:	fb09 4406 	mla	r4, r9, r6, r4
 800338a:	b2ad      	uxth	r5, r5
 800338c:	1b5b      	subs	r3, r3, r5
 800338e:	b2a6      	uxth	r6, r4
 8003390:	fa13 f382 	uxtah	r3, r3, r2
 8003394:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8003398:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800339c:	b29b      	uxth	r3, r3
 800339e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80033a2:	45e2      	cmp	sl, ip
 80033a4:	f84e 3b04 	str.w	r3, [lr], #4
 80033a8:	ea4f 4514 	mov.w	r5, r4, lsr #16
 80033ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 80033b0:	d2e0      	bcs.n	8003374 <quorem+0x48>
 80033b2:	9b00      	ldr	r3, [sp, #0]
 80033b4:	f85b 3003 	ldr.w	r3, [fp, r3]
 80033b8:	b993      	cbnz	r3, 80033e0 <quorem+0xb4>
 80033ba:	9c01      	ldr	r4, [sp, #4]
 80033bc:	1f23      	subs	r3, r4, #4
 80033be:	459b      	cmp	fp, r3
 80033c0:	d20c      	bcs.n	80033dc <quorem+0xb0>
 80033c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80033c6:	b94b      	cbnz	r3, 80033dc <quorem+0xb0>
 80033c8:	f1a4 0308 	sub.w	r3, r4, #8
 80033cc:	e002      	b.n	80033d4 <quorem+0xa8>
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	3b04      	subs	r3, #4
 80033d2:	b91a      	cbnz	r2, 80033dc <quorem+0xb0>
 80033d4:	459b      	cmp	fp, r3
 80033d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80033da:	d3f8      	bcc.n	80033ce <quorem+0xa2>
 80033dc:	f8c0 8010 	str.w	r8, [r0, #16]
 80033e0:	4604      	mov	r4, r0
 80033e2:	f001 ffb1 	bl	8005348 <__mcmp>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	db2e      	blt.n	8003448 <quorem+0x11c>
 80033ea:	f109 0901 	add.w	r9, r9, #1
 80033ee:	465d      	mov	r5, fp
 80033f0:	2300      	movs	r3, #0
 80033f2:	f857 1b04 	ldr.w	r1, [r7], #4
 80033f6:	6828      	ldr	r0, [r5, #0]
 80033f8:	b28a      	uxth	r2, r1
 80033fa:	1a9a      	subs	r2, r3, r2
 80033fc:	0c09      	lsrs	r1, r1, #16
 80033fe:	fa12 f280 	uxtah	r2, r2, r0
 8003402:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8003406:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800340a:	b291      	uxth	r1, r2
 800340c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003410:	45ba      	cmp	sl, r7
 8003412:	f845 1b04 	str.w	r1, [r5], #4
 8003416:	ea4f 4323 	mov.w	r3, r3, asr #16
 800341a:	d2ea      	bcs.n	80033f2 <quorem+0xc6>
 800341c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8003420:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8003424:	b982      	cbnz	r2, 8003448 <quorem+0x11c>
 8003426:	1f1a      	subs	r2, r3, #4
 8003428:	4593      	cmp	fp, r2
 800342a:	d20b      	bcs.n	8003444 <quorem+0x118>
 800342c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8003430:	b942      	cbnz	r2, 8003444 <quorem+0x118>
 8003432:	3b08      	subs	r3, #8
 8003434:	e002      	b.n	800343c <quorem+0x110>
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	3b04      	subs	r3, #4
 800343a:	b91a      	cbnz	r2, 8003444 <quorem+0x118>
 800343c:	459b      	cmp	fp, r3
 800343e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003442:	d3f8      	bcc.n	8003436 <quorem+0x10a>
 8003444:	f8c4 8010 	str.w	r8, [r4, #16]
 8003448:	4648      	mov	r0, r9
 800344a:	b003      	add	sp, #12
 800344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003450:	2000      	movs	r0, #0
 8003452:	4770      	bx	lr
 8003454:	0000      	movs	r0, r0
	...

08003458 <_dtoa_r>:
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800345e:	b099      	sub	sp, #100	; 0x64
 8003460:	4681      	mov	r9, r0
 8003462:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8003464:	4692      	mov	sl, r2
 8003466:	469b      	mov	fp, r3
 8003468:	b149      	cbz	r1, 800347e <_dtoa_r+0x26>
 800346a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800346c:	604a      	str	r2, [r1, #4]
 800346e:	2301      	movs	r3, #1
 8003470:	4093      	lsls	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
 8003474:	f001 fd86 	bl	8004f84 <_Bfree>
 8003478:	2300      	movs	r3, #0
 800347a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800347e:	f1bb 0f00 	cmp.w	fp, #0
 8003482:	46d8      	mov	r8, fp
 8003484:	db33      	blt.n	80034ee <_dtoa_r+0x96>
 8003486:	2300      	movs	r3, #0
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	4ba3      	ldr	r3, [pc, #652]	; (8003718 <_dtoa_r+0x2c0>)
 800348c:	461a      	mov	r2, r3
 800348e:	ea08 0303 	and.w	r3, r8, r3
 8003492:	4293      	cmp	r3, r2
 8003494:	d014      	beq.n	80034c0 <_dtoa_r+0x68>
 8003496:	2200      	movs	r2, #0
 8003498:	2300      	movs	r3, #0
 800349a:	4650      	mov	r0, sl
 800349c:	4659      	mov	r1, fp
 800349e:	f003 fac7 	bl	8006a30 <__aeabi_dcmpeq>
 80034a2:	4605      	mov	r5, r0
 80034a4:	b348      	cbz	r0, 80034fa <_dtoa_r+0xa2>
 80034a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80034a8:	2301      	movs	r3, #1
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80c2 	beq.w	8003638 <_dtoa_r+0x1e0>
 80034b4:	4899      	ldr	r0, [pc, #612]	; (800371c <_dtoa_r+0x2c4>)
 80034b6:	6018      	str	r0, [r3, #0]
 80034b8:	3801      	subs	r0, #1
 80034ba:	b019      	add	sp, #100	; 0x64
 80034bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80034c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	f1ba 0f00 	cmp.w	sl, #0
 80034cc:	f000 809f 	beq.w	800360e <_dtoa_r+0x1b6>
 80034d0:	4893      	ldr	r0, [pc, #588]	; (8003720 <_dtoa_r+0x2c8>)
 80034d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <_dtoa_r+0x62>
 80034d8:	78c3      	ldrb	r3, [r0, #3]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80ae 	beq.w	800363c <_dtoa_r+0x1e4>
 80034e0:	f100 0308 	add.w	r3, r0, #8
 80034e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	b019      	add	sp, #100	; 0x64
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	2301      	movs	r3, #1
 80034f0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	46c3      	mov	fp, r8
 80034f8:	e7c7      	b.n	800348a <_dtoa_r+0x32>
 80034fa:	aa16      	add	r2, sp, #88	; 0x58
 80034fc:	ab17      	add	r3, sp, #92	; 0x5c
 80034fe:	9201      	str	r2, [sp, #4]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4652      	mov	r2, sl
 8003504:	465b      	mov	r3, fp
 8003506:	4648      	mov	r0, r9
 8003508:	f001 ffca 	bl	80054a0 <__d2b>
 800350c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8003510:	9008      	str	r0, [sp, #32]
 8003512:	f040 8085 	bne.w	8003620 <_dtoa_r+0x1c8>
 8003516:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003518:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800351a:	442c      	add	r4, r5
 800351c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003520:	2b20      	cmp	r3, #32
 8003522:	f340 8289 	ble.w	8003a38 <_dtoa_r+0x5e0>
 8003526:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800352a:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800352e:	fa08 f803 	lsl.w	r8, r8, r3
 8003532:	fa2a f000 	lsr.w	r0, sl, r0
 8003536:	ea40 0008 	orr.w	r0, r0, r8
 800353a:	f002 ff9b 	bl	8006474 <__aeabi_ui2d>
 800353e:	2301      	movs	r3, #1
 8003540:	3c01      	subs	r4, #1
 8003542:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003546:	930d      	str	r3, [sp, #52]	; 0x34
 8003548:	2200      	movs	r2, #0
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <_dtoa_r+0x2cc>)
 800354c:	f002 fe54 	bl	80061f8 <__aeabi_dsub>
 8003550:	a36b      	add	r3, pc, #428	; (adr r3, 8003700 <_dtoa_r+0x2a8>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f003 f803 	bl	8006560 <__aeabi_dmul>
 800355a:	a36b      	add	r3, pc, #428	; (adr r3, 8003708 <_dtoa_r+0x2b0>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f002 fe4c 	bl	80061fc <__adddf3>
 8003564:	4606      	mov	r6, r0
 8003566:	4620      	mov	r0, r4
 8003568:	460f      	mov	r7, r1
 800356a:	f002 ff93 	bl	8006494 <__aeabi_i2d>
 800356e:	a368      	add	r3, pc, #416	; (adr r3, 8003710 <_dtoa_r+0x2b8>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f002 fff4 	bl	8006560 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4630      	mov	r0, r6
 800357e:	4639      	mov	r1, r7
 8003580:	f002 fe3c 	bl	80061fc <__adddf3>
 8003584:	4606      	mov	r6, r0
 8003586:	460f      	mov	r7, r1
 8003588:	f003 fa9a 	bl	8006ac0 <__aeabi_d2iz>
 800358c:	2200      	movs	r2, #0
 800358e:	9004      	str	r0, [sp, #16]
 8003590:	2300      	movs	r3, #0
 8003592:	4630      	mov	r0, r6
 8003594:	4639      	mov	r1, r7
 8003596:	f003 fa55 	bl	8006a44 <__aeabi_dcmplt>
 800359a:	2800      	cmp	r0, #0
 800359c:	f040 8227 	bne.w	80039ee <_dtoa_r+0x596>
 80035a0:	9e04      	ldr	r6, [sp, #16]
 80035a2:	2e16      	cmp	r6, #22
 80035a4:	f200 8220 	bhi.w	80039e8 <_dtoa_r+0x590>
 80035a8:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <_dtoa_r+0x2d0>)
 80035aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80035ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035b2:	4652      	mov	r2, sl
 80035b4:	465b      	mov	r3, fp
 80035b6:	f003 fa63 	bl	8006a80 <__aeabi_dcmpgt>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	f000 8241 	beq.w	8003a42 <_dtoa_r+0x5ea>
 80035c0:	1e73      	subs	r3, r6, #1
 80035c2:	9304      	str	r3, [sp, #16]
 80035c4:	2300      	movs	r3, #0
 80035c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80035c8:	1b2c      	subs	r4, r5, r4
 80035ca:	f1b4 0801 	subs.w	r8, r4, #1
 80035ce:	f100 8229 	bmi.w	8003a24 <_dtoa_r+0x5cc>
 80035d2:	2300      	movs	r3, #0
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	9b04      	ldr	r3, [sp, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f2c0 821a 	blt.w	8003a12 <_dtoa_r+0x5ba>
 80035de:	4498      	add	r8, r3
 80035e0:	930a      	str	r3, [sp, #40]	; 0x28
 80035e2:	2300      	movs	r3, #0
 80035e4:	9302      	str	r3, [sp, #8]
 80035e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d829      	bhi.n	8003640 <_dtoa_r+0x1e8>
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	f340 8643 	ble.w	8004278 <_dtoa_r+0xe20>
 80035f2:	3b04      	subs	r3, #4
 80035f4:	9322      	str	r3, [sp, #136]	; 0x88
 80035f6:	2500      	movs	r5, #0
 80035f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035fa:	3b02      	subs	r3, #2
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	f200 8622 	bhi.w	8004246 <_dtoa_r+0xdee>
 8003602:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003606:	032a      	.short	0x032a
 8003608:	03350223 	.word	0x03350223
 800360c:	044f      	.short	0x044f
 800360e:	4b44      	ldr	r3, [pc, #272]	; (8003720 <_dtoa_r+0x2c8>)
 8003610:	4a46      	ldr	r2, [pc, #280]	; (800372c <_dtoa_r+0x2d4>)
 8003612:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003616:	2800      	cmp	r0, #0
 8003618:	bf14      	ite	ne
 800361a:	4618      	movne	r0, r3
 800361c:	4610      	moveq	r0, r2
 800361e:	e758      	b.n	80034d2 <_dtoa_r+0x7a>
 8003620:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003624:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003628:	950d      	str	r5, [sp, #52]	; 0x34
 800362a:	4650      	mov	r0, sl
 800362c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003630:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003634:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003636:	e787      	b.n	8003548 <_dtoa_r+0xf0>
 8003638:	483d      	ldr	r0, [pc, #244]	; (8003730 <_dtoa_r+0x2d8>)
 800363a:	e73e      	b.n	80034ba <_dtoa_r+0x62>
 800363c:	1cc3      	adds	r3, r0, #3
 800363e:	e751      	b.n	80034e4 <_dtoa_r+0x8c>
 8003640:	2100      	movs	r1, #0
 8003642:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003646:	4648      	mov	r0, r9
 8003648:	9122      	str	r1, [sp, #136]	; 0x88
 800364a:	f001 fc75 	bl	8004f38 <_Balloc>
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	9306      	str	r3, [sp, #24]
 8003654:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003656:	930c      	str	r3, [sp, #48]	; 0x30
 8003658:	2301      	movs	r3, #1
 800365a:	9007      	str	r0, [sp, #28]
 800365c:	9223      	str	r2, [sp, #140]	; 0x8c
 800365e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003662:	9309      	str	r3, [sp, #36]	; 0x24
 8003664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003666:	2b00      	cmp	r3, #0
 8003668:	f2c0 80d0 	blt.w	800380c <_dtoa_r+0x3b4>
 800366c:	9a04      	ldr	r2, [sp, #16]
 800366e:	2a0e      	cmp	r2, #14
 8003670:	f300 80cc 	bgt.w	800380c <_dtoa_r+0x3b4>
 8003674:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <_dtoa_r+0x2d0>)
 8003676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800367a:	ed93 7b00 	vldr	d7, [r3]
 800367e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003680:	2b00      	cmp	r3, #0
 8003682:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003686:	f2c0 82fe 	blt.w	8003c86 <_dtoa_r+0x82e>
 800368a:	4656      	mov	r6, sl
 800368c:	465f      	mov	r7, fp
 800368e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8003692:	4630      	mov	r0, r6
 8003694:	4652      	mov	r2, sl
 8003696:	465b      	mov	r3, fp
 8003698:	4639      	mov	r1, r7
 800369a:	f003 f88b 	bl	80067b4 <__aeabi_ddiv>
 800369e:	f003 fa0f 	bl	8006ac0 <__aeabi_d2iz>
 80036a2:	4604      	mov	r4, r0
 80036a4:	f002 fef6 	bl	8006494 <__aeabi_i2d>
 80036a8:	4652      	mov	r2, sl
 80036aa:	465b      	mov	r3, fp
 80036ac:	f002 ff58 	bl	8006560 <__aeabi_dmul>
 80036b0:	460b      	mov	r3, r1
 80036b2:	4602      	mov	r2, r0
 80036b4:	4639      	mov	r1, r7
 80036b6:	4630      	mov	r0, r6
 80036b8:	f002 fd9e 	bl	80061f8 <__aeabi_dsub>
 80036bc:	9d07      	ldr	r5, [sp, #28]
 80036be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80036c2:	702b      	strb	r3, [r5, #0]
 80036c4:	9b06      	ldr	r3, [sp, #24]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	4606      	mov	r6, r0
 80036ca:	460f      	mov	r7, r1
 80036cc:	f105 0501 	add.w	r5, r5, #1
 80036d0:	d061      	beq.n	8003796 <_dtoa_r+0x33e>
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b17      	ldr	r3, [pc, #92]	; (8003734 <_dtoa_r+0x2dc>)
 80036d6:	f002 ff43 	bl	8006560 <__aeabi_dmul>
 80036da:	2200      	movs	r2, #0
 80036dc:	2300      	movs	r3, #0
 80036de:	4606      	mov	r6, r0
 80036e0:	460f      	mov	r7, r1
 80036e2:	f003 f9a5 	bl	8006a30 <__aeabi_dcmpeq>
 80036e6:	2800      	cmp	r0, #0
 80036e8:	d17d      	bne.n	80037e6 <_dtoa_r+0x38e>
 80036ea:	f8cd 9014 	str.w	r9, [sp, #20]
 80036ee:	f8dd a018 	ldr.w	sl, [sp, #24]
 80036f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80036f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80036fa:	e028      	b.n	800374e <_dtoa_r+0x2f6>
 80036fc:	f3af 8000 	nop.w
 8003700:	636f4361 	.word	0x636f4361
 8003704:	3fd287a7 	.word	0x3fd287a7
 8003708:	8b60c8b3 	.word	0x8b60c8b3
 800370c:	3fc68a28 	.word	0x3fc68a28
 8003710:	509f79fb 	.word	0x509f79fb
 8003714:	3fd34413 	.word	0x3fd34413
 8003718:	7ff00000 	.word	0x7ff00000
 800371c:	08006eb9 	.word	0x08006eb9
 8003720:	08006ed8 	.word	0x08006ed8
 8003724:	3ff80000 	.word	0x3ff80000
 8003728:	08006ef0 	.word	0x08006ef0
 800372c:	08006ecc 	.word	0x08006ecc
 8003730:	08006eb8 	.word	0x08006eb8
 8003734:	40240000 	.word	0x40240000
 8003738:	f002 ff12 	bl	8006560 <__aeabi_dmul>
 800373c:	2200      	movs	r2, #0
 800373e:	2300      	movs	r3, #0
 8003740:	4606      	mov	r6, r0
 8003742:	460f      	mov	r7, r1
 8003744:	f003 f974 	bl	8006a30 <__aeabi_dcmpeq>
 8003748:	2800      	cmp	r0, #0
 800374a:	f040 83ae 	bne.w	8003eaa <_dtoa_r+0xa52>
 800374e:	4642      	mov	r2, r8
 8003750:	464b      	mov	r3, r9
 8003752:	4630      	mov	r0, r6
 8003754:	4639      	mov	r1, r7
 8003756:	f003 f82d 	bl	80067b4 <__aeabi_ddiv>
 800375a:	f003 f9b1 	bl	8006ac0 <__aeabi_d2iz>
 800375e:	4604      	mov	r4, r0
 8003760:	f002 fe98 	bl	8006494 <__aeabi_i2d>
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	f002 fefa 	bl	8006560 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4630      	mov	r0, r6
 8003772:	4639      	mov	r1, r7
 8003774:	f002 fd40 	bl	80061f8 <__aeabi_dsub>
 8003778:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800377c:	f805 eb01 	strb.w	lr, [r5], #1
 8003780:	ebcb 0e05 	rsb	lr, fp, r5
 8003784:	45d6      	cmp	lr, sl
 8003786:	4606      	mov	r6, r0
 8003788:	460f      	mov	r7, r1
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	4bae      	ldr	r3, [pc, #696]	; (8003a48 <_dtoa_r+0x5f0>)
 8003790:	d1d2      	bne.n	8003738 <_dtoa_r+0x2e0>
 8003792:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003796:	4632      	mov	r2, r6
 8003798:	463b      	mov	r3, r7
 800379a:	4630      	mov	r0, r6
 800379c:	4639      	mov	r1, r7
 800379e:	f002 fd2d 	bl	80061fc <__adddf3>
 80037a2:	4606      	mov	r6, r0
 80037a4:	460f      	mov	r7, r1
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037ae:	f003 f949 	bl	8006a44 <__aeabi_dcmplt>
 80037b2:	b940      	cbnz	r0, 80037c6 <_dtoa_r+0x36e>
 80037b4:	4632      	mov	r2, r6
 80037b6:	463b      	mov	r3, r7
 80037b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037bc:	f003 f938 	bl	8006a30 <__aeabi_dcmpeq>
 80037c0:	b188      	cbz	r0, 80037e6 <_dtoa_r+0x38e>
 80037c2:	07e3      	lsls	r3, r4, #31
 80037c4:	d50f      	bpl.n	80037e6 <_dtoa_r+0x38e>
 80037c6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80037ca:	9a07      	ldr	r2, [sp, #28]
 80037cc:	1e6b      	subs	r3, r5, #1
 80037ce:	e004      	b.n	80037da <_dtoa_r+0x382>
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f000 83fc 	beq.w	8003fce <_dtoa_r+0xb76>
 80037d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037da:	2c39      	cmp	r4, #57	; 0x39
 80037dc:	f103 0501 	add.w	r5, r3, #1
 80037e0:	d0f6      	beq.n	80037d0 <_dtoa_r+0x378>
 80037e2:	3401      	adds	r4, #1
 80037e4:	701c      	strb	r4, [r3, #0]
 80037e6:	9908      	ldr	r1, [sp, #32]
 80037e8:	4648      	mov	r0, r9
 80037ea:	f001 fbcb 	bl	8004f84 <_Bfree>
 80037ee:	2200      	movs	r2, #0
 80037f0:	9b04      	ldr	r3, [sp, #16]
 80037f2:	702a      	strb	r2, [r5, #0]
 80037f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80037f6:	3301      	adds	r3, #1
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 839b 	beq.w	8003f38 <_dtoa_r+0xae0>
 8003802:	9807      	ldr	r0, [sp, #28]
 8003804:	601d      	str	r5, [r3, #0]
 8003806:	b019      	add	sp, #100	; 0x64
 8003808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800380e:	2a00      	cmp	r2, #0
 8003810:	f000 810e 	beq.w	8003a30 <_dtoa_r+0x5d8>
 8003814:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003816:	2a01      	cmp	r2, #1
 8003818:	f340 8257 	ble.w	8003cca <_dtoa_r+0x872>
 800381c:	9b06      	ldr	r3, [sp, #24]
 800381e:	9a02      	ldr	r2, [sp, #8]
 8003820:	1e5f      	subs	r7, r3, #1
 8003822:	42ba      	cmp	r2, r7
 8003824:	f2c0 838b 	blt.w	8003f3e <_dtoa_r+0xae6>
 8003828:	1bd7      	subs	r7, r2, r7
 800382a:	9b06      	ldr	r3, [sp, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f2c0 8480 	blt.w	8004132 <_dtoa_r+0xcda>
 8003832:	9d05      	ldr	r5, [sp, #20]
 8003834:	9b06      	ldr	r3, [sp, #24]
 8003836:	9a05      	ldr	r2, [sp, #20]
 8003838:	2101      	movs	r1, #1
 800383a:	441a      	add	r2, r3
 800383c:	4648      	mov	r0, r9
 800383e:	9205      	str	r2, [sp, #20]
 8003840:	4498      	add	r8, r3
 8003842:	f001 fc37 	bl	80050b4 <__i2b>
 8003846:	4606      	mov	r6, r0
 8003848:	b165      	cbz	r5, 8003864 <_dtoa_r+0x40c>
 800384a:	f1b8 0f00 	cmp.w	r8, #0
 800384e:	dd09      	ble.n	8003864 <_dtoa_r+0x40c>
 8003850:	4545      	cmp	r5, r8
 8003852:	9a05      	ldr	r2, [sp, #20]
 8003854:	462b      	mov	r3, r5
 8003856:	bfa8      	it	ge
 8003858:	4643      	movge	r3, r8
 800385a:	1ad2      	subs	r2, r2, r3
 800385c:	9205      	str	r2, [sp, #20]
 800385e:	1aed      	subs	r5, r5, r3
 8003860:	ebc3 0808 	rsb	r8, r3, r8
 8003864:	9b02      	ldr	r3, [sp, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f340 82f5 	ble.w	8003e56 <_dtoa_r+0x9fe>
 800386c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800386e:	2a00      	cmp	r2, #0
 8003870:	f000 8202 	beq.w	8003c78 <_dtoa_r+0x820>
 8003874:	2f00      	cmp	r7, #0
 8003876:	f000 81ff 	beq.w	8003c78 <_dtoa_r+0x820>
 800387a:	4631      	mov	r1, r6
 800387c:	463a      	mov	r2, r7
 800387e:	4648      	mov	r0, r9
 8003880:	f001 fcba 	bl	80051f8 <__pow5mult>
 8003884:	9a08      	ldr	r2, [sp, #32]
 8003886:	4601      	mov	r1, r0
 8003888:	4606      	mov	r6, r0
 800388a:	4648      	mov	r0, r9
 800388c:	f001 fc1c 	bl	80050c8 <__multiply>
 8003890:	9908      	ldr	r1, [sp, #32]
 8003892:	4604      	mov	r4, r0
 8003894:	4648      	mov	r0, r9
 8003896:	f001 fb75 	bl	8004f84 <_Bfree>
 800389a:	9b02      	ldr	r3, [sp, #8]
 800389c:	1bdb      	subs	r3, r3, r7
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	f040 81e9 	bne.w	8003c76 <_dtoa_r+0x81e>
 80038a4:	2101      	movs	r1, #1
 80038a6:	4648      	mov	r0, r9
 80038a8:	f001 fc04 	bl	80050b4 <__i2b>
 80038ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ae:	9002      	str	r0, [sp, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8215 	beq.w	8003ce0 <_dtoa_r+0x888>
 80038b6:	4601      	mov	r1, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4648      	mov	r0, r9
 80038bc:	f001 fc9c 	bl	80051f8 <__pow5mult>
 80038c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038c2:	9002      	str	r0, [sp, #8]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f340 82f3 	ble.w	8003eb0 <_dtoa_r+0xa58>
 80038ca:	2700      	movs	r7, #0
 80038cc:	9a02      	ldr	r2, [sp, #8]
 80038ce:	6913      	ldr	r3, [r2, #16]
 80038d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80038d4:	6918      	ldr	r0, [r3, #16]
 80038d6:	f001 fb9f 	bl	8005018 <__hi0bits>
 80038da:	f1c0 0020 	rsb	r0, r0, #32
 80038de:	4440      	add	r0, r8
 80038e0:	f010 001f 	ands.w	r0, r0, #31
 80038e4:	f000 81fa 	beq.w	8003cdc <_dtoa_r+0x884>
 80038e8:	f1c0 0320 	rsb	r3, r0, #32
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	f340 84bd 	ble.w	800426c <_dtoa_r+0xe14>
 80038f2:	f1c0 001c 	rsb	r0, r0, #28
 80038f6:	9b05      	ldr	r3, [sp, #20]
 80038f8:	4403      	add	r3, r0
 80038fa:	9305      	str	r3, [sp, #20]
 80038fc:	4405      	add	r5, r0
 80038fe:	4480      	add	r8, r0
 8003900:	9b05      	ldr	r3, [sp, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	dd05      	ble.n	8003912 <_dtoa_r+0x4ba>
 8003906:	4621      	mov	r1, r4
 8003908:	461a      	mov	r2, r3
 800390a:	4648      	mov	r0, r9
 800390c:	f001 fcc4 	bl	8005298 <__lshift>
 8003910:	4604      	mov	r4, r0
 8003912:	f1b8 0f00 	cmp.w	r8, #0
 8003916:	dd05      	ble.n	8003924 <_dtoa_r+0x4cc>
 8003918:	4642      	mov	r2, r8
 800391a:	9902      	ldr	r1, [sp, #8]
 800391c:	4648      	mov	r0, r9
 800391e:	f001 fcbb 	bl	8005298 <__lshift>
 8003922:	9002      	str	r0, [sp, #8]
 8003924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 827a 	bne.w	8003e20 <_dtoa_r+0x9c8>
 800392c:	9b06      	ldr	r3, [sp, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f340 8293 	ble.w	8003e5a <_dtoa_r+0xa02>
 8003934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 81f4 	bne.w	8003d24 <_dtoa_r+0x8cc>
 800393c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003940:	9f06      	ldr	r7, [sp, #24]
 8003942:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003946:	465d      	mov	r5, fp
 8003948:	e002      	b.n	8003950 <_dtoa_r+0x4f8>
 800394a:	f001 fb25 	bl	8004f98 <__multadd>
 800394e:	4604      	mov	r4, r0
 8003950:	4641      	mov	r1, r8
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff fcea 	bl	800332c <quorem>
 8003958:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800395c:	f805 ab01 	strb.w	sl, [r5], #1
 8003960:	ebcb 0305 	rsb	r3, fp, r5
 8003964:	42bb      	cmp	r3, r7
 8003966:	f04f 020a 	mov.w	r2, #10
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	4621      	mov	r1, r4
 8003970:	4648      	mov	r0, r9
 8003972:	dbea      	blt.n	800394a <_dtoa_r+0x4f2>
 8003974:	9b07      	ldr	r3, [sp, #28]
 8003976:	9a06      	ldr	r2, [sp, #24]
 8003978:	2a01      	cmp	r2, #1
 800397a:	bfac      	ite	ge
 800397c:	189b      	addge	r3, r3, r2
 800397e:	3301      	addlt	r3, #1
 8003980:	461d      	mov	r5, r3
 8003982:	f04f 0b00 	mov.w	fp, #0
 8003986:	4621      	mov	r1, r4
 8003988:	2201      	movs	r2, #1
 800398a:	4648      	mov	r0, r9
 800398c:	f001 fc84 	bl	8005298 <__lshift>
 8003990:	9902      	ldr	r1, [sp, #8]
 8003992:	9008      	str	r0, [sp, #32]
 8003994:	f001 fcd8 	bl	8005348 <__mcmp>
 8003998:	2800      	cmp	r0, #0
 800399a:	f340 8305 	ble.w	8003fa8 <_dtoa_r+0xb50>
 800399e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80039a2:	9907      	ldr	r1, [sp, #28]
 80039a4:	1e6b      	subs	r3, r5, #1
 80039a6:	e004      	b.n	80039b2 <_dtoa_r+0x55a>
 80039a8:	428b      	cmp	r3, r1
 80039aa:	f000 8274 	beq.w	8003e96 <_dtoa_r+0xa3e>
 80039ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80039b2:	2a39      	cmp	r2, #57	; 0x39
 80039b4:	f103 0501 	add.w	r5, r3, #1
 80039b8:	d0f6      	beq.n	80039a8 <_dtoa_r+0x550>
 80039ba:	3201      	adds	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	9902      	ldr	r1, [sp, #8]
 80039c0:	4648      	mov	r0, r9
 80039c2:	f001 fadf 	bl	8004f84 <_Bfree>
 80039c6:	2e00      	cmp	r6, #0
 80039c8:	f43f af0d 	beq.w	80037e6 <_dtoa_r+0x38e>
 80039cc:	f1bb 0f00 	cmp.w	fp, #0
 80039d0:	d005      	beq.n	80039de <_dtoa_r+0x586>
 80039d2:	45b3      	cmp	fp, r6
 80039d4:	d003      	beq.n	80039de <_dtoa_r+0x586>
 80039d6:	4659      	mov	r1, fp
 80039d8:	4648      	mov	r0, r9
 80039da:	f001 fad3 	bl	8004f84 <_Bfree>
 80039de:	4631      	mov	r1, r6
 80039e0:	4648      	mov	r0, r9
 80039e2:	f001 facf 	bl	8004f84 <_Bfree>
 80039e6:	e6fe      	b.n	80037e6 <_dtoa_r+0x38e>
 80039e8:	2301      	movs	r3, #1
 80039ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80039ec:	e5ec      	b.n	80035c8 <_dtoa_r+0x170>
 80039ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80039f2:	4640      	mov	r0, r8
 80039f4:	f002 fd4e 	bl	8006494 <__aeabi_i2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4630      	mov	r0, r6
 80039fe:	4639      	mov	r1, r7
 8003a00:	f003 f816 	bl	8006a30 <__aeabi_dcmpeq>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	f47f adcb 	bne.w	80035a0 <_dtoa_r+0x148>
 8003a0a:	f108 33ff 	add.w	r3, r8, #4294967295
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	e5c6      	b.n	80035a0 <_dtoa_r+0x148>
 8003a12:	9a05      	ldr	r2, [sp, #20]
 8003a14:	9b04      	ldr	r3, [sp, #16]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	425b      	negs	r3, r3
 8003a1a:	9302      	str	r3, [sp, #8]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9205      	str	r2, [sp, #20]
 8003a20:	930a      	str	r3, [sp, #40]	; 0x28
 8003a22:	e5e0      	b.n	80035e6 <_dtoa_r+0x18e>
 8003a24:	f1c8 0300 	rsb	r3, r8, #0
 8003a28:	9305      	str	r3, [sp, #20]
 8003a2a:	f04f 0800 	mov.w	r8, #0
 8003a2e:	e5d2      	b.n	80035d6 <_dtoa_r+0x17e>
 8003a30:	9f02      	ldr	r7, [sp, #8]
 8003a32:	9d05      	ldr	r5, [sp, #20]
 8003a34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003a36:	e707      	b.n	8003848 <_dtoa_r+0x3f0>
 8003a38:	f1c3 0820 	rsb	r8, r3, #32
 8003a3c:	fa0a f008 	lsl.w	r0, sl, r8
 8003a40:	e57b      	b.n	800353a <_dtoa_r+0xe2>
 8003a42:	900b      	str	r0, [sp, #44]	; 0x2c
 8003a44:	e5c0      	b.n	80035c8 <_dtoa_r+0x170>
 8003a46:	bf00      	nop
 8003a48:	40240000 	.word	0x40240000
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a50:	9b04      	ldr	r3, [sp, #16]
 8003a52:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003a54:	4413      	add	r3, r2
 8003a56:	930c      	str	r3, [sp, #48]	; 0x30
 8003a58:	3301      	adds	r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	9306      	str	r3, [sp, #24]
 8003a5e:	f340 827d 	ble.w	8003f5c <_dtoa_r+0xb04>
 8003a62:	9c06      	ldr	r4, [sp, #24]
 8003a64:	4626      	mov	r6, r4
 8003a66:	2100      	movs	r1, #0
 8003a68:	2e17      	cmp	r6, #23
 8003a6a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003a6e:	d90b      	bls.n	8003a88 <_dtoa_r+0x630>
 8003a70:	2201      	movs	r2, #1
 8003a72:	2304      	movs	r3, #4
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	f103 0014 	add.w	r0, r3, #20
 8003a7a:	42b0      	cmp	r0, r6
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	f102 0201 	add.w	r2, r2, #1
 8003a82:	d9f7      	bls.n	8003a74 <_dtoa_r+0x61c>
 8003a84:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003a88:	4648      	mov	r0, r9
 8003a8a:	f001 fa55 	bl	8004f38 <_Balloc>
 8003a8e:	2c0e      	cmp	r4, #14
 8003a90:	9007      	str	r0, [sp, #28]
 8003a92:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003a96:	f63f ade5 	bhi.w	8003664 <_dtoa_r+0x20c>
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	f43f ade2 	beq.w	8003664 <_dtoa_r+0x20c>
 8003aa0:	9904      	ldr	r1, [sp, #16]
 8003aa2:	2900      	cmp	r1, #0
 8003aa4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8003aa8:	f340 829a 	ble.w	8003fe0 <_dtoa_r+0xb88>
 8003aac:	4b90      	ldr	r3, [pc, #576]	; (8003cf0 <_dtoa_r+0x898>)
 8003aae:	f001 020f 	and.w	r2, r1, #15
 8003ab2:	110e      	asrs	r6, r1, #4
 8003ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ab8:	06f0      	lsls	r0, r6, #27
 8003aba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003abe:	f140 8246 	bpl.w	8003f4e <_dtoa_r+0xaf6>
 8003ac2:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <_dtoa_r+0x89c>)
 8003ac4:	4650      	mov	r0, sl
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003acc:	f002 fe72 	bl	80067b4 <__aeabi_ddiv>
 8003ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ad4:	f006 060f 	and.w	r6, r6, #15
 8003ad8:	f04f 0a03 	mov.w	sl, #3
 8003adc:	b186      	cbz	r6, 8003b00 <_dtoa_r+0x6a8>
 8003ade:	4f85      	ldr	r7, [pc, #532]	; (8003cf4 <_dtoa_r+0x89c>)
 8003ae0:	07f1      	lsls	r1, r6, #31
 8003ae2:	d509      	bpl.n	8003af8 <_dtoa_r+0x6a0>
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aec:	f002 fd38 	bl	8006560 <__aeabi_dmul>
 8003af0:	f10a 0a01 	add.w	sl, sl, #1
 8003af4:	4604      	mov	r4, r0
 8003af6:	460d      	mov	r5, r1
 8003af8:	1076      	asrs	r6, r6, #1
 8003afa:	f107 0708 	add.w	r7, r7, #8
 8003afe:	d1ef      	bne.n	8003ae0 <_dtoa_r+0x688>
 8003b00:	4622      	mov	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b08:	f002 fe54 	bl	80067b4 <__aeabi_ddiv>
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	460f      	mov	r7, r1
 8003b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b12:	b143      	cbz	r3, 8003b26 <_dtoa_r+0x6ce>
 8003b14:	2200      	movs	r2, #0
 8003b16:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <_dtoa_r+0x8a0>)
 8003b18:	4630      	mov	r0, r6
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	f002 ff92 	bl	8006a44 <__aeabi_dcmplt>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f040 831a 	bne.w	800415a <_dtoa_r+0xd02>
 8003b26:	4650      	mov	r0, sl
 8003b28:	f002 fcb4 	bl	8006494 <__aeabi_i2d>
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	463b      	mov	r3, r7
 8003b30:	f002 fd16 	bl	8006560 <__aeabi_dmul>
 8003b34:	4b71      	ldr	r3, [pc, #452]	; (8003cfc <_dtoa_r+0x8a4>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	f002 fb60 	bl	80061fc <__adddf3>
 8003b3c:	9b06      	ldr	r3, [sp, #24]
 8003b3e:	4604      	mov	r4, r0
 8003b40:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 81db 	beq.w	8003f00 <_dtoa_r+0xaa8>
 8003b4a:	9b04      	ldr	r3, [sp, #16]
 8003b4c:	9314      	str	r3, [sp, #80]	; 0x50
 8003b4e:	9b06      	ldr	r3, [sp, #24]
 8003b50:	9310      	str	r3, [sp, #64]	; 0x40
 8003b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8294 	beq.w	8004082 <_dtoa_r+0xc2a>
 8003b5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b5c:	4b64      	ldr	r3, [pc, #400]	; (8003cf0 <_dtoa_r+0x898>)
 8003b5e:	4968      	ldr	r1, [pc, #416]	; (8003d00 <_dtoa_r+0x8a8>)
 8003b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f002 fe23 	bl	80067b4 <__aeabi_ddiv>
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
 8003b72:	f002 fb41 	bl	80061f8 <__aeabi_dsub>
 8003b76:	4682      	mov	sl, r0
 8003b78:	468b      	mov	fp, r1
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	4639      	mov	r1, r7
 8003b7e:	f002 ff9f 	bl	8006ac0 <__aeabi_d2iz>
 8003b82:	4604      	mov	r4, r0
 8003b84:	f002 fc86 	bl	8006494 <__aeabi_i2d>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	4639      	mov	r1, r7
 8003b90:	f002 fb32 	bl	80061f8 <__aeabi_dsub>
 8003b94:	3430      	adds	r4, #48	; 0x30
 8003b96:	9d07      	ldr	r5, [sp, #28]
 8003b98:	b2e4      	uxtb	r4, r4
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	460f      	mov	r7, r1
 8003b9e:	702c      	strb	r4, [r5, #0]
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	3501      	adds	r5, #1
 8003baa:	f002 ff69 	bl	8006a80 <__aeabi_dcmpgt>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d150      	bne.n	8003c54 <_dtoa_r+0x7fc>
 8003bb2:	4632      	mov	r2, r6
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	494f      	ldr	r1, [pc, #316]	; (8003cf8 <_dtoa_r+0x8a0>)
 8003bba:	f002 fb1d 	bl	80061f8 <__aeabi_dsub>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4650      	mov	r0, sl
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	f002 ff5b 	bl	8006a80 <__aeabi_dcmpgt>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f040 8308 	bne.w	80041e0 <_dtoa_r+0xd88>
 8003bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bd2:	2a01      	cmp	r2, #1
 8003bd4:	f340 81f7 	ble.w	8003fc6 <_dtoa_r+0xb6e>
 8003bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bda:	9a07      	ldr	r2, [sp, #28]
 8003bdc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003be0:	4413      	add	r3, r2
 8003be2:	4698      	mov	r8, r3
 8003be4:	e00d      	b.n	8003c02 <_dtoa_r+0x7aa>
 8003be6:	2000      	movs	r0, #0
 8003be8:	4943      	ldr	r1, [pc, #268]	; (8003cf8 <_dtoa_r+0x8a0>)
 8003bea:	f002 fb05 	bl	80061f8 <__aeabi_dsub>
 8003bee:	4652      	mov	r2, sl
 8003bf0:	465b      	mov	r3, fp
 8003bf2:	f002 ff27 	bl	8006a44 <__aeabi_dcmplt>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f040 82f2 	bne.w	80041e0 <_dtoa_r+0xd88>
 8003bfc:	4545      	cmp	r5, r8
 8003bfe:	f000 81e0 	beq.w	8003fc2 <_dtoa_r+0xb6a>
 8003c02:	4650      	mov	r0, sl
 8003c04:	4659      	mov	r1, fp
 8003c06:	2200      	movs	r2, #0
 8003c08:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <_dtoa_r+0x8ac>)
 8003c0a:	f002 fca9 	bl	8006560 <__aeabi_dmul>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <_dtoa_r+0x8ac>)
 8003c12:	4682      	mov	sl, r0
 8003c14:	468b      	mov	fp, r1
 8003c16:	4630      	mov	r0, r6
 8003c18:	4639      	mov	r1, r7
 8003c1a:	f002 fca1 	bl	8006560 <__aeabi_dmul>
 8003c1e:	460f      	mov	r7, r1
 8003c20:	4606      	mov	r6, r0
 8003c22:	f002 ff4d 	bl	8006ac0 <__aeabi_d2iz>
 8003c26:	4604      	mov	r4, r0
 8003c28:	f002 fc34 	bl	8006494 <__aeabi_i2d>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4630      	mov	r0, r6
 8003c32:	4639      	mov	r1, r7
 8003c34:	f002 fae0 	bl	80061f8 <__aeabi_dsub>
 8003c38:	3430      	adds	r4, #48	; 0x30
 8003c3a:	b2e4      	uxtb	r4, r4
 8003c3c:	4652      	mov	r2, sl
 8003c3e:	465b      	mov	r3, fp
 8003c40:	f805 4b01 	strb.w	r4, [r5], #1
 8003c44:	4606      	mov	r6, r0
 8003c46:	460f      	mov	r7, r1
 8003c48:	f002 fefc 	bl	8006a44 <__aeabi_dcmplt>
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	463b      	mov	r3, r7
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0c8      	beq.n	8003be6 <_dtoa_r+0x78e>
 8003c54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c56:	9304      	str	r3, [sp, #16]
 8003c58:	e5c5      	b.n	80037e6 <_dtoa_r+0x38e>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f340 8180 	ble.w	8003f66 <_dtoa_r+0xb0e>
 8003c66:	461e      	mov	r6, r3
 8003c68:	461c      	mov	r4, r3
 8003c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8003c6c:	9306      	str	r3, [sp, #24]
 8003c6e:	e6fa      	b.n	8003a66 <_dtoa_r+0x60e>
 8003c70:	2301      	movs	r3, #1
 8003c72:	9309      	str	r3, [sp, #36]	; 0x24
 8003c74:	e7f3      	b.n	8003c5e <_dtoa_r+0x806>
 8003c76:	9408      	str	r4, [sp, #32]
 8003c78:	9a02      	ldr	r2, [sp, #8]
 8003c7a:	9908      	ldr	r1, [sp, #32]
 8003c7c:	4648      	mov	r0, r9
 8003c7e:	f001 fabb 	bl	80051f8 <__pow5mult>
 8003c82:	4604      	mov	r4, r0
 8003c84:	e60e      	b.n	80038a4 <_dtoa_r+0x44c>
 8003c86:	9b06      	ldr	r3, [sp, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f73f acfe 	bgt.w	800368a <_dtoa_r+0x232>
 8003c8e:	f040 814f 	bne.w	8003f30 <_dtoa_r+0xad8>
 8003c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <_dtoa_r+0x8b0>)
 8003c9a:	f002 fc61 	bl	8006560 <__aeabi_dmul>
 8003c9e:	465b      	mov	r3, fp
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	f002 fee3 	bl	8006a6c <__aeabi_dcmpge>
 8003ca6:	9b06      	ldr	r3, [sp, #24]
 8003ca8:	9302      	str	r3, [sp, #8]
 8003caa:	461e      	mov	r6, r3
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f000 80ea 	beq.w	8003e86 <_dtoa_r+0xa2e>
 8003cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cb4:	9d07      	ldr	r5, [sp, #28]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	9304      	str	r3, [sp, #16]
 8003cba:	9902      	ldr	r1, [sp, #8]
 8003cbc:	4648      	mov	r0, r9
 8003cbe:	f001 f961 	bl	8004f84 <_Bfree>
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	f43f ad8f 	beq.w	80037e6 <_dtoa_r+0x38e>
 8003cc8:	e689      	b.n	80039de <_dtoa_r+0x586>
 8003cca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	f000 8238 	beq.w	8004142 <_dtoa_r+0xcea>
 8003cd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003cd6:	9f02      	ldr	r7, [sp, #8]
 8003cd8:	9d05      	ldr	r5, [sp, #20]
 8003cda:	e5ac      	b.n	8003836 <_dtoa_r+0x3de>
 8003cdc:	201c      	movs	r0, #28
 8003cde:	e60a      	b.n	80038f6 <_dtoa_r+0x49e>
 8003ce0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	f340 8280 	ble.w	80041e8 <_dtoa_r+0xd90>
 8003ce8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003cea:	2001      	movs	r0, #1
 8003cec:	e5f7      	b.n	80038de <_dtoa_r+0x486>
 8003cee:	bf00      	nop
 8003cf0:	08006ef0 	.word	0x08006ef0
 8003cf4:	08006fb8 	.word	0x08006fb8
 8003cf8:	3ff00000 	.word	0x3ff00000
 8003cfc:	401c0000 	.word	0x401c0000
 8003d00:	3fe00000 	.word	0x3fe00000
 8003d04:	40240000 	.word	0x40240000
 8003d08:	40140000 	.word	0x40140000
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	2300      	movs	r3, #0
 8003d10:	220a      	movs	r2, #10
 8003d12:	4648      	mov	r0, r9
 8003d14:	f001 f940 	bl	8004f98 <__multadd>
 8003d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	f340 828d 	ble.w	800423c <_dtoa_r+0xde4>
 8003d22:	9306      	str	r3, [sp, #24]
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	dd05      	ble.n	8003d34 <_dtoa_r+0x8dc>
 8003d28:	4631      	mov	r1, r6
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4648      	mov	r0, r9
 8003d2e:	f001 fab3 	bl	8005298 <__lshift>
 8003d32:	4606      	mov	r6, r0
 8003d34:	2f00      	cmp	r7, #0
 8003d36:	f040 817c 	bne.w	8004032 <_dtoa_r+0xbda>
 8003d3a:	46b0      	mov	r8, r6
 8003d3c:	9b06      	ldr	r3, [sp, #24]
 8003d3e:	9a07      	ldr	r2, [sp, #28]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	18d3      	adds	r3, r2, r3
 8003d44:	9308      	str	r3, [sp, #32]
 8003d46:	f00a 0301 	and.w	r3, sl, #1
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	4617      	mov	r7, r2
 8003d4e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003d52:	4620      	mov	r0, r4
 8003d54:	4659      	mov	r1, fp
 8003d56:	f7ff fae9 	bl	800332c <quorem>
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f001 faf2 	bl	8005348 <__mcmp>
 8003d64:	4642      	mov	r2, r8
 8003d66:	4659      	mov	r1, fp
 8003d68:	4682      	mov	sl, r0
 8003d6a:	4648      	mov	r0, r9
 8003d6c:	f001 fb0e 	bl	800538c <__mdiff>
 8003d70:	68c2      	ldr	r2, [r0, #12]
 8003d72:	4683      	mov	fp, r0
 8003d74:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d149      	bne.n	8003e10 <_dtoa_r+0x9b8>
 8003d7c:	4601      	mov	r1, r0
 8003d7e:	4620      	mov	r0, r4
 8003d80:	9306      	str	r3, [sp, #24]
 8003d82:	f001 fae1 	bl	8005348 <__mcmp>
 8003d86:	4659      	mov	r1, fp
 8003d88:	9005      	str	r0, [sp, #20]
 8003d8a:	4648      	mov	r0, r9
 8003d8c:	f001 f8fa 	bl	8004f84 <_Bfree>
 8003d90:	9a05      	ldr	r2, [sp, #20]
 8003d92:	9b06      	ldr	r3, [sp, #24]
 8003d94:	b92a      	cbnz	r2, 8003da2 <_dtoa_r+0x94a>
 8003d96:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003d98:	b919      	cbnz	r1, 8003da2 <_dtoa_r+0x94a>
 8003d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d9c:	2900      	cmp	r1, #0
 8003d9e:	f000 8235 	beq.w	800420c <_dtoa_r+0xdb4>
 8003da2:	f1ba 0f00 	cmp.w	sl, #0
 8003da6:	f2c0 80e3 	blt.w	8003f70 <_dtoa_r+0xb18>
 8003daa:	d105      	bne.n	8003db8 <_dtoa_r+0x960>
 8003dac:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003dae:	b919      	cbnz	r1, 8003db8 <_dtoa_r+0x960>
 8003db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003db2:	2900      	cmp	r1, #0
 8003db4:	f000 80dc 	beq.w	8003f70 <_dtoa_r+0xb18>
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	f300 814e 	bgt.w	800405a <_dtoa_r+0xc02>
 8003dbe:	9a08      	ldr	r2, [sp, #32]
 8003dc0:	703b      	strb	r3, [r7, #0]
 8003dc2:	f107 0a01 	add.w	sl, r7, #1
 8003dc6:	4297      	cmp	r7, r2
 8003dc8:	4655      	mov	r5, sl
 8003dca:	f000 8152 	beq.w	8004072 <_dtoa_r+0xc1a>
 8003dce:	4621      	mov	r1, r4
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	220a      	movs	r2, #10
 8003dd4:	4648      	mov	r0, r9
 8003dd6:	f001 f8df 	bl	8004f98 <__multadd>
 8003dda:	4546      	cmp	r6, r8
 8003ddc:	4604      	mov	r4, r0
 8003dde:	4631      	mov	r1, r6
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f04f 020a 	mov.w	r2, #10
 8003de8:	4648      	mov	r0, r9
 8003dea:	d00b      	beq.n	8003e04 <_dtoa_r+0x9ac>
 8003dec:	f001 f8d4 	bl	8004f98 <__multadd>
 8003df0:	4641      	mov	r1, r8
 8003df2:	4606      	mov	r6, r0
 8003df4:	2300      	movs	r3, #0
 8003df6:	220a      	movs	r2, #10
 8003df8:	4648      	mov	r0, r9
 8003dfa:	f001 f8cd 	bl	8004f98 <__multadd>
 8003dfe:	4657      	mov	r7, sl
 8003e00:	4680      	mov	r8, r0
 8003e02:	e7a4      	b.n	8003d4e <_dtoa_r+0x8f6>
 8003e04:	f001 f8c8 	bl	8004f98 <__multadd>
 8003e08:	4657      	mov	r7, sl
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	4680      	mov	r8, r0
 8003e0e:	e79e      	b.n	8003d4e <_dtoa_r+0x8f6>
 8003e10:	4601      	mov	r1, r0
 8003e12:	4648      	mov	r0, r9
 8003e14:	9305      	str	r3, [sp, #20]
 8003e16:	f001 f8b5 	bl	8004f84 <_Bfree>
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	9b05      	ldr	r3, [sp, #20]
 8003e1e:	e7c0      	b.n	8003da2 <_dtoa_r+0x94a>
 8003e20:	9902      	ldr	r1, [sp, #8]
 8003e22:	4620      	mov	r0, r4
 8003e24:	f001 fa90 	bl	8005348 <__mcmp>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f6bf ad7f 	bge.w	800392c <_dtoa_r+0x4d4>
 8003e2e:	4621      	mov	r1, r4
 8003e30:	9c04      	ldr	r4, [sp, #16]
 8003e32:	2300      	movs	r3, #0
 8003e34:	3c01      	subs	r4, #1
 8003e36:	220a      	movs	r2, #10
 8003e38:	4648      	mov	r0, r9
 8003e3a:	9404      	str	r4, [sp, #16]
 8003e3c:	f001 f8ac 	bl	8004f98 <__multadd>
 8003e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e42:	4604      	mov	r4, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af61 	bne.w	8003d0c <_dtoa_r+0x8b4>
 8003e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f340 81ed 	ble.w	800422c <_dtoa_r+0xdd4>
 8003e52:	9306      	str	r3, [sp, #24]
 8003e54:	e572      	b.n	800393c <_dtoa_r+0x4e4>
 8003e56:	9c08      	ldr	r4, [sp, #32]
 8003e58:	e524      	b.n	80038a4 <_dtoa_r+0x44c>
 8003e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f77f ad69 	ble.w	8003934 <_dtoa_r+0x4dc>
 8003e62:	9b06      	ldr	r3, [sp, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f040 819d 	bne.w	80041a4 <_dtoa_r+0xd4c>
 8003e6a:	9902      	ldr	r1, [sp, #8]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	4648      	mov	r0, r9
 8003e70:	f001 f892 	bl	8004f98 <__multadd>
 8003e74:	4601      	mov	r1, r0
 8003e76:	9002      	str	r0, [sp, #8]
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f001 fa65 	bl	8005348 <__mcmp>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	9408      	str	r4, [sp, #32]
 8003e82:	f77f af16 	ble.w	8003cb2 <_dtoa_r+0x85a>
 8003e86:	9a04      	ldr	r2, [sp, #16]
 8003e88:	9907      	ldr	r1, [sp, #28]
 8003e8a:	2331      	movs	r3, #49	; 0x31
 8003e8c:	3201      	adds	r2, #1
 8003e8e:	9204      	str	r2, [sp, #16]
 8003e90:	700b      	strb	r3, [r1, #0]
 8003e92:	1c4d      	adds	r5, r1, #1
 8003e94:	e711      	b.n	8003cba <_dtoa_r+0x862>
 8003e96:	9a04      	ldr	r2, [sp, #16]
 8003e98:	3201      	adds	r2, #1
 8003e9a:	9204      	str	r2, [sp, #16]
 8003e9c:	9a07      	ldr	r2, [sp, #28]
 8003e9e:	2331      	movs	r3, #49	; 0x31
 8003ea0:	7013      	strb	r3, [r2, #0]
 8003ea2:	e58c      	b.n	80039be <_dtoa_r+0x566>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea8:	e5d2      	b.n	8003a50 <_dtoa_r+0x5f8>
 8003eaa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003eae:	e49a      	b.n	80037e6 <_dtoa_r+0x38e>
 8003eb0:	f1ba 0f00 	cmp.w	sl, #0
 8003eb4:	f47f ad09 	bne.w	80038ca <_dtoa_r+0x472>
 8003eb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 813e 	bne.w	800413e <_dtoa_r+0xce6>
 8003ec2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8003ec6:	0d3f      	lsrs	r7, r7, #20
 8003ec8:	053f      	lsls	r7, r7, #20
 8003eca:	b12f      	cbz	r7, 8003ed8 <_dtoa_r+0xa80>
 8003ecc:	9b05      	ldr	r3, [sp, #20]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	9305      	str	r3, [sp, #20]
 8003ed2:	f108 0801 	add.w	r8, r8, #1
 8003ed6:	2701      	movs	r7, #1
 8003ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eda:	2001      	movs	r0, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f43f acfe 	beq.w	80038de <_dtoa_r+0x486>
 8003ee2:	e4f3      	b.n	80038cc <_dtoa_r+0x474>
 8003ee4:	4650      	mov	r0, sl
 8003ee6:	f002 fad5 	bl	8006494 <__aeabi_i2d>
 8003eea:	4632      	mov	r2, r6
 8003eec:	463b      	mov	r3, r7
 8003eee:	f002 fb37 	bl	8006560 <__aeabi_dmul>
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4bbf      	ldr	r3, [pc, #764]	; (80041f4 <_dtoa_r+0xd9c>)
 8003ef6:	f002 f981 	bl	80061fc <__adddf3>
 8003efa:	4604      	mov	r4, r0
 8003efc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003f00:	4630      	mov	r0, r6
 8003f02:	4639      	mov	r1, r7
 8003f04:	2200      	movs	r2, #0
 8003f06:	4bbc      	ldr	r3, [pc, #752]	; (80041f8 <_dtoa_r+0xda0>)
 8003f08:	f002 f976 	bl	80061f8 <__aeabi_dsub>
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	462b      	mov	r3, r5
 8003f10:	4606      	mov	r6, r0
 8003f12:	460f      	mov	r7, r1
 8003f14:	f002 fdb4 	bl	8006a80 <__aeabi_dcmpgt>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f040 80ae 	bne.w	800407a <_dtoa_r+0xc22>
 8003f1e:	4622      	mov	r2, r4
 8003f20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003f24:	4630      	mov	r0, r6
 8003f26:	4639      	mov	r1, r7
 8003f28:	f002 fd8c 	bl	8006a44 <__aeabi_dcmplt>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d04a      	beq.n	8003fc6 <_dtoa_r+0xb6e>
 8003f30:	2300      	movs	r3, #0
 8003f32:	9302      	str	r3, [sp, #8]
 8003f34:	461e      	mov	r6, r3
 8003f36:	e6bc      	b.n	8003cb2 <_dtoa_r+0x85a>
 8003f38:	9807      	ldr	r0, [sp, #28]
 8003f3a:	f7ff babe 	b.w	80034ba <_dtoa_r+0x62>
 8003f3e:	9b02      	ldr	r3, [sp, #8]
 8003f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f42:	9702      	str	r7, [sp, #8]
 8003f44:	1afb      	subs	r3, r7, r3
 8003f46:	441a      	add	r2, r3
 8003f48:	920a      	str	r2, [sp, #40]	; 0x28
 8003f4a:	2700      	movs	r7, #0
 8003f4c:	e46d      	b.n	800382a <_dtoa_r+0x3d2>
 8003f4e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8003f52:	f04f 0a02 	mov.w	sl, #2
 8003f56:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003f5a:	e5bf      	b.n	8003adc <_dtoa_r+0x684>
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	2100      	movs	r1, #0
 8003f60:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003f64:	e590      	b.n	8003a88 <_dtoa_r+0x630>
 8003f66:	2401      	movs	r4, #1
 8003f68:	9423      	str	r4, [sp, #140]	; 0x8c
 8003f6a:	940c      	str	r4, [sp, #48]	; 0x30
 8003f6c:	9406      	str	r4, [sp, #24]
 8003f6e:	e7f6      	b.n	8003f5e <_dtoa_r+0xb06>
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	469a      	mov	sl, r3
 8003f74:	dd11      	ble.n	8003f9a <_dtoa_r+0xb42>
 8003f76:	4621      	mov	r1, r4
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4648      	mov	r0, r9
 8003f7c:	f001 f98c 	bl	8005298 <__lshift>
 8003f80:	9902      	ldr	r1, [sp, #8]
 8003f82:	4604      	mov	r4, r0
 8003f84:	f001 f9e0 	bl	8005348 <__mcmp>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f340 8148 	ble.w	800421e <_dtoa_r+0xdc6>
 8003f8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003f92:	f000 8109 	beq.w	80041a8 <_dtoa_r+0xd50>
 8003f96:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8003f9a:	46b3      	mov	fp, r6
 8003f9c:	f887 a000 	strb.w	sl, [r7]
 8003fa0:	1c7d      	adds	r5, r7, #1
 8003fa2:	4646      	mov	r6, r8
 8003fa4:	9408      	str	r4, [sp, #32]
 8003fa6:	e50a      	b.n	80039be <_dtoa_r+0x566>
 8003fa8:	d104      	bne.n	8003fb4 <_dtoa_r+0xb5c>
 8003faa:	f01a 0f01 	tst.w	sl, #1
 8003fae:	d001      	beq.n	8003fb4 <_dtoa_r+0xb5c>
 8003fb0:	e4f5      	b.n	800399e <_dtoa_r+0x546>
 8003fb2:	4615      	mov	r5, r2
 8003fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fb8:	2b30      	cmp	r3, #48	; 0x30
 8003fba:	f105 32ff 	add.w	r2, r5, #4294967295
 8003fbe:	d0f8      	beq.n	8003fb2 <_dtoa_r+0xb5a>
 8003fc0:	e4fd      	b.n	80039be <_dtoa_r+0x566>
 8003fc2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8003fc6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8003fca:	f7ff bb4b 	b.w	8003664 <_dtoa_r+0x20c>
 8003fce:	9907      	ldr	r1, [sp, #28]
 8003fd0:	2230      	movs	r2, #48	; 0x30
 8003fd2:	700a      	strb	r2, [r1, #0]
 8003fd4:	9a04      	ldr	r2, [sp, #16]
 8003fd6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8003fda:	3201      	adds	r2, #1
 8003fdc:	9204      	str	r2, [sp, #16]
 8003fde:	e400      	b.n	80037e2 <_dtoa_r+0x38a>
 8003fe0:	9b04      	ldr	r3, [sp, #16]
 8003fe2:	425c      	negs	r4, r3
 8003fe4:	2c00      	cmp	r4, #0
 8003fe6:	f000 80b3 	beq.w	8004150 <_dtoa_r+0xcf8>
 8003fea:	4b84      	ldr	r3, [pc, #528]	; (80041fc <_dtoa_r+0xda4>)
 8003fec:	f004 020f 	and.w	r2, r4, #15
 8003ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ffc:	f002 fab0 	bl	8006560 <__aeabi_dmul>
 8004000:	1124      	asrs	r4, r4, #4
 8004002:	4606      	mov	r6, r0
 8004004:	460f      	mov	r7, r1
 8004006:	f000 8116 	beq.w	8004236 <_dtoa_r+0xdde>
 800400a:	4d7d      	ldr	r5, [pc, #500]	; (8004200 <_dtoa_r+0xda8>)
 800400c:	f04f 0a02 	mov.w	sl, #2
 8004010:	07e2      	lsls	r2, r4, #31
 8004012:	d509      	bpl.n	8004028 <_dtoa_r+0xbd0>
 8004014:	4630      	mov	r0, r6
 8004016:	4639      	mov	r1, r7
 8004018:	e9d5 2300 	ldrd	r2, r3, [r5]
 800401c:	f002 faa0 	bl	8006560 <__aeabi_dmul>
 8004020:	f10a 0a01 	add.w	sl, sl, #1
 8004024:	4606      	mov	r6, r0
 8004026:	460f      	mov	r7, r1
 8004028:	1064      	asrs	r4, r4, #1
 800402a:	f105 0508 	add.w	r5, r5, #8
 800402e:	d1ef      	bne.n	8004010 <_dtoa_r+0xbb8>
 8004030:	e56e      	b.n	8003b10 <_dtoa_r+0x6b8>
 8004032:	6871      	ldr	r1, [r6, #4]
 8004034:	4648      	mov	r0, r9
 8004036:	f000 ff7f 	bl	8004f38 <_Balloc>
 800403a:	6933      	ldr	r3, [r6, #16]
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	4605      	mov	r5, r0
 8004040:	0092      	lsls	r2, r2, #2
 8004042:	f106 010c 	add.w	r1, r6, #12
 8004046:	300c      	adds	r0, #12
 8004048:	f7fd fb1a 	bl	8001680 <memcpy>
 800404c:	4629      	mov	r1, r5
 800404e:	2201      	movs	r2, #1
 8004050:	4648      	mov	r0, r9
 8004052:	f001 f921 	bl	8005298 <__lshift>
 8004056:	4680      	mov	r8, r0
 8004058:	e670      	b.n	8003d3c <_dtoa_r+0x8e4>
 800405a:	2b39      	cmp	r3, #57	; 0x39
 800405c:	f000 80a4 	beq.w	80041a8 <_dtoa_r+0xd50>
 8004060:	f103 0a01 	add.w	sl, r3, #1
 8004064:	46b3      	mov	fp, r6
 8004066:	f887 a000 	strb.w	sl, [r7]
 800406a:	1c7d      	adds	r5, r7, #1
 800406c:	4646      	mov	r6, r8
 800406e:	9408      	str	r4, [sp, #32]
 8004070:	e4a5      	b.n	80039be <_dtoa_r+0x566>
 8004072:	46b3      	mov	fp, r6
 8004074:	469a      	mov	sl, r3
 8004076:	4646      	mov	r6, r8
 8004078:	e485      	b.n	8003986 <_dtoa_r+0x52e>
 800407a:	2300      	movs	r3, #0
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	461e      	mov	r6, r3
 8004080:	e701      	b.n	8003e86 <_dtoa_r+0xa2e>
 8004082:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004084:	495d      	ldr	r1, [pc, #372]	; (80041fc <_dtoa_r+0xda4>)
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800408c:	462b      	mov	r3, r5
 800408e:	9215      	str	r2, [sp, #84]	; 0x54
 8004090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004094:	4622      	mov	r2, r4
 8004096:	f002 fa63 	bl	8006560 <__aeabi_dmul>
 800409a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800409e:	4639      	mov	r1, r7
 80040a0:	4630      	mov	r0, r6
 80040a2:	f002 fd0d 	bl	8006ac0 <__aeabi_d2iz>
 80040a6:	4604      	mov	r4, r0
 80040a8:	f002 f9f4 	bl	8006494 <__aeabi_i2d>
 80040ac:	460b      	mov	r3, r1
 80040ae:	4602      	mov	r2, r0
 80040b0:	4639      	mov	r1, r7
 80040b2:	4630      	mov	r0, r6
 80040b4:	f002 f8a0 	bl	80061f8 <__aeabi_dsub>
 80040b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040ba:	460f      	mov	r7, r1
 80040bc:	9907      	ldr	r1, [sp, #28]
 80040be:	3430      	adds	r4, #48	; 0x30
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	4606      	mov	r6, r0
 80040c4:	700c      	strb	r4, [r1, #0]
 80040c6:	f101 0501 	add.w	r5, r1, #1
 80040ca:	d020      	beq.n	800410e <_dtoa_r+0xcb6>
 80040cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040ce:	9a07      	ldr	r2, [sp, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	469a      	mov	sl, r3
 80040d4:	46ab      	mov	fp, r5
 80040d6:	2200      	movs	r2, #0
 80040d8:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <_dtoa_r+0xdac>)
 80040da:	4630      	mov	r0, r6
 80040dc:	4639      	mov	r1, r7
 80040de:	f002 fa3f 	bl	8006560 <__aeabi_dmul>
 80040e2:	460f      	mov	r7, r1
 80040e4:	4606      	mov	r6, r0
 80040e6:	f002 fceb 	bl	8006ac0 <__aeabi_d2iz>
 80040ea:	4604      	mov	r4, r0
 80040ec:	f002 f9d2 	bl	8006494 <__aeabi_i2d>
 80040f0:	3430      	adds	r4, #48	; 0x30
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	f002 f87d 	bl	80061f8 <__aeabi_dsub>
 80040fe:	f80b 4b01 	strb.w	r4, [fp], #1
 8004102:	45da      	cmp	sl, fp
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	d1e5      	bne.n	80040d6 <_dtoa_r+0xc7e>
 800410a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800410c:	441d      	add	r5, r3
 800410e:	2200      	movs	r2, #0
 8004110:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <_dtoa_r+0xdb0>)
 8004112:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004116:	f002 f871 	bl	80061fc <__adddf3>
 800411a:	4632      	mov	r2, r6
 800411c:	463b      	mov	r3, r7
 800411e:	f002 fc91 	bl	8006a44 <__aeabi_dcmplt>
 8004122:	2800      	cmp	r0, #0
 8004124:	d048      	beq.n	80041b8 <_dtoa_r+0xd60>
 8004126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004128:	9304      	str	r3, [sp, #16]
 800412a:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800412e:	f7ff bb4c 	b.w	80037ca <_dtoa_r+0x372>
 8004132:	9b05      	ldr	r3, [sp, #20]
 8004134:	9a06      	ldr	r2, [sp, #24]
 8004136:	1a9d      	subs	r5, r3, r2
 8004138:	2300      	movs	r3, #0
 800413a:	f7ff bb7c 	b.w	8003836 <_dtoa_r+0x3de>
 800413e:	2700      	movs	r7, #0
 8004140:	e6ca      	b.n	8003ed8 <_dtoa_r+0xa80>
 8004142:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004144:	9f02      	ldr	r7, [sp, #8]
 8004146:	9d05      	ldr	r5, [sp, #20]
 8004148:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800414c:	f7ff bb73 	b.w	8003836 <_dtoa_r+0x3de>
 8004150:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8004154:	f04f 0a02 	mov.w	sl, #2
 8004158:	e4da      	b.n	8003b10 <_dtoa_r+0x6b8>
 800415a:	9b06      	ldr	r3, [sp, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f43f aec1 	beq.w	8003ee4 <_dtoa_r+0xa8c>
 8004162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004164:	2b00      	cmp	r3, #0
 8004166:	f77f af2e 	ble.w	8003fc6 <_dtoa_r+0xb6e>
 800416a:	2200      	movs	r2, #0
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <_dtoa_r+0xdac>)
 800416e:	4630      	mov	r0, r6
 8004170:	4639      	mov	r1, r7
 8004172:	f002 f9f5 	bl	8006560 <__aeabi_dmul>
 8004176:	4606      	mov	r6, r0
 8004178:	460f      	mov	r7, r1
 800417a:	f10a 0001 	add.w	r0, sl, #1
 800417e:	f002 f989 	bl	8006494 <__aeabi_i2d>
 8004182:	4632      	mov	r2, r6
 8004184:	463b      	mov	r3, r7
 8004186:	f002 f9eb 	bl	8006560 <__aeabi_dmul>
 800418a:	2200      	movs	r2, #0
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <_dtoa_r+0xd9c>)
 800418e:	f002 f835 	bl	80061fc <__adddf3>
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004196:	9310      	str	r3, [sp, #64]	; 0x40
 8004198:	3a01      	subs	r2, #1
 800419a:	4604      	mov	r4, r0
 800419c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80041a0:	9214      	str	r2, [sp, #80]	; 0x50
 80041a2:	e4d6      	b.n	8003b52 <_dtoa_r+0x6fa>
 80041a4:	9408      	str	r4, [sp, #32]
 80041a6:	e584      	b.n	8003cb2 <_dtoa_r+0x85a>
 80041a8:	2239      	movs	r2, #57	; 0x39
 80041aa:	46b3      	mov	fp, r6
 80041ac:	9408      	str	r4, [sp, #32]
 80041ae:	4646      	mov	r6, r8
 80041b0:	703a      	strb	r2, [r7, #0]
 80041b2:	1c7d      	adds	r5, r7, #1
 80041b4:	f7ff bbf5 	b.w	80039a2 <_dtoa_r+0x54a>
 80041b8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80041bc:	2000      	movs	r0, #0
 80041be:	4912      	ldr	r1, [pc, #72]	; (8004208 <_dtoa_r+0xdb0>)
 80041c0:	f002 f81a 	bl	80061f8 <__aeabi_dsub>
 80041c4:	4632      	mov	r2, r6
 80041c6:	463b      	mov	r3, r7
 80041c8:	f002 fc5a 	bl	8006a80 <__aeabi_dcmpgt>
 80041cc:	b908      	cbnz	r0, 80041d2 <_dtoa_r+0xd7a>
 80041ce:	e6fa      	b.n	8003fc6 <_dtoa_r+0xb6e>
 80041d0:	4615      	mov	r5, r2
 80041d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80041dc:	d0f8      	beq.n	80041d0 <_dtoa_r+0xd78>
 80041de:	e539      	b.n	8003c54 <_dtoa_r+0x7fc>
 80041e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80041e2:	9304      	str	r3, [sp, #16]
 80041e4:	f7ff baf1 	b.w	80037ca <_dtoa_r+0x372>
 80041e8:	f1ba 0f00 	cmp.w	sl, #0
 80041ec:	f47f ad7c 	bne.w	8003ce8 <_dtoa_r+0x890>
 80041f0:	e662      	b.n	8003eb8 <_dtoa_r+0xa60>
 80041f2:	bf00      	nop
 80041f4:	401c0000 	.word	0x401c0000
 80041f8:	40140000 	.word	0x40140000
 80041fc:	08006ef0 	.word	0x08006ef0
 8004200:	08006fb8 	.word	0x08006fb8
 8004204:	40240000 	.word	0x40240000
 8004208:	3fe00000 	.word	0x3fe00000
 800420c:	2b39      	cmp	r3, #57	; 0x39
 800420e:	46d3      	mov	fp, sl
 8004210:	469a      	mov	sl, r3
 8004212:	d0c9      	beq.n	80041a8 <_dtoa_r+0xd50>
 8004214:	f1bb 0f00 	cmp.w	fp, #0
 8004218:	f73f aebd 	bgt.w	8003f96 <_dtoa_r+0xb3e>
 800421c:	e6bd      	b.n	8003f9a <_dtoa_r+0xb42>
 800421e:	f47f aebc 	bne.w	8003f9a <_dtoa_r+0xb42>
 8004222:	f01a 0f01 	tst.w	sl, #1
 8004226:	f43f aeb8 	beq.w	8003f9a <_dtoa_r+0xb42>
 800422a:	e6b0      	b.n	8003f8e <_dtoa_r+0xb36>
 800422c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800422e:	2b02      	cmp	r3, #2
 8004230:	dc25      	bgt.n	800427e <_dtoa_r+0xe26>
 8004232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004234:	e60d      	b.n	8003e52 <_dtoa_r+0x9fa>
 8004236:	f04f 0a02 	mov.w	sl, #2
 800423a:	e469      	b.n	8003b10 <_dtoa_r+0x6b8>
 800423c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800423e:	2b02      	cmp	r3, #2
 8004240:	dc1d      	bgt.n	800427e <_dtoa_r+0xe26>
 8004242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004244:	e56d      	b.n	8003d22 <_dtoa_r+0x8ca>
 8004246:	2400      	movs	r4, #0
 8004248:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800424c:	4621      	mov	r1, r4
 800424e:	4648      	mov	r0, r9
 8004250:	f000 fe72 	bl	8004f38 <_Balloc>
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	9306      	str	r3, [sp, #24]
 800425a:	930c      	str	r3, [sp, #48]	; 0x30
 800425c:	2301      	movs	r3, #1
 800425e:	9007      	str	r0, [sp, #28]
 8004260:	9423      	str	r4, [sp, #140]	; 0x8c
 8004262:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8004266:	9309      	str	r3, [sp, #36]	; 0x24
 8004268:	f7ff b9fc 	b.w	8003664 <_dtoa_r+0x20c>
 800426c:	f43f ab48 	beq.w	8003900 <_dtoa_r+0x4a8>
 8004270:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8004274:	f7ff bb3f 	b.w	80038f6 <_dtoa_r+0x49e>
 8004278:	2501      	movs	r5, #1
 800427a:	f7ff b9bd 	b.w	80035f8 <_dtoa_r+0x1a0>
 800427e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004280:	9306      	str	r3, [sp, #24]
 8004282:	e5ee      	b.n	8003e62 <_dtoa_r+0xa0a>

08004284 <__sflush_r>:
 8004284:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8004288:	b29a      	uxth	r2, r3
 800428a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428e:	460d      	mov	r5, r1
 8004290:	0711      	lsls	r1, r2, #28
 8004292:	4680      	mov	r8, r0
 8004294:	d43c      	bmi.n	8004310 <__sflush_r+0x8c>
 8004296:	686a      	ldr	r2, [r5, #4]
 8004298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800429c:	2a00      	cmp	r2, #0
 800429e:	81ab      	strh	r3, [r5, #12]
 80042a0:	dd73      	ble.n	800438a <__sflush_r+0x106>
 80042a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80042a4:	2c00      	cmp	r4, #0
 80042a6:	d04b      	beq.n	8004340 <__sflush_r+0xbc>
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042ae:	2100      	movs	r1, #0
 80042b0:	b292      	uxth	r2, r2
 80042b2:	f8d8 6000 	ldr.w	r6, [r8]
 80042b6:	f8c8 1000 	str.w	r1, [r8]
 80042ba:	2a00      	cmp	r2, #0
 80042bc:	d069      	beq.n	8004392 <__sflush_r+0x10e>
 80042be:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80042c0:	075f      	lsls	r7, r3, #29
 80042c2:	d505      	bpl.n	80042d0 <__sflush_r+0x4c>
 80042c4:	6869      	ldr	r1, [r5, #4]
 80042c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042c8:	1a52      	subs	r2, r2, r1
 80042ca:	b10b      	cbz	r3, 80042d0 <__sflush_r+0x4c>
 80042cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	2300      	movs	r3, #0
 80042d2:	69e9      	ldr	r1, [r5, #28]
 80042d4:	4640      	mov	r0, r8
 80042d6:	47a0      	blx	r4
 80042d8:	1c44      	adds	r4, r0, #1
 80042da:	d03c      	beq.n	8004356 <__sflush_r+0xd2>
 80042dc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80042e0:	692a      	ldr	r2, [r5, #16]
 80042e2:	602a      	str	r2, [r5, #0]
 80042e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e8:	2200      	movs	r2, #0
 80042ea:	81ab      	strh	r3, [r5, #12]
 80042ec:	04db      	lsls	r3, r3, #19
 80042ee:	606a      	str	r2, [r5, #4]
 80042f0:	d449      	bmi.n	8004386 <__sflush_r+0x102>
 80042f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80042f4:	f8c8 6000 	str.w	r6, [r8]
 80042f8:	b311      	cbz	r1, 8004340 <__sflush_r+0xbc>
 80042fa:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80042fe:	4299      	cmp	r1, r3
 8004300:	d002      	beq.n	8004308 <__sflush_r+0x84>
 8004302:	4640      	mov	r0, r8
 8004304:	f000 f94e 	bl	80045a4 <_free_r>
 8004308:	2000      	movs	r0, #0
 800430a:	6328      	str	r0, [r5, #48]	; 0x30
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004310:	692e      	ldr	r6, [r5, #16]
 8004312:	b1ae      	cbz	r6, 8004340 <__sflush_r+0xbc>
 8004314:	682c      	ldr	r4, [r5, #0]
 8004316:	602e      	str	r6, [r5, #0]
 8004318:	0790      	lsls	r0, r2, #30
 800431a:	bf0c      	ite	eq
 800431c:	696b      	ldreq	r3, [r5, #20]
 800431e:	2300      	movne	r3, #0
 8004320:	1ba4      	subs	r4, r4, r6
 8004322:	60ab      	str	r3, [r5, #8]
 8004324:	e00a      	b.n	800433c <__sflush_r+0xb8>
 8004326:	4623      	mov	r3, r4
 8004328:	4632      	mov	r2, r6
 800432a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800432c:	69e9      	ldr	r1, [r5, #28]
 800432e:	4640      	mov	r0, r8
 8004330:	47b8      	blx	r7
 8004332:	2800      	cmp	r0, #0
 8004334:	eba4 0400 	sub.w	r4, r4, r0
 8004338:	4406      	add	r6, r0
 800433a:	dd04      	ble.n	8004346 <__sflush_r+0xc2>
 800433c:	2c00      	cmp	r4, #0
 800433e:	dcf2      	bgt.n	8004326 <__sflush_r+0xa2>
 8004340:	2000      	movs	r0, #0
 8004342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004346:	89ab      	ldrh	r3, [r5, #12]
 8004348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434c:	81ab      	strh	r3, [r5, #12]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004356:	f8d8 2000 	ldr.w	r2, [r8]
 800435a:	2a1d      	cmp	r2, #29
 800435c:	d8f3      	bhi.n	8004346 <__sflush_r+0xc2>
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <__sflush_r+0x144>)
 8004360:	40d3      	lsrs	r3, r2
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	f083 0401 	eor.w	r4, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0eb      	beq.n	8004346 <__sflush_r+0xc2>
 800436e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004372:	6929      	ldr	r1, [r5, #16]
 8004374:	6029      	str	r1, [r5, #0]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437a:	04d9      	lsls	r1, r3, #19
 800437c:	606c      	str	r4, [r5, #4]
 800437e:	81ab      	strh	r3, [r5, #12]
 8004380:	d5b7      	bpl.n	80042f2 <__sflush_r+0x6e>
 8004382:	2a00      	cmp	r2, #0
 8004384:	d1b5      	bne.n	80042f2 <__sflush_r+0x6e>
 8004386:	6528      	str	r0, [r5, #80]	; 0x50
 8004388:	e7b3      	b.n	80042f2 <__sflush_r+0x6e>
 800438a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800438c:	2a00      	cmp	r2, #0
 800438e:	dc88      	bgt.n	80042a2 <__sflush_r+0x1e>
 8004390:	e7d6      	b.n	8004340 <__sflush_r+0xbc>
 8004392:	2301      	movs	r3, #1
 8004394:	69e9      	ldr	r1, [r5, #28]
 8004396:	4640      	mov	r0, r8
 8004398:	47a0      	blx	r4
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	4602      	mov	r2, r0
 800439e:	d002      	beq.n	80043a6 <__sflush_r+0x122>
 80043a0:	89ab      	ldrh	r3, [r5, #12]
 80043a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80043a4:	e78c      	b.n	80042c0 <__sflush_r+0x3c>
 80043a6:	f8d8 3000 	ldr.w	r3, [r8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f8      	beq.n	80043a0 <__sflush_r+0x11c>
 80043ae:	2b1d      	cmp	r3, #29
 80043b0:	d001      	beq.n	80043b6 <__sflush_r+0x132>
 80043b2:	2b16      	cmp	r3, #22
 80043b4:	d102      	bne.n	80043bc <__sflush_r+0x138>
 80043b6:	f8c8 6000 	str.w	r6, [r8]
 80043ba:	e7c1      	b.n	8004340 <__sflush_r+0xbc>
 80043bc:	89ab      	ldrh	r3, [r5, #12]
 80043be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c2:	81ab      	strh	r3, [r5, #12]
 80043c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c8:	20400001 	.word	0x20400001

080043cc <_fflush_r>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4604      	mov	r4, r0
 80043d0:	b082      	sub	sp, #8
 80043d2:	b108      	cbz	r0, 80043d8 <_fflush_r+0xc>
 80043d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80043d6:	b153      	cbz	r3, 80043ee <_fflush_r+0x22>
 80043d8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80043dc:	b908      	cbnz	r0, 80043e2 <_fflush_r+0x16>
 80043de:	b002      	add	sp, #8
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	4620      	mov	r0, r4
 80043e4:	b002      	add	sp, #8
 80043e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ea:	f7ff bf4b 	b.w	8004284 <__sflush_r>
 80043ee:	9101      	str	r1, [sp, #4]
 80043f0:	f000 f880 	bl	80044f4 <__sinit>
 80043f4:	9901      	ldr	r1, [sp, #4]
 80043f6:	e7ef      	b.n	80043d8 <_fflush_r+0xc>

080043f8 <_cleanup_r>:
 80043f8:	4901      	ldr	r1, [pc, #4]	; (8004400 <_cleanup_r+0x8>)
 80043fa:	f000 b9bb 	b.w	8004774 <_fwalk_reent>
 80043fe:	bf00      	nop
 8004400:	0800575d 	.word	0x0800575d

08004404 <__sinit.part.1>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <__sinit.part.1+0xdc>)
 800440a:	6845      	ldr	r5, [r0, #4]
 800440c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800440e:	2400      	movs	r4, #0
 8004410:	4607      	mov	r7, r0
 8004412:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8004416:	2304      	movs	r3, #4
 8004418:	2103      	movs	r1, #3
 800441a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800441e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8004422:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8004426:	b083      	sub	sp, #12
 8004428:	602c      	str	r4, [r5, #0]
 800442a:	606c      	str	r4, [r5, #4]
 800442c:	60ac      	str	r4, [r5, #8]
 800442e:	666c      	str	r4, [r5, #100]	; 0x64
 8004430:	81ec      	strh	r4, [r5, #14]
 8004432:	612c      	str	r4, [r5, #16]
 8004434:	616c      	str	r4, [r5, #20]
 8004436:	61ac      	str	r4, [r5, #24]
 8004438:	81ab      	strh	r3, [r5, #12]
 800443a:	4621      	mov	r1, r4
 800443c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004440:	2208      	movs	r2, #8
 8004442:	f7fd f9b7 	bl	80017b4 <memset>
 8004446:	68be      	ldr	r6, [r7, #8]
 8004448:	f8df b098 	ldr.w	fp, [pc, #152]	; 80044e4 <__sinit.part.1+0xe0>
 800444c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80044e8 <__sinit.part.1+0xe4>
 8004450:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80044ec <__sinit.part.1+0xe8>
 8004454:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80044f0 <__sinit.part.1+0xec>
 8004458:	f8c5 b020 	str.w	fp, [r5, #32]
 800445c:	2301      	movs	r3, #1
 800445e:	2209      	movs	r2, #9
 8004460:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004464:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004468:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800446c:	61ed      	str	r5, [r5, #28]
 800446e:	4621      	mov	r1, r4
 8004470:	81f3      	strh	r3, [r6, #14]
 8004472:	81b2      	strh	r2, [r6, #12]
 8004474:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8004478:	6034      	str	r4, [r6, #0]
 800447a:	6074      	str	r4, [r6, #4]
 800447c:	60b4      	str	r4, [r6, #8]
 800447e:	6674      	str	r4, [r6, #100]	; 0x64
 8004480:	6134      	str	r4, [r6, #16]
 8004482:	6174      	str	r4, [r6, #20]
 8004484:	61b4      	str	r4, [r6, #24]
 8004486:	2208      	movs	r2, #8
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	f7fd f993 	bl	80017b4 <memset>
 800448e:	68fd      	ldr	r5, [r7, #12]
 8004490:	61f6      	str	r6, [r6, #28]
 8004492:	2012      	movs	r0, #18
 8004494:	2202      	movs	r2, #2
 8004496:	f8c6 b020 	str.w	fp, [r6, #32]
 800449a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800449e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80044a2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80044a6:	4621      	mov	r1, r4
 80044a8:	81a8      	strh	r0, [r5, #12]
 80044aa:	81ea      	strh	r2, [r5, #14]
 80044ac:	602c      	str	r4, [r5, #0]
 80044ae:	606c      	str	r4, [r5, #4]
 80044b0:	60ac      	str	r4, [r5, #8]
 80044b2:	666c      	str	r4, [r5, #100]	; 0x64
 80044b4:	612c      	str	r4, [r5, #16]
 80044b6:	616c      	str	r4, [r5, #20]
 80044b8:	61ac      	str	r4, [r5, #24]
 80044ba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80044be:	2208      	movs	r2, #8
 80044c0:	f7fd f978 	bl	80017b4 <memset>
 80044c4:	9b01      	ldr	r3, [sp, #4]
 80044c6:	61ed      	str	r5, [r5, #28]
 80044c8:	f8c5 b020 	str.w	fp, [r5, #32]
 80044cc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80044d0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80044d4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044da:	b003      	add	sp, #12
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e0:	080043f9 	.word	0x080043f9
 80044e4:	0800557d 	.word	0x0800557d
 80044e8:	080055a1 	.word	0x080055a1
 80044ec:	080055dd 	.word	0x080055dd
 80044f0:	080055fd 	.word	0x080055fd

080044f4 <__sinit>:
 80044f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044f6:	b103      	cbz	r3, 80044fa <__sinit+0x6>
 80044f8:	4770      	bx	lr
 80044fa:	f7ff bf83 	b.w	8004404 <__sinit.part.1>
 80044fe:	bf00      	nop

08004500 <__sfp_lock_acquire>:
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop

08004504 <__sfp_lock_release>:
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <_malloc_trim_r>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	4f23      	ldr	r7, [pc, #140]	; (8004598 <_malloc_trim_r+0x90>)
 800450c:	460c      	mov	r4, r1
 800450e:	4606      	mov	r6, r0
 8004510:	f000 fd0e 	bl	8004f30 <__malloc_lock>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	685d      	ldr	r5, [r3, #4]
 8004518:	f025 0503 	bic.w	r5, r5, #3
 800451c:	1b29      	subs	r1, r5, r4
 800451e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004522:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8004526:	f021 010f 	bic.w	r1, r1, #15
 800452a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800452e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004532:	db07      	blt.n	8004544 <_malloc_trim_r+0x3c>
 8004534:	2100      	movs	r1, #0
 8004536:	4630      	mov	r0, r6
 8004538:	f001 f80e 	bl	8005558 <_sbrk_r>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	442b      	add	r3, r5
 8004540:	4298      	cmp	r0, r3
 8004542:	d004      	beq.n	800454e <_malloc_trim_r+0x46>
 8004544:	4630      	mov	r0, r6
 8004546:	f000 fcf5 	bl	8004f34 <__malloc_unlock>
 800454a:	2000      	movs	r0, #0
 800454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800454e:	4261      	negs	r1, r4
 8004550:	4630      	mov	r0, r6
 8004552:	f001 f801 	bl	8005558 <_sbrk_r>
 8004556:	3001      	adds	r0, #1
 8004558:	d00d      	beq.n	8004576 <_malloc_trim_r+0x6e>
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <_malloc_trim_r+0x94>)
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	1b2d      	subs	r5, r5, r4
 8004562:	f045 0501 	orr.w	r5, r5, #1
 8004566:	4630      	mov	r0, r6
 8004568:	1b09      	subs	r1, r1, r4
 800456a:	6055      	str	r5, [r2, #4]
 800456c:	6019      	str	r1, [r3, #0]
 800456e:	f000 fce1 	bl	8004f34 <__malloc_unlock>
 8004572:	2001      	movs	r0, #1
 8004574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004576:	2100      	movs	r1, #0
 8004578:	4630      	mov	r0, r6
 800457a:	f000 ffed 	bl	8005558 <_sbrk_r>
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	1a83      	subs	r3, r0, r2
 8004582:	2b0f      	cmp	r3, #15
 8004584:	ddde      	ble.n	8004544 <_malloc_trim_r+0x3c>
 8004586:	4c06      	ldr	r4, [pc, #24]	; (80045a0 <_malloc_trim_r+0x98>)
 8004588:	4904      	ldr	r1, [pc, #16]	; (800459c <_malloc_trim_r+0x94>)
 800458a:	6824      	ldr	r4, [r4, #0]
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	1b00      	subs	r0, r0, r4
 8004592:	6053      	str	r3, [r2, #4]
 8004594:	6008      	str	r0, [r1, #0]
 8004596:	e7d5      	b.n	8004544 <_malloc_trim_r+0x3c>
 8004598:	200005b8 	.word	0x200005b8
 800459c:	20000a30 	.word	0x20000a30
 80045a0:	200009c4 	.word	0x200009c4

080045a4 <_free_r>:
 80045a4:	2900      	cmp	r1, #0
 80045a6:	d045      	beq.n	8004634 <_free_r+0x90>
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	460d      	mov	r5, r1
 80045ae:	4680      	mov	r8, r0
 80045b0:	f000 fcbe 	bl	8004f30 <__malloc_lock>
 80045b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80045b8:	496a      	ldr	r1, [pc, #424]	; (8004764 <_free_r+0x1c0>)
 80045ba:	f027 0301 	bic.w	r3, r7, #1
 80045be:	f1a5 0408 	sub.w	r4, r5, #8
 80045c2:	18e2      	adds	r2, r4, r3
 80045c4:	688e      	ldr	r6, [r1, #8]
 80045c6:	6850      	ldr	r0, [r2, #4]
 80045c8:	42b2      	cmp	r2, r6
 80045ca:	f020 0003 	bic.w	r0, r0, #3
 80045ce:	d062      	beq.n	8004696 <_free_r+0xf2>
 80045d0:	07fe      	lsls	r6, r7, #31
 80045d2:	6050      	str	r0, [r2, #4]
 80045d4:	d40b      	bmi.n	80045ee <_free_r+0x4a>
 80045d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80045da:	1be4      	subs	r4, r4, r7
 80045dc:	f101 0e08 	add.w	lr, r1, #8
 80045e0:	68a5      	ldr	r5, [r4, #8]
 80045e2:	4575      	cmp	r5, lr
 80045e4:	443b      	add	r3, r7
 80045e6:	d06f      	beq.n	80046c8 <_free_r+0x124>
 80045e8:	68e7      	ldr	r7, [r4, #12]
 80045ea:	60ef      	str	r7, [r5, #12]
 80045ec:	60bd      	str	r5, [r7, #8]
 80045ee:	1815      	adds	r5, r2, r0
 80045f0:	686d      	ldr	r5, [r5, #4]
 80045f2:	07ed      	lsls	r5, r5, #31
 80045f4:	d542      	bpl.n	800467c <_free_r+0xd8>
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	6062      	str	r2, [r4, #4]
 80045fc:	50e3      	str	r3, [r4, r3]
 80045fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004602:	d218      	bcs.n	8004636 <_free_r+0x92>
 8004604:	08db      	lsrs	r3, r3, #3
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	684d      	ldr	r5, [r1, #4]
 800460a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800460e:	60a7      	str	r7, [r4, #8]
 8004610:	2001      	movs	r0, #1
 8004612:	109b      	asrs	r3, r3, #2
 8004614:	fa00 f303 	lsl.w	r3, r0, r3
 8004618:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800461c:	431d      	orrs	r5, r3
 800461e:	3808      	subs	r0, #8
 8004620:	60e0      	str	r0, [r4, #12]
 8004622:	604d      	str	r5, [r1, #4]
 8004624:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8004628:	60fc      	str	r4, [r7, #12]
 800462a:	4640      	mov	r0, r8
 800462c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004630:	f000 bc80 	b.w	8004f34 <__malloc_unlock>
 8004634:	4770      	bx	lr
 8004636:	0a5a      	lsrs	r2, r3, #9
 8004638:	2a04      	cmp	r2, #4
 800463a:	d853      	bhi.n	80046e4 <_free_r+0x140>
 800463c:	099a      	lsrs	r2, r3, #6
 800463e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8004642:	007f      	lsls	r7, r7, #1
 8004644:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8004648:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800464c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8004650:	4944      	ldr	r1, [pc, #272]	; (8004764 <_free_r+0x1c0>)
 8004652:	3808      	subs	r0, #8
 8004654:	4290      	cmp	r0, r2
 8004656:	d04d      	beq.n	80046f4 <_free_r+0x150>
 8004658:	6851      	ldr	r1, [r2, #4]
 800465a:	f021 0103 	bic.w	r1, r1, #3
 800465e:	428b      	cmp	r3, r1
 8004660:	d202      	bcs.n	8004668 <_free_r+0xc4>
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	4290      	cmp	r0, r2
 8004666:	d1f7      	bne.n	8004658 <_free_r+0xb4>
 8004668:	68d0      	ldr	r0, [r2, #12]
 800466a:	60e0      	str	r0, [r4, #12]
 800466c:	60a2      	str	r2, [r4, #8]
 800466e:	6084      	str	r4, [r0, #8]
 8004670:	60d4      	str	r4, [r2, #12]
 8004672:	4640      	mov	r0, r8
 8004674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	f000 bc5c 	b.w	8004f34 <__malloc_unlock>
 800467c:	6895      	ldr	r5, [r2, #8]
 800467e:	4f3a      	ldr	r7, [pc, #232]	; (8004768 <_free_r+0x1c4>)
 8004680:	42bd      	cmp	r5, r7
 8004682:	4403      	add	r3, r0
 8004684:	d03f      	beq.n	8004706 <_free_r+0x162>
 8004686:	68d0      	ldr	r0, [r2, #12]
 8004688:	60e8      	str	r0, [r5, #12]
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	6085      	str	r5, [r0, #8]
 8004690:	6062      	str	r2, [r4, #4]
 8004692:	50e3      	str	r3, [r4, r3]
 8004694:	e7b3      	b.n	80045fe <_free_r+0x5a>
 8004696:	07ff      	lsls	r7, r7, #31
 8004698:	4403      	add	r3, r0
 800469a:	d407      	bmi.n	80046ac <_free_r+0x108>
 800469c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80046a0:	1aa4      	subs	r4, r4, r2
 80046a2:	4413      	add	r3, r2
 80046a4:	68a0      	ldr	r0, [r4, #8]
 80046a6:	68e2      	ldr	r2, [r4, #12]
 80046a8:	60c2      	str	r2, [r0, #12]
 80046aa:	6090      	str	r0, [r2, #8]
 80046ac:	4a2f      	ldr	r2, [pc, #188]	; (800476c <_free_r+0x1c8>)
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	f043 0001 	orr.w	r0, r3, #1
 80046b4:	4293      	cmp	r3, r2
 80046b6:	6060      	str	r0, [r4, #4]
 80046b8:	608c      	str	r4, [r1, #8]
 80046ba:	d3b6      	bcc.n	800462a <_free_r+0x86>
 80046bc:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <_free_r+0x1cc>)
 80046be:	4640      	mov	r0, r8
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	f7ff ff21 	bl	8004508 <_malloc_trim_r>
 80046c6:	e7b0      	b.n	800462a <_free_r+0x86>
 80046c8:	1811      	adds	r1, r2, r0
 80046ca:	6849      	ldr	r1, [r1, #4]
 80046cc:	07c9      	lsls	r1, r1, #31
 80046ce:	d444      	bmi.n	800475a <_free_r+0x1b6>
 80046d0:	6891      	ldr	r1, [r2, #8]
 80046d2:	68d2      	ldr	r2, [r2, #12]
 80046d4:	60ca      	str	r2, [r1, #12]
 80046d6:	4403      	add	r3, r0
 80046d8:	f043 0001 	orr.w	r0, r3, #1
 80046dc:	6091      	str	r1, [r2, #8]
 80046de:	6060      	str	r0, [r4, #4]
 80046e0:	50e3      	str	r3, [r4, r3]
 80046e2:	e7a2      	b.n	800462a <_free_r+0x86>
 80046e4:	2a14      	cmp	r2, #20
 80046e6:	d817      	bhi.n	8004718 <_free_r+0x174>
 80046e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80046ec:	007f      	lsls	r7, r7, #1
 80046ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80046f2:	e7a9      	b.n	8004648 <_free_r+0xa4>
 80046f4:	10aa      	asrs	r2, r5, #2
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	2501      	movs	r5, #1
 80046fa:	fa05 f202 	lsl.w	r2, r5, r2
 80046fe:	4313      	orrs	r3, r2
 8004700:	604b      	str	r3, [r1, #4]
 8004702:	4602      	mov	r2, r0
 8004704:	e7b1      	b.n	800466a <_free_r+0xc6>
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	614c      	str	r4, [r1, #20]
 800470c:	610c      	str	r4, [r1, #16]
 800470e:	60e5      	str	r5, [r4, #12]
 8004710:	60a5      	str	r5, [r4, #8]
 8004712:	6062      	str	r2, [r4, #4]
 8004714:	50e3      	str	r3, [r4, r3]
 8004716:	e788      	b.n	800462a <_free_r+0x86>
 8004718:	2a54      	cmp	r2, #84	; 0x54
 800471a:	d806      	bhi.n	800472a <_free_r+0x186>
 800471c:	0b1a      	lsrs	r2, r3, #12
 800471e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8004722:	007f      	lsls	r7, r7, #1
 8004724:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8004728:	e78e      	b.n	8004648 <_free_r+0xa4>
 800472a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800472e:	d806      	bhi.n	800473e <_free_r+0x19a>
 8004730:	0bda      	lsrs	r2, r3, #15
 8004732:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8004736:	007f      	lsls	r7, r7, #1
 8004738:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800473c:	e784      	b.n	8004648 <_free_r+0xa4>
 800473e:	f240 5054 	movw	r0, #1364	; 0x554
 8004742:	4282      	cmp	r2, r0
 8004744:	d806      	bhi.n	8004754 <_free_r+0x1b0>
 8004746:	0c9a      	lsrs	r2, r3, #18
 8004748:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800474c:	007f      	lsls	r7, r7, #1
 800474e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8004752:	e779      	b.n	8004648 <_free_r+0xa4>
 8004754:	27fe      	movs	r7, #254	; 0xfe
 8004756:	257e      	movs	r5, #126	; 0x7e
 8004758:	e776      	b.n	8004648 <_free_r+0xa4>
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	6062      	str	r2, [r4, #4]
 8004760:	50e3      	str	r3, [r4, r3]
 8004762:	e762      	b.n	800462a <_free_r+0x86>
 8004764:	200005b8 	.word	0x200005b8
 8004768:	200005c0 	.word	0x200005c0
 800476c:	200009c0 	.word	0x200009c0
 8004770:	20000a2c 	.word	0x20000a2c

08004774 <_fwalk_reent>:
 8004774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004778:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800477c:	d01f      	beq.n	80047be <_fwalk_reent+0x4a>
 800477e:	4688      	mov	r8, r1
 8004780:	4606      	mov	r6, r0
 8004782:	f04f 0900 	mov.w	r9, #0
 8004786:	687d      	ldr	r5, [r7, #4]
 8004788:	68bc      	ldr	r4, [r7, #8]
 800478a:	3d01      	subs	r5, #1
 800478c:	d411      	bmi.n	80047b2 <_fwalk_reent+0x3e>
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	2b01      	cmp	r3, #1
 8004792:	f105 35ff 	add.w	r5, r5, #4294967295
 8004796:	d908      	bls.n	80047aa <_fwalk_reent+0x36>
 8004798:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800479c:	3301      	adds	r3, #1
 800479e:	4621      	mov	r1, r4
 80047a0:	4630      	mov	r0, r6
 80047a2:	d002      	beq.n	80047aa <_fwalk_reent+0x36>
 80047a4:	47c0      	blx	r8
 80047a6:	ea49 0900 	orr.w	r9, r9, r0
 80047aa:	1c6b      	adds	r3, r5, #1
 80047ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80047b0:	d1ed      	bne.n	800478e <_fwalk_reent+0x1a>
 80047b2:	683f      	ldr	r7, [r7, #0]
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	d1e6      	bne.n	8004786 <_fwalk_reent+0x12>
 80047b8:	4648      	mov	r0, r9
 80047ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047be:	46b9      	mov	r9, r7
 80047c0:	4648      	mov	r0, r9
 80047c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c6:	bf00      	nop

080047c8 <__locale_mb_cur_max>:
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <__locale_mb_cur_max+0x14>)
 80047ca:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <__locale_mb_cur_max+0x18>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf08      	it	eq
 80047d4:	4613      	moveq	r3, r2
 80047d6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80047da:	4770      	bx	lr
 80047dc:	20000448 	.word	0x20000448
 80047e0:	2000044c 	.word	0x2000044c

080047e4 <__locale_ctype_ptr_l>:
 80047e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop

080047ec <_localeconv_r>:
 80047ec:	4a04      	ldr	r2, [pc, #16]	; (8004800 <_localeconv_r+0x14>)
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_localeconv_r+0x18>)
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80047f4:	2800      	cmp	r0, #0
 80047f6:	bf08      	it	eq
 80047f8:	4618      	moveq	r0, r3
 80047fa:	30f0      	adds	r0, #240	; 0xf0
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000448 	.word	0x20000448
 8004804:	2000044c 	.word	0x2000044c

08004808 <__swhatbuf_r>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	460d      	mov	r5, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	2900      	cmp	r1, #0
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	4614      	mov	r4, r2
 8004816:	461e      	mov	r6, r3
 8004818:	db14      	blt.n	8004844 <__swhatbuf_r+0x3c>
 800481a:	aa01      	add	r2, sp, #4
 800481c:	f001 f840 	bl	80058a0 <_fstat_r>
 8004820:	2800      	cmp	r0, #0
 8004822:	db0f      	blt.n	8004844 <__swhatbuf_r+0x3c>
 8004824:	9a02      	ldr	r2, [sp, #8]
 8004826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800482a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800482e:	fab2 f282 	clz	r2, r2
 8004832:	0952      	lsrs	r2, r2, #5
 8004834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004838:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800483c:	6032      	str	r2, [r6, #0]
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	b010      	add	sp, #64	; 0x40
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	89a8      	ldrh	r0, [r5, #12]
 8004846:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800484a:	b282      	uxth	r2, r0
 800484c:	2000      	movs	r0, #0
 800484e:	6030      	str	r0, [r6, #0]
 8004850:	b11a      	cbz	r2, 800485a <__swhatbuf_r+0x52>
 8004852:	2340      	movs	r3, #64	; 0x40
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	b010      	add	sp, #64	; 0x40
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800485e:	4610      	mov	r0, r2
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	b010      	add	sp, #64	; 0x40
 8004864:	bd70      	pop	{r4, r5, r6, pc}
 8004866:	bf00      	nop

08004868 <__smakebuf_r>:
 8004868:	898a      	ldrh	r2, [r1, #12]
 800486a:	0792      	lsls	r2, r2, #30
 800486c:	460b      	mov	r3, r1
 800486e:	d506      	bpl.n	800487e <__smakebuf_r+0x16>
 8004870:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004874:	2101      	movs	r1, #1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]
 800487a:	6159      	str	r1, [r3, #20]
 800487c:	4770      	bx	lr
 800487e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004880:	b083      	sub	sp, #12
 8004882:	ab01      	add	r3, sp, #4
 8004884:	466a      	mov	r2, sp
 8004886:	460c      	mov	r4, r1
 8004888:	4605      	mov	r5, r0
 800488a:	f7ff ffbd 	bl	8004808 <__swhatbuf_r>
 800488e:	9900      	ldr	r1, [sp, #0]
 8004890:	4606      	mov	r6, r0
 8004892:	4628      	mov	r0, r5
 8004894:	f000 f82c 	bl	80048f0 <_malloc_r>
 8004898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489c:	b1d0      	cbz	r0, 80048d4 <__smakebuf_r+0x6c>
 800489e:	9a01      	ldr	r2, [sp, #4]
 80048a0:	4f12      	ldr	r7, [pc, #72]	; (80048ec <__smakebuf_r+0x84>)
 80048a2:	9900      	ldr	r1, [sp, #0]
 80048a4:	63ef      	str	r7, [r5, #60]	; 0x3c
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	6020      	str	r0, [r4, #0]
 80048ae:	6120      	str	r0, [r4, #16]
 80048b0:	6161      	str	r1, [r4, #20]
 80048b2:	b91a      	cbnz	r2, 80048bc <__smakebuf_r+0x54>
 80048b4:	4333      	orrs	r3, r6
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	b003      	add	sp, #12
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	4628      	mov	r0, r5
 80048be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048c2:	f001 f983 	bl	8005bcc <_isatty_r>
 80048c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0f2      	beq.n	80048b4 <__smakebuf_r+0x4c>
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	e7ef      	b.n	80048b4 <__smakebuf_r+0x4c>
 80048d4:	059a      	lsls	r2, r3, #22
 80048d6:	d4ef      	bmi.n	80048b8 <__smakebuf_r+0x50>
 80048d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	2101      	movs	r1, #1
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	6122      	str	r2, [r4, #16]
 80048e8:	6161      	str	r1, [r4, #20]
 80048ea:	e7e5      	b.n	80048b8 <__smakebuf_r+0x50>
 80048ec:	080043f9 	.word	0x080043f9

080048f0 <_malloc_r>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	f101 050b 	add.w	r5, r1, #11
 80048f8:	2d16      	cmp	r5, #22
 80048fa:	b083      	sub	sp, #12
 80048fc:	4606      	mov	r6, r0
 80048fe:	f240 809f 	bls.w	8004a40 <_malloc_r+0x150>
 8004902:	f035 0507 	bics.w	r5, r5, #7
 8004906:	f100 80bf 	bmi.w	8004a88 <_malloc_r+0x198>
 800490a:	42a9      	cmp	r1, r5
 800490c:	f200 80bc 	bhi.w	8004a88 <_malloc_r+0x198>
 8004910:	f000 fb0e 	bl	8004f30 <__malloc_lock>
 8004914:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004918:	f0c0 829c 	bcc.w	8004e54 <_malloc_r+0x564>
 800491c:	0a6b      	lsrs	r3, r5, #9
 800491e:	f000 80ba 	beq.w	8004a96 <_malloc_r+0x1a6>
 8004922:	2b04      	cmp	r3, #4
 8004924:	f200 8183 	bhi.w	8004c2e <_malloc_r+0x33e>
 8004928:	09a8      	lsrs	r0, r5, #6
 800492a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800492e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004932:	3038      	adds	r0, #56	; 0x38
 8004934:	4fc4      	ldr	r7, [pc, #784]	; (8004c48 <_malloc_r+0x358>)
 8004936:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800493a:	f1a3 0108 	sub.w	r1, r3, #8
 800493e:	685c      	ldr	r4, [r3, #4]
 8004940:	42a1      	cmp	r1, r4
 8004942:	d107      	bne.n	8004954 <_malloc_r+0x64>
 8004944:	e0ac      	b.n	8004aa0 <_malloc_r+0x1b0>
 8004946:	2a00      	cmp	r2, #0
 8004948:	f280 80ac 	bge.w	8004aa4 <_malloc_r+0x1b4>
 800494c:	68e4      	ldr	r4, [r4, #12]
 800494e:	42a1      	cmp	r1, r4
 8004950:	f000 80a6 	beq.w	8004aa0 <_malloc_r+0x1b0>
 8004954:	6863      	ldr	r3, [r4, #4]
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	1b5a      	subs	r2, r3, r5
 800495c:	2a0f      	cmp	r2, #15
 800495e:	ddf2      	ble.n	8004946 <_malloc_r+0x56>
 8004960:	49b9      	ldr	r1, [pc, #740]	; (8004c48 <_malloc_r+0x358>)
 8004962:	693c      	ldr	r4, [r7, #16]
 8004964:	f101 0e08 	add.w	lr, r1, #8
 8004968:	4574      	cmp	r4, lr
 800496a:	f000 81b3 	beq.w	8004cd4 <_malloc_r+0x3e4>
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	f023 0303 	bic.w	r3, r3, #3
 8004974:	1b5a      	subs	r2, r3, r5
 8004976:	2a0f      	cmp	r2, #15
 8004978:	f300 8199 	bgt.w	8004cae <_malloc_r+0x3be>
 800497c:	2a00      	cmp	r2, #0
 800497e:	f8c1 e014 	str.w	lr, [r1, #20]
 8004982:	f8c1 e010 	str.w	lr, [r1, #16]
 8004986:	f280 809e 	bge.w	8004ac6 <_malloc_r+0x1d6>
 800498a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498e:	f080 8167 	bcs.w	8004c60 <_malloc_r+0x370>
 8004992:	08db      	lsrs	r3, r3, #3
 8004994:	f103 0c01 	add.w	ip, r3, #1
 8004998:	2201      	movs	r2, #1
 800499a:	109b      	asrs	r3, r3, #2
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	684a      	ldr	r2, [r1, #4]
 80049a2:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 80049a6:	f8c4 8008 	str.w	r8, [r4, #8]
 80049aa:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 80049ae:	431a      	orrs	r2, r3
 80049b0:	f1a9 0308 	sub.w	r3, r9, #8
 80049b4:	60e3      	str	r3, [r4, #12]
 80049b6:	604a      	str	r2, [r1, #4]
 80049b8:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 80049bc:	f8c8 400c 	str.w	r4, [r8, #12]
 80049c0:	1083      	asrs	r3, r0, #2
 80049c2:	2401      	movs	r4, #1
 80049c4:	409c      	lsls	r4, r3
 80049c6:	4294      	cmp	r4, r2
 80049c8:	f200 808a 	bhi.w	8004ae0 <_malloc_r+0x1f0>
 80049cc:	4214      	tst	r4, r2
 80049ce:	d106      	bne.n	80049de <_malloc_r+0xee>
 80049d0:	f020 0003 	bic.w	r0, r0, #3
 80049d4:	0064      	lsls	r4, r4, #1
 80049d6:	4214      	tst	r4, r2
 80049d8:	f100 0004 	add.w	r0, r0, #4
 80049dc:	d0fa      	beq.n	80049d4 <_malloc_r+0xe4>
 80049de:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80049e2:	46cc      	mov	ip, r9
 80049e4:	4680      	mov	r8, r0
 80049e6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80049ea:	458c      	cmp	ip, r1
 80049ec:	d107      	bne.n	80049fe <_malloc_r+0x10e>
 80049ee:	e173      	b.n	8004cd8 <_malloc_r+0x3e8>
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	f280 8181 	bge.w	8004cf8 <_malloc_r+0x408>
 80049f6:	68c9      	ldr	r1, [r1, #12]
 80049f8:	458c      	cmp	ip, r1
 80049fa:	f000 816d 	beq.w	8004cd8 <_malloc_r+0x3e8>
 80049fe:	684b      	ldr	r3, [r1, #4]
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	1b5a      	subs	r2, r3, r5
 8004a06:	2a0f      	cmp	r2, #15
 8004a08:	ddf2      	ble.n	80049f0 <_malloc_r+0x100>
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004a10:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004a14:	194b      	adds	r3, r1, r5
 8004a16:	f045 0501 	orr.w	r5, r5, #1
 8004a1a:	604d      	str	r5, [r1, #4]
 8004a1c:	f042 0101 	orr.w	r1, r2, #1
 8004a20:	f8c8 c00c 	str.w	ip, [r8, #12]
 8004a24:	4630      	mov	r0, r6
 8004a26:	f8cc 8008 	str.w	r8, [ip, #8]
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004a32:	f8c3 e008 	str.w	lr, [r3, #8]
 8004a36:	6059      	str	r1, [r3, #4]
 8004a38:	509a      	str	r2, [r3, r2]
 8004a3a:	f000 fa7b 	bl	8004f34 <__malloc_unlock>
 8004a3e:	e01f      	b.n	8004a80 <_malloc_r+0x190>
 8004a40:	2910      	cmp	r1, #16
 8004a42:	d821      	bhi.n	8004a88 <_malloc_r+0x198>
 8004a44:	f000 fa74 	bl	8004f30 <__malloc_lock>
 8004a48:	2510      	movs	r5, #16
 8004a4a:	2306      	movs	r3, #6
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	4f7e      	ldr	r7, [pc, #504]	; (8004c48 <_malloc_r+0x358>)
 8004a50:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004a54:	f1a3 0208 	sub.w	r2, r3, #8
 8004a58:	685c      	ldr	r4, [r3, #4]
 8004a5a:	4294      	cmp	r4, r2
 8004a5c:	f000 8145 	beq.w	8004cea <_malloc_r+0x3fa>
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	68e1      	ldr	r1, [r4, #12]
 8004a64:	68a5      	ldr	r5, [r4, #8]
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	4423      	add	r3, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	60e9      	str	r1, [r5, #12]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	608d      	str	r5, [r1, #8]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	f000 fa5b 	bl	8004f34 <__malloc_unlock>
 8004a7e:	3408      	adds	r4, #8
 8004a80:	4620      	mov	r0, r4
 8004a82:	b003      	add	sp, #12
 8004a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a88:	2400      	movs	r4, #0
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	b003      	add	sp, #12
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a96:	2380      	movs	r3, #128	; 0x80
 8004a98:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8004a9c:	203f      	movs	r0, #63	; 0x3f
 8004a9e:	e749      	b.n	8004934 <_malloc_r+0x44>
 8004aa0:	4670      	mov	r0, lr
 8004aa2:	e75d      	b.n	8004960 <_malloc_r+0x70>
 8004aa4:	4423      	add	r3, r4
 8004aa6:	68e1      	ldr	r1, [r4, #12]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	68a5      	ldr	r5, [r4, #8]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	60e9      	str	r1, [r5, #12]
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	608d      	str	r5, [r1, #8]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	f000 fa3c 	bl	8004f34 <__malloc_unlock>
 8004abc:	3408      	adds	r4, #8
 8004abe:	4620      	mov	r0, r4
 8004ac0:	b003      	add	sp, #12
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac6:	4423      	add	r3, r4
 8004ac8:	4630      	mov	r0, r6
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	f000 fa2f 	bl	8004f34 <__malloc_unlock>
 8004ad6:	3408      	adds	r4, #8
 8004ad8:	4620      	mov	r0, r4
 8004ada:	b003      	add	sp, #12
 8004adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae0:	68bc      	ldr	r4, [r7, #8]
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	f023 0803 	bic.w	r8, r3, #3
 8004ae8:	45a8      	cmp	r8, r5
 8004aea:	d304      	bcc.n	8004af6 <_malloc_r+0x206>
 8004aec:	ebc5 0308 	rsb	r3, r5, r8
 8004af0:	2b0f      	cmp	r3, #15
 8004af2:	f300 808c 	bgt.w	8004c0e <_malloc_r+0x31e>
 8004af6:	4b55      	ldr	r3, [pc, #340]	; (8004c4c <_malloc_r+0x35c>)
 8004af8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8004c5c <_malloc_r+0x36c>
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f8d9 3000 	ldr.w	r3, [r9]
 8004b02:	3301      	adds	r3, #1
 8004b04:	442a      	add	r2, r5
 8004b06:	eb04 0a08 	add.w	sl, r4, r8
 8004b0a:	f000 8160 	beq.w	8004dce <_malloc_r+0x4de>
 8004b0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b12:	320f      	adds	r2, #15
 8004b14:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004b18:	f022 020f 	bic.w	r2, r2, #15
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	4630      	mov	r0, r6
 8004b20:	9201      	str	r2, [sp, #4]
 8004b22:	f000 fd19 	bl	8005558 <_sbrk_r>
 8004b26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b2a:	4683      	mov	fp, r0
 8004b2c:	9a01      	ldr	r2, [sp, #4]
 8004b2e:	f000 8158 	beq.w	8004de2 <_malloc_r+0x4f2>
 8004b32:	4582      	cmp	sl, r0
 8004b34:	f200 80fc 	bhi.w	8004d30 <_malloc_r+0x440>
 8004b38:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <_malloc_r+0x360>)
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	45da      	cmp	sl, fp
 8004b3e:	4411      	add	r1, r2
 8004b40:	6019      	str	r1, [r3, #0]
 8004b42:	f000 8153 	beq.w	8004dec <_malloc_r+0x4fc>
 8004b46:	f8d9 0000 	ldr.w	r0, [r9]
 8004b4a:	f8df e110 	ldr.w	lr, [pc, #272]	; 8004c5c <_malloc_r+0x36c>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	bf1b      	ittet	ne
 8004b52:	ebca 0a0b 	rsbne	sl, sl, fp
 8004b56:	4451      	addne	r1, sl
 8004b58:	f8ce b000 	streq.w	fp, [lr]
 8004b5c:	6019      	strne	r1, [r3, #0]
 8004b5e:	f01b 0107 	ands.w	r1, fp, #7
 8004b62:	f000 8117 	beq.w	8004d94 <_malloc_r+0x4a4>
 8004b66:	f1c1 0008 	rsb	r0, r1, #8
 8004b6a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8004b6e:	4483      	add	fp, r0
 8004b70:	3108      	adds	r1, #8
 8004b72:	445a      	add	r2, fp
 8004b74:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004b78:	ebc2 0901 	rsb	r9, r2, r1
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	4630      	mov	r0, r6
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	f000 fce9 	bl	8005558 <_sbrk_r>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	9b01      	ldr	r3, [sp, #4]
 8004b8a:	f000 813f 	beq.w	8004e0c <_malloc_r+0x51c>
 8004b8e:	ebcb 0200 	rsb	r2, fp, r0
 8004b92:	444a      	add	r2, r9
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	f8c7 b008 	str.w	fp, [r7, #8]
 8004b9e:	4449      	add	r1, r9
 8004ba0:	42bc      	cmp	r4, r7
 8004ba2:	f8cb 2004 	str.w	r2, [fp, #4]
 8004ba6:	6019      	str	r1, [r3, #0]
 8004ba8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004c50 <_malloc_r+0x360>
 8004bac:	d016      	beq.n	8004bdc <_malloc_r+0x2ec>
 8004bae:	f1b8 0f0f 	cmp.w	r8, #15
 8004bb2:	f240 80fd 	bls.w	8004db0 <_malloc_r+0x4c0>
 8004bb6:	6862      	ldr	r2, [r4, #4]
 8004bb8:	f1a8 030c 	sub.w	r3, r8, #12
 8004bbc:	f023 0307 	bic.w	r3, r3, #7
 8004bc0:	18e0      	adds	r0, r4, r3
 8004bc2:	f002 0201 	and.w	r2, r2, #1
 8004bc6:	f04f 0e05 	mov.w	lr, #5
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	6062      	str	r2, [r4, #4]
 8004bd0:	f8c0 e004 	str.w	lr, [r0, #4]
 8004bd4:	f8c0 e008 	str.w	lr, [r0, #8]
 8004bd8:	f200 811c 	bhi.w	8004e14 <_malloc_r+0x524>
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <_malloc_r+0x364>)
 8004bde:	68bc      	ldr	r4, [r7, #8]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4291      	cmp	r1, r2
 8004be4:	bf88      	it	hi
 8004be6:	6019      	strhi	r1, [r3, #0]
 8004be8:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <_malloc_r+0x368>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4291      	cmp	r1, r2
 8004bee:	6862      	ldr	r2, [r4, #4]
 8004bf0:	bf88      	it	hi
 8004bf2:	6019      	strhi	r1, [r3, #0]
 8004bf4:	f022 0203 	bic.w	r2, r2, #3
 8004bf8:	4295      	cmp	r5, r2
 8004bfa:	eba2 0305 	sub.w	r3, r2, r5
 8004bfe:	d801      	bhi.n	8004c04 <_malloc_r+0x314>
 8004c00:	2b0f      	cmp	r3, #15
 8004c02:	dc04      	bgt.n	8004c0e <_malloc_r+0x31e>
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 f995 	bl	8004f34 <__malloc_unlock>
 8004c0a:	2400      	movs	r4, #0
 8004c0c:	e738      	b.n	8004a80 <_malloc_r+0x190>
 8004c0e:	1962      	adds	r2, r4, r5
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	f045 0501 	orr.w	r5, r5, #1
 8004c18:	6065      	str	r5, [r4, #4]
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	60ba      	str	r2, [r7, #8]
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	f000 f988 	bl	8004f34 <__malloc_unlock>
 8004c24:	3408      	adds	r4, #8
 8004c26:	4620      	mov	r0, r4
 8004c28:	b003      	add	sp, #12
 8004c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2e:	2b14      	cmp	r3, #20
 8004c30:	d971      	bls.n	8004d16 <_malloc_r+0x426>
 8004c32:	2b54      	cmp	r3, #84	; 0x54
 8004c34:	f200 80a4 	bhi.w	8004d80 <_malloc_r+0x490>
 8004c38:	0b28      	lsrs	r0, r5, #12
 8004c3a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8004c3e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004c42:	306e      	adds	r0, #110	; 0x6e
 8004c44:	e676      	b.n	8004934 <_malloc_r+0x44>
 8004c46:	bf00      	nop
 8004c48:	200005b8 	.word	0x200005b8
 8004c4c:	20000a2c 	.word	0x20000a2c
 8004c50:	20000a30 	.word	0x20000a30
 8004c54:	20000a28 	.word	0x20000a28
 8004c58:	20000a24 	.word	0x20000a24
 8004c5c:	200009c4 	.word	0x200009c4
 8004c60:	0a5a      	lsrs	r2, r3, #9
 8004c62:	2a04      	cmp	r2, #4
 8004c64:	d95e      	bls.n	8004d24 <_malloc_r+0x434>
 8004c66:	2a14      	cmp	r2, #20
 8004c68:	f200 80b3 	bhi.w	8004dd2 <_malloc_r+0x4e2>
 8004c6c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8004c70:	0049      	lsls	r1, r1, #1
 8004c72:	325b      	adds	r2, #91	; 0x5b
 8004c74:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8004c78:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8004c7c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8004e5c <_malloc_r+0x56c>
 8004c80:	f1ac 0c08 	sub.w	ip, ip, #8
 8004c84:	458c      	cmp	ip, r1
 8004c86:	f000 8088 	beq.w	8004d9a <_malloc_r+0x4aa>
 8004c8a:	684a      	ldr	r2, [r1, #4]
 8004c8c:	f022 0203 	bic.w	r2, r2, #3
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d202      	bcs.n	8004c9a <_malloc_r+0x3aa>
 8004c94:	6889      	ldr	r1, [r1, #8]
 8004c96:	458c      	cmp	ip, r1
 8004c98:	d1f7      	bne.n	8004c8a <_malloc_r+0x39a>
 8004c9a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	f8c4 c00c 	str.w	ip, [r4, #12]
 8004ca4:	60a1      	str	r1, [r4, #8]
 8004ca6:	f8cc 4008 	str.w	r4, [ip, #8]
 8004caa:	60cc      	str	r4, [r1, #12]
 8004cac:	e688      	b.n	80049c0 <_malloc_r+0xd0>
 8004cae:	1963      	adds	r3, r4, r5
 8004cb0:	f042 0701 	orr.w	r7, r2, #1
 8004cb4:	f045 0501 	orr.w	r5, r5, #1
 8004cb8:	6065      	str	r5, [r4, #4]
 8004cba:	4630      	mov	r0, r6
 8004cbc:	614b      	str	r3, [r1, #20]
 8004cbe:	610b      	str	r3, [r1, #16]
 8004cc0:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004cc4:	f8c3 e008 	str.w	lr, [r3, #8]
 8004cc8:	605f      	str	r7, [r3, #4]
 8004cca:	509a      	str	r2, [r3, r2]
 8004ccc:	3408      	adds	r4, #8
 8004cce:	f000 f931 	bl	8004f34 <__malloc_unlock>
 8004cd2:	e6d5      	b.n	8004a80 <_malloc_r+0x190>
 8004cd4:	684a      	ldr	r2, [r1, #4]
 8004cd6:	e673      	b.n	80049c0 <_malloc_r+0xd0>
 8004cd8:	f108 0801 	add.w	r8, r8, #1
 8004cdc:	f018 0f03 	tst.w	r8, #3
 8004ce0:	f10c 0c08 	add.w	ip, ip, #8
 8004ce4:	f47f ae7f 	bne.w	80049e6 <_malloc_r+0xf6>
 8004ce8:	e030      	b.n	8004d4c <_malloc_r+0x45c>
 8004cea:	68dc      	ldr	r4, [r3, #12]
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	bf08      	it	eq
 8004cf0:	3002      	addeq	r0, #2
 8004cf2:	f43f ae35 	beq.w	8004960 <_malloc_r+0x70>
 8004cf6:	e6b3      	b.n	8004a60 <_malloc_r+0x170>
 8004cf8:	440b      	add	r3, r1
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68c9      	ldr	r1, [r1, #12]
 8004d00:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	60e9      	str	r1, [r5, #12]
 8004d0e:	608d      	str	r5, [r1, #8]
 8004d10:	f000 f910 	bl	8004f34 <__malloc_unlock>
 8004d14:	e6b4      	b.n	8004a80 <_malloc_r+0x190>
 8004d16:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8004d1a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8004d1e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004d22:	e607      	b.n	8004934 <_malloc_r+0x44>
 8004d24:	099a      	lsrs	r2, r3, #6
 8004d26:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8004d2a:	0049      	lsls	r1, r1, #1
 8004d2c:	3238      	adds	r2, #56	; 0x38
 8004d2e:	e7a1      	b.n	8004c74 <_malloc_r+0x384>
 8004d30:	42bc      	cmp	r4, r7
 8004d32:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <_malloc_r+0x56c>)
 8004d34:	f43f af00 	beq.w	8004b38 <_malloc_r+0x248>
 8004d38:	689c      	ldr	r4, [r3, #8]
 8004d3a:	6862      	ldr	r2, [r4, #4]
 8004d3c:	f022 0203 	bic.w	r2, r2, #3
 8004d40:	e75a      	b.n	8004bf8 <_malloc_r+0x308>
 8004d42:	f859 3908 	ldr.w	r3, [r9], #-8
 8004d46:	4599      	cmp	r9, r3
 8004d48:	f040 8082 	bne.w	8004e50 <_malloc_r+0x560>
 8004d4c:	f010 0f03 	tst.w	r0, #3
 8004d50:	f100 30ff 	add.w	r0, r0, #4294967295
 8004d54:	d1f5      	bne.n	8004d42 <_malloc_r+0x452>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	ea23 0304 	bic.w	r3, r3, r4
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	0064      	lsls	r4, r4, #1
 8004d60:	429c      	cmp	r4, r3
 8004d62:	f63f aebd 	bhi.w	8004ae0 <_malloc_r+0x1f0>
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	f43f aeba 	beq.w	8004ae0 <_malloc_r+0x1f0>
 8004d6c:	421c      	tst	r4, r3
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f47f ae35 	bne.w	80049de <_malloc_r+0xee>
 8004d74:	0064      	lsls	r4, r4, #1
 8004d76:	421c      	tst	r4, r3
 8004d78:	f100 0004 	add.w	r0, r0, #4
 8004d7c:	d0fa      	beq.n	8004d74 <_malloc_r+0x484>
 8004d7e:	e62e      	b.n	80049de <_malloc_r+0xee>
 8004d80:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004d84:	d818      	bhi.n	8004db8 <_malloc_r+0x4c8>
 8004d86:	0be8      	lsrs	r0, r5, #15
 8004d88:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8004d8c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004d90:	3077      	adds	r0, #119	; 0x77
 8004d92:	e5cf      	b.n	8004934 <_malloc_r+0x44>
 8004d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d98:	e6eb      	b.n	8004b72 <_malloc_r+0x282>
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004da0:	1092      	asrs	r2, r2, #2
 8004da2:	fa01 f202 	lsl.w	r2, r1, r2
 8004da6:	431a      	orrs	r2, r3
 8004da8:	f8c8 2004 	str.w	r2, [r8, #4]
 8004dac:	4661      	mov	r1, ip
 8004dae:	e777      	b.n	8004ca0 <_malloc_r+0x3b0>
 8004db0:	2301      	movs	r3, #1
 8004db2:	f8cb 3004 	str.w	r3, [fp, #4]
 8004db6:	e725      	b.n	8004c04 <_malloc_r+0x314>
 8004db8:	f240 5254 	movw	r2, #1364	; 0x554
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d820      	bhi.n	8004e02 <_malloc_r+0x512>
 8004dc0:	0ca8      	lsrs	r0, r5, #18
 8004dc2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8004dc6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8004dca:	307c      	adds	r0, #124	; 0x7c
 8004dcc:	e5b2      	b.n	8004934 <_malloc_r+0x44>
 8004dce:	3210      	adds	r2, #16
 8004dd0:	e6a4      	b.n	8004b1c <_malloc_r+0x22c>
 8004dd2:	2a54      	cmp	r2, #84	; 0x54
 8004dd4:	d826      	bhi.n	8004e24 <_malloc_r+0x534>
 8004dd6:	0b1a      	lsrs	r2, r3, #12
 8004dd8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004ddc:	0049      	lsls	r1, r1, #1
 8004dde:	326e      	adds	r2, #110	; 0x6e
 8004de0:	e748      	b.n	8004c74 <_malloc_r+0x384>
 8004de2:	68bc      	ldr	r4, [r7, #8]
 8004de4:	6862      	ldr	r2, [r4, #4]
 8004de6:	f022 0203 	bic.w	r2, r2, #3
 8004dea:	e705      	b.n	8004bf8 <_malloc_r+0x308>
 8004dec:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8004df0:	2800      	cmp	r0, #0
 8004df2:	f47f aea8 	bne.w	8004b46 <_malloc_r+0x256>
 8004df6:	4442      	add	r2, r8
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e6ec      	b.n	8004bdc <_malloc_r+0x2ec>
 8004e02:	23fe      	movs	r3, #254	; 0xfe
 8004e04:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8004e08:	207e      	movs	r0, #126	; 0x7e
 8004e0a:	e593      	b.n	8004934 <_malloc_r+0x44>
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f04f 0900 	mov.w	r9, #0
 8004e12:	e6c1      	b.n	8004b98 <_malloc_r+0x2a8>
 8004e14:	f104 0108 	add.w	r1, r4, #8
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7ff fbc3 	bl	80045a4 <_free_r>
 8004e1e:	f8d9 1000 	ldr.w	r1, [r9]
 8004e22:	e6db      	b.n	8004bdc <_malloc_r+0x2ec>
 8004e24:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004e28:	d805      	bhi.n	8004e36 <_malloc_r+0x546>
 8004e2a:	0bda      	lsrs	r2, r3, #15
 8004e2c:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8004e30:	0049      	lsls	r1, r1, #1
 8004e32:	3277      	adds	r2, #119	; 0x77
 8004e34:	e71e      	b.n	8004c74 <_malloc_r+0x384>
 8004e36:	f240 5154 	movw	r1, #1364	; 0x554
 8004e3a:	428a      	cmp	r2, r1
 8004e3c:	d805      	bhi.n	8004e4a <_malloc_r+0x55a>
 8004e3e:	0c9a      	lsrs	r2, r3, #18
 8004e40:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8004e44:	0049      	lsls	r1, r1, #1
 8004e46:	327c      	adds	r2, #124	; 0x7c
 8004e48:	e714      	b.n	8004c74 <_malloc_r+0x384>
 8004e4a:	21fe      	movs	r1, #254	; 0xfe
 8004e4c:	227e      	movs	r2, #126	; 0x7e
 8004e4e:	e711      	b.n	8004c74 <_malloc_r+0x384>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	e784      	b.n	8004d5e <_malloc_r+0x46e>
 8004e54:	08e8      	lsrs	r0, r5, #3
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	e5f8      	b.n	8004a4e <_malloc_r+0x15e>
 8004e5c:	200005b8 	.word	0x200005b8

08004e60 <__ascii_mbtowc>:
 8004e60:	b082      	sub	sp, #8
 8004e62:	b149      	cbz	r1, 8004e78 <__ascii_mbtowc+0x18>
 8004e64:	b15a      	cbz	r2, 8004e7e <__ascii_mbtowc+0x1e>
 8004e66:	b16b      	cbz	r3, 8004e84 <__ascii_mbtowc+0x24>
 8004e68:	7813      	ldrb	r3, [r2, #0]
 8004e6a:	600b      	str	r3, [r1, #0]
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	1c10      	adds	r0, r2, #0
 8004e70:	bf18      	it	ne
 8004e72:	2001      	movne	r0, #1
 8004e74:	b002      	add	sp, #8
 8004e76:	4770      	bx	lr
 8004e78:	a901      	add	r1, sp, #4
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	d1f3      	bne.n	8004e66 <__ascii_mbtowc+0x6>
 8004e7e:	4610      	mov	r0, r2
 8004e80:	b002      	add	sp, #8
 8004e82:	4770      	bx	lr
 8004e84:	f06f 0001 	mvn.w	r0, #1
 8004e88:	e7f4      	b.n	8004e74 <__ascii_mbtowc+0x14>
 8004e8a:	bf00      	nop
 8004e8c:	0000      	movs	r0, r0
	...

08004e90 <memchr>:
 8004e90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004e94:	2a10      	cmp	r2, #16
 8004e96:	db2b      	blt.n	8004ef0 <memchr+0x60>
 8004e98:	f010 0f07 	tst.w	r0, #7
 8004e9c:	d008      	beq.n	8004eb0 <memchr+0x20>
 8004e9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004ea2:	3a01      	subs	r2, #1
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	d02d      	beq.n	8004f04 <memchr+0x74>
 8004ea8:	f010 0f07 	tst.w	r0, #7
 8004eac:	b342      	cbz	r2, 8004f00 <memchr+0x70>
 8004eae:	d1f6      	bne.n	8004e9e <memchr+0xe>
 8004eb0:	b4f0      	push	{r4, r5, r6, r7}
 8004eb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004eb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8004eba:	f022 0407 	bic.w	r4, r2, #7
 8004ebe:	f07f 0700 	mvns.w	r7, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004ec8:	3c08      	subs	r4, #8
 8004eca:	ea85 0501 	eor.w	r5, r5, r1
 8004ece:	ea86 0601 	eor.w	r6, r6, r1
 8004ed2:	fa85 f547 	uadd8	r5, r5, r7
 8004ed6:	faa3 f587 	sel	r5, r3, r7
 8004eda:	fa86 f647 	uadd8	r6, r6, r7
 8004ede:	faa5 f687 	sel	r6, r5, r7
 8004ee2:	b98e      	cbnz	r6, 8004f08 <memchr+0x78>
 8004ee4:	d1ee      	bne.n	8004ec4 <memchr+0x34>
 8004ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ee8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004eec:	f002 0207 	and.w	r2, r2, #7
 8004ef0:	b132      	cbz	r2, 8004f00 <memchr+0x70>
 8004ef2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	ea83 0301 	eor.w	r3, r3, r1
 8004efc:	b113      	cbz	r3, 8004f04 <memchr+0x74>
 8004efe:	d1f8      	bne.n	8004ef2 <memchr+0x62>
 8004f00:	2000      	movs	r0, #0
 8004f02:	4770      	bx	lr
 8004f04:	3801      	subs	r0, #1
 8004f06:	4770      	bx	lr
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	bf06      	itte	eq
 8004f0c:	4635      	moveq	r5, r6
 8004f0e:	3803      	subeq	r0, #3
 8004f10:	3807      	subne	r0, #7
 8004f12:	f015 0f01 	tst.w	r5, #1
 8004f16:	d107      	bne.n	8004f28 <memchr+0x98>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004f1e:	bf02      	ittt	eq
 8004f20:	3001      	addeq	r0, #1
 8004f22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004f26:	3001      	addeq	r0, #1
 8004f28:	bcf0      	pop	{r4, r5, r6, r7}
 8004f2a:	3801      	subs	r0, #1
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop

08004f30 <__malloc_lock>:
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <__malloc_unlock>:
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <_Balloc>:
 8004f38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004f3a:	b570      	push	{r4, r5, r6, lr}
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	b14b      	cbz	r3, 8004f56 <_Balloc+0x1e>
 8004f42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f46:	b180      	cbz	r0, 8004f6a <_Balloc+0x32>
 8004f48:	6802      	ldr	r2, [r0, #0]
 8004f4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6103      	str	r3, [r0, #16]
 8004f52:	60c3      	str	r3, [r0, #12]
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	2221      	movs	r2, #33	; 0x21
 8004f58:	2104      	movs	r1, #4
 8004f5a:	f000 fbbd 	bl	80056d8 <_calloc_r>
 8004f5e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8004f60:	4603      	mov	r3, r0
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d1ed      	bne.n	8004f42 <_Balloc+0xa>
 8004f66:	2000      	movs	r0, #0
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	fa01 f604 	lsl.w	r6, r1, r4
 8004f70:	1d72      	adds	r2, r6, #5
 8004f72:	4628      	mov	r0, r5
 8004f74:	0092      	lsls	r2, r2, #2
 8004f76:	f000 fbaf 	bl	80056d8 <_calloc_r>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d0f3      	beq.n	8004f66 <_Balloc+0x2e>
 8004f7e:	6044      	str	r4, [r0, #4]
 8004f80:	6086      	str	r6, [r0, #8]
 8004f82:	e7e4      	b.n	8004f4e <_Balloc+0x16>

08004f84 <_Bfree>:
 8004f84:	b131      	cbz	r1, 8004f94 <_Bfree+0x10>
 8004f86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004f88:	684a      	ldr	r2, [r1, #4]
 8004f8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004f8e:	6008      	str	r0, [r1, #0]
 8004f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <__multadd>:
 8004f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f9a:	690c      	ldr	r4, [r1, #16]
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	460d      	mov	r5, r1
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	f101 0e14 	add.w	lr, r1, #20
 8004fa6:	2700      	movs	r7, #0
 8004fa8:	f8de 0000 	ldr.w	r0, [lr]
 8004fac:	b281      	uxth	r1, r0
 8004fae:	fb02 3101 	mla	r1, r2, r1, r3
 8004fb2:	0c0b      	lsrs	r3, r1, #16
 8004fb4:	0c00      	lsrs	r0, r0, #16
 8004fb6:	fb02 3300 	mla	r3, r2, r0, r3
 8004fba:	b289      	uxth	r1, r1
 8004fbc:	3701      	adds	r7, #1
 8004fbe:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fc2:	42bc      	cmp	r4, r7
 8004fc4:	f84e 1b04 	str.w	r1, [lr], #4
 8004fc8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004fcc:	dcec      	bgt.n	8004fa8 <__multadd+0x10>
 8004fce:	b13b      	cbz	r3, 8004fe0 <__multadd+0x48>
 8004fd0:	68aa      	ldr	r2, [r5, #8]
 8004fd2:	4294      	cmp	r4, r2
 8004fd4:	da07      	bge.n	8004fe6 <__multadd+0x4e>
 8004fd6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004fda:	3401      	adds	r4, #1
 8004fdc:	6153      	str	r3, [r2, #20]
 8004fde:	612c      	str	r4, [r5, #16]
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	6869      	ldr	r1, [r5, #4]
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	3101      	adds	r1, #1
 8004fec:	4630      	mov	r0, r6
 8004fee:	f7ff ffa3 	bl	8004f38 <_Balloc>
 8004ff2:	692a      	ldr	r2, [r5, #16]
 8004ff4:	3202      	adds	r2, #2
 8004ff6:	f105 010c 	add.w	r1, r5, #12
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	0092      	lsls	r2, r2, #2
 8004ffe:	300c      	adds	r0, #12
 8005000:	f7fc fb3e 	bl	8001680 <memcpy>
 8005004:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005006:	6869      	ldr	r1, [r5, #4]
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800500e:	6028      	str	r0, [r5, #0]
 8005010:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005014:	463d      	mov	r5, r7
 8005016:	e7de      	b.n	8004fd6 <__multadd+0x3e>

08005018 <__hi0bits>:
 8005018:	0c03      	lsrs	r3, r0, #16
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	b9b3      	cbnz	r3, 800504c <__hi0bits+0x34>
 800501e:	0400      	lsls	r0, r0, #16
 8005020:	2310      	movs	r3, #16
 8005022:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005026:	bf04      	itt	eq
 8005028:	0200      	lsleq	r0, r0, #8
 800502a:	3308      	addeq	r3, #8
 800502c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005030:	bf04      	itt	eq
 8005032:	0100      	lsleq	r0, r0, #4
 8005034:	3304      	addeq	r3, #4
 8005036:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800503a:	bf04      	itt	eq
 800503c:	0080      	lsleq	r0, r0, #2
 800503e:	3302      	addeq	r3, #2
 8005040:	2800      	cmp	r0, #0
 8005042:	db07      	blt.n	8005054 <__hi0bits+0x3c>
 8005044:	0042      	lsls	r2, r0, #1
 8005046:	d403      	bmi.n	8005050 <__hi0bits+0x38>
 8005048:	2020      	movs	r0, #32
 800504a:	4770      	bx	lr
 800504c:	2300      	movs	r3, #0
 800504e:	e7e8      	b.n	8005022 <__hi0bits+0xa>
 8005050:	1c58      	adds	r0, r3, #1
 8005052:	4770      	bx	lr
 8005054:	4618      	mov	r0, r3
 8005056:	4770      	bx	lr

08005058 <__lo0bits>:
 8005058:	6803      	ldr	r3, [r0, #0]
 800505a:	f013 0207 	ands.w	r2, r3, #7
 800505e:	d007      	beq.n	8005070 <__lo0bits+0x18>
 8005060:	07d9      	lsls	r1, r3, #31
 8005062:	d420      	bmi.n	80050a6 <__lo0bits+0x4e>
 8005064:	079a      	lsls	r2, r3, #30
 8005066:	d420      	bmi.n	80050aa <__lo0bits+0x52>
 8005068:	089b      	lsrs	r3, r3, #2
 800506a:	6003      	str	r3, [r0, #0]
 800506c:	2002      	movs	r0, #2
 800506e:	4770      	bx	lr
 8005070:	b299      	uxth	r1, r3
 8005072:	b909      	cbnz	r1, 8005078 <__lo0bits+0x20>
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	2210      	movs	r2, #16
 8005078:	f013 0fff 	tst.w	r3, #255	; 0xff
 800507c:	bf04      	itt	eq
 800507e:	0a1b      	lsreq	r3, r3, #8
 8005080:	3208      	addeq	r2, #8
 8005082:	0719      	lsls	r1, r3, #28
 8005084:	bf04      	itt	eq
 8005086:	091b      	lsreq	r3, r3, #4
 8005088:	3204      	addeq	r2, #4
 800508a:	0799      	lsls	r1, r3, #30
 800508c:	bf04      	itt	eq
 800508e:	089b      	lsreq	r3, r3, #2
 8005090:	3202      	addeq	r2, #2
 8005092:	07d9      	lsls	r1, r3, #31
 8005094:	d404      	bmi.n	80050a0 <__lo0bits+0x48>
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	d101      	bne.n	800509e <__lo0bits+0x46>
 800509a:	2020      	movs	r0, #32
 800509c:	4770      	bx	lr
 800509e:	3201      	adds	r2, #1
 80050a0:	6003      	str	r3, [r0, #0]
 80050a2:	4610      	mov	r0, r2
 80050a4:	4770      	bx	lr
 80050a6:	2000      	movs	r0, #0
 80050a8:	4770      	bx	lr
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	6003      	str	r3, [r0, #0]
 80050ae:	2001      	movs	r0, #1
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <__i2b>:
 80050b4:	b510      	push	{r4, lr}
 80050b6:	460c      	mov	r4, r1
 80050b8:	2101      	movs	r1, #1
 80050ba:	f7ff ff3d 	bl	8004f38 <_Balloc>
 80050be:	2201      	movs	r2, #1
 80050c0:	6144      	str	r4, [r0, #20]
 80050c2:	6102      	str	r2, [r0, #16]
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	bf00      	nop

080050c8 <__multiply>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	690d      	ldr	r5, [r1, #16]
 80050ce:	6917      	ldr	r7, [r2, #16]
 80050d0:	42bd      	cmp	r5, r7
 80050d2:	b083      	sub	sp, #12
 80050d4:	460c      	mov	r4, r1
 80050d6:	4616      	mov	r6, r2
 80050d8:	da04      	bge.n	80050e4 <__multiply+0x1c>
 80050da:	462a      	mov	r2, r5
 80050dc:	4634      	mov	r4, r6
 80050de:	463d      	mov	r5, r7
 80050e0:	460e      	mov	r6, r1
 80050e2:	4617      	mov	r7, r2
 80050e4:	68a3      	ldr	r3, [r4, #8]
 80050e6:	6861      	ldr	r1, [r4, #4]
 80050e8:	eb05 0807 	add.w	r8, r5, r7
 80050ec:	4598      	cmp	r8, r3
 80050ee:	bfc8      	it	gt
 80050f0:	3101      	addgt	r1, #1
 80050f2:	f7ff ff21 	bl	8004f38 <_Balloc>
 80050f6:	f100 0c14 	add.w	ip, r0, #20
 80050fa:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80050fe:	45cc      	cmp	ip, r9
 8005100:	9000      	str	r0, [sp, #0]
 8005102:	d205      	bcs.n	8005110 <__multiply+0x48>
 8005104:	4663      	mov	r3, ip
 8005106:	2100      	movs	r1, #0
 8005108:	f843 1b04 	str.w	r1, [r3], #4
 800510c:	4599      	cmp	r9, r3
 800510e:	d8fb      	bhi.n	8005108 <__multiply+0x40>
 8005110:	f106 0214 	add.w	r2, r6, #20
 8005114:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8005118:	f104 0314 	add.w	r3, r4, #20
 800511c:	4552      	cmp	r2, sl
 800511e:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8005122:	d254      	bcs.n	80051ce <__multiply+0x106>
 8005124:	f8cd 9004 	str.w	r9, [sp, #4]
 8005128:	4699      	mov	r9, r3
 800512a:	f852 3b04 	ldr.w	r3, [r2], #4
 800512e:	fa1f fb83 	uxth.w	fp, r3
 8005132:	f1bb 0f00 	cmp.w	fp, #0
 8005136:	d020      	beq.n	800517a <__multiply+0xb2>
 8005138:	2000      	movs	r0, #0
 800513a:	464f      	mov	r7, r9
 800513c:	4666      	mov	r6, ip
 800513e:	4605      	mov	r5, r0
 8005140:	e000      	b.n	8005144 <__multiply+0x7c>
 8005142:	461e      	mov	r6, r3
 8005144:	f857 4b04 	ldr.w	r4, [r7], #4
 8005148:	6830      	ldr	r0, [r6, #0]
 800514a:	b2a1      	uxth	r1, r4
 800514c:	b283      	uxth	r3, r0
 800514e:	fb0b 3101 	mla	r1, fp, r1, r3
 8005152:	0c24      	lsrs	r4, r4, #16
 8005154:	0c00      	lsrs	r0, r0, #16
 8005156:	194b      	adds	r3, r1, r5
 8005158:	fb0b 0004 	mla	r0, fp, r4, r0
 800515c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005160:	b299      	uxth	r1, r3
 8005162:	4633      	mov	r3, r6
 8005164:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005168:	45be      	cmp	lr, r7
 800516a:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800516e:	f843 1b04 	str.w	r1, [r3], #4
 8005172:	d8e6      	bhi.n	8005142 <__multiply+0x7a>
 8005174:	6075      	str	r5, [r6, #4]
 8005176:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800517a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800517e:	d020      	beq.n	80051c2 <__multiply+0xfa>
 8005180:	f8dc 3000 	ldr.w	r3, [ip]
 8005184:	4667      	mov	r7, ip
 8005186:	4618      	mov	r0, r3
 8005188:	464d      	mov	r5, r9
 800518a:	2100      	movs	r1, #0
 800518c:	e000      	b.n	8005190 <__multiply+0xc8>
 800518e:	4637      	mov	r7, r6
 8005190:	882c      	ldrh	r4, [r5, #0]
 8005192:	0c00      	lsrs	r0, r0, #16
 8005194:	fb0b 0004 	mla	r0, fp, r4, r0
 8005198:	4401      	add	r1, r0
 800519a:	b29c      	uxth	r4, r3
 800519c:	463e      	mov	r6, r7
 800519e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 80051a2:	f846 3b04 	str.w	r3, [r6], #4
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f855 4b04 	ldr.w	r4, [r5], #4
 80051ac:	b283      	uxth	r3, r0
 80051ae:	0c24      	lsrs	r4, r4, #16
 80051b0:	fb0b 3404 	mla	r4, fp, r4, r3
 80051b4:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 80051b8:	45ae      	cmp	lr, r5
 80051ba:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80051be:	d8e6      	bhi.n	800518e <__multiply+0xc6>
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	4592      	cmp	sl, r2
 80051c4:	f10c 0c04 	add.w	ip, ip, #4
 80051c8:	d8af      	bhi.n	800512a <__multiply+0x62>
 80051ca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80051ce:	f1b8 0f00 	cmp.w	r8, #0
 80051d2:	dd0b      	ble.n	80051ec <__multiply+0x124>
 80051d4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80051d8:	f1a9 0904 	sub.w	r9, r9, #4
 80051dc:	b11b      	cbz	r3, 80051e6 <__multiply+0x11e>
 80051de:	e005      	b.n	80051ec <__multiply+0x124>
 80051e0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80051e4:	b913      	cbnz	r3, 80051ec <__multiply+0x124>
 80051e6:	f1b8 0801 	subs.w	r8, r8, #1
 80051ea:	d1f9      	bne.n	80051e0 <__multiply+0x118>
 80051ec:	9800      	ldr	r0, [sp, #0]
 80051ee:	f8c0 8010 	str.w	r8, [r0, #16]
 80051f2:	b003      	add	sp, #12
 80051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051f8 <__pow5mult>:
 80051f8:	f012 0303 	ands.w	r3, r2, #3
 80051fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005200:	4614      	mov	r4, r2
 8005202:	4607      	mov	r7, r0
 8005204:	d12e      	bne.n	8005264 <__pow5mult+0x6c>
 8005206:	460e      	mov	r6, r1
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	d01c      	beq.n	8005246 <__pow5mult+0x4e>
 800520c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800520e:	b395      	cbz	r5, 8005276 <__pow5mult+0x7e>
 8005210:	07e3      	lsls	r3, r4, #31
 8005212:	f04f 0800 	mov.w	r8, #0
 8005216:	d406      	bmi.n	8005226 <__pow5mult+0x2e>
 8005218:	1064      	asrs	r4, r4, #1
 800521a:	d014      	beq.n	8005246 <__pow5mult+0x4e>
 800521c:	6828      	ldr	r0, [r5, #0]
 800521e:	b1a8      	cbz	r0, 800524c <__pow5mult+0x54>
 8005220:	4605      	mov	r5, r0
 8005222:	07e3      	lsls	r3, r4, #31
 8005224:	d5f8      	bpl.n	8005218 <__pow5mult+0x20>
 8005226:	462a      	mov	r2, r5
 8005228:	4631      	mov	r1, r6
 800522a:	4638      	mov	r0, r7
 800522c:	f7ff ff4c 	bl	80050c8 <__multiply>
 8005230:	b1b6      	cbz	r6, 8005260 <__pow5mult+0x68>
 8005232:	6872      	ldr	r2, [r6, #4]
 8005234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005236:	1064      	asrs	r4, r4, #1
 8005238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800523c:	6031      	str	r1, [r6, #0]
 800523e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005242:	4606      	mov	r6, r0
 8005244:	d1ea      	bne.n	800521c <__pow5mult+0x24>
 8005246:	4630      	mov	r0, r6
 8005248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800524c:	462a      	mov	r2, r5
 800524e:	4629      	mov	r1, r5
 8005250:	4638      	mov	r0, r7
 8005252:	f7ff ff39 	bl	80050c8 <__multiply>
 8005256:	6028      	str	r0, [r5, #0]
 8005258:	f8c0 8000 	str.w	r8, [r0]
 800525c:	4605      	mov	r5, r0
 800525e:	e7e0      	b.n	8005222 <__pow5mult+0x2a>
 8005260:	4606      	mov	r6, r0
 8005262:	e7d9      	b.n	8005218 <__pow5mult+0x20>
 8005264:	1e5a      	subs	r2, r3, #1
 8005266:	4d0b      	ldr	r5, [pc, #44]	; (8005294 <__pow5mult+0x9c>)
 8005268:	2300      	movs	r3, #0
 800526a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800526e:	f7ff fe93 	bl	8004f98 <__multadd>
 8005272:	4606      	mov	r6, r0
 8005274:	e7c8      	b.n	8005208 <__pow5mult+0x10>
 8005276:	2101      	movs	r1, #1
 8005278:	4638      	mov	r0, r7
 800527a:	f7ff fe5d 	bl	8004f38 <_Balloc>
 800527e:	f240 2171 	movw	r1, #625	; 0x271
 8005282:	2201      	movs	r2, #1
 8005284:	2300      	movs	r3, #0
 8005286:	6141      	str	r1, [r0, #20]
 8005288:	6102      	str	r2, [r0, #16]
 800528a:	4605      	mov	r5, r0
 800528c:	64b8      	str	r0, [r7, #72]	; 0x48
 800528e:	6003      	str	r3, [r0, #0]
 8005290:	e7be      	b.n	8005210 <__pow5mult+0x18>
 8005292:	bf00      	nop
 8005294:	08006fe0 	.word	0x08006fe0

08005298 <__lshift>:
 8005298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	4691      	mov	r9, r2
 800529e:	690a      	ldr	r2, [r1, #16]
 80052a0:	688b      	ldr	r3, [r1, #8]
 80052a2:	ea4f 1469 	mov.w	r4, r9, asr #5
 80052a6:	eb04 0802 	add.w	r8, r4, r2
 80052aa:	f108 0501 	add.w	r5, r8, #1
 80052ae:	429d      	cmp	r5, r3
 80052b0:	460e      	mov	r6, r1
 80052b2:	4682      	mov	sl, r0
 80052b4:	6849      	ldr	r1, [r1, #4]
 80052b6:	dd04      	ble.n	80052c2 <__lshift+0x2a>
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	429d      	cmp	r5, r3
 80052bc:	f101 0101 	add.w	r1, r1, #1
 80052c0:	dcfa      	bgt.n	80052b8 <__lshift+0x20>
 80052c2:	4650      	mov	r0, sl
 80052c4:	f7ff fe38 	bl	8004f38 <_Balloc>
 80052c8:	2c00      	cmp	r4, #0
 80052ca:	f100 0214 	add.w	r2, r0, #20
 80052ce:	dd38      	ble.n	8005342 <__lshift+0xaa>
 80052d0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 80052d4:	2100      	movs	r1, #0
 80052d6:	f842 1b04 	str.w	r1, [r2], #4
 80052da:	4293      	cmp	r3, r2
 80052dc:	d1fb      	bne.n	80052d6 <__lshift+0x3e>
 80052de:	6934      	ldr	r4, [r6, #16]
 80052e0:	f106 0114 	add.w	r1, r6, #20
 80052e4:	f019 091f 	ands.w	r9, r9, #31
 80052e8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 80052ec:	d021      	beq.n	8005332 <__lshift+0x9a>
 80052ee:	f1c9 0220 	rsb	r2, r9, #32
 80052f2:	2400      	movs	r4, #0
 80052f4:	680f      	ldr	r7, [r1, #0]
 80052f6:	fa07 fc09 	lsl.w	ip, r7, r9
 80052fa:	ea4c 0404 	orr.w	r4, ip, r4
 80052fe:	469c      	mov	ip, r3
 8005300:	f843 4b04 	str.w	r4, [r3], #4
 8005304:	f851 4b04 	ldr.w	r4, [r1], #4
 8005308:	458e      	cmp	lr, r1
 800530a:	fa24 f402 	lsr.w	r4, r4, r2
 800530e:	d8f1      	bhi.n	80052f4 <__lshift+0x5c>
 8005310:	f8cc 4004 	str.w	r4, [ip, #4]
 8005314:	b10c      	cbz	r4, 800531a <__lshift+0x82>
 8005316:	f108 0502 	add.w	r5, r8, #2
 800531a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800531e:	6872      	ldr	r2, [r6, #4]
 8005320:	3d01      	subs	r5, #1
 8005322:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005326:	6105      	str	r5, [r0, #16]
 8005328:	6031      	str	r1, [r6, #0]
 800532a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800532e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005332:	3b04      	subs	r3, #4
 8005334:	f851 2b04 	ldr.w	r2, [r1], #4
 8005338:	f843 2f04 	str.w	r2, [r3, #4]!
 800533c:	458e      	cmp	lr, r1
 800533e:	d8f9      	bhi.n	8005334 <__lshift+0x9c>
 8005340:	e7eb      	b.n	800531a <__lshift+0x82>
 8005342:	4613      	mov	r3, r2
 8005344:	e7cb      	b.n	80052de <__lshift+0x46>
 8005346:	bf00      	nop

08005348 <__mcmp>:
 8005348:	6902      	ldr	r2, [r0, #16]
 800534a:	690b      	ldr	r3, [r1, #16]
 800534c:	1ad2      	subs	r2, r2, r3
 800534e:	d113      	bne.n	8005378 <__mcmp+0x30>
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	3014      	adds	r0, #20
 8005354:	3114      	adds	r1, #20
 8005356:	4419      	add	r1, r3
 8005358:	b410      	push	{r4}
 800535a:	4403      	add	r3, r0
 800535c:	e001      	b.n	8005362 <__mcmp+0x1a>
 800535e:	4298      	cmp	r0, r3
 8005360:	d20c      	bcs.n	800537c <__mcmp+0x34>
 8005362:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005366:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800536a:	4294      	cmp	r4, r2
 800536c:	d0f7      	beq.n	800535e <__mcmp+0x16>
 800536e:	d309      	bcc.n	8005384 <__mcmp+0x3c>
 8005370:	2001      	movs	r0, #1
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	4610      	mov	r0, r2
 800537a:	4770      	bx	lr
 800537c:	2000      	movs	r0, #0
 800537e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	e7f3      	b.n	8005372 <__mcmp+0x2a>
 800538a:	bf00      	nop

0800538c <__mdiff>:
 800538c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005390:	690b      	ldr	r3, [r1, #16]
 8005392:	460f      	mov	r7, r1
 8005394:	6911      	ldr	r1, [r2, #16]
 8005396:	1a5b      	subs	r3, r3, r1
 8005398:	2b00      	cmp	r3, #0
 800539a:	4690      	mov	r8, r2
 800539c:	d117      	bne.n	80053ce <__mdiff+0x42>
 800539e:	0089      	lsls	r1, r1, #2
 80053a0:	f107 0214 	add.w	r2, r7, #20
 80053a4:	f108 0514 	add.w	r5, r8, #20
 80053a8:	1853      	adds	r3, r2, r1
 80053aa:	4429      	add	r1, r5
 80053ac:	e001      	b.n	80053b2 <__mdiff+0x26>
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d25e      	bcs.n	8005470 <__mdiff+0xe4>
 80053b2:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 80053b6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d0f7      	beq.n	80053ae <__mdiff+0x22>
 80053be:	d260      	bcs.n	8005482 <__mdiff+0xf6>
 80053c0:	463b      	mov	r3, r7
 80053c2:	4614      	mov	r4, r2
 80053c4:	4647      	mov	r7, r8
 80053c6:	f04f 0901 	mov.w	r9, #1
 80053ca:	4698      	mov	r8, r3
 80053cc:	e006      	b.n	80053dc <__mdiff+0x50>
 80053ce:	db5d      	blt.n	800548c <__mdiff+0x100>
 80053d0:	f107 0514 	add.w	r5, r7, #20
 80053d4:	f102 0414 	add.w	r4, r2, #20
 80053d8:	f04f 0900 	mov.w	r9, #0
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	f7ff fdab 	bl	8004f38 <_Balloc>
 80053e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80053e6:	693e      	ldr	r6, [r7, #16]
 80053e8:	f8c0 900c 	str.w	r9, [r0, #12]
 80053ec:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80053f0:	46a6      	mov	lr, r4
 80053f2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80053f6:	f100 0414 	add.w	r4, r0, #20
 80053fa:	2300      	movs	r3, #0
 80053fc:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005400:	f855 8b04 	ldr.w	r8, [r5], #4
 8005404:	b28a      	uxth	r2, r1
 8005406:	fa13 f388 	uxtah	r3, r3, r8
 800540a:	0c09      	lsrs	r1, r1, #16
 800540c:	1a9a      	subs	r2, r3, r2
 800540e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8005412:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005416:	b292      	uxth	r2, r2
 8005418:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800541c:	45f4      	cmp	ip, lr
 800541e:	f844 2b04 	str.w	r2, [r4], #4
 8005422:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005426:	d8e9      	bhi.n	80053fc <__mdiff+0x70>
 8005428:	42af      	cmp	r7, r5
 800542a:	d917      	bls.n	800545c <__mdiff+0xd0>
 800542c:	46a4      	mov	ip, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f851 eb04 	ldr.w	lr, [r1], #4
 8005434:	fa13 f28e 	uxtah	r2, r3, lr
 8005438:	1413      	asrs	r3, r2, #16
 800543a:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800543e:	b292      	uxth	r2, r2
 8005440:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005444:	428f      	cmp	r7, r1
 8005446:	f84c 2b04 	str.w	r2, [ip], #4
 800544a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800544e:	d8ef      	bhi.n	8005430 <__mdiff+0xa4>
 8005450:	43ed      	mvns	r5, r5
 8005452:	443d      	add	r5, r7
 8005454:	f025 0503 	bic.w	r5, r5, #3
 8005458:	3504      	adds	r5, #4
 800545a:	442c      	add	r4, r5
 800545c:	3c04      	subs	r4, #4
 800545e:	b922      	cbnz	r2, 800546a <__mdiff+0xde>
 8005460:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8005464:	3e01      	subs	r6, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0fa      	beq.n	8005460 <__mdiff+0xd4>
 800546a:	6106      	str	r6, [r0, #16]
 800546c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005470:	2100      	movs	r1, #0
 8005472:	f7ff fd61 	bl	8004f38 <_Balloc>
 8005476:	2201      	movs	r2, #1
 8005478:	2300      	movs	r3, #0
 800547a:	6102      	str	r2, [r0, #16]
 800547c:	6143      	str	r3, [r0, #20]
 800547e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005482:	462c      	mov	r4, r5
 8005484:	f04f 0900 	mov.w	r9, #0
 8005488:	4615      	mov	r5, r2
 800548a:	e7a7      	b.n	80053dc <__mdiff+0x50>
 800548c:	463b      	mov	r3, r7
 800548e:	f107 0414 	add.w	r4, r7, #20
 8005492:	f108 0514 	add.w	r5, r8, #20
 8005496:	4647      	mov	r7, r8
 8005498:	f04f 0901 	mov.w	r9, #1
 800549c:	4698      	mov	r8, r3
 800549e:	e79d      	b.n	80053dc <__mdiff+0x50>

080054a0 <__d2b>:
 80054a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054a4:	b083      	sub	sp, #12
 80054a6:	2101      	movs	r1, #1
 80054a8:	461c      	mov	r4, r3
 80054aa:	f3c3 550a 	ubfx	r5, r3, #20, #11
 80054ae:	4617      	mov	r7, r2
 80054b0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80054b2:	f7ff fd41 	bl	8004f38 <_Balloc>
 80054b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054ba:	4681      	mov	r9, r0
 80054bc:	b10d      	cbz	r5, 80054c2 <__d2b+0x22>
 80054be:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80054c2:	9401      	str	r4, [sp, #4]
 80054c4:	b31f      	cbz	r7, 800550e <__d2b+0x6e>
 80054c6:	a802      	add	r0, sp, #8
 80054c8:	f840 7d08 	str.w	r7, [r0, #-8]!
 80054cc:	f7ff fdc4 	bl	8005058 <__lo0bits>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d135      	bne.n	8005540 <__d2b+0xa0>
 80054d4:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80054d8:	f8c9 2014 	str.w	r2, [r9, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2101      	moveq	r1, #1
 80054e2:	2102      	movne	r1, #2
 80054e4:	f8c9 3018 	str.w	r3, [r9, #24]
 80054e8:	f8c9 1010 	str.w	r1, [r9, #16]
 80054ec:	b9dd      	cbnz	r5, 8005526 <__d2b+0x86>
 80054ee:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80054f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054f6:	6030      	str	r0, [r6, #0]
 80054f8:	6918      	ldr	r0, [r3, #16]
 80054fa:	f7ff fd8d 	bl	8005018 <__hi0bits>
 80054fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005500:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005504:	6018      	str	r0, [r3, #0]
 8005506:	4648      	mov	r0, r9
 8005508:	b003      	add	sp, #12
 800550a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800550e:	a801      	add	r0, sp, #4
 8005510:	f7ff fda2 	bl	8005058 <__lo0bits>
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	f8c9 3014 	str.w	r3, [r9, #20]
 800551a:	2101      	movs	r1, #1
 800551c:	3020      	adds	r0, #32
 800551e:	f8c9 1010 	str.w	r1, [r9, #16]
 8005522:	2d00      	cmp	r5, #0
 8005524:	d0e3      	beq.n	80054ee <__d2b+0x4e>
 8005526:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 800552a:	eb08 0300 	add.w	r3, r8, r0
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005532:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005536:	6018      	str	r0, [r3, #0]
 8005538:	4648      	mov	r0, r9
 800553a:	b003      	add	sp, #12
 800553c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005540:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8005544:	f1c0 0120 	rsb	r1, r0, #32
 8005548:	fa03 f101 	lsl.w	r1, r3, r1
 800554c:	430a      	orrs	r2, r1
 800554e:	40c3      	lsrs	r3, r0
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	f8c9 2014 	str.w	r2, [r9, #20]
 8005556:	e7c1      	b.n	80054dc <__d2b+0x3c>

08005558 <_sbrk_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4c07      	ldr	r4, [pc, #28]	; (8005578 <_sbrk_r+0x20>)
 800555c:	2300      	movs	r3, #0
 800555e:	4605      	mov	r5, r0
 8005560:	4608      	mov	r0, r1
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	f7fb fac6 	bl	8000af4 <_sbrk>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d000      	beq.n	800556e <_sbrk_r+0x16>
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0fb      	beq.n	800556c <_sbrk_r+0x14>
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000a58 	.word	0x20000a58

0800557c <__sread>:
 800557c:	b510      	push	{r4, lr}
 800557e:	460c      	mov	r4, r1
 8005580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005584:	f000 fbae 	bl	8005ce4 <_read_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	db03      	blt.n	8005594 <__sread+0x18>
 800558c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800558e:	4403      	add	r3, r0
 8005590:	6523      	str	r3, [r4, #80]	; 0x50
 8005592:	bd10      	pop	{r4, pc}
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	bd10      	pop	{r4, pc}
 800559e:	bf00      	nop

080055a0 <__swrite>:
 80055a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a4:	4616      	mov	r6, r2
 80055a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055aa:	461f      	mov	r7, r3
 80055ac:	05d3      	lsls	r3, r2, #23
 80055ae:	460c      	mov	r4, r1
 80055b0:	4605      	mov	r5, r0
 80055b2:	d507      	bpl.n	80055c4 <__swrite+0x24>
 80055b4:	2200      	movs	r2, #0
 80055b6:	2302      	movs	r3, #2
 80055b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055bc:	f000 fb18 	bl	8005bf0 <_lseek_r>
 80055c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055cc:	81a2      	strh	r2, [r4, #12]
 80055ce:	463b      	mov	r3, r7
 80055d0:	4632      	mov	r2, r6
 80055d2:	4628      	mov	r0, r5
 80055d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d8:	f000 b868 	b.w	80056ac <_write_r>

080055dc <__sseek>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	460c      	mov	r4, r1
 80055e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e4:	f000 fb04 	bl	8005bf0 <_lseek_r>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	1c42      	adds	r2, r0, #1
 80055ec:	bf0e      	itee	eq
 80055ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055f6:	6520      	strne	r0, [r4, #80]	; 0x50
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	bd10      	pop	{r4, pc}

080055fc <__sclose>:
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	f000 b89a 	b.w	8005738 <_close_r>

08005604 <__sprint_r.part.0>:
 8005604:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560a:	049c      	lsls	r4, r3, #18
 800560c:	4692      	mov	sl, r2
 800560e:	d52c      	bpl.n	800566a <__sprint_r.part.0+0x66>
 8005610:	6893      	ldr	r3, [r2, #8]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	b33b      	cbz	r3, 8005666 <__sprint_r.part.0+0x62>
 8005616:	460f      	mov	r7, r1
 8005618:	4680      	mov	r8, r0
 800561a:	f102 0908 	add.w	r9, r2, #8
 800561e:	e919 0060 	ldmdb	r9, {r5, r6}
 8005622:	08b6      	lsrs	r6, r6, #2
 8005624:	d017      	beq.n	8005656 <__sprint_r.part.0+0x52>
 8005626:	3d04      	subs	r5, #4
 8005628:	2400      	movs	r4, #0
 800562a:	e001      	b.n	8005630 <__sprint_r.part.0+0x2c>
 800562c:	42a6      	cmp	r6, r4
 800562e:	d010      	beq.n	8005652 <__sprint_r.part.0+0x4e>
 8005630:	463a      	mov	r2, r7
 8005632:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005636:	4640      	mov	r0, r8
 8005638:	f000 f91e 	bl	8005878 <_fputwc_r>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	f104 0401 	add.w	r4, r4, #1
 8005642:	d1f3      	bne.n	800562c <__sprint_r.part.0+0x28>
 8005644:	2300      	movs	r3, #0
 8005646:	f8ca 3008 	str.w	r3, [sl, #8]
 800564a:	f8ca 3004 	str.w	r3, [sl, #4]
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005656:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800565a:	f8ca 3008 	str.w	r3, [sl, #8]
 800565e:	f109 0908 	add.w	r9, r9, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1db      	bne.n	800561e <__sprint_r.part.0+0x1a>
 8005666:	2000      	movs	r0, #0
 8005668:	e7ec      	b.n	8005644 <__sprint_r.part.0+0x40>
 800566a:	f000 f92d 	bl	80058c8 <__sfvwrite_r>
 800566e:	2300      	movs	r3, #0
 8005670:	f8ca 3008 	str.w	r3, [sl, #8]
 8005674:	f8ca 3004 	str.w	r3, [sl, #4]
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800567c <__sprint_r>:
 800567c:	6893      	ldr	r3, [r2, #8]
 800567e:	b10b      	cbz	r3, 8005684 <__sprint_r+0x8>
 8005680:	f7ff bfc0 	b.w	8005604 <__sprint_r.part.0>
 8005684:	b410      	push	{r4}
 8005686:	4618      	mov	r0, r3
 8005688:	6053      	str	r3, [r2, #4]
 800568a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568e:	4770      	bx	lr

08005690 <__ascii_wctomb>:
 8005690:	b121      	cbz	r1, 800569c <__ascii_wctomb+0xc>
 8005692:	2aff      	cmp	r2, #255	; 0xff
 8005694:	d804      	bhi.n	80056a0 <__ascii_wctomb+0x10>
 8005696:	700a      	strb	r2, [r1, #0]
 8005698:	2001      	movs	r0, #1
 800569a:	4770      	bx	lr
 800569c:	4608      	mov	r0, r1
 800569e:	4770      	bx	lr
 80056a0:	238a      	movs	r3, #138	; 0x8a
 80056a2:	6003      	str	r3, [r0, #0]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop

080056ac <_write_r>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	460d      	mov	r5, r1
 80056b0:	4c08      	ldr	r4, [pc, #32]	; (80056d4 <_write_r+0x28>)
 80056b2:	4611      	mov	r1, r2
 80056b4:	4606      	mov	r6, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4628      	mov	r0, r5
 80056ba:	2300      	movs	r3, #0
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	f7fa ff81 	bl	80005c4 <_write>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d000      	beq.n	80056c8 <_write_r+0x1c>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0fb      	beq.n	80056c6 <_write_r+0x1a>
 80056ce:	6033      	str	r3, [r6, #0]
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	bf00      	nop
 80056d4:	20000a58 	.word	0x20000a58

080056d8 <_calloc_r>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	fb02 f101 	mul.w	r1, r2, r1
 80056de:	f7ff f907 	bl	80048f0 <_malloc_r>
 80056e2:	4604      	mov	r4, r0
 80056e4:	b1d8      	cbz	r0, 800571e <_calloc_r+0x46>
 80056e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80056ea:	f022 0203 	bic.w	r2, r2, #3
 80056ee:	3a04      	subs	r2, #4
 80056f0:	2a24      	cmp	r2, #36	; 0x24
 80056f2:	d818      	bhi.n	8005726 <_calloc_r+0x4e>
 80056f4:	2a13      	cmp	r2, #19
 80056f6:	d914      	bls.n	8005722 <_calloc_r+0x4a>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2a1b      	cmp	r2, #27
 80056fc:	6003      	str	r3, [r0, #0]
 80056fe:	6043      	str	r3, [r0, #4]
 8005700:	d916      	bls.n	8005730 <_calloc_r+0x58>
 8005702:	2a24      	cmp	r2, #36	; 0x24
 8005704:	6083      	str	r3, [r0, #8]
 8005706:	60c3      	str	r3, [r0, #12]
 8005708:	bf11      	iteee	ne
 800570a:	f100 0210 	addne.w	r2, r0, #16
 800570e:	6103      	streq	r3, [r0, #16]
 8005710:	6143      	streq	r3, [r0, #20]
 8005712:	f100 0218 	addeq.w	r2, r0, #24
 8005716:	2300      	movs	r3, #0
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	6053      	str	r3, [r2, #4]
 800571c:	6093      	str	r3, [r2, #8]
 800571e:	4620      	mov	r0, r4
 8005720:	bd10      	pop	{r4, pc}
 8005722:	4602      	mov	r2, r0
 8005724:	e7f7      	b.n	8005716 <_calloc_r+0x3e>
 8005726:	2100      	movs	r1, #0
 8005728:	f7fc f844 	bl	80017b4 <memset>
 800572c:	4620      	mov	r0, r4
 800572e:	bd10      	pop	{r4, pc}
 8005730:	f100 0208 	add.w	r2, r0, #8
 8005734:	e7ef      	b.n	8005716 <_calloc_r+0x3e>
 8005736:	bf00      	nop

08005738 <_close_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4c07      	ldr	r4, [pc, #28]	; (8005758 <_close_r+0x20>)
 800573c:	2300      	movs	r3, #0
 800573e:	4605      	mov	r5, r0
 8005740:	4608      	mov	r0, r1
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	f7fb f9b8 	bl	8000ab8 <_close>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d000      	beq.n	800574e <_close_r+0x16>
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0fb      	beq.n	800574c <_close_r+0x14>
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20000a58 	.word	0x20000a58

0800575c <_fclose_r>:
 800575c:	2900      	cmp	r1, #0
 800575e:	d03d      	beq.n	80057dc <_fclose_r+0x80>
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	4605      	mov	r5, r0
 8005764:	460c      	mov	r4, r1
 8005766:	b108      	cbz	r0, 800576c <_fclose_r+0x10>
 8005768:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800576a:	b37b      	cbz	r3, 80057cc <_fclose_r+0x70>
 800576c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005770:	b90b      	cbnz	r3, 8005776 <_fclose_r+0x1a>
 8005772:	2000      	movs	r0, #0
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f7fe fd83 	bl	8004284 <__sflush_r>
 800577e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005780:	4606      	mov	r6, r0
 8005782:	b133      	cbz	r3, 8005792 <_fclose_r+0x36>
 8005784:	69e1      	ldr	r1, [r4, #28]
 8005786:	4628      	mov	r0, r5
 8005788:	4798      	blx	r3
 800578a:	2800      	cmp	r0, #0
 800578c:	bfb8      	it	lt
 800578e:	f04f 36ff 	movlt.w	r6, #4294967295
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	d41c      	bmi.n	80057d2 <_fclose_r+0x76>
 8005798:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800579a:	b141      	cbz	r1, 80057ae <_fclose_r+0x52>
 800579c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d002      	beq.n	80057aa <_fclose_r+0x4e>
 80057a4:	4628      	mov	r0, r5
 80057a6:	f7fe fefd 	bl	80045a4 <_free_r>
 80057aa:	2300      	movs	r3, #0
 80057ac:	6323      	str	r3, [r4, #48]	; 0x30
 80057ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80057b0:	b121      	cbz	r1, 80057bc <_fclose_r+0x60>
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fe fef6 	bl	80045a4 <_free_r>
 80057b8:	2300      	movs	r3, #0
 80057ba:	6463      	str	r3, [r4, #68]	; 0x44
 80057bc:	f7fe fea0 	bl	8004500 <__sfp_lock_acquire>
 80057c0:	2300      	movs	r3, #0
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	f7fe fe9e 	bl	8004504 <__sfp_lock_release>
 80057c8:	4630      	mov	r0, r6
 80057ca:	bd70      	pop	{r4, r5, r6, pc}
 80057cc:	f7fe fe92 	bl	80044f4 <__sinit>
 80057d0:	e7cc      	b.n	800576c <_fclose_r+0x10>
 80057d2:	6921      	ldr	r1, [r4, #16]
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7fe fee5 	bl	80045a4 <_free_r>
 80057da:	e7dd      	b.n	8005798 <_fclose_r+0x3c>
 80057dc:	2000      	movs	r0, #0
 80057de:	4770      	bx	lr

080057e0 <__fputwc>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	4680      	mov	r8, r0
 80057e8:	4689      	mov	r9, r1
 80057ea:	4614      	mov	r4, r2
 80057ec:	f7fe ffec 	bl	80047c8 <__locale_mb_cur_max>
 80057f0:	2801      	cmp	r0, #1
 80057f2:	d033      	beq.n	800585c <__fputwc+0x7c>
 80057f4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80057f8:	464a      	mov	r2, r9
 80057fa:	a901      	add	r1, sp, #4
 80057fc:	4640      	mov	r0, r8
 80057fe:	f000 fccd 	bl	800619c <_wcrtomb_r>
 8005802:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005806:	4682      	mov	sl, r0
 8005808:	d021      	beq.n	800584e <__fputwc+0x6e>
 800580a:	b388      	cbz	r0, 8005870 <__fputwc+0x90>
 800580c:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8005810:	2500      	movs	r5, #0
 8005812:	e008      	b.n	8005826 <__fputwc+0x46>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	701e      	strb	r6, [r3, #0]
 800581c:	3501      	adds	r5, #1
 800581e:	4555      	cmp	r5, sl
 8005820:	d226      	bcs.n	8005870 <__fputwc+0x90>
 8005822:	ab01      	add	r3, sp, #4
 8005824:	5d5e      	ldrb	r6, [r3, r5]
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	3b01      	subs	r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	60a3      	str	r3, [r4, #8]
 800582e:	daf1      	bge.n	8005814 <__fputwc+0x34>
 8005830:	69a7      	ldr	r7, [r4, #24]
 8005832:	42bb      	cmp	r3, r7
 8005834:	4631      	mov	r1, r6
 8005836:	4622      	mov	r2, r4
 8005838:	4640      	mov	r0, r8
 800583a:	db01      	blt.n	8005840 <__fputwc+0x60>
 800583c:	2e0a      	cmp	r6, #10
 800583e:	d1e9      	bne.n	8005814 <__fputwc+0x34>
 8005840:	f000 fc56 	bl	80060f0 <__swbuf_r>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d1e9      	bne.n	800581c <__fputwc+0x3c>
 8005848:	b002      	add	sp, #8
 800584a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	b002      	add	sp, #8
 8005858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800585c:	f109 33ff 	add.w	r3, r9, #4294967295
 8005860:	2bfe      	cmp	r3, #254	; 0xfe
 8005862:	d8c7      	bhi.n	80057f4 <__fputwc+0x14>
 8005864:	fa5f f689 	uxtb.w	r6, r9
 8005868:	4682      	mov	sl, r0
 800586a:	f88d 6004 	strb.w	r6, [sp, #4]
 800586e:	e7cf      	b.n	8005810 <__fputwc+0x30>
 8005870:	4648      	mov	r0, r9
 8005872:	b002      	add	sp, #8
 8005874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005878 <_fputwc_r>:
 8005878:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800587c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005880:	d10b      	bne.n	800589a <_fputwc_r+0x22>
 8005882:	b410      	push	{r4}
 8005884:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800588a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800588e:	6654      	str	r4, [r2, #100]	; 0x64
 8005890:	8193      	strh	r3, [r2, #12]
 8005892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005896:	f7ff bfa3 	b.w	80057e0 <__fputwc>
 800589a:	f7ff bfa1 	b.w	80057e0 <__fputwc>
 800589e:	bf00      	nop

080058a0 <_fstat_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	460b      	mov	r3, r1
 80058a4:	4c07      	ldr	r4, [pc, #28]	; (80058c4 <_fstat_r+0x24>)
 80058a6:	4605      	mov	r5, r0
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	f7fb f90c 	bl	8000acc <_fstat>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d000      	beq.n	80058ba <_fstat_r+0x1a>
 80058b8:	bd38      	pop	{r3, r4, r5, pc}
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0fb      	beq.n	80058b8 <_fstat_r+0x18>
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000a58 	.word	0x20000a58

080058c8 <__sfvwrite_r>:
 80058c8:	6893      	ldr	r3, [r2, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d076      	beq.n	80059bc <__sfvwrite_r+0xf4>
 80058ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d2:	898b      	ldrh	r3, [r1, #12]
 80058d4:	b085      	sub	sp, #20
 80058d6:	460c      	mov	r4, r1
 80058d8:	0719      	lsls	r1, r3, #28
 80058da:	9001      	str	r0, [sp, #4]
 80058dc:	4616      	mov	r6, r2
 80058de:	d529      	bpl.n	8005934 <__sfvwrite_r+0x6c>
 80058e0:	6922      	ldr	r2, [r4, #16]
 80058e2:	b33a      	cbz	r2, 8005934 <__sfvwrite_r+0x6c>
 80058e4:	f003 0802 	and.w	r8, r3, #2
 80058e8:	fa1f f088 	uxth.w	r0, r8
 80058ec:	6835      	ldr	r5, [r6, #0]
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d02f      	beq.n	8005952 <__sfvwrite_r+0x8a>
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	4fb4      	ldr	r7, [pc, #720]	; (8005bc8 <__sfvwrite_r+0x300>)
 80058f8:	46c8      	mov	r8, r9
 80058fa:	46b2      	mov	sl, r6
 80058fc:	45b8      	cmp	r8, r7
 80058fe:	4643      	mov	r3, r8
 8005900:	464a      	mov	r2, r9
 8005902:	bf28      	it	cs
 8005904:	463b      	movcs	r3, r7
 8005906:	9801      	ldr	r0, [sp, #4]
 8005908:	f1b8 0f00 	cmp.w	r8, #0
 800590c:	d050      	beq.n	80059b0 <__sfvwrite_r+0xe8>
 800590e:	69e1      	ldr	r1, [r4, #28]
 8005910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005912:	47b0      	blx	r6
 8005914:	2800      	cmp	r0, #0
 8005916:	dd71      	ble.n	80059fc <__sfvwrite_r+0x134>
 8005918:	f8da 3008 	ldr.w	r3, [sl, #8]
 800591c:	1a1b      	subs	r3, r3, r0
 800591e:	4481      	add	r9, r0
 8005920:	ebc0 0808 	rsb	r8, r0, r8
 8005924:	f8ca 3008 	str.w	r3, [sl, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e7      	bne.n	80058fc <__sfvwrite_r+0x34>
 800592c:	2000      	movs	r0, #0
 800592e:	b005      	add	sp, #20
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	4621      	mov	r1, r4
 8005936:	9801      	ldr	r0, [sp, #4]
 8005938:	f7fd fc94 	bl	8003264 <__swsetup_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	f040 813a 	bne.w	8005bb6 <__sfvwrite_r+0x2ee>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	6835      	ldr	r5, [r6, #0]
 8005946:	f003 0802 	and.w	r8, r3, #2
 800594a:	fa1f f088 	uxth.w	r0, r8
 800594e:	2800      	cmp	r0, #0
 8005950:	d1cf      	bne.n	80058f2 <__sfvwrite_r+0x2a>
 8005952:	f013 0901 	ands.w	r9, r3, #1
 8005956:	d15b      	bne.n	8005a10 <__sfvwrite_r+0x148>
 8005958:	464f      	mov	r7, r9
 800595a:	9602      	str	r6, [sp, #8]
 800595c:	b31f      	cbz	r7, 80059a6 <__sfvwrite_r+0xde>
 800595e:	059a      	lsls	r2, r3, #22
 8005960:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005964:	d52c      	bpl.n	80059c0 <__sfvwrite_r+0xf8>
 8005966:	4547      	cmp	r7, r8
 8005968:	46c2      	mov	sl, r8
 800596a:	f0c0 80a4 	bcc.w	8005ab6 <__sfvwrite_r+0x1ee>
 800596e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005972:	f040 80b1 	bne.w	8005ad8 <__sfvwrite_r+0x210>
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	4652      	mov	r2, sl
 800597a:	4649      	mov	r1, r9
 800597c:	f000 f94e 	bl	8005c1c <memmove>
 8005980:	68a0      	ldr	r0, [r4, #8]
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	ebc8 0000 	rsb	r0, r8, r0
 8005988:	4453      	add	r3, sl
 800598a:	60a0      	str	r0, [r4, #8]
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	4638      	mov	r0, r7
 8005990:	9a02      	ldr	r2, [sp, #8]
 8005992:	6893      	ldr	r3, [r2, #8]
 8005994:	1a1b      	subs	r3, r3, r0
 8005996:	4481      	add	r9, r0
 8005998:	1a3f      	subs	r7, r7, r0
 800599a:	6093      	str	r3, [r2, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0c5      	beq.n	800592c <__sfvwrite_r+0x64>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	d1db      	bne.n	800595e <__sfvwrite_r+0x96>
 80059a6:	f8d5 9000 	ldr.w	r9, [r5]
 80059aa:	686f      	ldr	r7, [r5, #4]
 80059ac:	3508      	adds	r5, #8
 80059ae:	e7d5      	b.n	800595c <__sfvwrite_r+0x94>
 80059b0:	f8d5 9000 	ldr.w	r9, [r5]
 80059b4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80059b8:	3508      	adds	r5, #8
 80059ba:	e79f      	b.n	80058fc <__sfvwrite_r+0x34>
 80059bc:	2000      	movs	r0, #0
 80059be:	4770      	bx	lr
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	4298      	cmp	r0, r3
 80059c6:	d803      	bhi.n	80059d0 <__sfvwrite_r+0x108>
 80059c8:	6961      	ldr	r1, [r4, #20]
 80059ca:	428f      	cmp	r7, r1
 80059cc:	f080 80b7 	bcs.w	8005b3e <__sfvwrite_r+0x276>
 80059d0:	45b8      	cmp	r8, r7
 80059d2:	bf28      	it	cs
 80059d4:	46b8      	movcs	r8, r7
 80059d6:	4642      	mov	r2, r8
 80059d8:	4649      	mov	r1, r9
 80059da:	f000 f91f 	bl	8005c1c <memmove>
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	ebc8 0303 	rsb	r3, r8, r3
 80059e6:	4442      	add	r2, r8
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d149      	bne.n	8005a84 <__sfvwrite_r+0x1bc>
 80059f0:	4621      	mov	r1, r4
 80059f2:	9801      	ldr	r0, [sp, #4]
 80059f4:	f7fe fcea 	bl	80043cc <_fflush_r>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d043      	beq.n	8005a84 <__sfvwrite_r+0x1bc>
 80059fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	b005      	add	sp, #20
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a10:	4680      	mov	r8, r0
 8005a12:	9002      	str	r0, [sp, #8]
 8005a14:	4682      	mov	sl, r0
 8005a16:	4681      	mov	r9, r0
 8005a18:	f1b9 0f00 	cmp.w	r9, #0
 8005a1c:	d02a      	beq.n	8005a74 <__sfvwrite_r+0x1ac>
 8005a1e:	9b02      	ldr	r3, [sp, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d04c      	beq.n	8005abe <__sfvwrite_r+0x1f6>
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	6962      	ldr	r2, [r4, #20]
 8005a2a:	45c8      	cmp	r8, r9
 8005a2c:	46c3      	mov	fp, r8
 8005a2e:	bf28      	it	cs
 8005a30:	46cb      	movcs	fp, r9
 8005a32:	4298      	cmp	r0, r3
 8005a34:	465f      	mov	r7, fp
 8005a36:	d904      	bls.n	8005a42 <__sfvwrite_r+0x17a>
 8005a38:	68a3      	ldr	r3, [r4, #8]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	459b      	cmp	fp, r3
 8005a3e:	f300 8090 	bgt.w	8005b62 <__sfvwrite_r+0x29a>
 8005a42:	4593      	cmp	fp, r2
 8005a44:	db20      	blt.n	8005a88 <__sfvwrite_r+0x1c0>
 8005a46:	4613      	mov	r3, r2
 8005a48:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005a4a:	69e1      	ldr	r1, [r4, #28]
 8005a4c:	9801      	ldr	r0, [sp, #4]
 8005a4e:	4652      	mov	r2, sl
 8005a50:	47b8      	blx	r7
 8005a52:	1e07      	subs	r7, r0, #0
 8005a54:	ddd2      	ble.n	80059fc <__sfvwrite_r+0x134>
 8005a56:	ebb8 0807 	subs.w	r8, r8, r7
 8005a5a:	d023      	beq.n	8005aa4 <__sfvwrite_r+0x1dc>
 8005a5c:	68b3      	ldr	r3, [r6, #8]
 8005a5e:	1bdb      	subs	r3, r3, r7
 8005a60:	44ba      	add	sl, r7
 8005a62:	ebc7 0909 	rsb	r9, r7, r9
 8005a66:	60b3      	str	r3, [r6, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f43f af5f 	beq.w	800592c <__sfvwrite_r+0x64>
 8005a6e:	f1b9 0f00 	cmp.w	r9, #0
 8005a72:	d1d4      	bne.n	8005a1e <__sfvwrite_r+0x156>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f8d5 a000 	ldr.w	sl, [r5]
 8005a7a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	3508      	adds	r5, #8
 8005a82:	e7c9      	b.n	8005a18 <__sfvwrite_r+0x150>
 8005a84:	4640      	mov	r0, r8
 8005a86:	e783      	b.n	8005990 <__sfvwrite_r+0xc8>
 8005a88:	465a      	mov	r2, fp
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	f000 f8c6 	bl	8005c1c <memmove>
 8005a90:	68a2      	ldr	r2, [r4, #8]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	ebcb 0202 	rsb	r2, fp, r2
 8005a98:	445b      	add	r3, fp
 8005a9a:	ebb8 0807 	subs.w	r8, r8, r7
 8005a9e:	60a2      	str	r2, [r4, #8]
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	d1db      	bne.n	8005a5c <__sfvwrite_r+0x194>
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	9801      	ldr	r0, [sp, #4]
 8005aa8:	f7fe fc90 	bl	80043cc <_fflush_r>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d1a5      	bne.n	80059fc <__sfvwrite_r+0x134>
 8005ab0:	f8cd 8008 	str.w	r8, [sp, #8]
 8005ab4:	e7d2      	b.n	8005a5c <__sfvwrite_r+0x194>
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	46b8      	mov	r8, r7
 8005aba:	46ba      	mov	sl, r7
 8005abc:	e75c      	b.n	8005978 <__sfvwrite_r+0xb0>
 8005abe:	464a      	mov	r2, r9
 8005ac0:	210a      	movs	r1, #10
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7ff f9e4 	bl	8004e90 <memchr>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d06f      	beq.n	8005bac <__sfvwrite_r+0x2e4>
 8005acc:	3001      	adds	r0, #1
 8005ace:	2301      	movs	r3, #1
 8005ad0:	ebca 0800 	rsb	r8, sl, r0
 8005ad4:	9302      	str	r3, [sp, #8]
 8005ad6:	e7a5      	b.n	8005a24 <__sfvwrite_r+0x15c>
 8005ad8:	6962      	ldr	r2, [r4, #20]
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	6921      	ldr	r1, [r4, #16]
 8005ade:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8005ae2:	ebc1 0a00 	rsb	sl, r1, r0
 8005ae6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8005aea:	f10a 0001 	add.w	r0, sl, #1
 8005aee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005af2:	4438      	add	r0, r7
 8005af4:	4540      	cmp	r0, r8
 8005af6:	4642      	mov	r2, r8
 8005af8:	bf84      	itt	hi
 8005afa:	4680      	movhi	r8, r0
 8005afc:	4642      	movhi	r2, r8
 8005afe:	055b      	lsls	r3, r3, #21
 8005b00:	d542      	bpl.n	8005b88 <__sfvwrite_r+0x2c0>
 8005b02:	4611      	mov	r1, r2
 8005b04:	9801      	ldr	r0, [sp, #4]
 8005b06:	f7fe fef3 	bl	80048f0 <_malloc_r>
 8005b0a:	4683      	mov	fp, r0
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d055      	beq.n	8005bbc <__sfvwrite_r+0x2f4>
 8005b10:	4652      	mov	r2, sl
 8005b12:	6921      	ldr	r1, [r4, #16]
 8005b14:	f7fb fdb4 	bl	8001680 <memcpy>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	ebca 0308 	rsb	r3, sl, r8
 8005b28:	eb0b 000a 	add.w	r0, fp, sl
 8005b2c:	f8c4 8014 	str.w	r8, [r4, #20]
 8005b30:	f8c4 b010 	str.w	fp, [r4, #16]
 8005b34:	6020      	str	r0, [r4, #0]
 8005b36:	60a3      	str	r3, [r4, #8]
 8005b38:	46b8      	mov	r8, r7
 8005b3a:	46ba      	mov	sl, r7
 8005b3c:	e71c      	b.n	8005978 <__sfvwrite_r+0xb0>
 8005b3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005b42:	42bb      	cmp	r3, r7
 8005b44:	bf28      	it	cs
 8005b46:	463b      	movcs	r3, r7
 8005b48:	464a      	mov	r2, r9
 8005b4a:	fb93 f3f1 	sdiv	r3, r3, r1
 8005b4e:	9801      	ldr	r0, [sp, #4]
 8005b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	69e1      	ldr	r1, [r4, #28]
 8005b58:	47b0      	blx	r6
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f73f af18 	bgt.w	8005990 <__sfvwrite_r+0xc8>
 8005b60:	e74c      	b.n	80059fc <__sfvwrite_r+0x134>
 8005b62:	461a      	mov	r2, r3
 8005b64:	4651      	mov	r1, sl
 8005b66:	9303      	str	r3, [sp, #12]
 8005b68:	f000 f858 	bl	8005c1c <memmove>
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	9801      	ldr	r0, [sp, #4]
 8005b72:	441a      	add	r2, r3
 8005b74:	6022      	str	r2, [r4, #0]
 8005b76:	4621      	mov	r1, r4
 8005b78:	f7fe fc28 	bl	80043cc <_fflush_r>
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f47f af3c 	bne.w	80059fc <__sfvwrite_r+0x134>
 8005b84:	461f      	mov	r7, r3
 8005b86:	e766      	b.n	8005a56 <__sfvwrite_r+0x18e>
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	f000 f8c1 	bl	8005d10 <_realloc_r>
 8005b8e:	4683      	mov	fp, r0
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d1c7      	bne.n	8005b24 <__sfvwrite_r+0x25c>
 8005b94:	9d01      	ldr	r5, [sp, #4]
 8005b96:	6921      	ldr	r1, [r4, #16]
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f7fe fd03 	bl	80045a4 <_free_r>
 8005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba2:	220c      	movs	r2, #12
 8005ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	e729      	b.n	8005a00 <__sfvwrite_r+0x138>
 8005bac:	2301      	movs	r3, #1
 8005bae:	f109 0801 	add.w	r8, r9, #1
 8005bb2:	9302      	str	r3, [sp, #8]
 8005bb4:	e736      	b.n	8005a24 <__sfvwrite_r+0x15c>
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	e6b8      	b.n	800592e <__sfvwrite_r+0x66>
 8005bbc:	9a01      	ldr	r2, [sp, #4]
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc6:	e71b      	b.n	8005a00 <__sfvwrite_r+0x138>
 8005bc8:	7ffffc00 	.word	0x7ffffc00

08005bcc <_isatty_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4c07      	ldr	r4, [pc, #28]	; (8005bec <_isatty_r+0x20>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	f7fa ffcc 	bl	8000b74 <_isatty>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d000      	beq.n	8005be2 <_isatty_r+0x16>
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0fb      	beq.n	8005be0 <_isatty_r+0x14>
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000a58 	.word	0x20000a58

08005bf0 <_lseek_r>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	4c08      	ldr	r4, [pc, #32]	; (8005c18 <_lseek_r+0x28>)
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f7fa ff3d 	bl	8000a80 <_lseek>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d000      	beq.n	8005c0c <_lseek_r+0x1c>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0fb      	beq.n	8005c0a <_lseek_r+0x1a>
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	bf00      	nop
 8005c18:	20000a58 	.word	0x20000a58

08005c1c <memmove>:
 8005c1c:	4288      	cmp	r0, r1
 8005c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c20:	d90d      	bls.n	8005c3e <memmove+0x22>
 8005c22:	188b      	adds	r3, r1, r2
 8005c24:	4298      	cmp	r0, r3
 8005c26:	d20a      	bcs.n	8005c3e <memmove+0x22>
 8005c28:	1881      	adds	r1, r0, r2
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	d051      	beq.n	8005cd2 <memmove+0xb6>
 8005c2e:	1a9a      	subs	r2, r3, r2
 8005c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d1f9      	bne.n	8005c30 <memmove+0x14>
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3e:	2a0f      	cmp	r2, #15
 8005c40:	d948      	bls.n	8005cd4 <memmove+0xb8>
 8005c42:	ea41 0300 	orr.w	r3, r1, r0
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d146      	bne.n	8005cd8 <memmove+0xbc>
 8005c4a:	f100 0410 	add.w	r4, r0, #16
 8005c4e:	f101 0310 	add.w	r3, r1, #16
 8005c52:	4615      	mov	r5, r2
 8005c54:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8005c58:	f844 6c10 	str.w	r6, [r4, #-16]
 8005c5c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8005c60:	f844 6c0c 	str.w	r6, [r4, #-12]
 8005c64:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8005c68:	f844 6c08 	str.w	r6, [r4, #-8]
 8005c6c:	3d10      	subs	r5, #16
 8005c6e:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8005c72:	f844 6c04 	str.w	r6, [r4, #-4]
 8005c76:	2d0f      	cmp	r5, #15
 8005c78:	f103 0310 	add.w	r3, r3, #16
 8005c7c:	f104 0410 	add.w	r4, r4, #16
 8005c80:	d8e8      	bhi.n	8005c54 <memmove+0x38>
 8005c82:	f1a2 0310 	sub.w	r3, r2, #16
 8005c86:	f023 030f 	bic.w	r3, r3, #15
 8005c8a:	f002 0e0f 	and.w	lr, r2, #15
 8005c8e:	3310      	adds	r3, #16
 8005c90:	f1be 0f03 	cmp.w	lr, #3
 8005c94:	4419      	add	r1, r3
 8005c96:	4403      	add	r3, r0
 8005c98:	d921      	bls.n	8005cde <memmove+0xc2>
 8005c9a:	1f1e      	subs	r6, r3, #4
 8005c9c:	460d      	mov	r5, r1
 8005c9e:	4674      	mov	r4, lr
 8005ca0:	3c04      	subs	r4, #4
 8005ca2:	f855 7b04 	ldr.w	r7, [r5], #4
 8005ca6:	f846 7f04 	str.w	r7, [r6, #4]!
 8005caa:	2c03      	cmp	r4, #3
 8005cac:	d8f8      	bhi.n	8005ca0 <memmove+0x84>
 8005cae:	f1ae 0404 	sub.w	r4, lr, #4
 8005cb2:	f024 0403 	bic.w	r4, r4, #3
 8005cb6:	3404      	adds	r4, #4
 8005cb8:	4423      	add	r3, r4
 8005cba:	4421      	add	r1, r4
 8005cbc:	f002 0203 	and.w	r2, r2, #3
 8005cc0:	b162      	cbz	r2, 8005cdc <memmove+0xc0>
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cce:	428a      	cmp	r2, r1
 8005cd0:	d1f9      	bne.n	8005cc6 <memmove+0xaa>
 8005cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	e7f3      	b.n	8005cc0 <memmove+0xa4>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	e7f2      	b.n	8005cc2 <memmove+0xa6>
 8005cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cde:	4672      	mov	r2, lr
 8005ce0:	e7ee      	b.n	8005cc0 <memmove+0xa4>
 8005ce2:	bf00      	nop

08005ce4 <_read_r>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	4c08      	ldr	r4, [pc, #32]	; (8005d0c <_read_r+0x28>)
 8005cea:	4611      	mov	r1, r2
 8005cec:	4606      	mov	r6, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	f7fa fed1 	bl	8000a9c <_read>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d000      	beq.n	8005d00 <_read_r+0x1c>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0fb      	beq.n	8005cfe <_read_r+0x1a>
 8005d06:	6033      	str	r3, [r6, #0]
 8005d08:	bd70      	pop	{r4, r5, r6, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000a58 	.word	0x20000a58

08005d10 <_realloc_r>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	4617      	mov	r7, r2
 8005d16:	b083      	sub	sp, #12
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	f000 80c1 	beq.w	8005ea0 <_realloc_r+0x190>
 8005d1e:	460e      	mov	r6, r1
 8005d20:	4681      	mov	r9, r0
 8005d22:	f107 050b 	add.w	r5, r7, #11
 8005d26:	f7ff f903 	bl	8004f30 <__malloc_lock>
 8005d2a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8005d2e:	2d16      	cmp	r5, #22
 8005d30:	f02e 0403 	bic.w	r4, lr, #3
 8005d34:	f1a6 0808 	sub.w	r8, r6, #8
 8005d38:	d840      	bhi.n	8005dbc <_realloc_r+0xac>
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	42af      	cmp	r7, r5
 8005d40:	d841      	bhi.n	8005dc6 <_realloc_r+0xb6>
 8005d42:	4294      	cmp	r4, r2
 8005d44:	da75      	bge.n	8005e32 <_realloc_r+0x122>
 8005d46:	4bc9      	ldr	r3, [pc, #804]	; (800606c <_realloc_r+0x35c>)
 8005d48:	6899      	ldr	r1, [r3, #8]
 8005d4a:	eb08 0004 	add.w	r0, r8, r4
 8005d4e:	4288      	cmp	r0, r1
 8005d50:	6841      	ldr	r1, [r0, #4]
 8005d52:	f000 80d9 	beq.w	8005f08 <_realloc_r+0x1f8>
 8005d56:	f021 0301 	bic.w	r3, r1, #1
 8005d5a:	4403      	add	r3, r0
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	07db      	lsls	r3, r3, #31
 8005d60:	d57d      	bpl.n	8005e5e <_realloc_r+0x14e>
 8005d62:	f01e 0f01 	tst.w	lr, #1
 8005d66:	d035      	beq.n	8005dd4 <_realloc_r+0xc4>
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	f7fe fdc0 	bl	80048f0 <_malloc_r>
 8005d70:	4607      	mov	r7, r0
 8005d72:	b1e0      	cbz	r0, 8005dae <_realloc_r+0x9e>
 8005d74:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	4443      	add	r3, r8
 8005d7e:	f1a0 0208 	sub.w	r2, r0, #8
 8005d82:	429a      	cmp	r2, r3
 8005d84:	f000 8144 	beq.w	8006010 <_realloc_r+0x300>
 8005d88:	1f22      	subs	r2, r4, #4
 8005d8a:	2a24      	cmp	r2, #36	; 0x24
 8005d8c:	f200 8131 	bhi.w	8005ff2 <_realloc_r+0x2e2>
 8005d90:	2a13      	cmp	r2, #19
 8005d92:	f200 8104 	bhi.w	8005f9e <_realloc_r+0x28e>
 8005d96:	4603      	mov	r3, r0
 8005d98:	4632      	mov	r2, r6
 8005d9a:	6811      	ldr	r1, [r2, #0]
 8005d9c:	6019      	str	r1, [r3, #0]
 8005d9e:	6851      	ldr	r1, [r2, #4]
 8005da0:	6059      	str	r1, [r3, #4]
 8005da2:	6892      	ldr	r2, [r2, #8]
 8005da4:	609a      	str	r2, [r3, #8]
 8005da6:	4631      	mov	r1, r6
 8005da8:	4648      	mov	r0, r9
 8005daa:	f7fe fbfb 	bl	80045a4 <_free_r>
 8005dae:	4648      	mov	r0, r9
 8005db0:	f7ff f8c0 	bl	8004f34 <__malloc_unlock>
 8005db4:	4638      	mov	r0, r7
 8005db6:	b003      	add	sp, #12
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbc:	f025 0507 	bic.w	r5, r5, #7
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	dabb      	bge.n	8005d3e <_realloc_r+0x2e>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f8c9 3000 	str.w	r3, [r9]
 8005dce:	b003      	add	sp, #12
 8005dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005dd8:	ebc3 0a08 	rsb	sl, r3, r8
 8005ddc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005de0:	f023 0c03 	bic.w	ip, r3, #3
 8005de4:	eb04 030c 	add.w	r3, r4, ip
 8005de8:	4293      	cmp	r3, r2
 8005dea:	dbbd      	blt.n	8005d68 <_realloc_r+0x58>
 8005dec:	4657      	mov	r7, sl
 8005dee:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005df2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005df6:	1f22      	subs	r2, r4, #4
 8005df8:	2a24      	cmp	r2, #36	; 0x24
 8005dfa:	60c1      	str	r1, [r0, #12]
 8005dfc:	6088      	str	r0, [r1, #8]
 8005dfe:	f200 8117 	bhi.w	8006030 <_realloc_r+0x320>
 8005e02:	2a13      	cmp	r2, #19
 8005e04:	f240 8112 	bls.w	800602c <_realloc_r+0x31c>
 8005e08:	6831      	ldr	r1, [r6, #0]
 8005e0a:	f8ca 1008 	str.w	r1, [sl, #8]
 8005e0e:	6871      	ldr	r1, [r6, #4]
 8005e10:	f8ca 100c 	str.w	r1, [sl, #12]
 8005e14:	2a1b      	cmp	r2, #27
 8005e16:	f200 812b 	bhi.w	8006070 <_realloc_r+0x360>
 8005e1a:	3608      	adds	r6, #8
 8005e1c:	f10a 0210 	add.w	r2, sl, #16
 8005e20:	6831      	ldr	r1, [r6, #0]
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	6871      	ldr	r1, [r6, #4]
 8005e26:	6051      	str	r1, [r2, #4]
 8005e28:	68b1      	ldr	r1, [r6, #8]
 8005e2a:	6091      	str	r1, [r2, #8]
 8005e2c:	463e      	mov	r6, r7
 8005e2e:	461c      	mov	r4, r3
 8005e30:	46d0      	mov	r8, sl
 8005e32:	1b63      	subs	r3, r4, r5
 8005e34:	2b0f      	cmp	r3, #15
 8005e36:	d81d      	bhi.n	8005e74 <_realloc_r+0x164>
 8005e38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	4323      	orrs	r3, r4
 8005e42:	4444      	add	r4, r8
 8005e44:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6063      	str	r3, [r4, #4]
 8005e50:	4648      	mov	r0, r9
 8005e52:	f7ff f86f 	bl	8004f34 <__malloc_unlock>
 8005e56:	4630      	mov	r0, r6
 8005e58:	b003      	add	sp, #12
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	f021 0103 	bic.w	r1, r1, #3
 8005e62:	4421      	add	r1, r4
 8005e64:	4291      	cmp	r1, r2
 8005e66:	db21      	blt.n	8005eac <_realloc_r+0x19c>
 8005e68:	68c3      	ldr	r3, [r0, #12]
 8005e6a:	6882      	ldr	r2, [r0, #8]
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	60d3      	str	r3, [r2, #12]
 8005e70:	609a      	str	r2, [r3, #8]
 8005e72:	e7de      	b.n	8005e32 <_realloc_r+0x122>
 8005e74:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005e78:	eb08 0105 	add.w	r1, r8, r5
 8005e7c:	f002 0201 	and.w	r2, r2, #1
 8005e80:	4315      	orrs	r5, r2
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	440b      	add	r3, r1
 8005e88:	f8c8 5004 	str.w	r5, [r8, #4]
 8005e8c:	604a      	str	r2, [r1, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	3108      	adds	r1, #8
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	4648      	mov	r0, r9
 8005e9a:	f7fe fb83 	bl	80045a4 <_free_r>
 8005e9e:	e7d7      	b.n	8005e50 <_realloc_r+0x140>
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	b003      	add	sp, #12
 8005ea4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	f7fe bd22 	b.w	80048f0 <_malloc_r>
 8005eac:	f01e 0f01 	tst.w	lr, #1
 8005eb0:	f47f af5a 	bne.w	8005d68 <_realloc_r+0x58>
 8005eb4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005eb8:	ebc3 0a08 	rsb	sl, r3, r8
 8005ebc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005ec0:	f023 0c03 	bic.w	ip, r3, #3
 8005ec4:	eb01 0e0c 	add.w	lr, r1, ip
 8005ec8:	4596      	cmp	lr, r2
 8005eca:	db8b      	blt.n	8005de4 <_realloc_r+0xd4>
 8005ecc:	68c3      	ldr	r3, [r0, #12]
 8005ece:	6882      	ldr	r2, [r0, #8]
 8005ed0:	4657      	mov	r7, sl
 8005ed2:	60d3      	str	r3, [r2, #12]
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005eda:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005ede:	60cb      	str	r3, [r1, #12]
 8005ee0:	1f22      	subs	r2, r4, #4
 8005ee2:	2a24      	cmp	r2, #36	; 0x24
 8005ee4:	6099      	str	r1, [r3, #8]
 8005ee6:	f200 8099 	bhi.w	800601c <_realloc_r+0x30c>
 8005eea:	2a13      	cmp	r2, #19
 8005eec:	d962      	bls.n	8005fb4 <_realloc_r+0x2a4>
 8005eee:	6833      	ldr	r3, [r6, #0]
 8005ef0:	f8ca 3008 	str.w	r3, [sl, #8]
 8005ef4:	6873      	ldr	r3, [r6, #4]
 8005ef6:	f8ca 300c 	str.w	r3, [sl, #12]
 8005efa:	2a1b      	cmp	r2, #27
 8005efc:	f200 80a0 	bhi.w	8006040 <_realloc_r+0x330>
 8005f00:	3608      	adds	r6, #8
 8005f02:	f10a 0310 	add.w	r3, sl, #16
 8005f06:	e056      	b.n	8005fb6 <_realloc_r+0x2a6>
 8005f08:	f021 0b03 	bic.w	fp, r1, #3
 8005f0c:	44a3      	add	fp, r4
 8005f0e:	f105 0010 	add.w	r0, r5, #16
 8005f12:	4583      	cmp	fp, r0
 8005f14:	da59      	bge.n	8005fca <_realloc_r+0x2ba>
 8005f16:	f01e 0f01 	tst.w	lr, #1
 8005f1a:	f47f af25 	bne.w	8005d68 <_realloc_r+0x58>
 8005f1e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005f22:	ebc1 0a08 	rsb	sl, r1, r8
 8005f26:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005f2a:	f021 0c03 	bic.w	ip, r1, #3
 8005f2e:	44e3      	add	fp, ip
 8005f30:	4558      	cmp	r0, fp
 8005f32:	f73f af57 	bgt.w	8005de4 <_realloc_r+0xd4>
 8005f36:	4657      	mov	r7, sl
 8005f38:	f8da 100c 	ldr.w	r1, [sl, #12]
 8005f3c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8005f40:	1f22      	subs	r2, r4, #4
 8005f42:	2a24      	cmp	r2, #36	; 0x24
 8005f44:	60c1      	str	r1, [r0, #12]
 8005f46:	6088      	str	r0, [r1, #8]
 8005f48:	f200 80b4 	bhi.w	80060b4 <_realloc_r+0x3a4>
 8005f4c:	2a13      	cmp	r2, #19
 8005f4e:	f240 80a5 	bls.w	800609c <_realloc_r+0x38c>
 8005f52:	6831      	ldr	r1, [r6, #0]
 8005f54:	f8ca 1008 	str.w	r1, [sl, #8]
 8005f58:	6871      	ldr	r1, [r6, #4]
 8005f5a:	f8ca 100c 	str.w	r1, [sl, #12]
 8005f5e:	2a1b      	cmp	r2, #27
 8005f60:	f200 80af 	bhi.w	80060c2 <_realloc_r+0x3b2>
 8005f64:	3608      	adds	r6, #8
 8005f66:	f10a 0210 	add.w	r2, sl, #16
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	6871      	ldr	r1, [r6, #4]
 8005f70:	6051      	str	r1, [r2, #4]
 8005f72:	68b1      	ldr	r1, [r6, #8]
 8005f74:	6091      	str	r1, [r2, #8]
 8005f76:	eb0a 0105 	add.w	r1, sl, r5
 8005f7a:	ebc5 020b 	rsb	r2, r5, fp
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	6099      	str	r1, [r3, #8]
 8005f84:	604a      	str	r2, [r1, #4]
 8005f86:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	431d      	orrs	r5, r3
 8005f90:	4648      	mov	r0, r9
 8005f92:	f8ca 5004 	str.w	r5, [sl, #4]
 8005f96:	f7fe ffcd 	bl	8004f34 <__malloc_unlock>
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	e75c      	b.n	8005e58 <_realloc_r+0x148>
 8005f9e:	6833      	ldr	r3, [r6, #0]
 8005fa0:	6003      	str	r3, [r0, #0]
 8005fa2:	6873      	ldr	r3, [r6, #4]
 8005fa4:	6043      	str	r3, [r0, #4]
 8005fa6:	2a1b      	cmp	r2, #27
 8005fa8:	d827      	bhi.n	8005ffa <_realloc_r+0x2ea>
 8005faa:	f100 0308 	add.w	r3, r0, #8
 8005fae:	f106 0208 	add.w	r2, r6, #8
 8005fb2:	e6f2      	b.n	8005d9a <_realloc_r+0x8a>
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	6832      	ldr	r2, [r6, #0]
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	6872      	ldr	r2, [r6, #4]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	68b2      	ldr	r2, [r6, #8]
 8005fc0:	609a      	str	r2, [r3, #8]
 8005fc2:	463e      	mov	r6, r7
 8005fc4:	4674      	mov	r4, lr
 8005fc6:	46d0      	mov	r8, sl
 8005fc8:	e733      	b.n	8005e32 <_realloc_r+0x122>
 8005fca:	eb08 0105 	add.w	r1, r8, r5
 8005fce:	ebc5 0b0b 	rsb	fp, r5, fp
 8005fd2:	f04b 0201 	orr.w	r2, fp, #1
 8005fd6:	6099      	str	r1, [r3, #8]
 8005fd8:	604a      	str	r2, [r1, #4]
 8005fda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	431d      	orrs	r5, r3
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	f846 5c04 	str.w	r5, [r6, #-4]
 8005fea:	f7fe ffa3 	bl	8004f34 <__malloc_unlock>
 8005fee:	4630      	mov	r0, r6
 8005ff0:	e732      	b.n	8005e58 <_realloc_r+0x148>
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	f7ff fe12 	bl	8005c1c <memmove>
 8005ff8:	e6d5      	b.n	8005da6 <_realloc_r+0x96>
 8005ffa:	68b3      	ldr	r3, [r6, #8]
 8005ffc:	6083      	str	r3, [r0, #8]
 8005ffe:	68f3      	ldr	r3, [r6, #12]
 8006000:	60c3      	str	r3, [r0, #12]
 8006002:	2a24      	cmp	r2, #36	; 0x24
 8006004:	d028      	beq.n	8006058 <_realloc_r+0x348>
 8006006:	f100 0310 	add.w	r3, r0, #16
 800600a:	f106 0210 	add.w	r2, r6, #16
 800600e:	e6c4      	b.n	8005d9a <_realloc_r+0x8a>
 8006010:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006014:	f023 0303 	bic.w	r3, r3, #3
 8006018:	441c      	add	r4, r3
 800601a:	e70a      	b.n	8005e32 <_realloc_r+0x122>
 800601c:	4631      	mov	r1, r6
 800601e:	4638      	mov	r0, r7
 8006020:	4674      	mov	r4, lr
 8006022:	46d0      	mov	r8, sl
 8006024:	f7ff fdfa 	bl	8005c1c <memmove>
 8006028:	463e      	mov	r6, r7
 800602a:	e702      	b.n	8005e32 <_realloc_r+0x122>
 800602c:	463a      	mov	r2, r7
 800602e:	e6f7      	b.n	8005e20 <_realloc_r+0x110>
 8006030:	4631      	mov	r1, r6
 8006032:	4638      	mov	r0, r7
 8006034:	461c      	mov	r4, r3
 8006036:	46d0      	mov	r8, sl
 8006038:	f7ff fdf0 	bl	8005c1c <memmove>
 800603c:	463e      	mov	r6, r7
 800603e:	e6f8      	b.n	8005e32 <_realloc_r+0x122>
 8006040:	68b3      	ldr	r3, [r6, #8]
 8006042:	f8ca 3010 	str.w	r3, [sl, #16]
 8006046:	68f3      	ldr	r3, [r6, #12]
 8006048:	f8ca 3014 	str.w	r3, [sl, #20]
 800604c:	2a24      	cmp	r2, #36	; 0x24
 800604e:	d01b      	beq.n	8006088 <_realloc_r+0x378>
 8006050:	3610      	adds	r6, #16
 8006052:	f10a 0318 	add.w	r3, sl, #24
 8006056:	e7ae      	b.n	8005fb6 <_realloc_r+0x2a6>
 8006058:	6933      	ldr	r3, [r6, #16]
 800605a:	6103      	str	r3, [r0, #16]
 800605c:	6973      	ldr	r3, [r6, #20]
 800605e:	6143      	str	r3, [r0, #20]
 8006060:	f106 0218 	add.w	r2, r6, #24
 8006064:	f100 0318 	add.w	r3, r0, #24
 8006068:	e697      	b.n	8005d9a <_realloc_r+0x8a>
 800606a:	bf00      	nop
 800606c:	200005b8 	.word	0x200005b8
 8006070:	68b1      	ldr	r1, [r6, #8]
 8006072:	f8ca 1010 	str.w	r1, [sl, #16]
 8006076:	68f1      	ldr	r1, [r6, #12]
 8006078:	f8ca 1014 	str.w	r1, [sl, #20]
 800607c:	2a24      	cmp	r2, #36	; 0x24
 800607e:	d00f      	beq.n	80060a0 <_realloc_r+0x390>
 8006080:	3610      	adds	r6, #16
 8006082:	f10a 0218 	add.w	r2, sl, #24
 8006086:	e6cb      	b.n	8005e20 <_realloc_r+0x110>
 8006088:	6933      	ldr	r3, [r6, #16]
 800608a:	f8ca 3018 	str.w	r3, [sl, #24]
 800608e:	6973      	ldr	r3, [r6, #20]
 8006090:	f8ca 301c 	str.w	r3, [sl, #28]
 8006094:	3618      	adds	r6, #24
 8006096:	f10a 0320 	add.w	r3, sl, #32
 800609a:	e78c      	b.n	8005fb6 <_realloc_r+0x2a6>
 800609c:	463a      	mov	r2, r7
 800609e:	e764      	b.n	8005f6a <_realloc_r+0x25a>
 80060a0:	6932      	ldr	r2, [r6, #16]
 80060a2:	f8ca 2018 	str.w	r2, [sl, #24]
 80060a6:	6972      	ldr	r2, [r6, #20]
 80060a8:	f8ca 201c 	str.w	r2, [sl, #28]
 80060ac:	3618      	adds	r6, #24
 80060ae:	f10a 0220 	add.w	r2, sl, #32
 80060b2:	e6b5      	b.n	8005e20 <_realloc_r+0x110>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4638      	mov	r0, r7
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	f7ff fdaf 	bl	8005c1c <memmove>
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	e759      	b.n	8005f76 <_realloc_r+0x266>
 80060c2:	68b1      	ldr	r1, [r6, #8]
 80060c4:	f8ca 1010 	str.w	r1, [sl, #16]
 80060c8:	68f1      	ldr	r1, [r6, #12]
 80060ca:	f8ca 1014 	str.w	r1, [sl, #20]
 80060ce:	2a24      	cmp	r2, #36	; 0x24
 80060d0:	d003      	beq.n	80060da <_realloc_r+0x3ca>
 80060d2:	3610      	adds	r6, #16
 80060d4:	f10a 0218 	add.w	r2, sl, #24
 80060d8:	e747      	b.n	8005f6a <_realloc_r+0x25a>
 80060da:	6932      	ldr	r2, [r6, #16]
 80060dc:	f8ca 2018 	str.w	r2, [sl, #24]
 80060e0:	6972      	ldr	r2, [r6, #20]
 80060e2:	f8ca 201c 	str.w	r2, [sl, #28]
 80060e6:	3618      	adds	r6, #24
 80060e8:	f10a 0220 	add.w	r2, sl, #32
 80060ec:	e73d      	b.n	8005f6a <_realloc_r+0x25a>
 80060ee:	bf00      	nop

080060f0 <__swbuf_r>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	460d      	mov	r5, r1
 80060f4:	4614      	mov	r4, r2
 80060f6:	4606      	mov	r6, r0
 80060f8:	b110      	cbz	r0, 8006100 <__swbuf_r+0x10>
 80060fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d04a      	beq.n	8006196 <__swbuf_r+0xa6>
 8006100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006104:	69a3      	ldr	r3, [r4, #24]
 8006106:	60a3      	str	r3, [r4, #8]
 8006108:	b291      	uxth	r1, r2
 800610a:	0708      	lsls	r0, r1, #28
 800610c:	d538      	bpl.n	8006180 <__swbuf_r+0x90>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d035      	beq.n	8006180 <__swbuf_r+0x90>
 8006114:	0489      	lsls	r1, r1, #18
 8006116:	b2ef      	uxtb	r7, r5
 8006118:	d515      	bpl.n	8006146 <__swbuf_r+0x56>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	6961      	ldr	r1, [r4, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	428b      	cmp	r3, r1
 8006122:	da1c      	bge.n	800615e <__swbuf_r+0x6e>
 8006124:	3301      	adds	r3, #1
 8006126:	68a1      	ldr	r1, [r4, #8]
 8006128:	1c50      	adds	r0, r2, #1
 800612a:	3901      	subs	r1, #1
 800612c:	60a1      	str	r1, [r4, #8]
 800612e:	6020      	str	r0, [r4, #0]
 8006130:	7015      	strb	r5, [r2, #0]
 8006132:	6962      	ldr	r2, [r4, #20]
 8006134:	429a      	cmp	r2, r3
 8006136:	d01a      	beq.n	800616e <__swbuf_r+0x7e>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	07db      	lsls	r3, r3, #31
 800613c:	d501      	bpl.n	8006142 <__swbuf_r+0x52>
 800613e:	2f0a      	cmp	r7, #10
 8006140:	d015      	beq.n	800616e <__swbuf_r+0x7e>
 8006142:	4638      	mov	r0, r7
 8006144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006146:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800614c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8006150:	81a2      	strh	r2, [r4, #12]
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	6661      	str	r1, [r4, #100]	; 0x64
 8006156:	6961      	ldr	r1, [r4, #20]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	428b      	cmp	r3, r1
 800615c:	dbe2      	blt.n	8006124 <__swbuf_r+0x34>
 800615e:	4621      	mov	r1, r4
 8006160:	4630      	mov	r0, r6
 8006162:	f7fe f933 	bl	80043cc <_fflush_r>
 8006166:	b940      	cbnz	r0, 800617a <__swbuf_r+0x8a>
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	2301      	movs	r3, #1
 800616c:	e7db      	b.n	8006126 <__swbuf_r+0x36>
 800616e:	4621      	mov	r1, r4
 8006170:	4630      	mov	r0, r6
 8006172:	f7fe f92b 	bl	80043cc <_fflush_r>
 8006176:	2800      	cmp	r0, #0
 8006178:	d0e3      	beq.n	8006142 <__swbuf_r+0x52>
 800617a:	f04f 37ff 	mov.w	r7, #4294967295
 800617e:	e7e0      	b.n	8006142 <__swbuf_r+0x52>
 8006180:	4621      	mov	r1, r4
 8006182:	4630      	mov	r0, r6
 8006184:	f7fd f86e 	bl	8003264 <__swsetup_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	d1f6      	bne.n	800617a <__swbuf_r+0x8a>
 800618c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	b291      	uxth	r1, r2
 8006194:	e7be      	b.n	8006114 <__swbuf_r+0x24>
 8006196:	f7fe f9ad 	bl	80044f4 <__sinit>
 800619a:	e7b1      	b.n	8006100 <__swbuf_r+0x10>

0800619c <_wcrtomb_r>:
 800619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619e:	4606      	mov	r6, r0
 80061a0:	b085      	sub	sp, #20
 80061a2:	461f      	mov	r7, r3
 80061a4:	b189      	cbz	r1, 80061ca <_wcrtomb_r+0x2e>
 80061a6:	4c10      	ldr	r4, [pc, #64]	; (80061e8 <_wcrtomb_r+0x4c>)
 80061a8:	4d10      	ldr	r5, [pc, #64]	; (80061ec <_wcrtomb_r+0x50>)
 80061aa:	6824      	ldr	r4, [r4, #0]
 80061ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80061ae:	2c00      	cmp	r4, #0
 80061b0:	bf08      	it	eq
 80061b2:	462c      	moveq	r4, r5
 80061b4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80061b8:	47a0      	blx	r4
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d103      	bne.n	80061c6 <_wcrtomb_r+0x2a>
 80061be:	2200      	movs	r2, #0
 80061c0:	238a      	movs	r3, #138	; 0x8a
 80061c2:	603a      	str	r2, [r7, #0]
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	b005      	add	sp, #20
 80061c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ca:	460c      	mov	r4, r1
 80061cc:	4906      	ldr	r1, [pc, #24]	; (80061e8 <_wcrtomb_r+0x4c>)
 80061ce:	4a07      	ldr	r2, [pc, #28]	; (80061ec <_wcrtomb_r+0x50>)
 80061d0:	6809      	ldr	r1, [r1, #0]
 80061d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80061d4:	2900      	cmp	r1, #0
 80061d6:	bf08      	it	eq
 80061d8:	4611      	moveq	r1, r2
 80061da:	4622      	mov	r2, r4
 80061dc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 80061e0:	a901      	add	r1, sp, #4
 80061e2:	47a0      	blx	r4
 80061e4:	e7e9      	b.n	80061ba <_wcrtomb_r+0x1e>
 80061e6:	bf00      	nop
 80061e8:	20000448 	.word	0x20000448
 80061ec:	2000044c 	.word	0x2000044c

080061f0 <__aeabi_drsub>:
 80061f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80061f4:	e002      	b.n	80061fc <__adddf3>
 80061f6:	bf00      	nop

080061f8 <__aeabi_dsub>:
 80061f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080061fc <__adddf3>:
 80061fc:	b530      	push	{r4, r5, lr}
 80061fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006206:	ea94 0f05 	teq	r4, r5
 800620a:	bf08      	it	eq
 800620c:	ea90 0f02 	teqeq	r0, r2
 8006210:	bf1f      	itttt	ne
 8006212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800621a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800621e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006222:	f000 80e2 	beq.w	80063ea <__adddf3+0x1ee>
 8006226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800622a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800622e:	bfb8      	it	lt
 8006230:	426d      	neglt	r5, r5
 8006232:	dd0c      	ble.n	800624e <__adddf3+0x52>
 8006234:	442c      	add	r4, r5
 8006236:	ea80 0202 	eor.w	r2, r0, r2
 800623a:	ea81 0303 	eor.w	r3, r1, r3
 800623e:	ea82 0000 	eor.w	r0, r2, r0
 8006242:	ea83 0101 	eor.w	r1, r3, r1
 8006246:	ea80 0202 	eor.w	r2, r0, r2
 800624a:	ea81 0303 	eor.w	r3, r1, r3
 800624e:	2d36      	cmp	r5, #54	; 0x36
 8006250:	bf88      	it	hi
 8006252:	bd30      	pophi	{r4, r5, pc}
 8006254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800625c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006264:	d002      	beq.n	800626c <__adddf3+0x70>
 8006266:	4240      	negs	r0, r0
 8006268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800626c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006278:	d002      	beq.n	8006280 <__adddf3+0x84>
 800627a:	4252      	negs	r2, r2
 800627c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006280:	ea94 0f05 	teq	r4, r5
 8006284:	f000 80a7 	beq.w	80063d6 <__adddf3+0x1da>
 8006288:	f1a4 0401 	sub.w	r4, r4, #1
 800628c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006290:	db0d      	blt.n	80062ae <__adddf3+0xb2>
 8006292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006296:	fa22 f205 	lsr.w	r2, r2, r5
 800629a:	1880      	adds	r0, r0, r2
 800629c:	f141 0100 	adc.w	r1, r1, #0
 80062a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80062a4:	1880      	adds	r0, r0, r2
 80062a6:	fa43 f305 	asr.w	r3, r3, r5
 80062aa:	4159      	adcs	r1, r3
 80062ac:	e00e      	b.n	80062cc <__adddf3+0xd0>
 80062ae:	f1a5 0520 	sub.w	r5, r5, #32
 80062b2:	f10e 0e20 	add.w	lr, lr, #32
 80062b6:	2a01      	cmp	r2, #1
 80062b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80062bc:	bf28      	it	cs
 80062be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80062c2:	fa43 f305 	asr.w	r3, r3, r5
 80062c6:	18c0      	adds	r0, r0, r3
 80062c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80062cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80062d0:	d507      	bpl.n	80062e2 <__adddf3+0xe6>
 80062d2:	f04f 0e00 	mov.w	lr, #0
 80062d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80062da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80062de:	eb6e 0101 	sbc.w	r1, lr, r1
 80062e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80062e6:	d31b      	bcc.n	8006320 <__adddf3+0x124>
 80062e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80062ec:	d30c      	bcc.n	8006308 <__adddf3+0x10c>
 80062ee:	0849      	lsrs	r1, r1, #1
 80062f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80062f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80062f8:	f104 0401 	add.w	r4, r4, #1
 80062fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006304:	f080 809a 	bcs.w	800643c <__adddf3+0x240>
 8006308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800630c:	bf08      	it	eq
 800630e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006312:	f150 0000 	adcs.w	r0, r0, #0
 8006316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800631a:	ea41 0105 	orr.w	r1, r1, r5
 800631e:	bd30      	pop	{r4, r5, pc}
 8006320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006324:	4140      	adcs	r0, r0
 8006326:	eb41 0101 	adc.w	r1, r1, r1
 800632a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800632e:	f1a4 0401 	sub.w	r4, r4, #1
 8006332:	d1e9      	bne.n	8006308 <__adddf3+0x10c>
 8006334:	f091 0f00 	teq	r1, #0
 8006338:	bf04      	itt	eq
 800633a:	4601      	moveq	r1, r0
 800633c:	2000      	moveq	r0, #0
 800633e:	fab1 f381 	clz	r3, r1
 8006342:	bf08      	it	eq
 8006344:	3320      	addeq	r3, #32
 8006346:	f1a3 030b 	sub.w	r3, r3, #11
 800634a:	f1b3 0220 	subs.w	r2, r3, #32
 800634e:	da0c      	bge.n	800636a <__adddf3+0x16e>
 8006350:	320c      	adds	r2, #12
 8006352:	dd08      	ble.n	8006366 <__adddf3+0x16a>
 8006354:	f102 0c14 	add.w	ip, r2, #20
 8006358:	f1c2 020c 	rsb	r2, r2, #12
 800635c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006360:	fa21 f102 	lsr.w	r1, r1, r2
 8006364:	e00c      	b.n	8006380 <__adddf3+0x184>
 8006366:	f102 0214 	add.w	r2, r2, #20
 800636a:	bfd8      	it	le
 800636c:	f1c2 0c20 	rsble	ip, r2, #32
 8006370:	fa01 f102 	lsl.w	r1, r1, r2
 8006374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006378:	bfdc      	itt	le
 800637a:	ea41 010c 	orrle.w	r1, r1, ip
 800637e:	4090      	lslle	r0, r2
 8006380:	1ae4      	subs	r4, r4, r3
 8006382:	bfa2      	ittt	ge
 8006384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006388:	4329      	orrge	r1, r5
 800638a:	bd30      	popge	{r4, r5, pc}
 800638c:	ea6f 0404 	mvn.w	r4, r4
 8006390:	3c1f      	subs	r4, #31
 8006392:	da1c      	bge.n	80063ce <__adddf3+0x1d2>
 8006394:	340c      	adds	r4, #12
 8006396:	dc0e      	bgt.n	80063b6 <__adddf3+0x1ba>
 8006398:	f104 0414 	add.w	r4, r4, #20
 800639c:	f1c4 0220 	rsb	r2, r4, #32
 80063a0:	fa20 f004 	lsr.w	r0, r0, r4
 80063a4:	fa01 f302 	lsl.w	r3, r1, r2
 80063a8:	ea40 0003 	orr.w	r0, r0, r3
 80063ac:	fa21 f304 	lsr.w	r3, r1, r4
 80063b0:	ea45 0103 	orr.w	r1, r5, r3
 80063b4:	bd30      	pop	{r4, r5, pc}
 80063b6:	f1c4 040c 	rsb	r4, r4, #12
 80063ba:	f1c4 0220 	rsb	r2, r4, #32
 80063be:	fa20 f002 	lsr.w	r0, r0, r2
 80063c2:	fa01 f304 	lsl.w	r3, r1, r4
 80063c6:	ea40 0003 	orr.w	r0, r0, r3
 80063ca:	4629      	mov	r1, r5
 80063cc:	bd30      	pop	{r4, r5, pc}
 80063ce:	fa21 f004 	lsr.w	r0, r1, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	bd30      	pop	{r4, r5, pc}
 80063d6:	f094 0f00 	teq	r4, #0
 80063da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80063de:	bf06      	itte	eq
 80063e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80063e4:	3401      	addeq	r4, #1
 80063e6:	3d01      	subne	r5, #1
 80063e8:	e74e      	b.n	8006288 <__adddf3+0x8c>
 80063ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80063ee:	bf18      	it	ne
 80063f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063f4:	d029      	beq.n	800644a <__adddf3+0x24e>
 80063f6:	ea94 0f05 	teq	r4, r5
 80063fa:	bf08      	it	eq
 80063fc:	ea90 0f02 	teqeq	r0, r2
 8006400:	d005      	beq.n	800640e <__adddf3+0x212>
 8006402:	ea54 0c00 	orrs.w	ip, r4, r0
 8006406:	bf04      	itt	eq
 8006408:	4619      	moveq	r1, r3
 800640a:	4610      	moveq	r0, r2
 800640c:	bd30      	pop	{r4, r5, pc}
 800640e:	ea91 0f03 	teq	r1, r3
 8006412:	bf1e      	ittt	ne
 8006414:	2100      	movne	r1, #0
 8006416:	2000      	movne	r0, #0
 8006418:	bd30      	popne	{r4, r5, pc}
 800641a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800641e:	d105      	bne.n	800642c <__adddf3+0x230>
 8006420:	0040      	lsls	r0, r0, #1
 8006422:	4149      	adcs	r1, r1
 8006424:	bf28      	it	cs
 8006426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800642a:	bd30      	pop	{r4, r5, pc}
 800642c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006430:	bf3c      	itt	cc
 8006432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006436:	bd30      	popcc	{r4, r5, pc}
 8006438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800643c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	bd30      	pop	{r4, r5, pc}
 800644a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800644e:	bf1a      	itte	ne
 8006450:	4619      	movne	r1, r3
 8006452:	4610      	movne	r0, r2
 8006454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006458:	bf1c      	itt	ne
 800645a:	460b      	movne	r3, r1
 800645c:	4602      	movne	r2, r0
 800645e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006462:	bf06      	itte	eq
 8006464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006468:	ea91 0f03 	teqeq	r1, r3
 800646c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006470:	bd30      	pop	{r4, r5, pc}
 8006472:	bf00      	nop

08006474 <__aeabi_ui2d>:
 8006474:	f090 0f00 	teq	r0, #0
 8006478:	bf04      	itt	eq
 800647a:	2100      	moveq	r1, #0
 800647c:	4770      	bxeq	lr
 800647e:	b530      	push	{r4, r5, lr}
 8006480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006488:	f04f 0500 	mov.w	r5, #0
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	e750      	b.n	8006334 <__adddf3+0x138>
 8006492:	bf00      	nop

08006494 <__aeabi_i2d>:
 8006494:	f090 0f00 	teq	r0, #0
 8006498:	bf04      	itt	eq
 800649a:	2100      	moveq	r1, #0
 800649c:	4770      	bxeq	lr
 800649e:	b530      	push	{r4, r5, lr}
 80064a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80064a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80064a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80064ac:	bf48      	it	mi
 80064ae:	4240      	negmi	r0, r0
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	e73e      	b.n	8006334 <__adddf3+0x138>
 80064b6:	bf00      	nop

080064b8 <__aeabi_f2d>:
 80064b8:	0042      	lsls	r2, r0, #1
 80064ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80064be:	ea4f 0131 	mov.w	r1, r1, rrx
 80064c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80064c6:	bf1f      	itttt	ne
 80064c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80064cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80064d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80064d4:	4770      	bxne	lr
 80064d6:	f092 0f00 	teq	r2, #0
 80064da:	bf14      	ite	ne
 80064dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80064e0:	4770      	bxeq	lr
 80064e2:	b530      	push	{r4, r5, lr}
 80064e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80064e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80064ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80064f0:	e720      	b.n	8006334 <__adddf3+0x138>
 80064f2:	bf00      	nop

080064f4 <__aeabi_ul2d>:
 80064f4:	ea50 0201 	orrs.w	r2, r0, r1
 80064f8:	bf08      	it	eq
 80064fa:	4770      	bxeq	lr
 80064fc:	b530      	push	{r4, r5, lr}
 80064fe:	f04f 0500 	mov.w	r5, #0
 8006502:	e00a      	b.n	800651a <__aeabi_l2d+0x16>

08006504 <__aeabi_l2d>:
 8006504:	ea50 0201 	orrs.w	r2, r0, r1
 8006508:	bf08      	it	eq
 800650a:	4770      	bxeq	lr
 800650c:	b530      	push	{r4, r5, lr}
 800650e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006512:	d502      	bpl.n	800651a <__aeabi_l2d+0x16>
 8006514:	4240      	negs	r0, r0
 8006516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800651a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800651e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006526:	f43f aedc 	beq.w	80062e2 <__adddf3+0xe6>
 800652a:	f04f 0203 	mov.w	r2, #3
 800652e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006532:	bf18      	it	ne
 8006534:	3203      	addne	r2, #3
 8006536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800653a:	bf18      	it	ne
 800653c:	3203      	addne	r2, #3
 800653e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006542:	f1c2 0320 	rsb	r3, r2, #32
 8006546:	fa00 fc03 	lsl.w	ip, r0, r3
 800654a:	fa20 f002 	lsr.w	r0, r0, r2
 800654e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006552:	ea40 000e 	orr.w	r0, r0, lr
 8006556:	fa21 f102 	lsr.w	r1, r1, r2
 800655a:	4414      	add	r4, r2
 800655c:	e6c1      	b.n	80062e2 <__adddf3+0xe6>
 800655e:	bf00      	nop

08006560 <__aeabi_dmul>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800656a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800656e:	bf1d      	ittte	ne
 8006570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006574:	ea94 0f0c 	teqne	r4, ip
 8006578:	ea95 0f0c 	teqne	r5, ip
 800657c:	f000 f8de 	bleq	800673c <__aeabi_dmul+0x1dc>
 8006580:	442c      	add	r4, r5
 8006582:	ea81 0603 	eor.w	r6, r1, r3
 8006586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800658a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800658e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006592:	bf18      	it	ne
 8006594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800659c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065a0:	d038      	beq.n	8006614 <__aeabi_dmul+0xb4>
 80065a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80065a6:	f04f 0500 	mov.w	r5, #0
 80065aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80065ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80065b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80065b6:	f04f 0600 	mov.w	r6, #0
 80065ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80065be:	f09c 0f00 	teq	ip, #0
 80065c2:	bf18      	it	ne
 80065c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80065c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80065cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80065d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80065d4:	d204      	bcs.n	80065e0 <__aeabi_dmul+0x80>
 80065d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80065da:	416d      	adcs	r5, r5
 80065dc:	eb46 0606 	adc.w	r6, r6, r6
 80065e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80065e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80065e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80065ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80065f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80065f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80065f8:	bf88      	it	hi
 80065fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80065fe:	d81e      	bhi.n	800663e <__aeabi_dmul+0xde>
 8006600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006604:	bf08      	it	eq
 8006606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800660a:	f150 0000 	adcs.w	r0, r0, #0
 800660e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006618:	ea46 0101 	orr.w	r1, r6, r1
 800661c:	ea40 0002 	orr.w	r0, r0, r2
 8006620:	ea81 0103 	eor.w	r1, r1, r3
 8006624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006628:	bfc2      	ittt	gt
 800662a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800662e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006632:	bd70      	popgt	{r4, r5, r6, pc}
 8006634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006638:	f04f 0e00 	mov.w	lr, #0
 800663c:	3c01      	subs	r4, #1
 800663e:	f300 80ab 	bgt.w	8006798 <__aeabi_dmul+0x238>
 8006642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006646:	bfde      	ittt	le
 8006648:	2000      	movle	r0, #0
 800664a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800664e:	bd70      	pople	{r4, r5, r6, pc}
 8006650:	f1c4 0400 	rsb	r4, r4, #0
 8006654:	3c20      	subs	r4, #32
 8006656:	da35      	bge.n	80066c4 <__aeabi_dmul+0x164>
 8006658:	340c      	adds	r4, #12
 800665a:	dc1b      	bgt.n	8006694 <__aeabi_dmul+0x134>
 800665c:	f104 0414 	add.w	r4, r4, #20
 8006660:	f1c4 0520 	rsb	r5, r4, #32
 8006664:	fa00 f305 	lsl.w	r3, r0, r5
 8006668:	fa20 f004 	lsr.w	r0, r0, r4
 800666c:	fa01 f205 	lsl.w	r2, r1, r5
 8006670:	ea40 0002 	orr.w	r0, r0, r2
 8006674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800667c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006680:	fa21 f604 	lsr.w	r6, r1, r4
 8006684:	eb42 0106 	adc.w	r1, r2, r6
 8006688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800668c:	bf08      	it	eq
 800668e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	f1c4 040c 	rsb	r4, r4, #12
 8006698:	f1c4 0520 	rsb	r5, r4, #32
 800669c:	fa00 f304 	lsl.w	r3, r0, r4
 80066a0:	fa20 f005 	lsr.w	r0, r0, r5
 80066a4:	fa01 f204 	lsl.w	r2, r1, r4
 80066a8:	ea40 0002 	orr.w	r0, r0, r2
 80066ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80066b4:	f141 0100 	adc.w	r1, r1, #0
 80066b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80066bc:	bf08      	it	eq
 80066be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f1c4 0520 	rsb	r5, r4, #32
 80066c8:	fa00 f205 	lsl.w	r2, r0, r5
 80066cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80066d0:	fa20 f304 	lsr.w	r3, r0, r4
 80066d4:	fa01 f205 	lsl.w	r2, r1, r5
 80066d8:	ea43 0302 	orr.w	r3, r3, r2
 80066dc:	fa21 f004 	lsr.w	r0, r1, r4
 80066e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066e4:	fa21 f204 	lsr.w	r2, r1, r4
 80066e8:	ea20 0002 	bic.w	r0, r0, r2
 80066ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80066f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80066f4:	bf08      	it	eq
 80066f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	f094 0f00 	teq	r4, #0
 8006700:	d10f      	bne.n	8006722 <__aeabi_dmul+0x1c2>
 8006702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006706:	0040      	lsls	r0, r0, #1
 8006708:	eb41 0101 	adc.w	r1, r1, r1
 800670c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006710:	bf08      	it	eq
 8006712:	3c01      	subeq	r4, #1
 8006714:	d0f7      	beq.n	8006706 <__aeabi_dmul+0x1a6>
 8006716:	ea41 0106 	orr.w	r1, r1, r6
 800671a:	f095 0f00 	teq	r5, #0
 800671e:	bf18      	it	ne
 8006720:	4770      	bxne	lr
 8006722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006726:	0052      	lsls	r2, r2, #1
 8006728:	eb43 0303 	adc.w	r3, r3, r3
 800672c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006730:	bf08      	it	eq
 8006732:	3d01      	subeq	r5, #1
 8006734:	d0f7      	beq.n	8006726 <__aeabi_dmul+0x1c6>
 8006736:	ea43 0306 	orr.w	r3, r3, r6
 800673a:	4770      	bx	lr
 800673c:	ea94 0f0c 	teq	r4, ip
 8006740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006744:	bf18      	it	ne
 8006746:	ea95 0f0c 	teqne	r5, ip
 800674a:	d00c      	beq.n	8006766 <__aeabi_dmul+0x206>
 800674c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006750:	bf18      	it	ne
 8006752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006756:	d1d1      	bne.n	80066fc <__aeabi_dmul+0x19c>
 8006758:	ea81 0103 	eor.w	r1, r1, r3
 800675c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006760:	f04f 0000 	mov.w	r0, #0
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800676a:	bf06      	itte	eq
 800676c:	4610      	moveq	r0, r2
 800676e:	4619      	moveq	r1, r3
 8006770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006774:	d019      	beq.n	80067aa <__aeabi_dmul+0x24a>
 8006776:	ea94 0f0c 	teq	r4, ip
 800677a:	d102      	bne.n	8006782 <__aeabi_dmul+0x222>
 800677c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006780:	d113      	bne.n	80067aa <__aeabi_dmul+0x24a>
 8006782:	ea95 0f0c 	teq	r5, ip
 8006786:	d105      	bne.n	8006794 <__aeabi_dmul+0x234>
 8006788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800678c:	bf1c      	itt	ne
 800678e:	4610      	movne	r0, r2
 8006790:	4619      	movne	r1, r3
 8006792:	d10a      	bne.n	80067aa <__aeabi_dmul+0x24a>
 8006794:	ea81 0103 	eor.w	r1, r1, r3
 8006798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800679c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80067a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80067ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80067b2:	bd70      	pop	{r4, r5, r6, pc}

080067b4 <__aeabi_ddiv>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80067ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80067be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80067c2:	bf1d      	ittte	ne
 80067c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80067c8:	ea94 0f0c 	teqne	r4, ip
 80067cc:	ea95 0f0c 	teqne	r5, ip
 80067d0:	f000 f8a7 	bleq	8006922 <__aeabi_ddiv+0x16e>
 80067d4:	eba4 0405 	sub.w	r4, r4, r5
 80067d8:	ea81 0e03 	eor.w	lr, r1, r3
 80067dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80067e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80067e4:	f000 8088 	beq.w	80068f8 <__aeabi_ddiv+0x144>
 80067e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80067ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80067f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80067f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80067f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80067fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800680c:	429d      	cmp	r5, r3
 800680e:	bf08      	it	eq
 8006810:	4296      	cmpeq	r6, r2
 8006812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800681a:	d202      	bcs.n	8006822 <__aeabi_ddiv+0x6e>
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006822:	1ab6      	subs	r6, r6, r2
 8006824:	eb65 0503 	sbc.w	r5, r5, r3
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	ea4f 0232 	mov.w	r2, r2, rrx
 800682e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006836:	ebb6 0e02 	subs.w	lr, r6, r2
 800683a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800683e:	bf22      	ittt	cs
 8006840:	1ab6      	subcs	r6, r6, r2
 8006842:	4675      	movcs	r5, lr
 8006844:	ea40 000c 	orrcs.w	r0, r0, ip
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	ea4f 0232 	mov.w	r2, r2, rrx
 800684e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006856:	bf22      	ittt	cs
 8006858:	1ab6      	subcs	r6, r6, r2
 800685a:	4675      	movcs	r5, lr
 800685c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	ea4f 0232 	mov.w	r2, r2, rrx
 8006866:	ebb6 0e02 	subs.w	lr, r6, r2
 800686a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800686e:	bf22      	ittt	cs
 8006870:	1ab6      	subcs	r6, r6, r2
 8006872:	4675      	movcs	r5, lr
 8006874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	ea4f 0232 	mov.w	r2, r2, rrx
 800687e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006886:	bf22      	ittt	cs
 8006888:	1ab6      	subcs	r6, r6, r2
 800688a:	4675      	movcs	r5, lr
 800688c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006890:	ea55 0e06 	orrs.w	lr, r5, r6
 8006894:	d018      	beq.n	80068c8 <__aeabi_ddiv+0x114>
 8006896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800689a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800689e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80068a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80068a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80068aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80068ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80068b2:	d1c0      	bne.n	8006836 <__aeabi_ddiv+0x82>
 80068b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80068b8:	d10b      	bne.n	80068d2 <__aeabi_ddiv+0x11e>
 80068ba:	ea41 0100 	orr.w	r1, r1, r0
 80068be:	f04f 0000 	mov.w	r0, #0
 80068c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80068c6:	e7b6      	b.n	8006836 <__aeabi_ddiv+0x82>
 80068c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80068cc:	bf04      	itt	eq
 80068ce:	4301      	orreq	r1, r0
 80068d0:	2000      	moveq	r0, #0
 80068d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80068d6:	bf88      	it	hi
 80068d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80068dc:	f63f aeaf 	bhi.w	800663e <__aeabi_dmul+0xde>
 80068e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80068e4:	bf04      	itt	eq
 80068e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80068ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80068ee:	f150 0000 	adcs.w	r0, r0, #0
 80068f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80068fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006904:	bfc2      	ittt	gt
 8006906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800690a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800690e:	bd70      	popgt	{r4, r5, r6, pc}
 8006910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006914:	f04f 0e00 	mov.w	lr, #0
 8006918:	3c01      	subs	r4, #1
 800691a:	e690      	b.n	800663e <__aeabi_dmul+0xde>
 800691c:	ea45 0e06 	orr.w	lr, r5, r6
 8006920:	e68d      	b.n	800663e <__aeabi_dmul+0xde>
 8006922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006926:	ea94 0f0c 	teq	r4, ip
 800692a:	bf08      	it	eq
 800692c:	ea95 0f0c 	teqeq	r5, ip
 8006930:	f43f af3b 	beq.w	80067aa <__aeabi_dmul+0x24a>
 8006934:	ea94 0f0c 	teq	r4, ip
 8006938:	d10a      	bne.n	8006950 <__aeabi_ddiv+0x19c>
 800693a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800693e:	f47f af34 	bne.w	80067aa <__aeabi_dmul+0x24a>
 8006942:	ea95 0f0c 	teq	r5, ip
 8006946:	f47f af25 	bne.w	8006794 <__aeabi_dmul+0x234>
 800694a:	4610      	mov	r0, r2
 800694c:	4619      	mov	r1, r3
 800694e:	e72c      	b.n	80067aa <__aeabi_dmul+0x24a>
 8006950:	ea95 0f0c 	teq	r5, ip
 8006954:	d106      	bne.n	8006964 <__aeabi_ddiv+0x1b0>
 8006956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800695a:	f43f aefd 	beq.w	8006758 <__aeabi_dmul+0x1f8>
 800695e:	4610      	mov	r0, r2
 8006960:	4619      	mov	r1, r3
 8006962:	e722      	b.n	80067aa <__aeabi_dmul+0x24a>
 8006964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006968:	bf18      	it	ne
 800696a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800696e:	f47f aec5 	bne.w	80066fc <__aeabi_dmul+0x19c>
 8006972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006976:	f47f af0d 	bne.w	8006794 <__aeabi_dmul+0x234>
 800697a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800697e:	f47f aeeb 	bne.w	8006758 <__aeabi_dmul+0x1f8>
 8006982:	e712      	b.n	80067aa <__aeabi_dmul+0x24a>

08006984 <__gedf2>:
 8006984:	f04f 3cff 	mov.w	ip, #4294967295
 8006988:	e006      	b.n	8006998 <__cmpdf2+0x4>
 800698a:	bf00      	nop

0800698c <__ledf2>:
 800698c:	f04f 0c01 	mov.w	ip, #1
 8006990:	e002      	b.n	8006998 <__cmpdf2+0x4>
 8006992:	bf00      	nop

08006994 <__cmpdf2>:
 8006994:	f04f 0c01 	mov.w	ip, #1
 8006998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800699c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80069a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80069a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80069a8:	bf18      	it	ne
 80069aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80069ae:	d01b      	beq.n	80069e8 <__cmpdf2+0x54>
 80069b0:	b001      	add	sp, #4
 80069b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80069b6:	bf0c      	ite	eq
 80069b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80069bc:	ea91 0f03 	teqne	r1, r3
 80069c0:	bf02      	ittt	eq
 80069c2:	ea90 0f02 	teqeq	r0, r2
 80069c6:	2000      	moveq	r0, #0
 80069c8:	4770      	bxeq	lr
 80069ca:	f110 0f00 	cmn.w	r0, #0
 80069ce:	ea91 0f03 	teq	r1, r3
 80069d2:	bf58      	it	pl
 80069d4:	4299      	cmppl	r1, r3
 80069d6:	bf08      	it	eq
 80069d8:	4290      	cmpeq	r0, r2
 80069da:	bf2c      	ite	cs
 80069dc:	17d8      	asrcs	r0, r3, #31
 80069de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80069e2:	f040 0001 	orr.w	r0, r0, #1
 80069e6:	4770      	bx	lr
 80069e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80069ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80069f0:	d102      	bne.n	80069f8 <__cmpdf2+0x64>
 80069f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80069f6:	d107      	bne.n	8006a08 <__cmpdf2+0x74>
 80069f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80069fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a00:	d1d6      	bne.n	80069b0 <__cmpdf2+0x1c>
 8006a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006a06:	d0d3      	beq.n	80069b0 <__cmpdf2+0x1c>
 8006a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop

08006a10 <__aeabi_cdrcmple>:
 8006a10:	4684      	mov	ip, r0
 8006a12:	4610      	mov	r0, r2
 8006a14:	4662      	mov	r2, ip
 8006a16:	468c      	mov	ip, r1
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4663      	mov	r3, ip
 8006a1c:	e000      	b.n	8006a20 <__aeabi_cdcmpeq>
 8006a1e:	bf00      	nop

08006a20 <__aeabi_cdcmpeq>:
 8006a20:	b501      	push	{r0, lr}
 8006a22:	f7ff ffb7 	bl	8006994 <__cmpdf2>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	bf48      	it	mi
 8006a2a:	f110 0f00 	cmnmi.w	r0, #0
 8006a2e:	bd01      	pop	{r0, pc}

08006a30 <__aeabi_dcmpeq>:
 8006a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a34:	f7ff fff4 	bl	8006a20 <__aeabi_cdcmpeq>
 8006a38:	bf0c      	ite	eq
 8006a3a:	2001      	moveq	r0, #1
 8006a3c:	2000      	movne	r0, #0
 8006a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a42:	bf00      	nop

08006a44 <__aeabi_dcmplt>:
 8006a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a48:	f7ff ffea 	bl	8006a20 <__aeabi_cdcmpeq>
 8006a4c:	bf34      	ite	cc
 8006a4e:	2001      	movcc	r0, #1
 8006a50:	2000      	movcs	r0, #0
 8006a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a56:	bf00      	nop

08006a58 <__aeabi_dcmple>:
 8006a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a5c:	f7ff ffe0 	bl	8006a20 <__aeabi_cdcmpeq>
 8006a60:	bf94      	ite	ls
 8006a62:	2001      	movls	r0, #1
 8006a64:	2000      	movhi	r0, #0
 8006a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a6a:	bf00      	nop

08006a6c <__aeabi_dcmpge>:
 8006a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a70:	f7ff ffce 	bl	8006a10 <__aeabi_cdrcmple>
 8006a74:	bf94      	ite	ls
 8006a76:	2001      	movls	r0, #1
 8006a78:	2000      	movhi	r0, #0
 8006a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a7e:	bf00      	nop

08006a80 <__aeabi_dcmpgt>:
 8006a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a84:	f7ff ffc4 	bl	8006a10 <__aeabi_cdrcmple>
 8006a88:	bf34      	ite	cc
 8006a8a:	2001      	movcc	r0, #1
 8006a8c:	2000      	movcs	r0, #0
 8006a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a92:	bf00      	nop

08006a94 <__aeabi_dcmpun>:
 8006a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a9c:	d102      	bne.n	8006aa4 <__aeabi_dcmpun+0x10>
 8006a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006aa2:	d10a      	bne.n	8006aba <__aeabi_dcmpun+0x26>
 8006aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006aac:	d102      	bne.n	8006ab4 <__aeabi_dcmpun+0x20>
 8006aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006ab2:	d102      	bne.n	8006aba <__aeabi_dcmpun+0x26>
 8006ab4:	f04f 0000 	mov.w	r0, #0
 8006ab8:	4770      	bx	lr
 8006aba:	f04f 0001 	mov.w	r0, #1
 8006abe:	4770      	bx	lr

08006ac0 <__aeabi_d2iz>:
 8006ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006ac8:	d215      	bcs.n	8006af6 <__aeabi_d2iz+0x36>
 8006aca:	d511      	bpl.n	8006af0 <__aeabi_d2iz+0x30>
 8006acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006ad4:	d912      	bls.n	8006afc <__aeabi_d2iz+0x3c>
 8006ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8006aea:	bf18      	it	ne
 8006aec:	4240      	negne	r0, r0
 8006aee:	4770      	bx	lr
 8006af0:	f04f 0000 	mov.w	r0, #0
 8006af4:	4770      	bx	lr
 8006af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006afa:	d105      	bne.n	8006b08 <__aeabi_d2iz+0x48>
 8006afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006b00:	bf08      	it	eq
 8006b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006b06:	4770      	bx	lr
 8006b08:	f04f 0000 	mov.w	r0, #0
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <__aeabi_uldivmod>:
 8006b10:	b953      	cbnz	r3, 8006b28 <__aeabi_uldivmod+0x18>
 8006b12:	b94a      	cbnz	r2, 8006b28 <__aeabi_uldivmod+0x18>
 8006b14:	2900      	cmp	r1, #0
 8006b16:	bf08      	it	eq
 8006b18:	2800      	cmpeq	r0, #0
 8006b1a:	bf1c      	itt	ne
 8006b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8006b20:	f04f 30ff 	movne.w	r0, #4294967295
 8006b24:	f000 b97e 	b.w	8006e24 <__aeabi_idiv0>
 8006b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8006b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006b30:	f000 f806 	bl	8006b40 <__udivmoddi4>
 8006b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b3c:	b004      	add	sp, #16
 8006b3e:	4770      	bx	lr

08006b40 <__udivmoddi4>:
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	468c      	mov	ip, r1
 8006b46:	460e      	mov	r6, r1
 8006b48:	4604      	mov	r4, r0
 8006b4a:	9d08      	ldr	r5, [sp, #32]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d150      	bne.n	8006bf2 <__udivmoddi4+0xb2>
 8006b50:	428a      	cmp	r2, r1
 8006b52:	4617      	mov	r7, r2
 8006b54:	d96c      	bls.n	8006c30 <__udivmoddi4+0xf0>
 8006b56:	fab2 fe82 	clz	lr, r2
 8006b5a:	f1be 0f00 	cmp.w	lr, #0
 8006b5e:	d00b      	beq.n	8006b78 <__udivmoddi4+0x38>
 8006b60:	f1ce 0420 	rsb	r4, lr, #32
 8006b64:	fa20 f404 	lsr.w	r4, r0, r4
 8006b68:	fa01 f60e 	lsl.w	r6, r1, lr
 8006b6c:	ea44 0c06 	orr.w	ip, r4, r6
 8006b70:	fa02 f70e 	lsl.w	r7, r2, lr
 8006b74:	fa00 f40e 	lsl.w	r4, r0, lr
 8006b78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8006b7c:	0c22      	lsrs	r2, r4, #16
 8006b7e:	fbbc f0f9 	udiv	r0, ip, r9
 8006b82:	fa1f f887 	uxth.w	r8, r7
 8006b86:	fb09 c610 	mls	r6, r9, r0, ip
 8006b8a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8006b8e:	fb00 f308 	mul.w	r3, r0, r8
 8006b92:	42b3      	cmp	r3, r6
 8006b94:	d909      	bls.n	8006baa <__udivmoddi4+0x6a>
 8006b96:	19f6      	adds	r6, r6, r7
 8006b98:	f100 32ff 	add.w	r2, r0, #4294967295
 8006b9c:	f080 8122 	bcs.w	8006de4 <__udivmoddi4+0x2a4>
 8006ba0:	42b3      	cmp	r3, r6
 8006ba2:	f240 811f 	bls.w	8006de4 <__udivmoddi4+0x2a4>
 8006ba6:	3802      	subs	r0, #2
 8006ba8:	443e      	add	r6, r7
 8006baa:	1af6      	subs	r6, r6, r3
 8006bac:	b2a2      	uxth	r2, r4
 8006bae:	fbb6 f3f9 	udiv	r3, r6, r9
 8006bb2:	fb09 6613 	mls	r6, r9, r3, r6
 8006bb6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8006bba:	fb03 f808 	mul.w	r8, r3, r8
 8006bbe:	45a0      	cmp	r8, r4
 8006bc0:	d909      	bls.n	8006bd6 <__udivmoddi4+0x96>
 8006bc2:	19e4      	adds	r4, r4, r7
 8006bc4:	f103 32ff 	add.w	r2, r3, #4294967295
 8006bc8:	f080 810a 	bcs.w	8006de0 <__udivmoddi4+0x2a0>
 8006bcc:	45a0      	cmp	r8, r4
 8006bce:	f240 8107 	bls.w	8006de0 <__udivmoddi4+0x2a0>
 8006bd2:	3b02      	subs	r3, #2
 8006bd4:	443c      	add	r4, r7
 8006bd6:	ebc8 0404 	rsb	r4, r8, r4
 8006bda:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006bde:	2100      	movs	r1, #0
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	d062      	beq.n	8006caa <__udivmoddi4+0x16a>
 8006be4:	fa24 f40e 	lsr.w	r4, r4, lr
 8006be8:	2300      	movs	r3, #0
 8006bea:	602c      	str	r4, [r5, #0]
 8006bec:	606b      	str	r3, [r5, #4]
 8006bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf2:	428b      	cmp	r3, r1
 8006bf4:	d907      	bls.n	8006c06 <__udivmoddi4+0xc6>
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	d055      	beq.n	8006ca6 <__udivmoddi4+0x166>
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	e885 0041 	stmia.w	r5, {r0, r6}
 8006c00:	4608      	mov	r0, r1
 8006c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c06:	fab3 f183 	clz	r1, r3
 8006c0a:	2900      	cmp	r1, #0
 8006c0c:	f040 8090 	bne.w	8006d30 <__udivmoddi4+0x1f0>
 8006c10:	42b3      	cmp	r3, r6
 8006c12:	d302      	bcc.n	8006c1a <__udivmoddi4+0xda>
 8006c14:	4282      	cmp	r2, r0
 8006c16:	f200 80f8 	bhi.w	8006e0a <__udivmoddi4+0x2ca>
 8006c1a:	1a84      	subs	r4, r0, r2
 8006c1c:	eb66 0603 	sbc.w	r6, r6, r3
 8006c20:	2001      	movs	r0, #1
 8006c22:	46b4      	mov	ip, r6
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	d040      	beq.n	8006caa <__udivmoddi4+0x16a>
 8006c28:	e885 1010 	stmia.w	r5, {r4, ip}
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c30:	b912      	cbnz	r2, 8006c38 <__udivmoddi4+0xf8>
 8006c32:	2701      	movs	r7, #1
 8006c34:	fbb7 f7f2 	udiv	r7, r7, r2
 8006c38:	fab7 fe87 	clz	lr, r7
 8006c3c:	f1be 0f00 	cmp.w	lr, #0
 8006c40:	d135      	bne.n	8006cae <__udivmoddi4+0x16e>
 8006c42:	1bf3      	subs	r3, r6, r7
 8006c44:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8006c48:	fa1f fc87 	uxth.w	ip, r7
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	fbb3 f0f8 	udiv	r0, r3, r8
 8006c52:	0c22      	lsrs	r2, r4, #16
 8006c54:	fb08 3610 	mls	r6, r8, r0, r3
 8006c58:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8006c5c:	fb0c f300 	mul.w	r3, ip, r0
 8006c60:	42b3      	cmp	r3, r6
 8006c62:	d907      	bls.n	8006c74 <__udivmoddi4+0x134>
 8006c64:	19f6      	adds	r6, r6, r7
 8006c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8006c6a:	d202      	bcs.n	8006c72 <__udivmoddi4+0x132>
 8006c6c:	42b3      	cmp	r3, r6
 8006c6e:	f200 80ce 	bhi.w	8006e0e <__udivmoddi4+0x2ce>
 8006c72:	4610      	mov	r0, r2
 8006c74:	1af6      	subs	r6, r6, r3
 8006c76:	b2a2      	uxth	r2, r4
 8006c78:	fbb6 f3f8 	udiv	r3, r6, r8
 8006c7c:	fb08 6613 	mls	r6, r8, r3, r6
 8006c80:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8006c84:	fb0c fc03 	mul.w	ip, ip, r3
 8006c88:	45a4      	cmp	ip, r4
 8006c8a:	d907      	bls.n	8006c9c <__udivmoddi4+0x15c>
 8006c8c:	19e4      	adds	r4, r4, r7
 8006c8e:	f103 32ff 	add.w	r2, r3, #4294967295
 8006c92:	d202      	bcs.n	8006c9a <__udivmoddi4+0x15a>
 8006c94:	45a4      	cmp	ip, r4
 8006c96:	f200 80b5 	bhi.w	8006e04 <__udivmoddi4+0x2c4>
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	ebcc 0404 	rsb	r4, ip, r4
 8006ca0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006ca4:	e79c      	b.n	8006be0 <__udivmoddi4+0xa0>
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4628      	mov	r0, r5
 8006caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cae:	f1ce 0120 	rsb	r1, lr, #32
 8006cb2:	fa06 f30e 	lsl.w	r3, r6, lr
 8006cb6:	fa07 f70e 	lsl.w	r7, r7, lr
 8006cba:	fa20 f901 	lsr.w	r9, r0, r1
 8006cbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8006cc2:	40ce      	lsrs	r6, r1
 8006cc4:	ea49 0903 	orr.w	r9, r9, r3
 8006cc8:	fbb6 faf8 	udiv	sl, r6, r8
 8006ccc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8006cd0:	fb08 661a 	mls	r6, r8, sl, r6
 8006cd4:	fa1f fc87 	uxth.w	ip, r7
 8006cd8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8006cdc:	fb0a f20c 	mul.w	r2, sl, ip
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	fa00 f40e 	lsl.w	r4, r0, lr
 8006ce6:	d90a      	bls.n	8006cfe <__udivmoddi4+0x1be>
 8006ce8:	19db      	adds	r3, r3, r7
 8006cea:	f10a 31ff 	add.w	r1, sl, #4294967295
 8006cee:	f080 8087 	bcs.w	8006e00 <__udivmoddi4+0x2c0>
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	f240 8084 	bls.w	8006e00 <__udivmoddi4+0x2c0>
 8006cf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cfc:	443b      	add	r3, r7
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	fa1f f989 	uxth.w	r9, r9
 8006d04:	fbb3 f1f8 	udiv	r1, r3, r8
 8006d08:	fb08 3311 	mls	r3, r8, r1, r3
 8006d0c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8006d10:	fb01 f60c 	mul.w	r6, r1, ip
 8006d14:	429e      	cmp	r6, r3
 8006d16:	d907      	bls.n	8006d28 <__udivmoddi4+0x1e8>
 8006d18:	19db      	adds	r3, r3, r7
 8006d1a:	f101 32ff 	add.w	r2, r1, #4294967295
 8006d1e:	d26b      	bcs.n	8006df8 <__udivmoddi4+0x2b8>
 8006d20:	429e      	cmp	r6, r3
 8006d22:	d969      	bls.n	8006df8 <__udivmoddi4+0x2b8>
 8006d24:	3902      	subs	r1, #2
 8006d26:	443b      	add	r3, r7
 8006d28:	1b9b      	subs	r3, r3, r6
 8006d2a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d2e:	e78e      	b.n	8006c4e <__udivmoddi4+0x10e>
 8006d30:	f1c1 0e20 	rsb	lr, r1, #32
 8006d34:	fa22 f40e 	lsr.w	r4, r2, lr
 8006d38:	408b      	lsls	r3, r1
 8006d3a:	4323      	orrs	r3, r4
 8006d3c:	fa20 f70e 	lsr.w	r7, r0, lr
 8006d40:	fa06 f401 	lsl.w	r4, r6, r1
 8006d44:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8006d48:	fa26 f60e 	lsr.w	r6, r6, lr
 8006d4c:	433c      	orrs	r4, r7
 8006d4e:	fbb6 f9fc 	udiv	r9, r6, ip
 8006d52:	0c27      	lsrs	r7, r4, #16
 8006d54:	fb0c 6619 	mls	r6, ip, r9, r6
 8006d58:	fa1f f883 	uxth.w	r8, r3
 8006d5c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8006d60:	fb09 f708 	mul.w	r7, r9, r8
 8006d64:	42b7      	cmp	r7, r6
 8006d66:	fa02 f201 	lsl.w	r2, r2, r1
 8006d6a:	fa00 fa01 	lsl.w	sl, r0, r1
 8006d6e:	d908      	bls.n	8006d82 <__udivmoddi4+0x242>
 8006d70:	18f6      	adds	r6, r6, r3
 8006d72:	f109 30ff 	add.w	r0, r9, #4294967295
 8006d76:	d241      	bcs.n	8006dfc <__udivmoddi4+0x2bc>
 8006d78:	42b7      	cmp	r7, r6
 8006d7a:	d93f      	bls.n	8006dfc <__udivmoddi4+0x2bc>
 8006d7c:	f1a9 0902 	sub.w	r9, r9, #2
 8006d80:	441e      	add	r6, r3
 8006d82:	1bf6      	subs	r6, r6, r7
 8006d84:	b2a0      	uxth	r0, r4
 8006d86:	fbb6 f4fc 	udiv	r4, r6, ip
 8006d8a:	fb0c 6614 	mls	r6, ip, r4, r6
 8006d8e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8006d92:	fb04 f808 	mul.w	r8, r4, r8
 8006d96:	45b8      	cmp	r8, r7
 8006d98:	d907      	bls.n	8006daa <__udivmoddi4+0x26a>
 8006d9a:	18ff      	adds	r7, r7, r3
 8006d9c:	f104 30ff 	add.w	r0, r4, #4294967295
 8006da0:	d228      	bcs.n	8006df4 <__udivmoddi4+0x2b4>
 8006da2:	45b8      	cmp	r8, r7
 8006da4:	d926      	bls.n	8006df4 <__udivmoddi4+0x2b4>
 8006da6:	3c02      	subs	r4, #2
 8006da8:	441f      	add	r7, r3
 8006daa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8006dae:	ebc8 0707 	rsb	r7, r8, r7
 8006db2:	fba0 8902 	umull	r8, r9, r0, r2
 8006db6:	454f      	cmp	r7, r9
 8006db8:	4644      	mov	r4, r8
 8006dba:	464e      	mov	r6, r9
 8006dbc:	d314      	bcc.n	8006de8 <__udivmoddi4+0x2a8>
 8006dbe:	d029      	beq.n	8006e14 <__udivmoddi4+0x2d4>
 8006dc0:	b365      	cbz	r5, 8006e1c <__udivmoddi4+0x2dc>
 8006dc2:	ebba 0304 	subs.w	r3, sl, r4
 8006dc6:	eb67 0706 	sbc.w	r7, r7, r6
 8006dca:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006dce:	40cb      	lsrs	r3, r1
 8006dd0:	40cf      	lsrs	r7, r1
 8006dd2:	ea4e 0303 	orr.w	r3, lr, r3
 8006dd6:	e885 0088 	stmia.w	r5, {r3, r7}
 8006dda:	2100      	movs	r1, #0
 8006ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de0:	4613      	mov	r3, r2
 8006de2:	e6f8      	b.n	8006bd6 <__udivmoddi4+0x96>
 8006de4:	4610      	mov	r0, r2
 8006de6:	e6e0      	b.n	8006baa <__udivmoddi4+0x6a>
 8006de8:	ebb8 0402 	subs.w	r4, r8, r2
 8006dec:	eb69 0603 	sbc.w	r6, r9, r3
 8006df0:	3801      	subs	r0, #1
 8006df2:	e7e5      	b.n	8006dc0 <__udivmoddi4+0x280>
 8006df4:	4604      	mov	r4, r0
 8006df6:	e7d8      	b.n	8006daa <__udivmoddi4+0x26a>
 8006df8:	4611      	mov	r1, r2
 8006dfa:	e795      	b.n	8006d28 <__udivmoddi4+0x1e8>
 8006dfc:	4681      	mov	r9, r0
 8006dfe:	e7c0      	b.n	8006d82 <__udivmoddi4+0x242>
 8006e00:	468a      	mov	sl, r1
 8006e02:	e77c      	b.n	8006cfe <__udivmoddi4+0x1be>
 8006e04:	3b02      	subs	r3, #2
 8006e06:	443c      	add	r4, r7
 8006e08:	e748      	b.n	8006c9c <__udivmoddi4+0x15c>
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	e70a      	b.n	8006c24 <__udivmoddi4+0xe4>
 8006e0e:	3802      	subs	r0, #2
 8006e10:	443e      	add	r6, r7
 8006e12:	e72f      	b.n	8006c74 <__udivmoddi4+0x134>
 8006e14:	45c2      	cmp	sl, r8
 8006e16:	d3e7      	bcc.n	8006de8 <__udivmoddi4+0x2a8>
 8006e18:	463e      	mov	r6, r7
 8006e1a:	e7d1      	b.n	8006dc0 <__udivmoddi4+0x280>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e22:	bf00      	nop

08006e24 <__aeabi_idiv0>:
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	65657473 	.word	0x65657473
 8006e2c:	676e6972 	.word	0x676e6972
 8006e30:	6c25203a 	.word	0x6c25203a
 8006e34:	68740a64 	.word	0x68740a64
 8006e38:	74746f72 	.word	0x74746f72
 8006e3c:	203a656c 	.word	0x203a656c
 8006e40:	0a646c25 	.word	0x0a646c25
 8006e44:	00000000 	.word	0x00000000
 8006e48:	6f5f7473 	.word	0x6f5f7473
 8006e4c:	65736666 	.word	0x65736666
 8006e50:	25203a74 	.word	0x25203a74
 8006e54:	68740a64 	.word	0x68740a64
 8006e58:	66666f5f 	.word	0x66666f5f
 8006e5c:	3a746573 	.word	0x3a746573
 8006e60:	0a642520 	.word	0x0a642520
 8006e64:	00000000 	.word	0x00000000

08006e68 <zeroes.7273>:
 8006e68:	30303030 30303030 30303030 30303030     0000000000000000
 8006e78:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8006e88:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8006e98:	00000000 33323130 37363534 62613938     ....0123456789ab
 8006ea8:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8006eb8:	00000030                                0...

08006ebc <blanks.7272>:
 8006ebc:	20202020 20202020 20202020 20202020                     
 8006ecc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8006edc:	00000043 49534f50 00000058 0000002e     C...POSIX.......
 8006eec:	00000000                                ....

08006ef0 <__mprec_tens>:
 8006ef0:	00000000 3ff00000 00000000 40240000     .......?......$@
 8006f00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8006f10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8006f20:	00000000 412e8480 00000000 416312d0     .......A......cA
 8006f30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8006f40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8006f50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8006f60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8006f70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8006f80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8006f90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8006fa0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8006fb0:	79d99db4 44ea7843                       ...yCx.D

08006fb8 <__mprec_bigtens>:
 8006fb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8006fc8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8006fd8:	7f73bf3c 75154fdd                       <.s..O.u

08006fe0 <p05.6087>:
 8006fe0:	00000005 00000019 0000007d              ........}...

08006fec <_ctype_>:
 8006fec:	20202000 20202020 28282020 20282828     .         ((((( 
 8006ffc:	20202020 20202020 20202020 20202020                     
 800700c:	10108820 10101010 10101010 10101010      ...............
 800701c:	04040410 04040404 10040404 10101010     ................
 800702c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800703c:	01010101 01010101 01010101 10101010     ................
 800704c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800705c:	02020202 02020202 02020202 10101010     ................
 800706c:	00000020 00000000 00000000 00000000      ...............
	...
